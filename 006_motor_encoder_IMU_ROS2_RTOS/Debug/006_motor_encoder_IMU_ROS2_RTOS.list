
006_motor_encoder_IMU_ROS2_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001789c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef4  08017a40  08017a40  00027a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018934  08018934  00030194  2**0
                  CONTENTS
  4 .ARM          00000008  08018934  08018934  00028934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801893c  0801893c  00030194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801893c  0801893c  0002893c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018948  08018948  00028948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0801894c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc1c  20000198  08018ae0  00030198  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ddb4  08018ae0  0003ddb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030194  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  000301c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d30e  00000000  00000000  0003023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004050  00000000  00000000  0004d548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f8  00000000  00000000  00051598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000137b  00000000  00000000  00052e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008f4d  00000000  00000000  0005420b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e016  00000000  00000000  0005d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6cfc  00000000  00000000  0007b16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078f0  00000000  00000000  00121e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0012975c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017a24 	.word	0x08017a24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	08017a24 	.word	0x08017a24

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_ldivmod>:
 8000aec:	b97b      	cbnz	r3, 8000b0e <__aeabi_ldivmod+0x22>
 8000aee:	b972      	cbnz	r2, 8000b0e <__aeabi_ldivmod+0x22>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bfbe      	ittt	lt
 8000af4:	2000      	movlt	r0, #0
 8000af6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000afa:	e006      	blt.n	8000b0a <__aeabi_ldivmod+0x1e>
 8000afc:	bf08      	it	eq
 8000afe:	2800      	cmpeq	r0, #0
 8000b00:	bf1c      	itt	ne
 8000b02:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b06:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b0a:	f000 b9bb 	b.w	8000e84 <__aeabi_idiv0>
 8000b0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b16:	2900      	cmp	r1, #0
 8000b18:	db09      	blt.n	8000b2e <__aeabi_ldivmod+0x42>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db1a      	blt.n	8000b54 <__aeabi_ldivmod+0x68>
 8000b1e:	f000 f84d 	bl	8000bbc <__udivmoddi4>
 8000b22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4770      	bx	lr
 8000b2e:	4240      	negs	r0, r0
 8000b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db1b      	blt.n	8000b70 <__aeabi_ldivmod+0x84>
 8000b38:	f000 f840 	bl	8000bbc <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4240      	negs	r0, r0
 8000b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4c:	4252      	negs	r2, r2
 8000b4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b52:	4770      	bx	lr
 8000b54:	4252      	negs	r2, r2
 8000b56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b5a:	f000 f82f 	bl	8000bbc <__udivmoddi4>
 8000b5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b66:	b004      	add	sp, #16
 8000b68:	4240      	negs	r0, r0
 8000b6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f821 	bl	8000bbc <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f000 b970 	b.w	8000e84 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460f      	mov	r7, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4694      	mov	ip, r2
 8000bd0:	d965      	bls.n	8000c9e <__udivmoddi4+0xe2>
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	b143      	cbz	r3, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	f1c3 0220 	rsb	r2, r3, #32
 8000be0:	409f      	lsls	r7, r3
 8000be2:	fa20 f202 	lsr.w	r2, r0, r2
 8000be6:	4317      	orrs	r7, r2
 8000be8:	409c      	lsls	r4, r3
 8000bea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bee:	fa1f f58c 	uxth.w	r5, ip
 8000bf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf6:	0c22      	lsrs	r2, r4, #16
 8000bf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c00:	fb01 f005 	mul.w	r0, r1, r5
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c08:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c10:	f080 811c 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f240 8119 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a12      	subs	r2, r2, r0
 8000c20:	b2a4      	uxth	r4, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x90>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x294>
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x294>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11e      	cbz	r6, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40dc      	lsrs	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0xbc>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80ed 	beq.w	8000e46 <__udivmoddi4+0x28a>
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c72:	4608      	mov	r0, r1
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	fab3 f183 	clz	r1, r3
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d149      	bne.n	8000d14 <__udivmoddi4+0x158>
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0xce>
 8000c84:	4282      	cmp	r2, r0
 8000c86:	f200 80f8 	bhi.w	8000e7a <__udivmoddi4+0x2be>
 8000c8a:	1a84      	subs	r4, r0, r2
 8000c8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	4617      	mov	r7, r2
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d0e2      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9c:	e7df      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xe6>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb2:	fa1f fe8c 	uxth.w	lr, ip
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc6:	fb0e f005 	mul.w	r0, lr, r5
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f200 80cb 	bhi.w	8000e74 <__udivmoddi4+0x2b8>
 8000cde:	4645      	mov	r5, r8
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x14e>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x14c>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f200 80bb 	bhi.w	8000e7e <__udivmoddi4+0x2c2>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d12:	e79f      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d14:	f1c1 0720 	rsb	r7, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d22:	fa05 f401 	lsl.w	r4, r5, r1
 8000d26:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2a:	40fd      	lsrs	r5, r7
 8000d2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d44:	fb08 f50e 	mul.w	r5, r8, lr
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d5c:	f080 8088 	bcs.w	8000e70 <__udivmoddi4+0x2b4>
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	f240 8085 	bls.w	8000e70 <__udivmoddi4+0x2b4>
 8000d66:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6a:	4464      	add	r4, ip
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	b29d      	uxth	r5, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d8c:	d26c      	bcs.n	8000e68 <__udivmoddi4+0x2ac>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	d96a      	bls.n	8000e68 <__udivmoddi4+0x2ac>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	46c8      	mov	r8, r9
 8000da6:	46ae      	mov	lr, r5
 8000da8:	d356      	bcc.n	8000e58 <__udivmoddi4+0x29c>
 8000daa:	d053      	beq.n	8000e54 <__udivmoddi4+0x298>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x208>
 8000dae:	ebb0 0208 	subs.w	r2, r0, r8
 8000db2:	eb64 040e 	sbc.w	r4, r4, lr
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40ca      	lsrs	r2, r1
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	f1c3 0120 	rsb	r1, r3, #32
 8000dd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	432a      	orrs	r2, r5
 8000de0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1510 	mls	r5, r7, r0, r1
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x258>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e0a:	d22f      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e0c:	428d      	cmp	r5, r1
 8000e0e:	d92d      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1b49      	subs	r1, r1, r5
 8000e16:	b292      	uxth	r2, r2
 8000e18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e24:	fb05 f10e 	mul.w	r1, r5, lr
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x282>
 8000e2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e30:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e34:	d216      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000e36:	4291      	cmp	r1, r2
 8000e38:	d914      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000e3a:	3d02      	subs	r5, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a52      	subs	r2, r2, r1
 8000e40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e44:	e738      	b.n	8000cb8 <__udivmoddi4+0xfc>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e6e6      	b.n	8000c1e <__udivmoddi4+0x62>
 8000e50:	4610      	mov	r0, r2
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x90>
 8000e54:	4548      	cmp	r0, r9
 8000e56:	d2a9      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e58:	ebb9 0802 	subs.w	r8, r9, r2
 8000e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e60:	3b01      	subs	r3, #1
 8000e62:	e7a3      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e64:	4645      	mov	r5, r8
 8000e66:	e7ea      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e68:	462b      	mov	r3, r5
 8000e6a:	e794      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	e7d1      	b.n	8000e14 <__udivmoddi4+0x258>
 8000e70:	46d0      	mov	r8, sl
 8000e72:	e77b      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e74:	3d02      	subs	r5, #2
 8000e76:	4462      	add	r2, ip
 8000e78:	e732      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e70a      	b.n	8000c94 <__udivmoddi4+0xd8>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e742      	b.n	8000d0a <__udivmoddi4+0x14e>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000e94:	f007 f8b8 	bl	8008008 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000e98:	4b58      	ldr	r3, [pc, #352]	; (8000ffc <pvPortMallocMicroROS+0x174>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d101      	bne.n	8000ea4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000ea0:	f000 f980 	bl	80011a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000ea4:	4b56      	ldr	r3, [pc, #344]	; (8001000 <pvPortMallocMicroROS+0x178>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f040 808e 	bne.w	8000fce <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d01d      	beq.n	8000ef4 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000eb8:	2208      	movs	r2, #8
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d014      	beq.n	8000ef4 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f023 0307 	bic.w	r3, r3, #7
 8000ed0:	3308      	adds	r3, #8
 8000ed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00a      	beq.n	8000ef4 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee2:	f383 8811 	msr	BASEPRI, r3
 8000ee6:	f3bf 8f6f 	isb	sy
 8000eea:	f3bf 8f4f 	dsb	sy
 8000eee:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ef0:	bf00      	nop
 8000ef2:	e7fe      	b.n	8000ef2 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d069      	beq.n	8000fce <pvPortMallocMicroROS+0x146>
 8000efa:	4b42      	ldr	r3, [pc, #264]	; (8001004 <pvPortMallocMicroROS+0x17c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d864      	bhi.n	8000fce <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000f04:	4b40      	ldr	r3, [pc, #256]	; (8001008 <pvPortMallocMicroROS+0x180>)
 8000f06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000f08:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <pvPortMallocMicroROS+0x180>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f0e:	e004      	b.n	8000f1a <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d903      	bls.n	8000f2c <pvPortMallocMicroROS+0xa4>
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f1      	bne.n	8000f10 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000f2c:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <pvPortMallocMicroROS+0x174>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d04b      	beq.n	8000fce <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000f36:	6a3b      	ldr	r3, [r7, #32]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	4413      	add	r3, r2
 8000f3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	6a3b      	ldr	r3, [r7, #32]
 8000f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	1ad2      	subs	r2, r2, r3
 8000f50:	2308      	movs	r3, #8
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d91f      	bls.n	8000f98 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00a      	beq.n	8000f80 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f6e:	f383 8811 	msr	BASEPRI, r3
 8000f72:	f3bf 8f6f 	isb	sy
 8000f76:	f3bf 8f4f 	dsb	sy
 8000f7a:	613b      	str	r3, [r7, #16]
}
 8000f7c:	bf00      	nop
 8000f7e:	e7fe      	b.n	8000f7e <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000f92:	69b8      	ldr	r0, [r7, #24]
 8000f94:	f000 f968 	bl	8001268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <pvPortMallocMicroROS+0x17c>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	4a18      	ldr	r2, [pc, #96]	; (8001004 <pvPortMallocMicroROS+0x17c>)
 8000fa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <pvPortMallocMicroROS+0x17c>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <pvPortMallocMicroROS+0x184>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d203      	bcs.n	8000fba <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <pvPortMallocMicroROS+0x17c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a15      	ldr	r2, [pc, #84]	; (800100c <pvPortMallocMicroROS+0x184>)
 8000fb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <pvPortMallocMicroROS+0x178>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000fce:	f007 f829 	bl	8008024 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00a      	beq.n	8000ff2 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe0:	f383 8811 	msr	BASEPRI, r3
 8000fe4:	f3bf 8f6f 	isb	sy
 8000fe8:	f3bf 8f4f 	dsb	sy
 8000fec:	60fb      	str	r3, [r7, #12]
}
 8000fee:	bf00      	nop
 8000ff0:	e7fe      	b.n	8000ff0 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3728      	adds	r7, #40	; 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20003dbc 	.word	0x20003dbc
 8001000:	20003dc8 	.word	0x20003dc8
 8001004:	20003dc0 	.word	0x20003dc0
 8001008:	20003db4 	.word	0x20003db4
 800100c:	20003dc4 	.word	0x20003dc4

08001010 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d048      	beq.n	80010b4 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001022:	2308      	movs	r3, #8
 8001024:	425b      	negs	r3, r3
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4413      	add	r3, r2
 800102a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <vPortFreeMicroROS+0xac>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4013      	ands	r3, r2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10a      	bne.n	8001054 <vPortFreeMicroROS+0x44>
	__asm volatile
 800103e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	60fb      	str	r3, [r7, #12]
}
 8001050:	bf00      	nop
 8001052:	e7fe      	b.n	8001052 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00a      	beq.n	8001072 <vPortFreeMicroROS+0x62>
	__asm volatile
 800105c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001060:	f383 8811 	msr	BASEPRI, r3
 8001064:	f3bf 8f6f 	isb	sy
 8001068:	f3bf 8f4f 	dsb	sy
 800106c:	60bb      	str	r3, [r7, #8]
}
 800106e:	bf00      	nop
 8001070:	e7fe      	b.n	8001070 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <vPortFreeMicroROS+0xac>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4013      	ands	r3, r2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d019      	beq.n	80010b4 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d115      	bne.n	80010b4 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <vPortFreeMicroROS+0xac>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	43db      	mvns	r3, r3
 8001092:	401a      	ands	r2, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001098:	f006 ffb6 	bl	8008008 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <vPortFreeMicroROS+0xb0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <vPortFreeMicroROS+0xb0>)
 80010a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80010aa:	6938      	ldr	r0, [r7, #16]
 80010ac:	f000 f8dc 	bl	8001268 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80010b0:	f006 ffb8 	bl	8008024 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80010b4:	bf00      	nop
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20003dc8 	.word	0x20003dc8
 80010c0:	20003dc0 	.word	0x20003dc0

080010c4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80010d0:	2308      	movs	r3, #8
 80010d2:	425b      	negs	r3, r3
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	4413      	add	r3, r2
 80010d8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <getBlockSize+0x38>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]

	return count;
 80010ec:	68fb      	ldr	r3, [r7, #12]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20003dc8 	.word	0x20003dc8

08001100 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800110a:	f006 ff7d 	bl	8008008 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	f7ff feba 	bl	8000e88 <pvPortMallocMicroROS>
 8001114:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d017      	beq.n	800114c <pvPortReallocMicroROS+0x4c>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d014      	beq.n	800114c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffce 	bl	80010c4 <getBlockSize>
 8001128:	4603      	mov	r3, r0
 800112a:	2208      	movs	r2, #8
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d201      	bcs.n	800113c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	68b8      	ldr	r0, [r7, #8]
 8001142:	f015 fd90 	bl	8016c66 <memcpy>

		vPortFreeMicroROS(pv);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff62 	bl	8001010 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800114c:	f006 ff6a 	bl	8008024 <xTaskResumeAll>

	return newmem;
 8001150:	68bb      	ldr	r3, [r7, #8]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001164:	f006 ff50 	bl	8008008 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff fe88 	bl	8000e88 <pvPortMallocMicroROS>
 8001178:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800117e:	e004      	b.n	800118a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	613a      	str	r2, [r7, #16]
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	617a      	str	r2, [r7, #20]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1f5      	bne.n	8001180 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001194:	f006 ff46 	bl	8008024 <xTaskResumeAll>
  	return mem;
 8001198:	68fb      	ldr	r3, [r7, #12]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80011aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80011ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <prvHeapInit+0xac>)
 80011b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00c      	beq.n	80011d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3307      	adds	r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f023 0307 	bic.w	r3, r3, #7
 80011ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <prvHeapInit+0xac>)
 80011d4:	4413      	add	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80011dc:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <prvHeapInit+0xb0>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <prvHeapInit+0xb0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	4413      	add	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80011f0:	2208      	movs	r2, #8
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f023 0307 	bic.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <prvHeapInit+0xb4>)
 8001204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <prvHeapInit+0xb4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <prvHeapInit+0xb4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	1ad2      	subs	r2, r2, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <prvHeapInit+0xb4>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <prvHeapInit+0xb8>)
 8001232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4a09      	ldr	r2, [pc, #36]	; (8001260 <prvHeapInit+0xbc>)
 800123a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <prvHeapInit+0xc0>)
 800123e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	200001b4 	.word	0x200001b4
 8001254:	20003db4 	.word	0x20003db4
 8001258:	20003dbc 	.word	0x20003dbc
 800125c:	20003dc4 	.word	0x20003dc4
 8001260:	20003dc0 	.word	0x20003dc0
 8001264:	20003dc8 	.word	0x20003dc8

08001268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <prvInsertBlockIntoFreeList+0xac>)
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e002      	b.n	800127c <prvInsertBlockIntoFreeList+0x14>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	429a      	cmp	r2, r3
 8001284:	d8f7      	bhi.n	8001276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	4413      	add	r3, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	429a      	cmp	r2, r3
 8001296:	d108      	bne.n	80012aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	441a      	add	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	441a      	add	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d118      	bne.n	80012f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <prvInsertBlockIntoFreeList+0xb0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d00d      	beq.n	80012e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	441a      	add	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e008      	b.n	80012f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <prvInsertBlockIntoFreeList+0xb0>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	e003      	b.n	80012f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d002      	beq.n	8001306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20003db4 	.word	0x20003db4
 8001318:	20003dbc 	.word	0x20003dbc

0800131c <subscription_callback>:
void* microros_allocate(size_t size, void *state);
void microros_deallocate(void *pointer, void *state);
void* microros_reallocate(void *pointer, size_t size, void *state);
void* microros_zero_allocate(size_t number_of_elements, size_t size_of_element,
		void *state);
void subscription_callback(const void *msgin) {
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	// Cast received message to used type
	const std_msgs__msg__Int32 *msg = (const std_msgs__msg__Int32*) msgin;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	617b      	str	r3, [r7, #20]
	int speed = 1023;
 8001328:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800132c:	613b      	str	r3, [r7, #16]
	int val = msg->data;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	60fb      	str	r3, [r7, #12]
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
	 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
	 HAL_Delay(1000);
	 }*/

}
 8001334:	bf00      	nop
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <init_encoder>:
void init_encoder(EncoderData *encoderData) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	encoderData->pinALast = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 8001348:	2120      	movs	r1, #32
 800134a:	4807      	ldr	r0, [pc, #28]	; (8001368 <init_encoder+0x28>)
 800134c:	f001 ff4a 	bl	80031e4 <HAL_GPIO_ReadPin>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]
	encoderData->encoderPosCount = 0;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40020c00 	.word	0x40020c00

0800136c <get_encoder_val>:
void get_encoder_val(EncoderData *encoderData) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

	encoderData->aVal = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 8001374:	2120      	movs	r1, #32
 8001376:	4818      	ldr	r0, [pc, #96]	; (80013d8 <get_encoder_val+0x6c>)
 8001378:	f001 ff34 	bl	80031e4 <HAL_GPIO_ReadPin>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	609a      	str	r2, [r3, #8]

	if (encoderData->aVal != encoderData->pinALast) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	d01e      	beq.n	80013ce <get_encoder_val+0x62>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) != encoderData->aVal) {
 8001390:	2140      	movs	r1, #64	; 0x40
 8001392:	4811      	ldr	r0, [pc, #68]	; (80013d8 <get_encoder_val+0x6c>)
 8001394:	f001 ff26 	bl	80031e4 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d008      	beq.n	80013b6 <get_encoder_val+0x4a>
			encoderData->encoderPosCount++;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
			encoderData->bCW = true;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	731a      	strb	r2, [r3, #12]
 80013b4:	e007      	b.n	80013c6 <get_encoder_val+0x5a>
		} else {
			encoderData->bCW = false;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	731a      	strb	r2, [r3, #12]
			encoderData->encoderPosCount--;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	601a      	str	r2, [r3, #0]
		}
		encoderData->pinALast = encoderData->aVal;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	605a      	str	r2, [r3, #4]
	}
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40020c00 	.word	0x40020c00

080013dc <init_motor>:
void init_motor(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80013e0:	2104      	movs	r1, #4
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <init_motor+0x24>)
 80013e4:	f003 fc30 	bl	8004c48 <HAL_TIM_PWM_Start>
	// Prescaler = (Saat Hızı) x (İstenen Zaman Dilimi) / (1,000,000)
	// Prescaler = (100,000,000) x (2000) / (1,000,000) = 200
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2110      	movs	r1, #16
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <init_motor+0x28>)
 80013ee:	f001 ff11 	bl	8003214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2120      	movs	r1, #32
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <init_motor+0x28>)
 80013f8:	f001 ff0c 	bl	8003214 <HAL_GPIO_WritePin>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20003e30 	.word	0x20003e30
 8001404:	40020800 	.word	0x40020800

08001408 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800140c:	f000 ffe0 	bl	80023d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001410:	f000 f81e 	bl	8001450 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001414:	f000 f97a 	bl	800170c <MX_GPIO_Init>
	MX_DMA_Init();
 8001418:	f000 f950 	bl	80016bc <MX_DMA_Init>
	MX_USART2_UART_Init();
 800141c:	f000 f924 	bl	8001668 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001420:	f000 f87e 	bl	8001520 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001424:	f000 f8aa 	bl	800157c <MX_TIM2_Init>
	/* Initialize the ROS node */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001428:	f005 fce6 	bl	8006df8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of mainTask */
	mainTaskHandle = osThreadNew(main_task, NULL, &mainTask_attributes);
 800142c:	4a05      	ldr	r2, [pc, #20]	; (8001444 <main+0x3c>)
 800142e:	2100      	movs	r1, #0
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <main+0x40>)
 8001432:	f005 fd2b 	bl	8006e8c <osThreadNew>
 8001436:	4603      	mov	r3, r0
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <main+0x44>)
 800143a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800143c:	f005 fd00 	bl	8006e40 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001440:	e7fe      	b.n	8001440 <main+0x38>
 8001442:	bf00      	nop
 8001444:	08017ad8 	.word	0x08017ad8
 8001448:	08001801 	.word	0x08001801
 800144c:	20003f7c 	.word	0x20003f7c

08001450 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b094      	sub	sp, #80	; 0x50
 8001454:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	2230      	movs	r2, #48	; 0x30
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f015 fb38 	bl	8016ad4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <SystemClock_Config+0xc8>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	4a26      	ldr	r2, [pc, #152]	; (8001518 <SystemClock_Config+0xc8>)
 800147e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001482:	6413      	str	r3, [r2, #64]	; 0x40
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <SystemClock_Config+0xc8>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	4b21      	ldr	r3, [pc, #132]	; (800151c <SystemClock_Config+0xcc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a20      	ldr	r2, [pc, #128]	; (800151c <SystemClock_Config+0xcc>)
 800149a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <SystemClock_Config+0xcc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ac:	2301      	movs	r3, #1
 80014ae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b6:	2302      	movs	r3, #2
 80014b8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014be:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80014c0:	2304      	movs	r3, #4
 80014c2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80014c4:	2364      	movs	r3, #100	; 0x64
 80014c6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80014cc:	2304      	movs	r3, #4
 80014ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	4618      	mov	r0, r3
 80014d6:	f002 fe77 	bl	80041c8 <HAL_RCC_OscConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0x94>
		Error_Handler();
 80014e0:	f000 fa96 	bl	8001a10 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014e4:	230f      	movs	r3, #15
 80014e6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e8:	2302      	movs	r3, #2
 80014ea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	2103      	movs	r1, #3
 8001500:	4618      	mov	r0, r3
 8001502:	f003 f8d9 	bl	80046b8 <HAL_RCC_ClockConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0xc0>
		Error_Handler();
 800150c:	f000 fa80 	bl	8001a10 <Error_Handler>
	}
}
 8001510:	bf00      	nop
 8001512:	3750      	adds	r7, #80	; 0x50
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_I2C1_Init+0x50>)
 8001526:	4a13      	ldr	r2, [pc, #76]	; (8001574 <MX_I2C1_Init+0x54>)
 8001528:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_I2C1_Init+0x50>)
 800152c:	4a12      	ldr	r2, [pc, #72]	; (8001578 <MX_I2C1_Init+0x58>)
 800152e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_I2C1_Init+0x50>)
 800153e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001542:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_I2C1_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_I2C1_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <MX_I2C1_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_I2C1_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_I2C1_Init+0x50>)
 800155e:	f001 fe73 	bl	8003248 <HAL_I2C_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001568:	f000 fa52 	bl	8001a10 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20003ddc 	.word	0x20003ddc
 8001574:	40005400 	.word	0x40005400
 8001578:	000186a0 	.word	0x000186a0

0800157c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 200;
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015b6:	22c8      	movs	r2, #200	; 0xc8
 80015b8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ba:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1023;
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015c2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80015c6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c8:	4b26      	ldr	r3, [pc, #152]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ce:	4b25      	ldr	r3, [pc, #148]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80015d4:	4823      	ldr	r0, [pc, #140]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015d6:	f003 fa8f 	bl	8004af8 <HAL_TIM_Base_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0x68>
		Error_Handler();
 80015e0:	f000 fa16 	bl	8001a10 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80015ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ee:	4619      	mov	r1, r3
 80015f0:	481c      	ldr	r0, [pc, #112]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015f2:	f003 fc9b 	bl	8004f2c <HAL_TIM_ConfigClockSource>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM2_Init+0x84>
		Error_Handler();
 80015fc:	f000 fa08 	bl	8001a10 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001600:	4818      	ldr	r0, [pc, #96]	; (8001664 <MX_TIM2_Init+0xe8>)
 8001602:	f003 fac8 	bl	8004b96 <HAL_TIM_PWM_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM2_Init+0x94>
		Error_Handler();
 800160c:	f000 fa00 	bl	8001a10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	4619      	mov	r1, r3
 800161e:	4811      	ldr	r0, [pc, #68]	; (8001664 <MX_TIM2_Init+0xe8>)
 8001620:	f004 f818 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800162a:	f000 f9f1 	bl	8001a10 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162e:	2360      	movs	r3, #96	; 0x60
 8001630:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2204      	movs	r2, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <MX_TIM2_Init+0xe8>)
 8001646:	f003 fbaf 	bl	8004da8 <HAL_TIM_PWM_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001650:	f000 f9de 	bl	8001a10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001654:	4803      	ldr	r0, [pc, #12]	; (8001664 <MX_TIM2_Init+0xe8>)
 8001656:	f000 fbdb 	bl	8001e10 <HAL_TIM_MspPostInit>

}
 800165a:	bf00      	nop
 800165c:	3738      	adds	r7, #56	; 0x38
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20003e30 	.word	0x20003e30

08001668 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <MX_USART2_UART_Init+0x50>)
 8001670:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 8001674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001678:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 80016a0:	f004 f846 	bl	8005730 <HAL_UART_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80016aa:	f000 f9b1 	bl	8001a10 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20003e78 	.word	0x20003e78
 80016b8:	40004400 	.word	0x40004400

080016bc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_DMA_Init+0x4c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <MX_DMA_Init+0x4c>)
 80016cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <MX_DMA_Init+0x4c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2105      	movs	r1, #5
 80016e2:	2010      	movs	r0, #16
 80016e4:	f000 ffc1 	bl	800266a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016e8:	2010      	movs	r0, #16
 80016ea:	f000 ffda 	bl	80026a2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2105      	movs	r1, #5
 80016f2:	2011      	movs	r0, #17
 80016f4:	f000 ffb9 	bl	800266a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016f8:	2011      	movs	r0, #17
 80016fa:	f000 ffd2 	bl	80026a2 <HAL_NVIC_EnableIRQ>

}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <MX_GPIO_Init+0xe8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a32      	ldr	r2, [pc, #200]	; (80017f4 <MX_GPIO_Init+0xe8>)
 800172c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <MX_GPIO_Init+0xe8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <MX_GPIO_Init+0xe8>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a2b      	ldr	r2, [pc, #172]	; (80017f4 <MX_GPIO_Init+0xe8>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <MX_GPIO_Init+0xe8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <MX_GPIO_Init+0xe8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a24      	ldr	r2, [pc, #144]	; (80017f4 <MX_GPIO_Init+0xe8>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <MX_GPIO_Init+0xe8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <MX_GPIO_Init+0xe8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <MX_GPIO_Init+0xe8>)
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <MX_GPIO_Init+0xe8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_GPIO_Init+0xe8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <MX_GPIO_Init+0xe8>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_GPIO_Init+0xe8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2130      	movs	r1, #48	; 0x30
 80017b2:	4811      	ldr	r0, [pc, #68]	; (80017f8 <MX_GPIO_Init+0xec>)
 80017b4:	f001 fd2e 	bl	8003214 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC4 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80017b8:	2330      	movs	r3, #48	; 0x30
 80017ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	480a      	ldr	r0, [pc, #40]	; (80017f8 <MX_GPIO_Init+0xec>)
 80017d0:	f001 fb84 	bl	8002edc <HAL_GPIO_Init>

	/*Configure GPIO pins : PD5 PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80017d4:	2360      	movs	r3, #96	; 0x60
 80017d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_GPIO_Init+0xf0>)
 80017e8:	f001 fb78 	bl	8002edc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	; 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020c00 	.word	0x40020c00

08001800 <main_task>:
 * @brief  Function implementing the mainTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_main_task */
void main_task(void *argument) {
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b0de      	sub	sp, #376	; 0x178
 8001804:	af02      	add	r7, sp, #8
 8001806:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800180a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800180e:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	rmw_uros_set_custom_transport(
 8001810:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <main_task+0x1bc>)
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	4b6a      	ldr	r3, [pc, #424]	; (80019c0 <main_task+0x1c0>)
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	4b6a      	ldr	r3, [pc, #424]	; (80019c4 <main_task+0x1c4>)
 800181a:	4a6b      	ldr	r2, [pc, #428]	; (80019c8 <main_task+0x1c8>)
 800181c:	496b      	ldr	r1, [pc, #428]	; (80019cc <main_task+0x1cc>)
 800181e:	2001      	movs	r0, #1
 8001820:	f009 f94a 	bl	800aab8 <rmw_uros_set_custom_transport>
	true, (void*) &huart2, cubemx_transport_open, cubemx_transport_close,
			cubemx_transport_write, cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 8001824:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001828:	4618      	mov	r0, r3
 800182a:	f009 f877 	bl	800a91c <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 800182e:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <main_task+0x1d0>)
 8001830:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001834:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <main_task+0x1d4>)
 8001836:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	freeRTOS_allocator.reallocate = microros_reallocate;
 800183a:	4b67      	ldr	r3, [pc, #412]	; (80019d8 <main_task+0x1d8>)
 800183c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001840:	4b66      	ldr	r3, [pc, #408]	; (80019dc <main_task+0x1dc>)
 8001842:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001846:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800184a:	4618      	mov	r0, r3
 800184c:	f009 f874 	bl	800a938 <rcutils_set_default_allocator>
 8001850:	4603      	mov	r3, r0
 8001852:	f083 0301 	eor.w	r3, r3, #1
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <main_task+0x66>
		printf("Error on default allocators (line %d)\n", __LINE__);
 800185c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8001860:	485f      	ldr	r0, [pc, #380]	; (80019e0 <main_task+0x1e0>)
 8001862:	f015 f84b 	bl	80168fc <iprintf>
	rcl_publisher_t encoder_pub;
	std_msgs__msg__Int32 encoder_msg;
	rcl_publisher_t imu_pub;
	std_msgs__msg__Float32 imu_msg;

	allocator = rcl_get_default_allocator();
 8001866:	463b      	mov	r3, r7
 8001868:	4618      	mov	r0, r3
 800186a:	f009 f883 	bl	800a974 <rcutils_get_default_allocator>
 800186e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001872:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001876:	f507 748a 	add.w	r4, r7, #276	; 0x114
 800187a:	461d      	mov	r5, r3
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	6023      	str	r3, [r4, #0]
	//create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 8001884:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001888:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	f008 ff4e 	bl	800a730 <rclc_support_init>

	// create node
	rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001894:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001898:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 800189c:	4a51      	ldr	r2, [pc, #324]	; (80019e4 <main_task+0x1e4>)
 800189e:	4952      	ldr	r1, [pc, #328]	; (80019e8 <main_task+0x1e8>)
 80018a0:	f008 ff90 	bl	800a7c4 <rclc_node_init_default>

	/////////////////encoder publisher ////////////////

	rclc_publisher_init_best_effort(&encoder_pub, &node,
 80018a4:	f009 fe4c 	bl	800b540 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80018ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80018b2:	4b4e      	ldr	r3, [pc, #312]	; (80019ec <main_task+0x1ec>)
 80018b4:	f008 ffc2 	bl	800a83c <rclc_publisher_init_best_effort>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), "encoder");
	encoder_msg.data = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	//////////////////////////////////////////////////

	/////////////////imu publisher ////////////////

	rclc_publisher_init_best_effort(&imu_pub, &node,
 80018be:	f009 fe27 	bl	800b510 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80018c2:	4602      	mov	r2, r0
 80018c4:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80018c8:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80018cc:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <main_task+0x1f0>)
 80018ce:	f008 ffb5 	bl	800a83c <rclc_publisher_init_best_effort>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32), "imu");
	imu_msg.data = 0;
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	///////////////////////////////////////////////

	rcl_subscription_t subscriber;

	rclc_subscription_init_best_effort(&subscriber, &node,
 80018da:	f009 fe31 	bl	800b540 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80018de:	4602      	mov	r2, r0
 80018e0:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80018e4:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80018e8:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <main_task+0x1f4>)
 80018ea:	f008 ffdb 	bl	800a8a4 <rclc_subscription_init_best_effort>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), "motor_control");
	// executor
	rclc_executor_t executor;
	rclc_executor_init(&executor, &support.context, 3, &allocator);
 80018ee:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80018f2:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80018f6:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80018fa:	2203      	movs	r2, #3
 80018fc:	f008 fc50 	bl	800a1a0 <rclc_executor_init>
	std_msgs__msg__Int32 msg;

	// Add subscription to the executor
	rclc_executor_add_subscription(&executor, &subscriber, &msg,
 8001900:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001904:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8001908:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800190c:	2300      	movs	r3, #0
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <main_task+0x1f8>)
 8001912:	f008 fcb5 	bl	800a280 <rclc_executor_add_subscription>
			&subscription_callback, ON_NEW_DATA);

	init_encoder(&encoderData);
 8001916:	4839      	ldr	r0, [pc, #228]	; (80019fc <main_task+0x1fc>)
 8001918:	f7ff fd12 	bl	8001340 <init_encoder>
	MPU6050_t MPU6050;
	while (MPU6050_Init(&hi2c1) == 1)
 800191c:	bf00      	nop
 800191e:	4838      	ldr	r0, [pc, #224]	; (8001a00 <main_task+0x200>)
 8001920:	f005 f976 	bl	8006c10 <MPU6050_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b01      	cmp	r3, #1
 8001928:	d0f9      	beq.n	800191e <main_task+0x11e>
		;
	init_motor();
 800192a:	f7ff fd57 	bl	80013dc <init_motor>
	for (;;) {

		get_encoder_val(&encoderData);
 800192e:	4833      	ldr	r0, [pc, #204]	; (80019fc <main_task+0x1fc>)
 8001930:	f7ff fd1c 	bl	800136c <get_encoder_val>
		 encoder_msg.data = encoderData.encoderPosCount;
 8001934:	4b31      	ldr	r3, [pc, #196]	; (80019fc <main_task+0x1fc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2110      	movs	r1, #16
 8001940:	4830      	ldr	r0, [pc, #192]	; (8001a04 <main_task+0x204>)
 8001942:	f001 fc67 	bl	8003214 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001946:	2201      	movs	r2, #1
 8001948:	2120      	movs	r1, #32
 800194a:	482e      	ldr	r0, [pc, #184]	; (8001a04 <main_task+0x204>)
 800194c:	f001 fc62 	bl	8003214 <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1023);
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <main_task+0x208>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001958:	639a      	str	r2, [r3, #56]	; 0x38
		MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	4619      	mov	r1, r3
 8001960:	4827      	ldr	r0, [pc, #156]	; (8001a00 <main_task+0x200>)
 8001962:	f005 f9ad 	bl	8006cc0 <MPU6050_Read_Gyro>
		// for test
		imu_msg.data = MPU6050.Gx;
 8001966:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800196a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800196e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f869 	bl	8000a4c <__aeabi_d2f>
 800197a:	4603      	mov	r3, r0
 800197c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

		rcl_publish(&encoder_pub, &encoder_msg, NULL);
 8001980:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8001984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001988:	2200      	movs	r2, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f008 f878 	bl	8009a80 <rcl_publish>
		rcl_publish(&imu_pub, &imu_msg, &allocator);
 8001990:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001994:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8001998:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800199c:	4618      	mov	r0, r3
 800199e:	f008 f86f 	bl	8009a80 <rcl_publish>

		rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 80019a2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80019a6:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <main_task+0x20c>)
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	4608      	mov	r0, r1
 80019ae:	f008 fe87 	bl	800a6c0 <rclc_executor_spin_some>
		osDelay(1);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f005 fafc 	bl	8006fb0 <osDelay>
		get_encoder_val(&encoderData);
 80019b8:	e7b9      	b.n	800192e <main_task+0x12e>
 80019ba:	bf00      	nop
 80019bc:	080022d5 	.word	0x080022d5
 80019c0:	0800226d 	.word	0x0800226d
 80019c4:	0800224d 	.word	0x0800224d
 80019c8:	08002221 	.word	0x08002221
 80019cc:	20003e78 	.word	0x20003e78
 80019d0:	08001a1d 	.word	0x08001a1d
 80019d4:	08001a61 	.word	0x08001a61
 80019d8:	08001a99 	.word	0x08001a99
 80019dc:	08001b05 	.word	0x08001b05
 80019e0:	08017a4c 	.word	0x08017a4c
 80019e4:	08017a74 	.word	0x08017a74
 80019e8:	08017a78 	.word	0x08017a78
 80019ec:	08017a84 	.word	0x08017a84
 80019f0:	08017a8c 	.word	0x08017a8c
 80019f4:	08017a90 	.word	0x08017a90
 80019f8:	0800131d 	.word	0x0800131d
 80019fc:	20003dcc 	.word	0x20003dcc
 8001a00:	20003ddc 	.word	0x20003ddc
 8001a04:	40020800 	.word	0x40020800
 8001a08:	20003e30 	.word	0x20003e30
 8001a0c:	00989680 	.word	0x00989680

08001a10 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
}
 8001a16:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a18:	e7fe      	b.n	8001a18 <Error_Handler+0x8>
	...

08001a1c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <microros_allocate+0x3c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <microros_allocate+0x3c>)
 8001a34:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <microros_allocate+0x40>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <microros_allocate+0x40>)
 8001a44:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fa1e 	bl	8000e88 <pvPortMallocMicroROS>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20003f80 	.word	0x20003f80
 8001a5c:	20003f84 	.word	0x20003f84

08001a60 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00c      	beq.n	8001a8a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fb27 	bl	80010c4 <getBlockSize>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <microros_deallocate+0x34>)
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <microros_deallocate+0x34>)
 8001a82:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff fac3 	bl	8001010 <vPortFreeMicroROS>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20003f84 	.word	0x20003f84

08001a98 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <microros_reallocate+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	4413      	add	r3, r2
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <microros_reallocate+0x64>)
 8001ab2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <microros_reallocate+0x68>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	4413      	add	r3, r2
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <microros_reallocate+0x68>)
 8001ac2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d104      	bne.n	8001ad4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001aca:	68b8      	ldr	r0, [r7, #8]
 8001acc:	f7ff f9dc 	bl	8000e88 <pvPortMallocMicroROS>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	e00e      	b.n	8001af2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f7ff faf5 	bl	80010c4 <getBlockSize>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <microros_reallocate+0x68>)
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <microros_reallocate+0x68>)
 8001ae6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff fb08 	bl	8001100 <pvPortReallocMicroROS>
 8001af0:	4603      	mov	r3, r0
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20003f80 	.word	0x20003f80
 8001b00:	20003f84 	.word	0x20003f84

08001b04 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <microros_zero_allocate+0x48>)
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <microros_zero_allocate+0x48>)
 8001b22:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <microros_zero_allocate+0x4c>)
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	4413      	add	r3, r2
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <microros_zero_allocate+0x4c>)
 8001b36:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff fb0d 	bl	800115a <pvPortCallocMicroROS>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20003f80 	.word	0x20003f80
 8001b50:	20003f84 	.word	0x20003f84
 8001b54:	00000000 	.word	0x00000000

08001b58 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001b6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b6e:	a320      	add	r3, pc, #128	; (adr r3, 8001bf0 <UTILS_NanosecondsToTimespec+0x98>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe ffba 	bl	8000aec <__aeabi_ldivmod>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001b82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b86:	a31a      	add	r3, pc, #104	; (adr r3, 8001bf0 <UTILS_NanosecondsToTimespec+0x98>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	f7fe ffae 	bl	8000aec <__aeabi_ldivmod>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	da20      	bge.n	8001bde <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <UTILS_NanosecondsToTimespec+0x90>)
 8001ba2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba6:	1712      	asrs	r2, r2, #28
 8001ba8:	17db      	asrs	r3, r3, #31
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	6979      	ldr	r1, [r7, #20]
 8001bb8:	17c8      	asrs	r0, r1, #31
 8001bba:	460c      	mov	r4, r1
 8001bbc:	4605      	mov	r5, r0
 8001bbe:	ebb2 0804 	subs.w	r8, r2, r4
 8001bc2:	eb63 0905 	sbc.w	r9, r3, r5
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	4906      	ldr	r1, [pc, #24]	; (8001bec <UTILS_NanosecondsToTimespec+0x94>)
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	441a      	add	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
    }
}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001be8:	44b82fa1 	.word	0x44b82fa1
 8001bec:	3b9aca00 	.word	0x3b9aca00
 8001bf0:	3b9aca00 	.word	0x3b9aca00
 8001bf4:	00000000 	.word	0x00000000

08001bf8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bfc:	b08e      	sub	sp, #56	; 0x38
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6278      	str	r0, [r7, #36]	; 0x24
 8001c02:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001c04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c08:	2300      	movs	r3, #0
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f006 fc7a 	bl	8008518 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c26:	17da      	asrs	r2, r3, #31
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	61fa      	str	r2, [r7, #28]
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	69b9      	ldr	r1, [r7, #24]
 8001c36:	000b      	movs	r3, r1
 8001c38:	2200      	movs	r2, #0
 8001c3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	2200      	movs	r2, #0
 8001c42:	461c      	mov	r4, r3
 8001c44:	4615      	mov	r5, r2
 8001c46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c4a:	1911      	adds	r1, r2, r4
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	416b      	adcs	r3, r5
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001c56:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001c5a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	f04f 0400 	mov.w	r4, #0
 8001c66:	f04f 0500 	mov.w	r5, #0
 8001c6a:	015d      	lsls	r5, r3, #5
 8001c6c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001c70:	0154      	lsls	r4, r2, #5
 8001c72:	4622      	mov	r2, r4
 8001c74:	462b      	mov	r3, r5
 8001c76:	ebb2 0800 	subs.w	r8, r2, r0
 8001c7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001c8a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001c8e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001c92:	4690      	mov	r8, r2
 8001c94:	4699      	mov	r9, r3
 8001c96:	eb18 0a00 	adds.w	sl, r8, r0
 8001c9a:	eb49 0b01 	adc.w	fp, r9, r1
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001caa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cb2:	ebb2 040a 	subs.w	r4, r2, sl
 8001cb6:	603c      	str	r4, [r7, #0]
 8001cb8:	eb63 030b 	sbc.w	r3, r3, fp
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	181b      	adds	r3, r3, r0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	462b      	mov	r3, r5
 8001cca:	eb41 0303 	adc.w	r3, r1, r3
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	6a3a      	ldr	r2, [r7, #32]
 8001cd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cd6:	f7ff ff3f 	bl	8001b58 <UTILS_NanosecondsToTimespec>

    return 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3738      	adds	r7, #56	; 0x38
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001ce8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_MspInit+0x54>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <HAL_MspInit+0x54>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_MspInit+0x54>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_MspInit+0x54>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <HAL_MspInit+0x54>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <HAL_MspInit+0x54>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	210f      	movs	r1, #15
 8001d2a:	f06f 0001 	mvn.w	r0, #1
 8001d2e:	f000 fc9c 	bl	800266a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_I2C_MspInit+0x84>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d12b      	bne.n	8001dba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_I2C_MspInit+0x88>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <HAL_I2C_MspInit+0x88>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_I2C_MspInit+0x88>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d7e:	23c0      	movs	r3, #192	; 0xc0
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d82:	2312      	movs	r3, #18
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	480c      	ldr	r0, [pc, #48]	; (8001dcc <HAL_I2C_MspInit+0x8c>)
 8001d9a:	f001 f89f 	bl	8002edc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_I2C_MspInit+0x88>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <HAL_I2C_MspInit+0x88>)
 8001da8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_I2C_MspInit+0x88>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	; 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40005400 	.word	0x40005400
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020400 	.word	0x40020400

08001dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de0:	d10d      	bne.n	8001dfe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_TIM_Base_MspInit+0x3c>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_TIM_Base_MspInit+0x3c>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_TIM_Base_MspInit+0x3c>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800

08001e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d11d      	bne.n	8001e6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_TIM_MspPostInit+0x68>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <HAL_TIM_MspPostInit+0x68>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_TIM_MspPostInit+0x68>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4619      	mov	r1, r3
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <HAL_TIM_MspPostInit+0x6c>)
 8001e6a:	f001 f837 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e6e:	bf00      	nop
 8001e70:	3720      	adds	r7, #32
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <HAL_UART_MspInit+0x150>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	f040 8092 	bne.w	8001fc8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_UART_MspInit+0x154>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	4a49      	ldr	r2, [pc, #292]	; (8001fd4 <HAL_UART_MspInit+0x154>)
 8001eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb4:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_UART_MspInit+0x154>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_UART_MspInit+0x154>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	4a42      	ldr	r2, [pc, #264]	; (8001fd4 <HAL_UART_MspInit+0x154>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed0:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_UART_MspInit+0x154>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001edc:	230c      	movs	r3, #12
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eec:	2307      	movs	r3, #7
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4838      	ldr	r0, [pc, #224]	; (8001fd8 <HAL_UART_MspInit+0x158>)
 8001ef8:	f000 fff0 	bl	8002edc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001efc:	4b37      	ldr	r3, [pc, #220]	; (8001fdc <HAL_UART_MspInit+0x15c>)
 8001efe:	4a38      	ldr	r2, [pc, #224]	; (8001fe0 <HAL_UART_MspInit+0x160>)
 8001f00:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f02:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_UART_MspInit+0x15c>)
 8001f04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f08:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f0a:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <HAL_UART_MspInit+0x15c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f10:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <HAL_UART_MspInit+0x15c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_UART_MspInit+0x15c>)
 8001f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f1c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <HAL_UART_MspInit+0x15c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_UART_MspInit+0x15c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <HAL_UART_MspInit+0x15c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f30:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <HAL_UART_MspInit+0x15c>)
 8001f32:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f36:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_UART_MspInit+0x15c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f3e:	4827      	ldr	r0, [pc, #156]	; (8001fdc <HAL_UART_MspInit+0x15c>)
 8001f40:	f000 fbca 	bl	80026d8 <HAL_DMA_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001f4a:	f7ff fd61 	bl	8001a10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a22      	ldr	r2, [pc, #136]	; (8001fdc <HAL_UART_MspInit+0x15c>)
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38
 8001f54:	4a21      	ldr	r2, [pc, #132]	; (8001fdc <HAL_UART_MspInit+0x15c>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <HAL_UART_MspInit+0x164>)
 8001f5c:	4a22      	ldr	r2, [pc, #136]	; (8001fe8 <HAL_UART_MspInit+0x168>)
 8001f5e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001f60:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_UART_MspInit+0x164>)
 8001f62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f66:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <HAL_UART_MspInit+0x164>)
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_UART_MspInit+0x164>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_UART_MspInit+0x164>)
 8001f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_UART_MspInit+0x164>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f82:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_UART_MspInit+0x164>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f88:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_UART_MspInit+0x164>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_UART_MspInit+0x164>)
 8001f90:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f94:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f96:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HAL_UART_MspInit+0x164>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f9c:	4811      	ldr	r0, [pc, #68]	; (8001fe4 <HAL_UART_MspInit+0x164>)
 8001f9e:	f000 fb9b 	bl	80026d8 <HAL_DMA_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001fa8:	f7ff fd32 	bl	8001a10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <HAL_UART_MspInit+0x164>)
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001fb2:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <HAL_UART_MspInit+0x164>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2105      	movs	r1, #5
 8001fbc:	2026      	movs	r0, #38	; 0x26
 8001fbe:	f000 fb54 	bl	800266a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fc2:	2026      	movs	r0, #38	; 0x26
 8001fc4:	f000 fb6d 	bl	80026a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40004400 	.word	0x40004400
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	20003ebc 	.word	0x20003ebc
 8001fe0:	40026088 	.word	0x40026088
 8001fe4:	20003f1c 	.word	0x20003f1c
 8001fe8:	400260a0 	.word	0x400260a0

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <HardFault_Handler+0x4>

08001ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <MemManage_Handler+0x4>

08001ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <UsageFault_Handler+0x4>

0800200a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800201c:	f000 fa2a 	bl	8002474 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002020:	f006 fbfa 	bl	8008818 <xTaskGetSchedulerState>
 8002024:	4603      	mov	r3, r0
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800202a:	f007 f9e5 	bl	80093f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <DMA1_Stream5_IRQHandler+0x10>)
 800203a:	f000 fce5 	bl	8002a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20003ebc 	.word	0x20003ebc

08002048 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <DMA1_Stream6_IRQHandler+0x10>)
 800204e:	f000 fcdb 	bl	8002a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20003f1c 	.word	0x20003f1c

0800205c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <USART2_IRQHandler+0x10>)
 8002062:	f003 fce1 	bl	8005a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20003e78 	.word	0x20003e78

08002070 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_kill>:

int _kill(int pid, int sig)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800208a:	f014 fdb7 	bl	8016bfc <__errno>
 800208e:	4603      	mov	r3, r0
 8002090:	2216      	movs	r2, #22
 8002092:	601a      	str	r2, [r3, #0]
  return -1;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_exit>:

void _exit (int status)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ffe7 	bl	8002080 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020b2:	e7fe      	b.n	80020b2 <_exit+0x12>

080020b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e00a      	b.n	80020dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020c6:	f3af 8000 	nop.w
 80020ca:	4601      	mov	r1, r0
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	60ba      	str	r2, [r7, #8]
 80020d2:	b2ca      	uxtb	r2, r1
 80020d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3301      	adds	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	dbf0      	blt.n	80020c6 <_read+0x12>
  }

  return len;
 80020e4:	687b      	ldr	r3, [r7, #4]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e009      	b.n	8002114 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3301      	adds	r3, #1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	dbf1      	blt.n	8002100 <_write+0x12>
  }
  return len;
 800211c:	687b      	ldr	r3, [r7, #4]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <_close>:

int _close(int file)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800214e:	605a      	str	r2, [r3, #4]
  return 0;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <_isatty>:

int _isatty(int file)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002166:	2301      	movs	r3, #1
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <_sbrk+0x5c>)
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <_sbrk+0x60>)
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <_sbrk+0x64>)
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <_sbrk+0x68>)
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d207      	bcs.n	80021d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c0:	f014 fd1c 	bl	8016bfc <__errno>
 80021c4:	4603      	mov	r3, r0
 80021c6:	220c      	movs	r2, #12
 80021c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ce:	e009      	b.n	80021e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <_sbrk+0x64>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <_sbrk+0x64>)
 80021e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021e2:	68fb      	ldr	r3, [r7, #12]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20020000 	.word	0x20020000
 80021f0:	00000400 	.word	0x00000400
 80021f4:	20003f8c 	.word	0x20003f8c
 80021f8:	2000ddb8 	.word	0x2000ddb8

080021fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <SystemInit+0x20>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <SystemInit+0x20>)
 8002208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800220c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800222e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002234:	4904      	ldr	r1, [pc, #16]	; (8002248 <cubemx_transport_open+0x28>)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f003 fb46 	bl	80058c8 <HAL_UART_Receive_DMA>
    return true;
 800223c:	2301      	movs	r3, #1
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20003f90 	.word	0x20003f90

0800224c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800225a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f003 fb63 	bl	8005928 <HAL_UART_DMAStop>
    return true;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002280:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b20      	cmp	r3, #32
 800228c:	d11c      	bne.n	80022c8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	b29b      	uxth	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	6978      	ldr	r0, [r7, #20]
 8002298:	f003 fa98 	bl	80057cc <HAL_UART_Transmit_DMA>
 800229c:	4603      	mov	r3, r0
 800229e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80022a0:	e002      	b.n	80022a8 <cubemx_transport_write+0x3c>
            osDelay(1);
 80022a2:	2001      	movs	r0, #1
 80022a4:	f004 fe84 	bl	8006fb0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <cubemx_transport_write+0x4e>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d1f3      	bne.n	80022a2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <cubemx_transport_write+0x58>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	e002      	b.n	80022ca <cubemx_transport_write+0x5e>
 80022c4:	2300      	movs	r3, #0
 80022c6:	e000      	b.n	80022ca <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80022c8:	2300      	movs	r3, #0
    }
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80022e8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80022ee:	b672      	cpsid	i
}
 80022f0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80022fe:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <cubemx_transport_read+0x9c>)
 8002300:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002302:	b662      	cpsie	i
}
 8002304:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3301      	adds	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800230c:	2001      	movs	r0, #1
 800230e:	f004 fe4f 	bl	8006fb0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <cubemx_transport_read+0xa0>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <cubemx_transport_read+0x9c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d103      	bne.n	8002326 <cubemx_transport_read+0x52>
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	dbe3      	blt.n	80022ee <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800232a:	e011      	b.n	8002350 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <cubemx_transport_read+0xa0>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	440b      	add	r3, r1
 8002336:	4910      	ldr	r1, [pc, #64]	; (8002378 <cubemx_transport_read+0xa4>)
 8002338:	5c8a      	ldrb	r2, [r1, r2]
 800233a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800233c:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <cubemx_transport_read+0xa0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002346:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <cubemx_transport_read+0xa0>)
 8002348:	6013      	str	r3, [r2, #0]
        wrote++;
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	3301      	adds	r3, #1
 800234e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <cubemx_transport_read+0xa0>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <cubemx_transport_read+0x9c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d003      	beq.n	8002364 <cubemx_transport_read+0x90>
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d3e3      	bcc.n	800232c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002364:	69bb      	ldr	r3, [r7, #24]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3720      	adds	r7, #32
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20004794 	.word	0x20004794
 8002374:	20004790 	.word	0x20004790
 8002378:	20003f90 	.word	0x20003f90

0800237c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800237c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002380:	480d      	ldr	r0, [pc, #52]	; (80023b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002382:	490e      	ldr	r1, [pc, #56]	; (80023bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002384:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002388:	e002      	b.n	8002390 <LoopCopyDataInit>

0800238a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800238c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238e:	3304      	adds	r3, #4

08002390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002394:	d3f9      	bcc.n	800238a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002398:	4c0b      	ldr	r4, [pc, #44]	; (80023c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800239c:	e001      	b.n	80023a2 <LoopFillZerobss>

0800239e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a0:	3204      	adds	r2, #4

080023a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a4:	d3fb      	bcc.n	800239e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023a6:	f7ff ff29 	bl	80021fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023aa:	f014 fc2d 	bl	8016c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ae:	f7ff f82b 	bl	8001408 <main>
  bx  lr    
 80023b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023bc:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 80023c0:	0801894c 	.word	0x0801894c
  ldr r2, =_sbss
 80023c4:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 80023c8:	2000ddb4 	.word	0x2000ddb4

080023cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC_IRQHandler>
	...

080023d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_Init+0x40>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <HAL_Init+0x40>)
 80023da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_Init+0x40>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <HAL_Init+0x40>)
 80023e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_Init+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a07      	ldr	r2, [pc, #28]	; (8002410 <HAL_Init+0x40>)
 80023f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f8:	2003      	movs	r0, #3
 80023fa:	f000 f92b 	bl	8002654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023fe:	200f      	movs	r0, #15
 8002400:	f000 f808 	bl	8002414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002404:	f7ff fc70 	bl	8001ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023c00 	.word	0x40023c00

08002414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_InitTick+0x54>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_InitTick+0x58>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242a:	fbb3 f3f1 	udiv	r3, r3, r1
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f943 	bl	80026be <HAL_SYSTICK_Config>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e00e      	b.n	8002460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b0f      	cmp	r3, #15
 8002446:	d80a      	bhi.n	800245e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002448:	2200      	movs	r2, #0
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002450:	f000 f90b 	bl	800266a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <HAL_InitTick+0x5c>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	e000      	b.n	8002460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000004 	.word	0x20000004
 800246c:	2000000c 	.word	0x2000000c
 8002470:	20000008 	.word	0x20000008

08002474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_IncTick+0x20>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_IncTick+0x24>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4413      	add	r3, r2
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_IncTick+0x24>)
 8002486:	6013      	str	r3, [r2, #0]
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	2000000c 	.word	0x2000000c
 8002498:	20004798 	.word	0x20004798

0800249c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return uwTick;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_GetTick+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20004798 	.word	0x20004798

080024b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d0:	4013      	ands	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024e6:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	60d3      	str	r3, [r2, #12]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <__NVIC_GetPriorityGrouping+0x18>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	f003 0307 	and.w	r3, r3, #7
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	2b00      	cmp	r3, #0
 8002528:	db0b      	blt.n	8002542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	f003 021f 	and.w	r2, r3, #31
 8002530:	4907      	ldr	r1, [pc, #28]	; (8002550 <__NVIC_EnableIRQ+0x38>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	2001      	movs	r0, #1
 800253a:	fa00 f202 	lsl.w	r2, r0, r2
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000e100 	.word	0xe000e100

08002554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	2b00      	cmp	r3, #0
 8002566:	db0a      	blt.n	800257e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	490c      	ldr	r1, [pc, #48]	; (80025a0 <__NVIC_SetPriority+0x4c>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	0112      	lsls	r2, r2, #4
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	440b      	add	r3, r1
 8002578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800257c:	e00a      	b.n	8002594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4908      	ldr	r1, [pc, #32]	; (80025a4 <__NVIC_SetPriority+0x50>)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	3b04      	subs	r3, #4
 800258c:	0112      	lsls	r2, r2, #4
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	440b      	add	r3, r1
 8002592:	761a      	strb	r2, [r3, #24]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000e100 	.word	0xe000e100
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f1c3 0307 	rsb	r3, r3, #7
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	bf28      	it	cs
 80025c6:	2304      	movcs	r3, #4
 80025c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3304      	adds	r3, #4
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d902      	bls.n	80025d8 <NVIC_EncodePriority+0x30>
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3b03      	subs	r3, #3
 80025d6:	e000      	b.n	80025da <NVIC_EncodePriority+0x32>
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	401a      	ands	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43d9      	mvns	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	4313      	orrs	r3, r2
         );
}
 8002602:	4618      	mov	r0, r3
 8002604:	3724      	adds	r7, #36	; 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002620:	d301      	bcc.n	8002626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002622:	2301      	movs	r3, #1
 8002624:	e00f      	b.n	8002646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002626:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <SysTick_Config+0x40>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3b01      	subs	r3, #1
 800262c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800262e:	210f      	movs	r1, #15
 8002630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002634:	f7ff ff8e 	bl	8002554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <SysTick_Config+0x40>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <SysTick_Config+0x40>)
 8002640:	2207      	movs	r2, #7
 8002642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	e000e010 	.word	0xe000e010

08002654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ff29 	bl	80024b4 <__NVIC_SetPriorityGrouping>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800267c:	f7ff ff3e 	bl	80024fc <__NVIC_GetPriorityGrouping>
 8002680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	6978      	ldr	r0, [r7, #20]
 8002688:	f7ff ff8e 	bl	80025a8 <NVIC_EncodePriority>
 800268c:	4602      	mov	r2, r0
 800268e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff5d 	bl	8002554 <__NVIC_SetPriority>
}
 800269a:	bf00      	nop
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff31 	bl	8002518 <__NVIC_EnableIRQ>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ffa2 	bl	8002610 <SysTick_Config>
 80026cc:	4603      	mov	r3, r0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff feda 	bl	800249c <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e099      	b.n	8002828 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002714:	e00f      	b.n	8002736 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002716:	f7ff fec1 	bl	800249c <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b05      	cmp	r3, #5
 8002722:	d908      	bls.n	8002736 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2203      	movs	r2, #3
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e078      	b.n	8002828 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e8      	bne.n	8002716 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4b38      	ldr	r3, [pc, #224]	; (8002830 <HAL_DMA_Init+0x158>)
 8002750:	4013      	ands	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002762:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	2b04      	cmp	r3, #4
 800278e:	d107      	bne.n	80027a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	4313      	orrs	r3, r2
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f023 0307 	bic.w	r3, r3, #7
 80027b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d117      	bne.n	80027fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00e      	beq.n	80027fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fb01 	bl	8002de4 <DMA_CheckFifoParam>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2240      	movs	r2, #64	; 0x40
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027f6:	2301      	movs	r3, #1
 80027f8:	e016      	b.n	8002828 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fab8 	bl	8002d78 <DMA_CalcBaseAndBitshift>
 8002808:	4603      	mov	r3, r0
 800280a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	223f      	movs	r2, #63	; 0x3f
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	f010803f 	.word	0xf010803f

08002834 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_DMA_Start_IT+0x26>
 8002856:	2302      	movs	r3, #2
 8002858:	e040      	b.n	80028dc <HAL_DMA_Start_IT+0xa8>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d12f      	bne.n	80028ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2202      	movs	r2, #2
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fa4a 	bl	8002d1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	223f      	movs	r2, #63	; 0x3f
 800288e:	409a      	lsls	r2, r3
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0216 	orr.w	r2, r2, #22
 80028a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0208 	orr.w	r2, r2, #8
 80028ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e005      	b.n	80028da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
 80028d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028da:	7dfb      	ldrb	r3, [r7, #23]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028f2:	f7ff fdd3 	bl	800249c <HAL_GetTick>
 80028f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d008      	beq.n	8002916 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2280      	movs	r2, #128	; 0x80
 8002908:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e052      	b.n	80029bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0216 	bic.w	r2, r2, #22
 8002924:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002934:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d103      	bne.n	8002946 <HAL_DMA_Abort+0x62>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002942:	2b00      	cmp	r3, #0
 8002944:	d007      	beq.n	8002956 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0208 	bic.w	r2, r2, #8
 8002954:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002966:	e013      	b.n	8002990 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002968:	f7ff fd98 	bl	800249c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b05      	cmp	r3, #5
 8002974:	d90c      	bls.n	8002990 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2203      	movs	r2, #3
 8002980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e015      	b.n	80029bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1e4      	bne.n	8002968 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	223f      	movs	r2, #63	; 0x3f
 80029a4:	409a      	lsls	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d004      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e00c      	b.n	80029fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2205      	movs	r2, #5
 80029e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a14:	4b8e      	ldr	r3, [pc, #568]	; (8002c50 <HAL_DMA_IRQHandler+0x248>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a8e      	ldr	r2, [pc, #568]	; (8002c54 <HAL_DMA_IRQHandler+0x24c>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0a9b      	lsrs	r3, r3, #10
 8002a20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a32:	2208      	movs	r2, #8
 8002a34:	409a      	lsls	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01a      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d013      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0204 	bic.w	r2, r2, #4
 8002a5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	2208      	movs	r2, #8
 8002a62:	409a      	lsls	r2, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	f043 0201 	orr.w	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a78:	2201      	movs	r2, #1
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d012      	beq.n	8002aaa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	2201      	movs	r2, #1
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	f043 0202 	orr.w	r2, r3, #2
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	2204      	movs	r2, #4
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d012      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	2204      	movs	r2, #4
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f043 0204 	orr.w	r2, r3, #4
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d043      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d03c      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b02:	2210      	movs	r2, #16
 8002b04:	409a      	lsls	r2, r3
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d018      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d024      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	4798      	blx	r3
 8002b36:	e01f      	b.n	8002b78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01b      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
 8002b48:	e016      	b.n	8002b78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d107      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0208 	bic.w	r2, r2, #8
 8002b66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 808f 	beq.w	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8087 	beq.w	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d136      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0216 	bic.w	r2, r2, #22
 8002bc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <HAL_DMA_IRQHandler+0x1da>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0208 	bic.w	r2, r2, #8
 8002bf0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf6:	223f      	movs	r2, #63	; 0x3f
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d07e      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
        }
        return;
 8002c1e:	e079      	b.n	8002d14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01d      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10d      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d031      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4798      	blx	r3
 8002c4c:	e02c      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
 8002c4e:	bf00      	nop
 8002c50:	20000004 	.word	0x20000004
 8002c54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d023      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
 8002c68:	e01e      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10f      	bne.n	8002c98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d032      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d022      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2205      	movs	r2, #5
 8002cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d307      	bcc.n	8002cf0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f2      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x2cc>
 8002cee:	e000      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cf0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
 8002d12:	e000      	b.n	8002d16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d14:	bf00      	nop
    }
  }
}
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b40      	cmp	r3, #64	; 0x40
 8002d48:	d108      	bne.n	8002d5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d5a:	e007      	b.n	8002d6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	60da      	str	r2, [r3, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	3b10      	subs	r3, #16
 8002d88:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <DMA_CalcBaseAndBitshift+0x64>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d92:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d909      	bls.n	8002dba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dae:	f023 0303 	bic.w	r3, r3, #3
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	659a      	str	r2, [r3, #88]	; 0x58
 8002db8:	e007      	b.n	8002dca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	aaaaaaab 	.word	0xaaaaaaab
 8002de0:	08017b14 	.word	0x08017b14

08002de4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11f      	bne.n	8002e3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d856      	bhi.n	8002eb2 <DMA_CheckFifoParam+0xce>
 8002e04:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <DMA_CheckFifoParam+0x28>)
 8002e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0a:	bf00      	nop
 8002e0c:	08002e1d 	.word	0x08002e1d
 8002e10:	08002e2f 	.word	0x08002e2f
 8002e14:	08002e1d 	.word	0x08002e1d
 8002e18:	08002eb3 	.word	0x08002eb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d046      	beq.n	8002eb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2c:	e043      	b.n	8002eb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e36:	d140      	bne.n	8002eba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3c:	e03d      	b.n	8002eba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e46:	d121      	bne.n	8002e8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d837      	bhi.n	8002ebe <DMA_CheckFifoParam+0xda>
 8002e4e:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <DMA_CheckFifoParam+0x70>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002e65 	.word	0x08002e65
 8002e58:	08002e6b 	.word	0x08002e6b
 8002e5c:	08002e65 	.word	0x08002e65
 8002e60:	08002e7d 	.word	0x08002e7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
      break;
 8002e68:	e030      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d025      	beq.n	8002ec2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7a:	e022      	b.n	8002ec2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e84:	d11f      	bne.n	8002ec6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e8a:	e01c      	b.n	8002ec6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d903      	bls.n	8002e9a <DMA_CheckFifoParam+0xb6>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d003      	beq.n	8002ea0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e98:	e018      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9e:	e015      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00e      	beq.n	8002eca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb0:	e00b      	b.n	8002eca <DMA_CheckFifoParam+0xe6>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e00a      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e008      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e006      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e004      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e002      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;   
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
    }
  } 
  
  return status; 
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop

08002edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	e159      	b.n	80031ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ef8:	2201      	movs	r2, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	f040 8148 	bne.w	80031a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d005      	beq.n	8002f2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d130      	bne.n	8002f90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	2203      	movs	r2, #3
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f64:	2201      	movs	r2, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 0201 	and.w	r2, r3, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d017      	beq.n	8002fcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d123      	bne.n	8003020 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	08da      	lsrs	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3208      	adds	r2, #8
 8002fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	220f      	movs	r2, #15
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	08da      	lsrs	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3208      	adds	r2, #8
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0203 	and.w	r2, r3, #3
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a2 	beq.w	80031a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b57      	ldr	r3, [pc, #348]	; (80031c4 <HAL_GPIO_Init+0x2e8>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	4a56      	ldr	r2, [pc, #344]	; (80031c4 <HAL_GPIO_Init+0x2e8>)
 800306c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003070:	6453      	str	r3, [r2, #68]	; 0x44
 8003072:	4b54      	ldr	r3, [pc, #336]	; (80031c4 <HAL_GPIO_Init+0x2e8>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800307e:	4a52      	ldr	r2, [pc, #328]	; (80031c8 <HAL_GPIO_Init+0x2ec>)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	3302      	adds	r3, #2
 8003086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	220f      	movs	r2, #15
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a49      	ldr	r2, [pc, #292]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d019      	beq.n	80030de <HAL_GPIO_Init+0x202>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a48      	ldr	r2, [pc, #288]	; (80031d0 <HAL_GPIO_Init+0x2f4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_GPIO_Init+0x1fe>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a47      	ldr	r2, [pc, #284]	; (80031d4 <HAL_GPIO_Init+0x2f8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00d      	beq.n	80030d6 <HAL_GPIO_Init+0x1fa>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a46      	ldr	r2, [pc, #280]	; (80031d8 <HAL_GPIO_Init+0x2fc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <HAL_GPIO_Init+0x1f6>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a45      	ldr	r2, [pc, #276]	; (80031dc <HAL_GPIO_Init+0x300>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_GPIO_Init+0x1f2>
 80030ca:	2304      	movs	r3, #4
 80030cc:	e008      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030ce:	2307      	movs	r3, #7
 80030d0:	e006      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030d2:	2303      	movs	r3, #3
 80030d4:	e004      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e002      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030de:	2300      	movs	r3, #0
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	f002 0203 	and.w	r2, r2, #3
 80030e6:	0092      	lsls	r2, r2, #2
 80030e8:	4093      	lsls	r3, r2
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030f0:	4935      	ldr	r1, [pc, #212]	; (80031c8 <HAL_GPIO_Init+0x2ec>)
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3302      	adds	r3, #2
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030fe:	4b38      	ldr	r3, [pc, #224]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003122:	4a2f      	ldr	r2, [pc, #188]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003128:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <HAL_GPIO_Init+0x304>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800314c:	4a24      	ldr	r2, [pc, #144]	; (80031e0 <HAL_GPIO_Init+0x304>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003176:	4a1a      	ldr	r2, [pc, #104]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800317c:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <HAL_GPIO_Init+0x304>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031a0:	4a0f      	ldr	r2, [pc, #60]	; (80031e0 <HAL_GPIO_Init+0x304>)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3301      	adds	r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	2b0f      	cmp	r3, #15
 80031b0:	f67f aea2 	bls.w	8002ef8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3724      	adds	r7, #36	; 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40013800 	.word	0x40013800
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40020400 	.word	0x40020400
 80031d4:	40020800 	.word	0x40020800
 80031d8:	40020c00 	.word	0x40020c00
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40013c00 	.word	0x40013c00

080031e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	887b      	ldrh	r3, [r7, #2]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	e001      	b.n	8003206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]
 8003220:	4613      	mov	r3, r2
 8003222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003224:	787b      	ldrb	r3, [r7, #1]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322a:	887a      	ldrh	r2, [r7, #2]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003230:	e003      	b.n	800323a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003232:	887b      	ldrh	r3, [r7, #2]
 8003234:	041a      	lsls	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	619a      	str	r2, [r3, #24]
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e12b      	b.n	80034b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fe fd66 	bl	8001d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800329a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032ac:	f001 fbfc 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 80032b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4a81      	ldr	r2, [pc, #516]	; (80034bc <HAL_I2C_Init+0x274>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d807      	bhi.n	80032cc <HAL_I2C_Init+0x84>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4a80      	ldr	r2, [pc, #512]	; (80034c0 <HAL_I2C_Init+0x278>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	bf94      	ite	ls
 80032c4:	2301      	movls	r3, #1
 80032c6:	2300      	movhi	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e006      	b.n	80032da <HAL_I2C_Init+0x92>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a7d      	ldr	r2, [pc, #500]	; (80034c4 <HAL_I2C_Init+0x27c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	bf94      	ite	ls
 80032d4:	2301      	movls	r3, #1
 80032d6:	2300      	movhi	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e0e7      	b.n	80034b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a78      	ldr	r2, [pc, #480]	; (80034c8 <HAL_I2C_Init+0x280>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	0c9b      	lsrs	r3, r3, #18
 80032ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a6a      	ldr	r2, [pc, #424]	; (80034bc <HAL_I2C_Init+0x274>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d802      	bhi.n	800331c <HAL_I2C_Init+0xd4>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	3301      	adds	r3, #1
 800331a:	e009      	b.n	8003330 <HAL_I2C_Init+0xe8>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	4a69      	ldr	r2, [pc, #420]	; (80034cc <HAL_I2C_Init+0x284>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	099b      	lsrs	r3, r3, #6
 800332e:	3301      	adds	r3, #1
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	430b      	orrs	r3, r1
 8003336:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003342:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	495c      	ldr	r1, [pc, #368]	; (80034bc <HAL_I2C_Init+0x274>)
 800334c:	428b      	cmp	r3, r1
 800334e:	d819      	bhi.n	8003384 <HAL_I2C_Init+0x13c>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e59      	subs	r1, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fbb1 f3f3 	udiv	r3, r1, r3
 800335e:	1c59      	adds	r1, r3, #1
 8003360:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003364:	400b      	ands	r3, r1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_I2C_Init+0x138>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1e59      	subs	r1, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fbb1 f3f3 	udiv	r3, r1, r3
 8003378:	3301      	adds	r3, #1
 800337a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337e:	e051      	b.n	8003424 <HAL_I2C_Init+0x1dc>
 8003380:	2304      	movs	r3, #4
 8003382:	e04f      	b.n	8003424 <HAL_I2C_Init+0x1dc>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d111      	bne.n	80033b0 <HAL_I2C_Init+0x168>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1e58      	subs	r0, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	440b      	add	r3, r1
 800339a:	fbb0 f3f3 	udiv	r3, r0, r3
 800339e:	3301      	adds	r3, #1
 80033a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e012      	b.n	80033d6 <HAL_I2C_Init+0x18e>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1e58      	subs	r0, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	0099      	lsls	r1, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c6:	3301      	adds	r3, #1
 80033c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_I2C_Init+0x196>
 80033da:	2301      	movs	r3, #1
 80033dc:	e022      	b.n	8003424 <HAL_I2C_Init+0x1dc>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10e      	bne.n	8003404 <HAL_I2C_Init+0x1bc>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1e58      	subs	r0, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6859      	ldr	r1, [r3, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	440b      	add	r3, r1
 80033f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f8:	3301      	adds	r3, #1
 80033fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003402:	e00f      	b.n	8003424 <HAL_I2C_Init+0x1dc>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	0099      	lsls	r1, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	fbb0 f3f3 	udiv	r3, r0, r3
 800341a:	3301      	adds	r3, #1
 800341c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	6809      	ldr	r1, [r1, #0]
 8003428:	4313      	orrs	r3, r2
 800342a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69da      	ldr	r2, [r3, #28]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003452:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6911      	ldr	r1, [r2, #16]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68d2      	ldr	r2, [r2, #12]
 800345e:	4311      	orrs	r1, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	430b      	orrs	r3, r1
 8003466:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	000186a0 	.word	0x000186a0
 80034c0:	001e847f 	.word	0x001e847f
 80034c4:	003d08ff 	.word	0x003d08ff
 80034c8:	431bde83 	.word	0x431bde83
 80034cc:	10624dd3 	.word	0x10624dd3

080034d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	4608      	mov	r0, r1
 80034da:	4611      	mov	r1, r2
 80034dc:	461a      	mov	r2, r3
 80034de:	4603      	mov	r3, r0
 80034e0:	817b      	strh	r3, [r7, #10]
 80034e2:	460b      	mov	r3, r1
 80034e4:	813b      	strh	r3, [r7, #8]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034ea:	f7fe ffd7 	bl	800249c <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	f040 80d9 	bne.w	80036b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	2319      	movs	r3, #25
 8003504:	2201      	movs	r2, #1
 8003506:	496d      	ldr	r1, [pc, #436]	; (80036bc <HAL_I2C_Mem_Write+0x1ec>)
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fc7f 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
 8003516:	e0cc      	b.n	80036b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_I2C_Mem_Write+0x56>
 8003522:	2302      	movs	r3, #2
 8003524:	e0c5      	b.n	80036b2 <HAL_I2C_Mem_Write+0x1e2>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d007      	beq.n	800354c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800355a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2221      	movs	r2, #33	; 0x21
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2240      	movs	r2, #64	; 0x40
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a3a      	ldr	r2, [r7, #32]
 8003576:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800357c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4a4d      	ldr	r2, [pc, #308]	; (80036c0 <HAL_I2C_Mem_Write+0x1f0>)
 800358c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800358e:	88f8      	ldrh	r0, [r7, #6]
 8003590:	893a      	ldrh	r2, [r7, #8]
 8003592:	8979      	ldrh	r1, [r7, #10]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	4603      	mov	r3, r0
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fab6 	bl	8003b10 <I2C_RequestMemoryWrite>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d052      	beq.n	8003650 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e081      	b.n	80036b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fd00 	bl	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d107      	bne.n	80035d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e06b      	b.n	80036b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	781a      	ldrb	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b04      	cmp	r3, #4
 8003616:	d11b      	bne.n	8003650 <HAL_I2C_Mem_Write+0x180>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	d017      	beq.n	8003650 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1aa      	bne.n	80035ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fcec 	bl	800403a <I2C_WaitOnBTFFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00d      	beq.n	8003684 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	2b04      	cmp	r3, #4
 800366e:	d107      	bne.n	8003680 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e016      	b.n	80036b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e000      	b.n	80036b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036b0:	2302      	movs	r3, #2
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	00100002 	.word	0x00100002
 80036c0:	ffff0000 	.word	0xffff0000

080036c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08c      	sub	sp, #48	; 0x30
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	4608      	mov	r0, r1
 80036ce:	4611      	mov	r1, r2
 80036d0:	461a      	mov	r2, r3
 80036d2:	4603      	mov	r3, r0
 80036d4:	817b      	strh	r3, [r7, #10]
 80036d6:	460b      	mov	r3, r1
 80036d8:	813b      	strh	r3, [r7, #8]
 80036da:	4613      	mov	r3, r2
 80036dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036de:	f7fe fedd 	bl	800249c <HAL_GetTick>
 80036e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	f040 8208 	bne.w	8003b02 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	2319      	movs	r3, #25
 80036f8:	2201      	movs	r2, #1
 80036fa:	497b      	ldr	r1, [pc, #492]	; (80038e8 <HAL_I2C_Mem_Read+0x224>)
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fb85 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
 800370a:	e1fb      	b.n	8003b04 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_I2C_Mem_Read+0x56>
 8003716:	2302      	movs	r3, #2
 8003718:	e1f4      	b.n	8003b04 <HAL_I2C_Mem_Read+0x440>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d007      	beq.n	8003740 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800374e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2222      	movs	r2, #34	; 0x22
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2240      	movs	r2, #64	; 0x40
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003770:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4a5b      	ldr	r2, [pc, #364]	; (80038ec <HAL_I2C_Mem_Read+0x228>)
 8003780:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003782:	88f8      	ldrh	r0, [r7, #6]
 8003784:	893a      	ldrh	r2, [r7, #8]
 8003786:	8979      	ldrh	r1, [r7, #10]
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	4603      	mov	r3, r0
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fa52 	bl	8003c3c <I2C_RequestMemoryRead>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e1b0      	b.n	8003b04 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d113      	bne.n	80037d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	623b      	str	r3, [r7, #32]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	623b      	str	r3, [r7, #32]
 80037be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e184      	b.n	8003adc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d11b      	bne.n	8003812 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e164      	b.n	8003adc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003816:	2b02      	cmp	r3, #2
 8003818:	d11b      	bne.n	8003852 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003828:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003838:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383a:	2300      	movs	r3, #0
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	e144      	b.n	8003adc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003868:	e138      	b.n	8003adc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	2b03      	cmp	r3, #3
 8003870:	f200 80f1 	bhi.w	8003a56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	2b01      	cmp	r3, #1
 800387a:	d123      	bne.n	80038c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fc1b 	bl	80040bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e139      	b.n	8003b04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038c2:	e10b      	b.n	8003adc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d14e      	bne.n	800396a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d2:	2200      	movs	r2, #0
 80038d4:	4906      	ldr	r1, [pc, #24]	; (80038f0 <HAL_I2C_Mem_Read+0x22c>)
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fa98 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e10e      	b.n	8003b04 <HAL_I2C_Mem_Read+0x440>
 80038e6:	bf00      	nop
 80038e8:	00100002 	.word	0x00100002
 80038ec:	ffff0000 	.word	0xffff0000
 80038f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003968:	e0b8      	b.n	8003adc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	2200      	movs	r2, #0
 8003972:	4966      	ldr	r1, [pc, #408]	; (8003b0c <HAL_I2C_Mem_Read+0x448>)
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fa49 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0bf      	b.n	8003b04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039cc:	2200      	movs	r2, #0
 80039ce:	494f      	ldr	r1, [pc, #316]	; (8003b0c <HAL_I2C_Mem_Read+0x448>)
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 fa1b 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e091      	b.n	8003b04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a54:	e042      	b.n	8003adc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fb2e 	bl	80040bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e04c      	b.n	8003b04 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d118      	bne.n	8003adc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f47f aec2 	bne.w	800386a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
  }
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3728      	adds	r7, #40	; 0x28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	00010004 	.word	0x00010004

08003b10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	4608      	mov	r0, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	817b      	strh	r3, [r7, #10]
 8003b22:	460b      	mov	r3, r1
 8003b24:	813b      	strh	r3, [r7, #8]
 8003b26:	4613      	mov	r3, r2
 8003b28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f960 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b60:	d103      	bne.n	8003b6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e05f      	b.n	8003c2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b6e:	897b      	ldrh	r3, [r7, #10]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	492d      	ldr	r1, [pc, #180]	; (8003c38 <I2C_RequestMemoryWrite+0x128>)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f998 	bl	8003eba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e04c      	b.n	8003c2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bac:	6a39      	ldr	r1, [r7, #32]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fa02 	bl	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00d      	beq.n	8003bd6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d107      	bne.n	8003bd2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e02b      	b.n	8003c2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d105      	bne.n	8003be8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bdc:	893b      	ldrh	r3, [r7, #8]
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	611a      	str	r2, [r3, #16]
 8003be6:	e021      	b.n	8003c2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003be8:	893b      	ldrh	r3, [r7, #8]
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf8:	6a39      	ldr	r1, [r7, #32]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f9dc 	bl	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00d      	beq.n	8003c22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d107      	bne.n	8003c1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e005      	b.n	8003c2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c22:	893b      	ldrh	r3, [r7, #8]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	00010002 	.word	0x00010002

08003c3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	4608      	mov	r0, r1
 8003c46:	4611      	mov	r1, r2
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	817b      	strh	r3, [r7, #10]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	813b      	strh	r3, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f8c2 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00d      	beq.n	8003caa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c9c:	d103      	bne.n	8003ca6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e0aa      	b.n	8003e00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003caa:	897b      	ldrh	r3, [r7, #10]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	6a3a      	ldr	r2, [r7, #32]
 8003cbe:	4952      	ldr	r1, [pc, #328]	; (8003e08 <I2C_RequestMemoryRead+0x1cc>)
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f8fa 	bl	8003eba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e097      	b.n	8003e00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce8:	6a39      	ldr	r1, [r7, #32]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f964 	bl	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d107      	bne.n	8003d0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e076      	b.n	8003e00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d105      	bne.n	8003d24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d18:	893b      	ldrh	r3, [r7, #8]
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	611a      	str	r2, [r3, #16]
 8003d22:	e021      	b.n	8003d68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d24:	893b      	ldrh	r3, [r7, #8]
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d34:	6a39      	ldr	r1, [r7, #32]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f93e 	bl	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00d      	beq.n	8003d5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d107      	bne.n	8003d5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e050      	b.n	8003e00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d5e:	893b      	ldrh	r3, [r7, #8]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6a:	6a39      	ldr	r1, [r7, #32]
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f923 	bl	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00d      	beq.n	8003d94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d107      	bne.n	8003d90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e035      	b.n	8003e00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f82b 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00d      	beq.n	8003dd8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dca:	d103      	bne.n	8003dd4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e013      	b.n	8003e00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dd8:	897b      	ldrh	r3, [r7, #10]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	6a3a      	ldr	r2, [r7, #32]
 8003dec:	4906      	ldr	r1, [pc, #24]	; (8003e08 <I2C_RequestMemoryRead+0x1cc>)
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f863 	bl	8003eba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	00010002 	.word	0x00010002

08003e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e1c:	e025      	b.n	8003e6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e24:	d021      	beq.n	8003e6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fe fb39 	bl	800249c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d116      	bne.n	8003e6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f043 0220 	orr.w	r2, r3, #32
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e023      	b.n	8003eb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	0c1b      	lsrs	r3, r3, #16
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d10d      	bne.n	8003e90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf0c      	ite	eq
 8003e86:	2301      	moveq	r3, #1
 8003e88:	2300      	movne	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	e00c      	b.n	8003eaa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	43da      	mvns	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bf0c      	ite	eq
 8003ea2:	2301      	moveq	r3, #1
 8003ea4:	2300      	movne	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d0b6      	beq.n	8003e1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ec8:	e051      	b.n	8003f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed8:	d123      	bne.n	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ef2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f043 0204 	orr.w	r2, r3, #4
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e046      	b.n	8003fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f28:	d021      	beq.n	8003f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7fe fab7 	bl	800249c <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d116      	bne.n	8003f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f043 0220 	orr.w	r2, r3, #32
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e020      	b.n	8003fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d10c      	bne.n	8003f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4013      	ands	r3, r2
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf14      	ite	ne
 8003f8a:	2301      	movne	r3, #1
 8003f8c:	2300      	moveq	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	e00b      	b.n	8003faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	43da      	mvns	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf14      	ite	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	2300      	moveq	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d18d      	bne.n	8003eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc4:	e02d      	b.n	8004022 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 f8ce 	bl	8004168 <I2C_IsAcknowledgeFailed>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e02d      	b.n	8004032 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fdc:	d021      	beq.n	8004022 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fde:	f7fe fa5d 	bl	800249c <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d302      	bcc.n	8003ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d116      	bne.n	8004022 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f043 0220 	orr.w	r2, r3, #32
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e007      	b.n	8004032 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	2b80      	cmp	r3, #128	; 0x80
 800402e:	d1ca      	bne.n	8003fc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004046:	e02d      	b.n	80040a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 f88d 	bl	8004168 <I2C_IsAcknowledgeFailed>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e02d      	b.n	80040b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800405e:	d021      	beq.n	80040a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004060:	f7fe fa1c 	bl	800249c <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	429a      	cmp	r2, r3
 800406e:	d302      	bcc.n	8004076 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d116      	bne.n	80040a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e007      	b.n	80040b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d1ca      	bne.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040c8:	e042      	b.n	8004150 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d119      	bne.n	800410c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0210 	mvn.w	r2, #16
 80040e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e029      	b.n	8004160 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410c:	f7fe f9c6 	bl	800249c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	429a      	cmp	r2, r3
 800411a:	d302      	bcc.n	8004122 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d116      	bne.n	8004150 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	f043 0220 	orr.w	r2, r3, #32
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e007      	b.n	8004160 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b40      	cmp	r3, #64	; 0x40
 800415c:	d1b5      	bne.n	80040ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417e:	d11b      	bne.n	80041b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004188:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	f043 0204 	orr.w	r2, r3, #4
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e267      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d075      	beq.n	80042d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041e6:	4b88      	ldr	r3, [pc, #544]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d00c      	beq.n	800420c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f2:	4b85      	ldr	r3, [pc, #532]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d112      	bne.n	8004224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041fe:	4b82      	ldr	r3, [pc, #520]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420a:	d10b      	bne.n	8004224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420c:	4b7e      	ldr	r3, [pc, #504]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d05b      	beq.n	80042d0 <HAL_RCC_OscConfig+0x108>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d157      	bne.n	80042d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e242      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422c:	d106      	bne.n	800423c <HAL_RCC_OscConfig+0x74>
 800422e:	4b76      	ldr	r3, [pc, #472]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a75      	ldr	r2, [pc, #468]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 8004234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	e01d      	b.n	8004278 <HAL_RCC_OscConfig+0xb0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004244:	d10c      	bne.n	8004260 <HAL_RCC_OscConfig+0x98>
 8004246:	4b70      	ldr	r3, [pc, #448]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a6f      	ldr	r2, [pc, #444]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 800424c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	4b6d      	ldr	r3, [pc, #436]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a6c      	ldr	r2, [pc, #432]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 8004258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e00b      	b.n	8004278 <HAL_RCC_OscConfig+0xb0>
 8004260:	4b69      	ldr	r3, [pc, #420]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a68      	ldr	r2, [pc, #416]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 8004266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	4b66      	ldr	r3, [pc, #408]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a65      	ldr	r2, [pc, #404]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 8004272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d013      	beq.n	80042a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fe f90c 	bl	800249c <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004288:	f7fe f908 	bl	800249c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e207      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	4b5b      	ldr	r3, [pc, #364]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0xc0>
 80042a6:	e014      	b.n	80042d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7fe f8f8 	bl	800249c <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b0:	f7fe f8f4 	bl	800249c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b64      	cmp	r3, #100	; 0x64
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e1f3      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c2:	4b51      	ldr	r3, [pc, #324]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0xe8>
 80042ce:	e000      	b.n	80042d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d063      	beq.n	80043a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042de:	4b4a      	ldr	r3, [pc, #296]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ea:	4b47      	ldr	r3, [pc, #284]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d11c      	bne.n	8004330 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f6:	4b44      	ldr	r3, [pc, #272]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d116      	bne.n	8004330 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004302:	4b41      	ldr	r3, [pc, #260]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <HAL_RCC_OscConfig+0x152>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d001      	beq.n	800431a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e1c7      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431a:	4b3b      	ldr	r3, [pc, #236]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4937      	ldr	r1, [pc, #220]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 800432a:	4313      	orrs	r3, r2
 800432c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432e:	e03a      	b.n	80043a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d020      	beq.n	800437a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004338:	4b34      	ldr	r3, [pc, #208]	; (800440c <HAL_RCC_OscConfig+0x244>)
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433e:	f7fe f8ad 	bl	800249c <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004346:	f7fe f8a9 	bl	800249c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e1a8      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004358:	4b2b      	ldr	r3, [pc, #172]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004364:	4b28      	ldr	r3, [pc, #160]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4925      	ldr	r1, [pc, #148]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 8004374:	4313      	orrs	r3, r2
 8004376:	600b      	str	r3, [r1, #0]
 8004378:	e015      	b.n	80043a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437a:	4b24      	ldr	r3, [pc, #144]	; (800440c <HAL_RCC_OscConfig+0x244>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fe f88c 	bl	800249c <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004388:	f7fe f888 	bl	800249c <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e187      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439a:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d036      	beq.n	8004420 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ba:	4b15      	ldr	r3, [pc, #84]	; (8004410 <HAL_RCC_OscConfig+0x248>)
 80043bc:	2201      	movs	r2, #1
 80043be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c0:	f7fe f86c 	bl	800249c <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c8:	f7fe f868 	bl	800249c <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e167      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_OscConfig+0x240>)
 80043dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x200>
 80043e6:	e01b      	b.n	8004420 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e8:	4b09      	ldr	r3, [pc, #36]	; (8004410 <HAL_RCC_OscConfig+0x248>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ee:	f7fe f855 	bl	800249c <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f4:	e00e      	b.n	8004414 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f6:	f7fe f851 	bl	800249c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d907      	bls.n	8004414 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e150      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
 8004408:	40023800 	.word	0x40023800
 800440c:	42470000 	.word	0x42470000
 8004410:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004414:	4b88      	ldr	r3, [pc, #544]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 8004416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1ea      	bne.n	80043f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8097 	beq.w	800455c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442e:	2300      	movs	r3, #0
 8004430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004432:	4b81      	ldr	r3, [pc, #516]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10f      	bne.n	800445e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	4b7d      	ldr	r3, [pc, #500]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	4a7c      	ldr	r2, [pc, #496]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 8004448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444c:	6413      	str	r3, [r2, #64]	; 0x40
 800444e:	4b7a      	ldr	r3, [pc, #488]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004456:	60bb      	str	r3, [r7, #8]
 8004458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445a:	2301      	movs	r3, #1
 800445c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445e:	4b77      	ldr	r3, [pc, #476]	; (800463c <HAL_RCC_OscConfig+0x474>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d118      	bne.n	800449c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446a:	4b74      	ldr	r3, [pc, #464]	; (800463c <HAL_RCC_OscConfig+0x474>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a73      	ldr	r2, [pc, #460]	; (800463c <HAL_RCC_OscConfig+0x474>)
 8004470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004476:	f7fe f811 	bl	800249c <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447e:	f7fe f80d 	bl	800249c <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e10c      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004490:	4b6a      	ldr	r3, [pc, #424]	; (800463c <HAL_RCC_OscConfig+0x474>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d106      	bne.n	80044b2 <HAL_RCC_OscConfig+0x2ea>
 80044a4:	4b64      	ldr	r3, [pc, #400]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	4a63      	ldr	r2, [pc, #396]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6713      	str	r3, [r2, #112]	; 0x70
 80044b0:	e01c      	b.n	80044ec <HAL_RCC_OscConfig+0x324>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b05      	cmp	r3, #5
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x30c>
 80044ba:	4b5f      	ldr	r3, [pc, #380]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a5e      	ldr	r2, [pc, #376]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 80044c0:	f043 0304 	orr.w	r3, r3, #4
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
 80044c6:	4b5c      	ldr	r3, [pc, #368]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	4a5b      	ldr	r2, [pc, #364]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	6713      	str	r3, [r2, #112]	; 0x70
 80044d2:	e00b      	b.n	80044ec <HAL_RCC_OscConfig+0x324>
 80044d4:	4b58      	ldr	r3, [pc, #352]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	4a57      	ldr	r2, [pc, #348]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 80044da:	f023 0301 	bic.w	r3, r3, #1
 80044de:	6713      	str	r3, [r2, #112]	; 0x70
 80044e0:	4b55      	ldr	r3, [pc, #340]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	4a54      	ldr	r2, [pc, #336]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 80044e6:	f023 0304 	bic.w	r3, r3, #4
 80044ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d015      	beq.n	8004520 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fd ffd2 	bl	800249c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fa:	e00a      	b.n	8004512 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044fc:	f7fd ffce 	bl	800249c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f241 3288 	movw	r2, #5000	; 0x1388
 800450a:	4293      	cmp	r3, r2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e0cb      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004512:	4b49      	ldr	r3, [pc, #292]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0ee      	beq.n	80044fc <HAL_RCC_OscConfig+0x334>
 800451e:	e014      	b.n	800454a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004520:	f7fd ffbc 	bl	800249c <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004526:	e00a      	b.n	800453e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004528:	f7fd ffb8 	bl	800249c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f241 3288 	movw	r2, #5000	; 0x1388
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e0b5      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453e:	4b3e      	ldr	r3, [pc, #248]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1ee      	bne.n	8004528 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800454a:	7dfb      	ldrb	r3, [r7, #23]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d105      	bne.n	800455c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004550:	4b39      	ldr	r3, [pc, #228]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	4a38      	ldr	r2, [pc, #224]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 8004556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 80a1 	beq.w	80046a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004566:	4b34      	ldr	r3, [pc, #208]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
 800456e:	2b08      	cmp	r3, #8
 8004570:	d05c      	beq.n	800462c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d141      	bne.n	80045fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457a:	4b31      	ldr	r3, [pc, #196]	; (8004640 <HAL_RCC_OscConfig+0x478>)
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fd ff8c 	bl	800249c <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004588:	f7fd ff88 	bl	800249c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e087      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459a:	4b27      	ldr	r3, [pc, #156]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f0      	bne.n	8004588 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69da      	ldr	r2, [r3, #28]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	019b      	lsls	r3, r3, #6
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	085b      	lsrs	r3, r3, #1
 80045be:	3b01      	subs	r3, #1
 80045c0:	041b      	lsls	r3, r3, #16
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	061b      	lsls	r3, r3, #24
 80045ca:	491b      	ldr	r1, [pc, #108]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d0:	4b1b      	ldr	r3, [pc, #108]	; (8004640 <HAL_RCC_OscConfig+0x478>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d6:	f7fd ff61 	bl	800249c <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045de:	f7fd ff5d 	bl	800249c <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e05c      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f0:	4b11      	ldr	r3, [pc, #68]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x416>
 80045fc:	e054      	b.n	80046a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fe:	4b10      	ldr	r3, [pc, #64]	; (8004640 <HAL_RCC_OscConfig+0x478>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004604:	f7fd ff4a 	bl	800249c <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460c:	f7fd ff46 	bl	800249c <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e045      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_RCC_OscConfig+0x470>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0x444>
 800462a:	e03d      	b.n	80046a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d107      	bne.n	8004644 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e038      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
 8004638:	40023800 	.word	0x40023800
 800463c:	40007000 	.word	0x40007000
 8004640:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004644:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <HAL_RCC_OscConfig+0x4ec>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d028      	beq.n	80046a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d121      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466a:	429a      	cmp	r2, r3
 800466c:	d11a      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004674:	4013      	ands	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800467a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800467c:	4293      	cmp	r3, r2
 800467e:	d111      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	085b      	lsrs	r3, r3, #1
 800468c:	3b01      	subs	r3, #1
 800468e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d107      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40023800 	.word	0x40023800

080046b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0cc      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046cc:	4b68      	ldr	r3, [pc, #416]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d90c      	bls.n	80046f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046da:	4b65      	ldr	r3, [pc, #404]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e2:	4b63      	ldr	r3, [pc, #396]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d001      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0b8      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d020      	beq.n	8004742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800470c:	4b59      	ldr	r3, [pc, #356]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a58      	ldr	r2, [pc, #352]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004724:	4b53      	ldr	r3, [pc, #332]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a52      	ldr	r2, [pc, #328]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800472e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004730:	4b50      	ldr	r3, [pc, #320]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	494d      	ldr	r1, [pc, #308]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d044      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004756:	4b47      	ldr	r3, [pc, #284]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d119      	bne.n	8004796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e07f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d003      	beq.n	8004776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004772:	2b03      	cmp	r3, #3
 8004774:	d107      	bne.n	8004786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004776:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e06f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004786:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e067      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004796:	4b37      	ldr	r3, [pc, #220]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f023 0203 	bic.w	r2, r3, #3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4934      	ldr	r1, [pc, #208]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a8:	f7fd fe78 	bl	800249c <HAL_GetTick>
 80047ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b0:	f7fd fe74 	bl	800249c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e04f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 020c 	and.w	r2, r3, #12
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d1eb      	bne.n	80047b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d8:	4b25      	ldr	r3, [pc, #148]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d20c      	bcs.n	8004800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e6:	4b22      	ldr	r3, [pc, #136]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b20      	ldr	r3, [pc, #128]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e032      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800480c:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4916      	ldr	r1, [pc, #88]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	490e      	ldr	r1, [pc, #56]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800483e:	f000 f821 	bl	8004884 <HAL_RCC_GetSysClockFreq>
 8004842:	4602      	mov	r2, r0
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	490a      	ldr	r1, [pc, #40]	; (8004878 <HAL_RCC_ClockConfig+0x1c0>)
 8004850:	5ccb      	ldrb	r3, [r1, r3]
 8004852:	fa22 f303 	lsr.w	r3, r2, r3
 8004856:	4a09      	ldr	r2, [pc, #36]	; (800487c <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800485a:	4b09      	ldr	r3, [pc, #36]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fd fdd8 	bl	8002414 <HAL_InitTick>

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40023c00 	.word	0x40023c00
 8004874:	40023800 	.word	0x40023800
 8004878:	08017afc 	.word	0x08017afc
 800487c:	20000004 	.word	0x20000004
 8004880:	20000008 	.word	0x20000008

08004884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004888:	b094      	sub	sp, #80	; 0x50
 800488a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	647b      	str	r3, [r7, #68]	; 0x44
 8004890:	2300      	movs	r3, #0
 8004892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004894:	2300      	movs	r3, #0
 8004896:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800489c:	4b79      	ldr	r3, [pc, #484]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 030c 	and.w	r3, r3, #12
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d00d      	beq.n	80048c4 <HAL_RCC_GetSysClockFreq+0x40>
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	f200 80e1 	bhi.w	8004a70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x34>
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d003      	beq.n	80048be <HAL_RCC_GetSysClockFreq+0x3a>
 80048b6:	e0db      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b8:	4b73      	ldr	r3, [pc, #460]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x204>)
 80048ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048bc:	e0db      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048be:	4b73      	ldr	r3, [pc, #460]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x208>)
 80048c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048c2:	e0d8      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048c4:	4b6f      	ldr	r3, [pc, #444]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ce:	4b6d      	ldr	r3, [pc, #436]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d063      	beq.n	80049a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048da:	4b6a      	ldr	r3, [pc, #424]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	099b      	lsrs	r3, r3, #6
 80048e0:	2200      	movs	r2, #0
 80048e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ec:	633b      	str	r3, [r7, #48]	; 0x30
 80048ee:	2300      	movs	r3, #0
 80048f0:	637b      	str	r3, [r7, #52]	; 0x34
 80048f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048f6:	4622      	mov	r2, r4
 80048f8:	462b      	mov	r3, r5
 80048fa:	f04f 0000 	mov.w	r0, #0
 80048fe:	f04f 0100 	mov.w	r1, #0
 8004902:	0159      	lsls	r1, r3, #5
 8004904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004908:	0150      	lsls	r0, r2, #5
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	4621      	mov	r1, r4
 8004910:	1a51      	subs	r1, r2, r1
 8004912:	6139      	str	r1, [r7, #16]
 8004914:	4629      	mov	r1, r5
 8004916:	eb63 0301 	sbc.w	r3, r3, r1
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004928:	4659      	mov	r1, fp
 800492a:	018b      	lsls	r3, r1, #6
 800492c:	4651      	mov	r1, sl
 800492e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004932:	4651      	mov	r1, sl
 8004934:	018a      	lsls	r2, r1, #6
 8004936:	4651      	mov	r1, sl
 8004938:	ebb2 0801 	subs.w	r8, r2, r1
 800493c:	4659      	mov	r1, fp
 800493e:	eb63 0901 	sbc.w	r9, r3, r1
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800494e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004956:	4690      	mov	r8, r2
 8004958:	4699      	mov	r9, r3
 800495a:	4623      	mov	r3, r4
 800495c:	eb18 0303 	adds.w	r3, r8, r3
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	462b      	mov	r3, r5
 8004964:	eb49 0303 	adc.w	r3, r9, r3
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004976:	4629      	mov	r1, r5
 8004978:	024b      	lsls	r3, r1, #9
 800497a:	4621      	mov	r1, r4
 800497c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004980:	4621      	mov	r1, r4
 8004982:	024a      	lsls	r2, r1, #9
 8004984:	4610      	mov	r0, r2
 8004986:	4619      	mov	r1, r3
 8004988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498a:	2200      	movs	r2, #0
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
 800498e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004990:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004994:	f7fc f8fa 	bl	8000b8c <__aeabi_uldivmod>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4613      	mov	r3, r2
 800499e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a0:	e058      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a2:	4b38      	ldr	r3, [pc, #224]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	099b      	lsrs	r3, r3, #6
 80049a8:	2200      	movs	r2, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	4611      	mov	r1, r2
 80049ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049b2:	623b      	str	r3, [r7, #32]
 80049b4:	2300      	movs	r3, #0
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
 80049b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049bc:	4642      	mov	r2, r8
 80049be:	464b      	mov	r3, r9
 80049c0:	f04f 0000 	mov.w	r0, #0
 80049c4:	f04f 0100 	mov.w	r1, #0
 80049c8:	0159      	lsls	r1, r3, #5
 80049ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ce:	0150      	lsls	r0, r2, #5
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4641      	mov	r1, r8
 80049d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049da:	4649      	mov	r1, r9
 80049dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049f4:	ebb2 040a 	subs.w	r4, r2, sl
 80049f8:	eb63 050b 	sbc.w	r5, r3, fp
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	00eb      	lsls	r3, r5, #3
 8004a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a0a:	00e2      	lsls	r2, r4, #3
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	461d      	mov	r5, r3
 8004a10:	4643      	mov	r3, r8
 8004a12:	18e3      	adds	r3, r4, r3
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	464b      	mov	r3, r9
 8004a18:	eb45 0303 	adc.w	r3, r5, r3
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	028b      	lsls	r3, r1, #10
 8004a2e:	4621      	mov	r1, r4
 8004a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a34:	4621      	mov	r1, r4
 8004a36:	028a      	lsls	r2, r1, #10
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3e:	2200      	movs	r2, #0
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	61fa      	str	r2, [r7, #28]
 8004a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a48:	f7fc f8a0 	bl	8000b8c <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4613      	mov	r3, r2
 8004a52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	3301      	adds	r3, #1
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a6e:	e002      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3750      	adds	r7, #80	; 0x50
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800
 8004a88:	00f42400 	.word	0x00f42400
 8004a8c:	007a1200 	.word	0x007a1200

08004a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a94:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a96:	681b      	ldr	r3, [r3, #0]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000004 	.word	0x20000004

08004aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aac:	f7ff fff0 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	0a9b      	lsrs	r3, r3, #10
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4903      	ldr	r1, [pc, #12]	; (8004acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	08017b0c 	.word	0x08017b0c

08004ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ad4:	f7ff ffdc 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	0b5b      	lsrs	r3, r3, #13
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	4903      	ldr	r1, [pc, #12]	; (8004af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40023800 	.word	0x40023800
 8004af4:	08017b0c 	.word	0x08017b0c

08004af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e041      	b.n	8004b8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fd f956 	bl	8001dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4619      	mov	r1, r3
 8004b36:	4610      	mov	r0, r2
 8004b38:	f000 fac0 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e041      	b.n	8004c2c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f839 	bl	8004c34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	f000 fa71 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <HAL_TIM_PWM_Start+0x24>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	bf14      	ite	ne
 8004c64:	2301      	movne	r3, #1
 8004c66:	2300      	moveq	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	e022      	b.n	8004cb2 <HAL_TIM_PWM_Start+0x6a>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d109      	bne.n	8004c86 <HAL_TIM_PWM_Start+0x3e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	bf14      	ite	ne
 8004c7e:	2301      	movne	r3, #1
 8004c80:	2300      	moveq	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	e015      	b.n	8004cb2 <HAL_TIM_PWM_Start+0x6a>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d109      	bne.n	8004ca0 <HAL_TIM_PWM_Start+0x58>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	bf14      	ite	ne
 8004c98:	2301      	movne	r3, #1
 8004c9a:	2300      	moveq	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	e008      	b.n	8004cb2 <HAL_TIM_PWM_Start+0x6a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	bf14      	ite	ne
 8004cac:	2301      	movne	r3, #1
 8004cae:	2300      	moveq	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e068      	b.n	8004d8c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d104      	bne.n	8004cca <HAL_TIM_PWM_Start+0x82>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc8:	e013      	b.n	8004cf2 <HAL_TIM_PWM_Start+0xaa>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d104      	bne.n	8004cda <HAL_TIM_PWM_Start+0x92>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd8:	e00b      	b.n	8004cf2 <HAL_TIM_PWM_Start+0xaa>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d104      	bne.n	8004cea <HAL_TIM_PWM_Start+0xa2>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce8:	e003      	b.n	8004cf2 <HAL_TIM_PWM_Start+0xaa>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2202      	movs	r2, #2
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fc84 	bl	8005608 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a23      	ldr	r2, [pc, #140]	; (8004d94 <HAL_TIM_PWM_Start+0x14c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d107      	bne.n	8004d1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <HAL_TIM_PWM_Start+0x14c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d018      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x10e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2c:	d013      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x10e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a19      	ldr	r2, [pc, #100]	; (8004d98 <HAL_TIM_PWM_Start+0x150>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00e      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x10e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <HAL_TIM_PWM_Start+0x154>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x10e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a16      	ldr	r2, [pc, #88]	; (8004da0 <HAL_TIM_PWM_Start+0x158>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x10e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a14      	ldr	r2, [pc, #80]	; (8004da4 <HAL_TIM_PWM_Start+0x15c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d111      	bne.n	8004d7a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b06      	cmp	r3, #6
 8004d66:	d010      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d78:	e007      	b.n	8004d8a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800
 8004da0:	40000c00 	.word	0x40000c00
 8004da4:	40014000 	.word	0x40014000

08004da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e0ae      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b0c      	cmp	r3, #12
 8004dd2:	f200 809f 	bhi.w	8004f14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dd6:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004e11 	.word	0x08004e11
 8004de0:	08004f15 	.word	0x08004f15
 8004de4:	08004f15 	.word	0x08004f15
 8004de8:	08004f15 	.word	0x08004f15
 8004dec:	08004e51 	.word	0x08004e51
 8004df0:	08004f15 	.word	0x08004f15
 8004df4:	08004f15 	.word	0x08004f15
 8004df8:	08004f15 	.word	0x08004f15
 8004dfc:	08004e93 	.word	0x08004e93
 8004e00:	08004f15 	.word	0x08004f15
 8004e04:	08004f15 	.word	0x08004f15
 8004e08:	08004f15 	.word	0x08004f15
 8004e0c:	08004ed3 	.word	0x08004ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68b9      	ldr	r1, [r7, #8]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 f9d0 	bl	80051bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0208 	orr.w	r2, r2, #8
 8004e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0204 	bic.w	r2, r2, #4
 8004e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6999      	ldr	r1, [r3, #24]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	619a      	str	r2, [r3, #24]
      break;
 8004e4e:	e064      	b.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fa16 	bl	8005288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6999      	ldr	r1, [r3, #24]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	021a      	lsls	r2, r3, #8
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	619a      	str	r2, [r3, #24]
      break;
 8004e90:	e043      	b.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fa61 	bl	8005360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0208 	orr.w	r2, r2, #8
 8004eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0204 	bic.w	r2, r2, #4
 8004ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69d9      	ldr	r1, [r3, #28]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	61da      	str	r2, [r3, #28]
      break;
 8004ed0:	e023      	b.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 faab 	bl	8005434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69d9      	ldr	r1, [r3, #28]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	021a      	lsls	r2, r3, #8
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	61da      	str	r2, [r3, #28]
      break;
 8004f12:	e002      	b.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	75fb      	strb	r3, [r7, #23]
      break;
 8004f18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIM_ConfigClockSource+0x1c>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e0b4      	b.n	80050b2 <HAL_TIM_ConfigClockSource+0x186>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f80:	d03e      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0xd4>
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f86:	f200 8087 	bhi.w	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8e:	f000 8086 	beq.w	800509e <HAL_TIM_ConfigClockSource+0x172>
 8004f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f96:	d87f      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b70      	cmp	r3, #112	; 0x70
 8004f9a:	d01a      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0xa6>
 8004f9c:	2b70      	cmp	r3, #112	; 0x70
 8004f9e:	d87b      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b60      	cmp	r3, #96	; 0x60
 8004fa2:	d050      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x11a>
 8004fa4:	2b60      	cmp	r3, #96	; 0x60
 8004fa6:	d877      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b50      	cmp	r3, #80	; 0x50
 8004faa:	d03c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0xfa>
 8004fac:	2b50      	cmp	r3, #80	; 0x50
 8004fae:	d873      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b40      	cmp	r3, #64	; 0x40
 8004fb2:	d058      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x13a>
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d86f      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb8:	2b30      	cmp	r3, #48	; 0x30
 8004fba:	d064      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15a>
 8004fbc:	2b30      	cmp	r3, #48	; 0x30
 8004fbe:	d86b      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d060      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15a>
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d867      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d05c      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15a>
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d05a      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15a>
 8004fd0:	e062      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6899      	ldr	r1, [r3, #8]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f000 faf1 	bl	80055c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	609a      	str	r2, [r3, #8]
      break;
 8004ffe:	e04f      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6899      	ldr	r1, [r3, #8]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f000 fada 	bl	80055c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005022:	609a      	str	r2, [r3, #8]
      break;
 8005024:	e03c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6859      	ldr	r1, [r3, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	461a      	mov	r2, r3
 8005034:	f000 fa4e 	bl	80054d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2150      	movs	r1, #80	; 0x50
 800503e:	4618      	mov	r0, r3
 8005040:	f000 faa7 	bl	8005592 <TIM_ITRx_SetConfig>
      break;
 8005044:	e02c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	461a      	mov	r2, r3
 8005054:	f000 fa6d 	bl	8005532 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2160      	movs	r1, #96	; 0x60
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fa97 	bl	8005592 <TIM_ITRx_SetConfig>
      break;
 8005064:	e01c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	461a      	mov	r2, r3
 8005074:	f000 fa2e 	bl	80054d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2140      	movs	r1, #64	; 0x40
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fa87 	bl	8005592 <TIM_ITRx_SetConfig>
      break;
 8005084:	e00c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f000 fa7e 	bl	8005592 <TIM_ITRx_SetConfig>
      break;
 8005096:	e003      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
      break;
 800509c:	e000      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800509e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a34      	ldr	r2, [pc, #208]	; (80051a0 <TIM_Base_SetConfig+0xe4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00f      	beq.n	80050f4 <TIM_Base_SetConfig+0x38>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d00b      	beq.n	80050f4 <TIM_Base_SetConfig+0x38>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a31      	ldr	r2, [pc, #196]	; (80051a4 <TIM_Base_SetConfig+0xe8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d007      	beq.n	80050f4 <TIM_Base_SetConfig+0x38>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a30      	ldr	r2, [pc, #192]	; (80051a8 <TIM_Base_SetConfig+0xec>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_Base_SetConfig+0x38>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a2f      	ldr	r2, [pc, #188]	; (80051ac <TIM_Base_SetConfig+0xf0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d108      	bne.n	8005106 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a25      	ldr	r2, [pc, #148]	; (80051a0 <TIM_Base_SetConfig+0xe4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01b      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005114:	d017      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a22      	ldr	r2, [pc, #136]	; (80051a4 <TIM_Base_SetConfig+0xe8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a21      	ldr	r2, [pc, #132]	; (80051a8 <TIM_Base_SetConfig+0xec>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00f      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a20      	ldr	r2, [pc, #128]	; (80051ac <TIM_Base_SetConfig+0xf0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00b      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <TIM_Base_SetConfig+0xf4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d007      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <TIM_Base_SetConfig+0xf8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <TIM_Base_SetConfig+0xfc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d108      	bne.n	8005158 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a08      	ldr	r2, [pc, #32]	; (80051a0 <TIM_Base_SetConfig+0xe4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d103      	bne.n	800518c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	615a      	str	r2, [r3, #20]
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40000800 	.word	0x40000800
 80051ac:	40000c00 	.word	0x40000c00
 80051b0:	40014000 	.word	0x40014000
 80051b4:	40014400 	.word	0x40014400
 80051b8:	40014800 	.word	0x40014800

080051bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f023 0201 	bic.w	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0303 	bic.w	r3, r3, #3
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f023 0302 	bic.w	r3, r3, #2
 8005204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a1c      	ldr	r2, [pc, #112]	; (8005284 <TIM_OC1_SetConfig+0xc8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d10c      	bne.n	8005232 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f023 0308 	bic.w	r3, r3, #8
 800521e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f023 0304 	bic.w	r3, r3, #4
 8005230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a13      	ldr	r2, [pc, #76]	; (8005284 <TIM_OC1_SetConfig+0xc8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d111      	bne.n	800525e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	621a      	str	r2, [r3, #32]
}
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	40010000 	.word	0x40010000

08005288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f023 0210 	bic.w	r2, r3, #16
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f023 0320 	bic.w	r3, r3, #32
 80052d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a1e      	ldr	r2, [pc, #120]	; (800535c <TIM_OC2_SetConfig+0xd4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d10d      	bne.n	8005304 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a15      	ldr	r2, [pc, #84]	; (800535c <TIM_OC2_SetConfig+0xd4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d113      	bne.n	8005334 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800531a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40010000 	.word	0x40010000

08005360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1d      	ldr	r2, [pc, #116]	; (8005430 <TIM_OC3_SetConfig+0xd0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d10d      	bne.n	80053da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a14      	ldr	r2, [pc, #80]	; (8005430 <TIM_OC3_SetConfig+0xd0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d113      	bne.n	800540a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	621a      	str	r2, [r3, #32]
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	40010000 	.word	0x40010000

08005434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800546a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4313      	orrs	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800547e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	031b      	lsls	r3, r3, #12
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a10      	ldr	r2, [pc, #64]	; (80054d0 <TIM_OC4_SetConfig+0x9c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d109      	bne.n	80054a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800549a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	019b      	lsls	r3, r3, #6
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40010000 	.word	0x40010000

080054d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f023 0201 	bic.w	r2, r3, #1
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f023 030a 	bic.w	r3, r3, #10
 8005510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	621a      	str	r2, [r3, #32]
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005532:	b480      	push	{r7}
 8005534:	b087      	sub	sp, #28
 8005536:	af00      	add	r7, sp, #0
 8005538:	60f8      	str	r0, [r7, #12]
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f023 0210 	bic.w	r2, r3, #16
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800555c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	031b      	lsls	r3, r3, #12
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800556e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	621a      	str	r2, [r3, #32]
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005592:	b480      	push	{r7}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f043 0307 	orr.w	r3, r3, #7
 80055b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	609a      	str	r2, [r3, #8]
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	021a      	lsls	r2, r3, #8
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	609a      	str	r2, [r3, #8]
}
 80055fc:	bf00      	nop
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	2201      	movs	r2, #1
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a1a      	ldr	r2, [r3, #32]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	43db      	mvns	r3, r3
 800562a:	401a      	ands	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a1a      	ldr	r2, [r3, #32]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	fa01 f303 	lsl.w	r3, r1, r3
 8005640:	431a      	orrs	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	621a      	str	r2, [r3, #32]
}
 8005646:	bf00      	nop
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005668:	2302      	movs	r3, #2
 800566a:	e050      	b.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1c      	ldr	r2, [pc, #112]	; (800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d018      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b8:	d013      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a18      	ldr	r2, [pc, #96]	; (8005720 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a16      	ldr	r2, [pc, #88]	; (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a15      	ldr	r2, [pc, #84]	; (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a13      	ldr	r2, [pc, #76]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10c      	bne.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40010000 	.word	0x40010000
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40000c00 	.word	0x40000c00
 800572c:	40014000 	.word	0x40014000

08005730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e03f      	b.n	80057c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fc fb92 	bl	8001e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2224      	movs	r2, #36	; 0x24
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 ffd7 	bl	8006728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695a      	ldr	r2, [r3, #20]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08c      	sub	sp, #48	; 0x30
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d165      	bne.n	80058b2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_UART_Transmit_DMA+0x26>
 80057ec:	88fb      	ldrh	r3, [r7, #6]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e05e      	b.n	80058b4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_UART_Transmit_DMA+0x38>
 8005800:	2302      	movs	r3, #2
 8005802:	e057      	b.n	80058b4 <HAL_UART_Transmit_DMA+0xe8>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	88fa      	ldrh	r2, [r7, #6]
 8005816:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2221      	movs	r2, #33	; 0x21
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005830:	4a22      	ldr	r2, [pc, #136]	; (80058bc <HAL_UART_Transmit_DMA+0xf0>)
 8005832:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005838:	4a21      	ldr	r2, [pc, #132]	; (80058c0 <HAL_UART_Transmit_DMA+0xf4>)
 800583a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005840:	4a20      	ldr	r2, [pc, #128]	; (80058c4 <HAL_UART_Transmit_DMA+0xf8>)
 8005842:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005848:	2200      	movs	r2, #0
 800584a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800584c:	f107 0308 	add.w	r3, r7, #8
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3304      	adds	r3, #4
 8005860:	461a      	mov	r2, r3
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	f7fc ffe6 	bl	8002834 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005870:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3314      	adds	r3, #20
 8005880:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	617b      	str	r3, [r7, #20]
   return(result);
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3314      	adds	r3, #20
 8005898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800589a:	627a      	str	r2, [r7, #36]	; 0x24
 800589c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	6a39      	ldr	r1, [r7, #32]
 80058a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e5      	bne.n	800587a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e000      	b.n	80058b4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
  }
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3730      	adds	r7, #48	; 0x30
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	08005fc1 	.word	0x08005fc1
 80058c0:	0800605b 	.word	0x0800605b
 80058c4:	080061d3 	.word	0x080061d3

080058c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	4613      	mov	r3, r2
 80058d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b20      	cmp	r3, #32
 80058e0:	d11d      	bne.n	800591e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <HAL_UART_Receive_DMA+0x26>
 80058e8:	88fb      	ldrh	r3, [r7, #6]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e016      	b.n	8005920 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_UART_Receive_DMA+0x38>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e00f      	b.n	8005920 <HAL_UART_Receive_DMA+0x58>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	461a      	mov	r2, r3
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 fca7 	bl	8006268 <UART_Start_Receive_DMA>
 800591a:	4603      	mov	r3, r0
 800591c:	e000      	b.n	8005920 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800591e:	2302      	movs	r3, #2
  }
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b090      	sub	sp, #64	; 0x40
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005930:	2300      	movs	r3, #0
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593e:	2b80      	cmp	r3, #128	; 0x80
 8005940:	bf0c      	ite	eq
 8005942:	2301      	moveq	r3, #1
 8005944:	2300      	movne	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b21      	cmp	r3, #33	; 0x21
 8005954:	d128      	bne.n	80059a8 <HAL_UART_DMAStop+0x80>
 8005956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d025      	beq.n	80059a8 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3314      	adds	r3, #20
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	623b      	str	r3, [r7, #32]
   return(result);
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005972:	63bb      	str	r3, [r7, #56]	; 0x38
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3314      	adds	r3, #20
 800597a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800597c:	633a      	str	r2, [r7, #48]	; 0x30
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e5      	bne.n	800595c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599c:	4618      	mov	r0, r3
 800599e:	f7fc ffa1 	bl	80028e4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fcfe 	bl	80063a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	bf0c      	ite	eq
 80059b6:	2301      	moveq	r3, #1
 80059b8:	2300      	movne	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b22      	cmp	r3, #34	; 0x22
 80059c8:	d128      	bne.n	8005a1c <HAL_UART_DMAStop+0xf4>
 80059ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d025      	beq.n	8005a1c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3314      	adds	r3, #20
 80059d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	60fb      	str	r3, [r7, #12]
   return(result);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3314      	adds	r3, #20
 80059ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059f0:	61fa      	str	r2, [r7, #28]
 80059f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	69b9      	ldr	r1, [r7, #24]
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	617b      	str	r3, [r7, #20]
   return(result);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e5      	bne.n	80059d0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fc ff67 	bl	80028e4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fcec 	bl	80063f4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3740      	adds	r7, #64	; 0x40
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b0ba      	sub	sp, #232	; 0xe8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10f      	bne.n	8005a8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d009      	beq.n	8005a8e <HAL_UART_IRQHandler+0x66>
 8005a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fd93 	bl	80065b2 <UART_Receive_IT>
      return;
 8005a8c:	e256      	b.n	8005f3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 80de 	beq.w	8005c54 <HAL_UART_IRQHandler+0x22c>
 8005a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d106      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aa8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 80d1 	beq.w	8005c54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xae>
 8005abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f043 0201 	orr.w	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00b      	beq.n	8005afa <HAL_UART_IRQHandler+0xd2>
 8005ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f043 0202 	orr.w	r2, r3, #2
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <HAL_UART_IRQHandler+0xf6>
 8005b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d005      	beq.n	8005b1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	f043 0204 	orr.w	r2, r3, #4
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d011      	beq.n	8005b4e <HAL_UART_IRQHandler+0x126>
 8005b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d105      	bne.n	8005b42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f043 0208 	orr.w	r2, r3, #8
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 81ed 	beq.w	8005f32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_UART_IRQHandler+0x14e>
 8005b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fd1e 	bl	80065b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b40      	cmp	r3, #64	; 0x40
 8005b82:	bf0c      	ite	eq
 8005b84:	2301      	moveq	r3, #1
 8005b86:	2300      	movne	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x17a>
 8005b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d04f      	beq.n	8005c42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fc26 	bl	80063f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d141      	bne.n	8005c3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3314      	adds	r3, #20
 8005bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3314      	adds	r3, #20
 8005bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005be2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1d9      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d013      	beq.n	8005c32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	4a7d      	ldr	r2, [pc, #500]	; (8005e04 <HAL_UART_IRQHandler+0x3dc>)
 8005c10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fc fed4 	bl	80029c4 <HAL_DMA_Abort_IT>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d016      	beq.n	8005c50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	e00e      	b.n	8005c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f9ae 	bl	8005f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c38:	e00a      	b.n	8005c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f9aa 	bl	8005f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	e006      	b.n	8005c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f9a6 	bl	8005f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c4e:	e170      	b.n	8005f32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c50:	bf00      	nop
    return;
 8005c52:	e16e      	b.n	8005f32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	f040 814a 	bne.w	8005ef2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8143 	beq.w	8005ef2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 813c 	beq.w	8005ef2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	f040 80b4 	bne.w	8005e08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8140 	beq.w	8005f36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	f080 8139 	bcs.w	8005f36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd6:	f000 8088 	beq.w	8005dea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1d9      	bne.n	8005cda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3314      	adds	r3, #20
 8005d2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d38:	f023 0301 	bic.w	r3, r3, #1
 8005d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3314      	adds	r3, #20
 8005d46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e1      	bne.n	8005d26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3314      	adds	r3, #20
 8005d68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3314      	adds	r3, #20
 8005d82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e3      	bne.n	8005d62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dba:	f023 0310 	bic.w	r3, r3, #16
 8005dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005dcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005dce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e3      	bne.n	8005da8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fc fd7d 	bl	80028e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f8d4 	bl	8005fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e00:	e099      	b.n	8005f36 <HAL_UART_IRQHandler+0x50e>
 8005e02:	bf00      	nop
 8005e04:	080064bb 	.word	0x080064bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 808b 	beq.w	8005f3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8086 	beq.w	8005f3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e52:	647a      	str	r2, [r7, #68]	; 0x44
 8005e54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e3      	bne.n	8005e2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3314      	adds	r3, #20
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	623b      	str	r3, [r7, #32]
   return(result);
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3314      	adds	r3, #20
 8005e86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e8a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e3      	bne.n	8005e66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0310 	bic.w	r3, r3, #16
 8005ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	330c      	adds	r3, #12
 8005ecc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ed0:	61fa      	str	r2, [r7, #28]
 8005ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	69b9      	ldr	r1, [r7, #24]
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e3      	bne.n	8005eac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ee4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f85c 	bl	8005fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ef0:	e023      	b.n	8005f3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d009      	beq.n	8005f12 <HAL_UART_IRQHandler+0x4ea>
 8005efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fae9 	bl	80064e2 <UART_Transmit_IT>
    return;
 8005f10:	e014      	b.n	8005f3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00e      	beq.n	8005f3c <HAL_UART_IRQHandler+0x514>
 8005f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d008      	beq.n	8005f3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fb29 	bl	8006582 <UART_EndTransmit_IT>
    return;
 8005f30:	e004      	b.n	8005f3c <HAL_UART_IRQHandler+0x514>
    return;
 8005f32:	bf00      	nop
 8005f34:	e002      	b.n	8005f3c <HAL_UART_IRQHandler+0x514>
      return;
 8005f36:	bf00      	nop
 8005f38:	e000      	b.n	8005f3c <HAL_UART_IRQHandler+0x514>
      return;
 8005f3a:	bf00      	nop
  }
}
 8005f3c:	37e8      	adds	r7, #232	; 0xe8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop

08005f44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b090      	sub	sp, #64	; 0x40
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d137      	bne.n	800604c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fde:	2200      	movs	r2, #0
 8005fe0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3314      	adds	r3, #20
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3314      	adds	r3, #20
 8006000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006002:	633a      	str	r2, [r7, #48]	; 0x30
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e5      	bne.n	8005fe2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	330c      	adds	r3, #12
 800601c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	60fb      	str	r3, [r7, #12]
   return(result);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
 800602e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006036:	61fa      	str	r2, [r7, #28]
 8006038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	69b9      	ldr	r1, [r7, #24]
 800603c:	69fa      	ldr	r2, [r7, #28]
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	617b      	str	r3, [r7, #20]
   return(result);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e5      	bne.n	8006016 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800604a:	e002      	b.n	8006052 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800604c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800604e:	f7ff ff79 	bl	8005f44 <HAL_UART_TxCpltCallback>
}
 8006052:	bf00      	nop
 8006054:	3740      	adds	r7, #64	; 0x40
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7ff ff75 	bl	8005f58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b09c      	sub	sp, #112	; 0x70
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608e:	2b00      	cmp	r3, #0
 8006090:	d172      	bne.n	8006178 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006094:	2200      	movs	r2, #0
 8006096:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	330c      	adds	r3, #12
 800609e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80060b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80060ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e5      	bne.n	8006098 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3314      	adds	r3, #20
 80060d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060de:	f023 0301 	bic.w	r3, r3, #1
 80060e2:	667b      	str	r3, [r7, #100]	; 0x64
 80060e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3314      	adds	r3, #20
 80060ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80060ec:	647a      	str	r2, [r7, #68]	; 0x44
 80060ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e5      	bne.n	80060cc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3314      	adds	r3, #20
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	623b      	str	r3, [r7, #32]
   return(result);
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006116:	663b      	str	r3, [r7, #96]	; 0x60
 8006118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3314      	adds	r3, #20
 800611e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006120:	633a      	str	r2, [r7, #48]	; 0x30
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e5      	bne.n	8006100 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006136:	2220      	movs	r2, #32
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800613c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	2b01      	cmp	r3, #1
 8006142:	d119      	bne.n	8006178 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	60fb      	str	r3, [r7, #12]
   return(result);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0310 	bic.w	r3, r3, #16
 800615a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800615c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006164:	61fa      	str	r2, [r7, #28]
 8006166:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	69b9      	ldr	r1, [r7, #24]
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	617b      	str	r3, [r7, #20]
   return(result);
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e5      	bne.n	8006144 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	2b01      	cmp	r3, #1
 800617e:	d106      	bne.n	800618e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006182:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006184:	4619      	mov	r1, r3
 8006186:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006188:	f7ff ff0e 	bl	8005fa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800618c:	e002      	b.n	8006194 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800618e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006190:	f7ff feec 	bl	8005f6c <HAL_UART_RxCpltCallback>
}
 8006194:	bf00      	nop
 8006196:	3770      	adds	r7, #112	; 0x70
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d108      	bne.n	80061c4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061b6:	085b      	lsrs	r3, r3, #1
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	4619      	mov	r1, r3
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff fef3 	bl	8005fa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061c2:	e002      	b.n	80061ca <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff fedb 	bl	8005f80 <HAL_UART_RxHalfCpltCallback>
}
 80061ca:	bf00      	nop
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ee:	2b80      	cmp	r3, #128	; 0x80
 80061f0:	bf0c      	ite	eq
 80061f2:	2301      	moveq	r3, #1
 80061f4:	2300      	movne	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b21      	cmp	r3, #33	; 0x21
 8006204:	d108      	bne.n	8006218 <UART_DMAError+0x46>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2200      	movs	r2, #0
 8006210:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006212:	68b8      	ldr	r0, [r7, #8]
 8006214:	f000 f8c6 	bl	80063a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006222:	2b40      	cmp	r3, #64	; 0x40
 8006224:	bf0c      	ite	eq
 8006226:	2301      	moveq	r3, #1
 8006228:	2300      	movne	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b22      	cmp	r3, #34	; 0x22
 8006238:	d108      	bne.n	800624c <UART_DMAError+0x7a>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2200      	movs	r2, #0
 8006244:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006246:	68b8      	ldr	r0, [r7, #8]
 8006248:	f000 f8d4 	bl	80063f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	f043 0210 	orr.w	r2, r3, #16
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006258:	68b8      	ldr	r0, [r7, #8]
 800625a:	f7ff fe9b 	bl	8005f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800625e:	bf00      	nop
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b098      	sub	sp, #96	; 0x60
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	4613      	mov	r3, r2
 8006274:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	88fa      	ldrh	r2, [r7, #6]
 8006280:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2222      	movs	r2, #34	; 0x22
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	4a40      	ldr	r2, [pc, #256]	; (8006398 <UART_Start_Receive_DMA+0x130>)
 8006296:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	4a3f      	ldr	r2, [pc, #252]	; (800639c <UART_Start_Receive_DMA+0x134>)
 800629e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	4a3e      	ldr	r2, [pc, #248]	; (80063a0 <UART_Start_Receive_DMA+0x138>)
 80062a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	2200      	movs	r2, #0
 80062ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80062b0:	f107 0308 	add.w	r3, r7, #8
 80062b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3304      	adds	r3, #4
 80062c0:	4619      	mov	r1, r3
 80062c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	f7fc fab4 	bl	8002834 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80062cc:	2300      	movs	r3, #0
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d019      	beq.n	8006326 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	330c      	adds	r3, #12
 80062f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006308:	65bb      	str	r3, [r7, #88]	; 0x58
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006312:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006314:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e5      	bne.n	80062f2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3314      	adds	r3, #20
 800632c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	657b      	str	r3, [r7, #84]	; 0x54
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3314      	adds	r3, #20
 8006344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006346:	63ba      	str	r2, [r7, #56]	; 0x38
 8006348:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800634c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e5      	bne.n	8006326 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3314      	adds	r3, #20
 8006360:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	617b      	str	r3, [r7, #20]
   return(result);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006370:	653b      	str	r3, [r7, #80]	; 0x50
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3314      	adds	r3, #20
 8006378:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800637a:	627a      	str	r2, [r7, #36]	; 0x24
 800637c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	6a39      	ldr	r1, [r7, #32]
 8006380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	61fb      	str	r3, [r7, #28]
   return(result);
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e5      	bne.n	800635a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3760      	adds	r7, #96	; 0x60
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	08006077 	.word	0x08006077
 800639c:	0800619d 	.word	0x0800619d
 80063a0:	080061d3 	.word	0x080061d3

080063a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b089      	sub	sp, #36	; 0x24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	330c      	adds	r3, #12
 80063b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	e853 3f00 	ldrex	r3, [r3]
 80063ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	330c      	adds	r3, #12
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	61ba      	str	r2, [r7, #24]
 80063ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6979      	ldr	r1, [r7, #20]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	613b      	str	r3, [r7, #16]
   return(result);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e5      	bne.n	80063ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80063e8:	bf00      	nop
 80063ea:	3724      	adds	r7, #36	; 0x24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b095      	sub	sp, #84	; 0x54
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	330c      	adds	r3, #12
 8006402:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	330c      	adds	r3, #12
 800641a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800641c:	643a      	str	r2, [r7, #64]	; 0x40
 800641e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e5      	bne.n	80063fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3314      	adds	r3, #20
 8006436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f023 0301 	bic.w	r3, r3, #1
 8006446:	64bb      	str	r3, [r7, #72]	; 0x48
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3314      	adds	r3, #20
 800644e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e5      	bne.n	8006430 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	2b01      	cmp	r3, #1
 800646a:	d119      	bne.n	80064a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	330c      	adds	r3, #12
 8006472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	60bb      	str	r3, [r7, #8]
   return(result);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f023 0310 	bic.w	r3, r3, #16
 8006482:	647b      	str	r3, [r7, #68]	; 0x44
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800648c:	61ba      	str	r2, [r7, #24]
 800648e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6979      	ldr	r1, [r7, #20]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	613b      	str	r3, [r7, #16]
   return(result);
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e5      	bne.n	800646c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064ae:	bf00      	nop
 80064b0:	3754      	adds	r7, #84	; 0x54
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff fd5d 	bl	8005f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064da:	bf00      	nop
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b21      	cmp	r3, #33	; 0x21
 80064f4:	d13e      	bne.n	8006574 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fe:	d114      	bne.n	800652a <UART_Transmit_IT+0x48>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d110      	bne.n	800652a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800651c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	1c9a      	adds	r2, r3, #2
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	621a      	str	r2, [r3, #32]
 8006528:	e008      	b.n	800653c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	1c59      	adds	r1, r3, #1
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6211      	str	r1, [r2, #32]
 8006534:	781a      	ldrb	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b29b      	uxth	r3, r3
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	4619      	mov	r1, r3
 800654a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10f      	bne.n	8006570 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800655e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800656e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	e000      	b.n	8006576 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006574:	2302      	movs	r3, #2
  }
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006598:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7ff fcce 	bl	8005f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b08c      	sub	sp, #48	; 0x30
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b22      	cmp	r3, #34	; 0x22
 80065c4:	f040 80ab 	bne.w	800671e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d0:	d117      	bne.n	8006602 <UART_Receive_IT+0x50>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d113      	bne.n	8006602 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	1c9a      	adds	r2, r3, #2
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	629a      	str	r2, [r3, #40]	; 0x28
 8006600:	e026      	b.n	8006650 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006608:	2300      	movs	r3, #0
 800660a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006614:	d007      	beq.n	8006626 <UART_Receive_IT+0x74>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <UART_Receive_IT+0x82>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	b2da      	uxtb	r2, r3
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	e008      	b.n	8006646 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	b2db      	uxtb	r3, r3
 800663c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006640:	b2da      	uxtb	r2, r3
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006654:	b29b      	uxth	r3, r3
 8006656:	3b01      	subs	r3, #1
 8006658:	b29b      	uxth	r3, r3
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	4619      	mov	r1, r3
 800665e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006660:	2b00      	cmp	r3, #0
 8006662:	d15a      	bne.n	800671a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0220 	bic.w	r2, r2, #32
 8006672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006682:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695a      	ldr	r2, [r3, #20]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0201 	bic.w	r2, r2, #1
 8006692:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d135      	bne.n	8006710 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	330c      	adds	r3, #12
 80066b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	613b      	str	r3, [r7, #16]
   return(result);
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f023 0310 	bic.w	r3, r3, #16
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	330c      	adds	r3, #12
 80066c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ca:	623a      	str	r2, [r7, #32]
 80066cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	69f9      	ldr	r1, [r7, #28]
 80066d0:	6a3a      	ldr	r2, [r7, #32]
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e5      	bne.n	80066aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0310 	and.w	r3, r3, #16
 80066e8:	2b10      	cmp	r3, #16
 80066ea:	d10a      	bne.n	8006702 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff fc4d 	bl	8005fa8 <HAL_UARTEx_RxEventCallback>
 800670e:	e002      	b.n	8006716 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff fc2b 	bl	8005f6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e002      	b.n	8006720 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	e000      	b.n	8006720 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800671e:	2302      	movs	r3, #2
  }
}
 8006720:	4618      	mov	r0, r3
 8006722:	3730      	adds	r7, #48	; 0x30
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800672c:	b0c0      	sub	sp, #256	; 0x100
 800672e:	af00      	add	r7, sp, #0
 8006730:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006744:	68d9      	ldr	r1, [r3, #12]
 8006746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	ea40 0301 	orr.w	r3, r0, r1
 8006750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	431a      	orrs	r2, r3
 8006760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	431a      	orrs	r2, r3
 8006768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006780:	f021 010c 	bic.w	r1, r1, #12
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800678e:	430b      	orrs	r3, r1
 8006790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800679e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a2:	6999      	ldr	r1, [r3, #24]
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	ea40 0301 	orr.w	r3, r0, r1
 80067ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4b8f      	ldr	r3, [pc, #572]	; (80069f4 <UART_SetConfig+0x2cc>)
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d005      	beq.n	80067c8 <UART_SetConfig+0xa0>
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b8d      	ldr	r3, [pc, #564]	; (80069f8 <UART_SetConfig+0x2d0>)
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d104      	bne.n	80067d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067c8:	f7fe f982 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 80067cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80067d0:	e003      	b.n	80067da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067d2:	f7fe f969 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 80067d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e4:	f040 810c 	bne.w	8006a00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80067f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80067fa:	4622      	mov	r2, r4
 80067fc:	462b      	mov	r3, r5
 80067fe:	1891      	adds	r1, r2, r2
 8006800:	65b9      	str	r1, [r7, #88]	; 0x58
 8006802:	415b      	adcs	r3, r3
 8006804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800680a:	4621      	mov	r1, r4
 800680c:	eb12 0801 	adds.w	r8, r2, r1
 8006810:	4629      	mov	r1, r5
 8006812:	eb43 0901 	adc.w	r9, r3, r1
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	f04f 0300 	mov.w	r3, #0
 800681e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800682a:	4690      	mov	r8, r2
 800682c:	4699      	mov	r9, r3
 800682e:	4623      	mov	r3, r4
 8006830:	eb18 0303 	adds.w	r3, r8, r3
 8006834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006838:	462b      	mov	r3, r5
 800683a:	eb49 0303 	adc.w	r3, r9, r3
 800683e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800684e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006856:	460b      	mov	r3, r1
 8006858:	18db      	adds	r3, r3, r3
 800685a:	653b      	str	r3, [r7, #80]	; 0x50
 800685c:	4613      	mov	r3, r2
 800685e:	eb42 0303 	adc.w	r3, r2, r3
 8006862:	657b      	str	r3, [r7, #84]	; 0x54
 8006864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800686c:	f7fa f98e 	bl	8000b8c <__aeabi_uldivmod>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	4b61      	ldr	r3, [pc, #388]	; (80069fc <UART_SetConfig+0x2d4>)
 8006876:	fba3 2302 	umull	r2, r3, r3, r2
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	011c      	lsls	r4, r3, #4
 800687e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006882:	2200      	movs	r2, #0
 8006884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006888:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800688c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006890:	4642      	mov	r2, r8
 8006892:	464b      	mov	r3, r9
 8006894:	1891      	adds	r1, r2, r2
 8006896:	64b9      	str	r1, [r7, #72]	; 0x48
 8006898:	415b      	adcs	r3, r3
 800689a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800689c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068a0:	4641      	mov	r1, r8
 80068a2:	eb12 0a01 	adds.w	sl, r2, r1
 80068a6:	4649      	mov	r1, r9
 80068a8:	eb43 0b01 	adc.w	fp, r3, r1
 80068ac:	f04f 0200 	mov.w	r2, #0
 80068b0:	f04f 0300 	mov.w	r3, #0
 80068b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068c0:	4692      	mov	sl, r2
 80068c2:	469b      	mov	fp, r3
 80068c4:	4643      	mov	r3, r8
 80068c6:	eb1a 0303 	adds.w	r3, sl, r3
 80068ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068ce:	464b      	mov	r3, r9
 80068d0:	eb4b 0303 	adc.w	r3, fp, r3
 80068d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80068e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80068ec:	460b      	mov	r3, r1
 80068ee:	18db      	adds	r3, r3, r3
 80068f0:	643b      	str	r3, [r7, #64]	; 0x40
 80068f2:	4613      	mov	r3, r2
 80068f4:	eb42 0303 	adc.w	r3, r2, r3
 80068f8:	647b      	str	r3, [r7, #68]	; 0x44
 80068fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80068fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006902:	f7fa f943 	bl	8000b8c <__aeabi_uldivmod>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4611      	mov	r1, r2
 800690c:	4b3b      	ldr	r3, [pc, #236]	; (80069fc <UART_SetConfig+0x2d4>)
 800690e:	fba3 2301 	umull	r2, r3, r3, r1
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	2264      	movs	r2, #100	; 0x64
 8006916:	fb02 f303 	mul.w	r3, r2, r3
 800691a:	1acb      	subs	r3, r1, r3
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006922:	4b36      	ldr	r3, [pc, #216]	; (80069fc <UART_SetConfig+0x2d4>)
 8006924:	fba3 2302 	umull	r2, r3, r3, r2
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006930:	441c      	add	r4, r3
 8006932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006936:	2200      	movs	r2, #0
 8006938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800693c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006944:	4642      	mov	r2, r8
 8006946:	464b      	mov	r3, r9
 8006948:	1891      	adds	r1, r2, r2
 800694a:	63b9      	str	r1, [r7, #56]	; 0x38
 800694c:	415b      	adcs	r3, r3
 800694e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006954:	4641      	mov	r1, r8
 8006956:	1851      	adds	r1, r2, r1
 8006958:	6339      	str	r1, [r7, #48]	; 0x30
 800695a:	4649      	mov	r1, r9
 800695c:	414b      	adcs	r3, r1
 800695e:	637b      	str	r3, [r7, #52]	; 0x34
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800696c:	4659      	mov	r1, fp
 800696e:	00cb      	lsls	r3, r1, #3
 8006970:	4651      	mov	r1, sl
 8006972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006976:	4651      	mov	r1, sl
 8006978:	00ca      	lsls	r2, r1, #3
 800697a:	4610      	mov	r0, r2
 800697c:	4619      	mov	r1, r3
 800697e:	4603      	mov	r3, r0
 8006980:	4642      	mov	r2, r8
 8006982:	189b      	adds	r3, r3, r2
 8006984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006988:	464b      	mov	r3, r9
 800698a:	460a      	mov	r2, r1
 800698c:	eb42 0303 	adc.w	r3, r2, r3
 8006990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069a8:	460b      	mov	r3, r1
 80069aa:	18db      	adds	r3, r3, r3
 80069ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ae:	4613      	mov	r3, r2
 80069b0:	eb42 0303 	adc.w	r3, r2, r3
 80069b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80069be:	f7fa f8e5 	bl	8000b8c <__aeabi_uldivmod>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <UART_SetConfig+0x2d4>)
 80069c8:	fba3 1302 	umull	r1, r3, r3, r2
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	2164      	movs	r1, #100	; 0x64
 80069d0:	fb01 f303 	mul.w	r3, r1, r3
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	3332      	adds	r3, #50	; 0x32
 80069da:	4a08      	ldr	r2, [pc, #32]	; (80069fc <UART_SetConfig+0x2d4>)
 80069dc:	fba2 2303 	umull	r2, r3, r2, r3
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	f003 0207 	and.w	r2, r3, #7
 80069e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4422      	add	r2, r4
 80069ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069f0:	e106      	b.n	8006c00 <UART_SetConfig+0x4d8>
 80069f2:	bf00      	nop
 80069f4:	40011000 	.word	0x40011000
 80069f8:	40011400 	.word	0x40011400
 80069fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a04:	2200      	movs	r2, #0
 8006a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a12:	4642      	mov	r2, r8
 8006a14:	464b      	mov	r3, r9
 8006a16:	1891      	adds	r1, r2, r2
 8006a18:	6239      	str	r1, [r7, #32]
 8006a1a:	415b      	adcs	r3, r3
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a22:	4641      	mov	r1, r8
 8006a24:	1854      	adds	r4, r2, r1
 8006a26:	4649      	mov	r1, r9
 8006a28:	eb43 0501 	adc.w	r5, r3, r1
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	00eb      	lsls	r3, r5, #3
 8006a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a3a:	00e2      	lsls	r2, r4, #3
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	461d      	mov	r5, r3
 8006a40:	4643      	mov	r3, r8
 8006a42:	18e3      	adds	r3, r4, r3
 8006a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a48:	464b      	mov	r3, r9
 8006a4a:	eb45 0303 	adc.w	r3, r5, r3
 8006a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a62:	f04f 0200 	mov.w	r2, #0
 8006a66:	f04f 0300 	mov.w	r3, #0
 8006a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a6e:	4629      	mov	r1, r5
 8006a70:	008b      	lsls	r3, r1, #2
 8006a72:	4621      	mov	r1, r4
 8006a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a78:	4621      	mov	r1, r4
 8006a7a:	008a      	lsls	r2, r1, #2
 8006a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a80:	f7fa f884 	bl	8000b8c <__aeabi_uldivmod>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4b60      	ldr	r3, [pc, #384]	; (8006c0c <UART_SetConfig+0x4e4>)
 8006a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a8e:	095b      	lsrs	r3, r3, #5
 8006a90:	011c      	lsls	r4, r3, #4
 8006a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006aa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	1891      	adds	r1, r2, r2
 8006aaa:	61b9      	str	r1, [r7, #24]
 8006aac:	415b      	adcs	r3, r3
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ab4:	4641      	mov	r1, r8
 8006ab6:	1851      	adds	r1, r2, r1
 8006ab8:	6139      	str	r1, [r7, #16]
 8006aba:	4649      	mov	r1, r9
 8006abc:	414b      	adcs	r3, r1
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006acc:	4659      	mov	r1, fp
 8006ace:	00cb      	lsls	r3, r1, #3
 8006ad0:	4651      	mov	r1, sl
 8006ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ad6:	4651      	mov	r1, sl
 8006ad8:	00ca      	lsls	r2, r1, #3
 8006ada:	4610      	mov	r0, r2
 8006adc:	4619      	mov	r1, r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	4642      	mov	r2, r8
 8006ae2:	189b      	adds	r3, r3, r2
 8006ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ae8:	464b      	mov	r3, r9
 8006aea:	460a      	mov	r2, r1
 8006aec:	eb42 0303 	adc.w	r3, r2, r3
 8006af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006afe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	f04f 0300 	mov.w	r3, #0
 8006b08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	008b      	lsls	r3, r1, #2
 8006b10:	4641      	mov	r1, r8
 8006b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b16:	4641      	mov	r1, r8
 8006b18:	008a      	lsls	r2, r1, #2
 8006b1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b1e:	f7fa f835 	bl	8000b8c <__aeabi_uldivmod>
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	4611      	mov	r1, r2
 8006b28:	4b38      	ldr	r3, [pc, #224]	; (8006c0c <UART_SetConfig+0x4e4>)
 8006b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	2264      	movs	r2, #100	; 0x64
 8006b32:	fb02 f303 	mul.w	r3, r2, r3
 8006b36:	1acb      	subs	r3, r1, r3
 8006b38:	011b      	lsls	r3, r3, #4
 8006b3a:	3332      	adds	r3, #50	; 0x32
 8006b3c:	4a33      	ldr	r2, [pc, #204]	; (8006c0c <UART_SetConfig+0x4e4>)
 8006b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b42:	095b      	lsrs	r3, r3, #5
 8006b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b48:	441c      	add	r4, r3
 8006b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b4e:	2200      	movs	r2, #0
 8006b50:	673b      	str	r3, [r7, #112]	; 0x70
 8006b52:	677a      	str	r2, [r7, #116]	; 0x74
 8006b54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b58:	4642      	mov	r2, r8
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	1891      	adds	r1, r2, r2
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	415b      	adcs	r3, r3
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b68:	4641      	mov	r1, r8
 8006b6a:	1851      	adds	r1, r2, r1
 8006b6c:	6039      	str	r1, [r7, #0]
 8006b6e:	4649      	mov	r1, r9
 8006b70:	414b      	adcs	r3, r1
 8006b72:	607b      	str	r3, [r7, #4]
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	f04f 0300 	mov.w	r3, #0
 8006b7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b80:	4659      	mov	r1, fp
 8006b82:	00cb      	lsls	r3, r1, #3
 8006b84:	4651      	mov	r1, sl
 8006b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b8a:	4651      	mov	r1, sl
 8006b8c:	00ca      	lsls	r2, r1, #3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	4619      	mov	r1, r3
 8006b92:	4603      	mov	r3, r0
 8006b94:	4642      	mov	r2, r8
 8006b96:	189b      	adds	r3, r3, r2
 8006b98:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	460a      	mov	r2, r1
 8006b9e:	eb42 0303 	adc.w	r3, r2, r3
 8006ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	663b      	str	r3, [r7, #96]	; 0x60
 8006bae:	667a      	str	r2, [r7, #100]	; 0x64
 8006bb0:	f04f 0200 	mov.w	r2, #0
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	008b      	lsls	r3, r1, #2
 8006bc0:	4641      	mov	r1, r8
 8006bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bc6:	4641      	mov	r1, r8
 8006bc8:	008a      	lsls	r2, r1, #2
 8006bca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006bce:	f7f9 ffdd 	bl	8000b8c <__aeabi_uldivmod>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <UART_SetConfig+0x4e4>)
 8006bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bdc:	095b      	lsrs	r3, r3, #5
 8006bde:	2164      	movs	r1, #100	; 0x64
 8006be0:	fb01 f303 	mul.w	r3, r1, r3
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	3332      	adds	r3, #50	; 0x32
 8006bea:	4a08      	ldr	r2, [pc, #32]	; (8006c0c <UART_SetConfig+0x4e4>)
 8006bec:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf0:	095b      	lsrs	r3, r3, #5
 8006bf2:	f003 020f 	and.w	r2, r3, #15
 8006bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4422      	add	r2, r4
 8006bfe:	609a      	str	r2, [r3, #8]
}
 8006c00:	bf00      	nop
 8006c02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c06:	46bd      	mov	sp, r7
 8006c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c0c:	51eb851f 	.word	0x51eb851f

08006c10 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};*/

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af04      	add	r7, sp, #16
 8006c16:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8006c18:	2364      	movs	r3, #100	; 0x64
 8006c1a:	9302      	str	r3, [sp, #8]
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	f107 030f 	add.w	r3, r7, #15
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	2301      	movs	r3, #1
 8006c28:	2275      	movs	r2, #117	; 0x75
 8006c2a:	21d0      	movs	r1, #208	; 0xd0
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7fc fd49 	bl	80036c4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	2b68      	cmp	r3, #104	; 0x68
 8006c36:	d13d      	bne.n	8006cb4 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8006c3c:	2364      	movs	r3, #100	; 0x64
 8006c3e:	9302      	str	r3, [sp, #8]
 8006c40:	2301      	movs	r3, #1
 8006c42:	9301      	str	r3, [sp, #4]
 8006c44:	f107 030e 	add.w	r3, r7, #14
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	226b      	movs	r2, #107	; 0x6b
 8006c4e:	21d0      	movs	r1, #208	; 0xd0
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7fc fc3d 	bl	80034d0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8006c56:	2307      	movs	r3, #7
 8006c58:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8006c5a:	2364      	movs	r3, #100	; 0x64
 8006c5c:	9302      	str	r3, [sp, #8]
 8006c5e:	2301      	movs	r3, #1
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	f107 030e 	add.w	r3, r7, #14
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	2301      	movs	r3, #1
 8006c6a:	2219      	movs	r2, #25
 8006c6c:	21d0      	movs	r1, #208	; 0xd0
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fc fc2e 	bl	80034d0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8006c78:	2364      	movs	r3, #100	; 0x64
 8006c7a:	9302      	str	r3, [sp, #8]
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	f107 030e 	add.w	r3, r7, #14
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	2301      	movs	r3, #1
 8006c88:	221c      	movs	r2, #28
 8006c8a:	21d0      	movs	r1, #208	; 0xd0
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fc fc1f 	bl	80034d0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8006c96:	2364      	movs	r3, #100	; 0x64
 8006c98:	9302      	str	r3, [sp, #8]
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	f107 030e 	add.w	r3, r7, #14
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	221b      	movs	r2, #27
 8006ca8:	21d0      	movs	r1, #208	; 0xd0
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fc fc10 	bl	80034d0 <HAL_I2C_Mem_Write>
        return 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e000      	b.n	8006cb6 <MPU6050_Init+0xa6>
    }
    return 1;
 8006cb4:	2301      	movs	r3, #1
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <MPU6050_Read_Gyro>:
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
}

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af04      	add	r7, sp, #16
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8006cca:	2364      	movs	r3, #100	; 0x64
 8006ccc:	9302      	str	r3, [sp, #8]
 8006cce:	2306      	movs	r3, #6
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	f107 0308 	add.w	r3, r7, #8
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	2301      	movs	r3, #1
 8006cda:	2243      	movs	r2, #67	; 0x43
 8006cdc:	21d0      	movs	r1, #208	; 0xd0
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fc fcf0 	bl	80036c4 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8006ce4:	7a3b      	ldrb	r3, [r7, #8]
 8006ce6:	021b      	lsls	r3, r3, #8
 8006ce8:	b21a      	sxth	r2, r3
 8006cea:	7a7b      	ldrb	r3, [r7, #9]
 8006cec:	b21b      	sxth	r3, r3
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	b21a      	sxth	r2, r3
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8006cf6:	7abb      	ldrb	r3, [r7, #10]
 8006cf8:	021b      	lsls	r3, r3, #8
 8006cfa:	b21a      	sxth	r2, r3
 8006cfc:	7afb      	ldrb	r3, [r7, #11]
 8006cfe:	b21b      	sxth	r3, r3
 8006d00:	4313      	orrs	r3, r2
 8006d02:	b21a      	sxth	r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8006d08:	7b3b      	ldrb	r3, [r7, #12]
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	b21a      	sxth	r2, r3
 8006d0e:	7b7b      	ldrb	r3, [r7, #13]
 8006d10:	b21b      	sxth	r3, r3
 8006d12:	4313      	orrs	r3, r2
 8006d14:	b21a      	sxth	r2, r3
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	849a      	strh	r2, [r3, #36]	; 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7f9 fc17 	bl	8000554 <__aeabi_i2d>
 8006d26:	a318      	add	r3, pc, #96	; (adr r3, 8006d88 <MPU6050_Read_Gyro+0xc8>)
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	f7f9 fda6 	bl	800087c <__aeabi_ddiv>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7f9 fc07 	bl	8000554 <__aeabi_i2d>
 8006d46:	a310      	add	r3, pc, #64	; (adr r3, 8006d88 <MPU6050_Read_Gyro+0xc8>)
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	f7f9 fd96 	bl	800087c <__aeabi_ddiv>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7f9 fbf7 	bl	8000554 <__aeabi_i2d>
 8006d66:	a308      	add	r3, pc, #32	; (adr r3, 8006d88 <MPU6050_Read_Gyro+0xc8>)
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	f7f9 fd86 	bl	800087c <__aeabi_ddiv>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8006d7a:	bf00      	nop
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	f3af 8000 	nop.w
 8006d88:	00000000 	.word	0x00000000
 8006d8c:	40606000 	.word	0x40606000

08006d90 <__NVIC_SetPriority>:
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	6039      	str	r1, [r7, #0]
 8006d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	db0a      	blt.n	8006dba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	490c      	ldr	r1, [pc, #48]	; (8006ddc <__NVIC_SetPriority+0x4c>)
 8006daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dae:	0112      	lsls	r2, r2, #4
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	440b      	add	r3, r1
 8006db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006db8:	e00a      	b.n	8006dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	4908      	ldr	r1, [pc, #32]	; (8006de0 <__NVIC_SetPriority+0x50>)
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	3b04      	subs	r3, #4
 8006dc8:	0112      	lsls	r2, r2, #4
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	440b      	add	r3, r1
 8006dce:	761a      	strb	r2, [r3, #24]
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	e000e100 	.word	0xe000e100
 8006de0:	e000ed00 	.word	0xe000ed00

08006de4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006de8:	2100      	movs	r1, #0
 8006dea:	f06f 0004 	mvn.w	r0, #4
 8006dee:	f7ff ffcf 	bl	8006d90 <__NVIC_SetPriority>
#endif
}
 8006df2:	bf00      	nop
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dfe:	f3ef 8305 	mrs	r3, IPSR
 8006e02:	603b      	str	r3, [r7, #0]
  return(result);
 8006e04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e0a:	f06f 0305 	mvn.w	r3, #5
 8006e0e:	607b      	str	r3, [r7, #4]
 8006e10:	e00c      	b.n	8006e2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e12:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <osKernelInitialize+0x44>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d105      	bne.n	8006e26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e1a:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <osKernelInitialize+0x44>)
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	607b      	str	r3, [r7, #4]
 8006e24:	e002      	b.n	8006e2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e2c:	687b      	ldr	r3, [r7, #4]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	2000479c 	.word	0x2000479c

08006e40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e46:	f3ef 8305 	mrs	r3, IPSR
 8006e4a:	603b      	str	r3, [r7, #0]
  return(result);
 8006e4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006e52:	f06f 0305 	mvn.w	r3, #5
 8006e56:	607b      	str	r3, [r7, #4]
 8006e58:	e010      	b.n	8006e7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e5a:	4b0b      	ldr	r3, [pc, #44]	; (8006e88 <osKernelStart+0x48>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d109      	bne.n	8006e76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e62:	f7ff ffbf 	bl	8006de4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e66:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <osKernelStart+0x48>)
 8006e68:	2202      	movs	r2, #2
 8006e6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e6c:	f001 f866 	bl	8007f3c <vTaskStartScheduler>
      stat = osOK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	607b      	str	r3, [r7, #4]
 8006e74:	e002      	b.n	8006e7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e7c:	687b      	ldr	r3, [r7, #4]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	2000479c 	.word	0x2000479c

08006e8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08e      	sub	sp, #56	; 0x38
 8006e90:	af04      	add	r7, sp, #16
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e9c:	f3ef 8305 	mrs	r3, IPSR
 8006ea0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ea2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d17e      	bne.n	8006fa6 <osThreadNew+0x11a>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d07b      	beq.n	8006fa6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006eae:	2380      	movs	r3, #128	; 0x80
 8006eb0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006eb2:	2318      	movs	r3, #24
 8006eb4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ebe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d045      	beq.n	8006f52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <osThreadNew+0x48>
        name = attr->name;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <osThreadNew+0x6e>
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	2b38      	cmp	r3, #56	; 0x38
 8006eec:	d805      	bhi.n	8006efa <osThreadNew+0x6e>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <osThreadNew+0x72>
        return (NULL);
 8006efa:	2300      	movs	r3, #0
 8006efc:	e054      	b.n	8006fa8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	089b      	lsrs	r3, r3, #2
 8006f0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00e      	beq.n	8006f34 <osThreadNew+0xa8>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b5b      	cmp	r3, #91	; 0x5b
 8006f1c:	d90a      	bls.n	8006f34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d006      	beq.n	8006f34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <osThreadNew+0xa8>
        mem = 1;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	e010      	b.n	8006f56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10c      	bne.n	8006f56 <osThreadNew+0xca>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d108      	bne.n	8006f56 <osThreadNew+0xca>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d104      	bne.n	8006f56 <osThreadNew+0xca>
          mem = 0;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	61bb      	str	r3, [r7, #24]
 8006f50:	e001      	b.n	8006f56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d110      	bne.n	8006f7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f64:	9202      	str	r2, [sp, #8]
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	6a3a      	ldr	r2, [r7, #32]
 8006f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 fe0c 	bl	8007b90 <xTaskCreateStatic>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	e013      	b.n	8006fa6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d110      	bne.n	8006fa6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	f107 0310 	add.w	r3, r7, #16
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 fe57 	bl	8007c4a <xTaskCreate>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d001      	beq.n	8006fa6 <osThreadNew+0x11a>
            hTask = NULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006fa6:	693b      	ldr	r3, [r7, #16]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3728      	adds	r7, #40	; 0x28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fb8:	f3ef 8305 	mrs	r3, IPSR
 8006fbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d003      	beq.n	8006fcc <osDelay+0x1c>
    stat = osErrorISR;
 8006fc4:	f06f 0305 	mvn.w	r3, #5
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	e007      	b.n	8006fdc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <osDelay+0x2c>
      vTaskDelay(ticks);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 ff7c 	bl	8007ed4 <vTaskDelay>
    }
  }

  return (stat);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4a07      	ldr	r2, [pc, #28]	; (8007014 <vApplicationGetIdleTaskMemory+0x2c>)
 8006ff8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	4a06      	ldr	r2, [pc, #24]	; (8007018 <vApplicationGetIdleTaskMemory+0x30>)
 8006ffe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2280      	movs	r2, #128	; 0x80
 8007004:	601a      	str	r2, [r3, #0]
}
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	200047a0 	.word	0x200047a0
 8007018:	200047fc 	.word	0x200047fc

0800701c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4a07      	ldr	r2, [pc, #28]	; (8007048 <vApplicationGetTimerTaskMemory+0x2c>)
 800702c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	4a06      	ldr	r2, [pc, #24]	; (800704c <vApplicationGetTimerTaskMemory+0x30>)
 8007032:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800703a:	601a      	str	r2, [r3, #0]
}
 800703c:	bf00      	nop
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	200049fc 	.word	0x200049fc
 800704c:	20004a58 	.word	0x20004a58

08007050 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f103 0208 	add.w	r2, r3, #8
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007068:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f103 0208 	add.w	r2, r3, #8
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f103 0208 	add.w	r2, r3, #8
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	601a      	str	r2, [r3, #0]
}
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070f2:	b480      	push	{r7}
 80070f4:	b085      	sub	sp, #20
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007108:	d103      	bne.n	8007112 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e00c      	b.n	800712c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3308      	adds	r3, #8
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	e002      	b.n	8007120 <vListInsert+0x2e>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	429a      	cmp	r2, r3
 800712a:	d2f6      	bcs.n	800711a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	601a      	str	r2, [r3, #0]
}
 8007158:	bf00      	nop
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6892      	ldr	r2, [r2, #8]
 800717a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6852      	ldr	r2, [r2, #4]
 8007184:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	429a      	cmp	r2, r3
 800718e:	d103      	bne.n	8007198 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	1e5a      	subs	r2, r3, #1
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <xQueueGenericReset+0x2a>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	60bb      	str	r3, [r7, #8]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071e2:	f002 f877 	bl	80092d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ee:	68f9      	ldr	r1, [r7, #12]
 80071f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071f2:	fb01 f303 	mul.w	r3, r1, r3
 80071f6:	441a      	add	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007212:	3b01      	subs	r3, #1
 8007214:	68f9      	ldr	r1, [r7, #12]
 8007216:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007218:	fb01 f303 	mul.w	r3, r1, r3
 800721c:	441a      	add	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	22ff      	movs	r2, #255	; 0xff
 8007226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	22ff      	movs	r2, #255	; 0xff
 800722e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d114      	bne.n	8007262 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01a      	beq.n	8007276 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3310      	adds	r3, #16
 8007244:	4618      	mov	r0, r3
 8007246:	f001 f903 	bl	8008450 <xTaskRemoveFromEventList>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d012      	beq.n	8007276 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007250:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <xQueueGenericReset+0xcc>)
 8007252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	e009      	b.n	8007276 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	3310      	adds	r3, #16
 8007266:	4618      	mov	r0, r3
 8007268:	f7ff fef2 	bl	8007050 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	3324      	adds	r3, #36	; 0x24
 8007270:	4618      	mov	r0, r3
 8007272:	f7ff feed 	bl	8007050 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007276:	f002 f85d 	bl	8009334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800727a:	2301      	movs	r3, #1
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	e000ed04 	.word	0xe000ed04

08007288 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08e      	sub	sp, #56	; 0x38
 800728c:	af02      	add	r7, sp, #8
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10a      	bne.n	80072ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072ca:	bf00      	nop
 80072cc:	e7fe      	b.n	80072cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <xQueueGenericCreateStatic+0x52>
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <xQueueGenericCreateStatic+0x56>
 80072da:	2301      	movs	r3, #1
 80072dc:	e000      	b.n	80072e0 <xQueueGenericCreateStatic+0x58>
 80072de:	2300      	movs	r3, #0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10a      	bne.n	80072fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	623b      	str	r3, [r7, #32]
}
 80072f6:	bf00      	nop
 80072f8:	e7fe      	b.n	80072f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <xQueueGenericCreateStatic+0x7e>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <xQueueGenericCreateStatic+0x82>
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <xQueueGenericCreateStatic+0x84>
 800730a:	2300      	movs	r3, #0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10a      	bne.n	8007326 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	61fb      	str	r3, [r7, #28]
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007326:	2350      	movs	r3, #80	; 0x50
 8007328:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b50      	cmp	r3, #80	; 0x50
 800732e:	d00a      	beq.n	8007346 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	61bb      	str	r3, [r7, #24]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007346:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00d      	beq.n	800736e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	2201      	movs	r2, #1
 8007356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800735a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	4613      	mov	r3, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	68b9      	ldr	r1, [r7, #8]
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f805 	bl	8007378 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007370:	4618      	mov	r0, r3
 8007372:	3730      	adds	r7, #48	; 0x30
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d103      	bne.n	8007394 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	e002      	b.n	800739a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073a6:	2101      	movs	r1, #1
 80073a8:	69b8      	ldr	r0, [r7, #24]
 80073aa:	f7ff ff05 	bl	80071b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	78fa      	ldrb	r2, [r7, #3]
 80073b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80073b6:	bf00      	nop
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08e      	sub	sp, #56	; 0x38
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073ce:	2300      	movs	r3, #0
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xQueueGenericSend+0x32>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <xQueueGenericSend+0x40>
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <xQueueGenericSend+0x44>
 8007400:	2301      	movs	r3, #1
 8007402:	e000      	b.n	8007406 <xQueueGenericSend+0x46>
 8007404:	2300      	movs	r3, #0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <xQueueGenericSend+0x60>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2b02      	cmp	r3, #2
 8007424:	d103      	bne.n	800742e <xQueueGenericSend+0x6e>
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742a:	2b01      	cmp	r3, #1
 800742c:	d101      	bne.n	8007432 <xQueueGenericSend+0x72>
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <xQueueGenericSend+0x74>
 8007432:	2300      	movs	r3, #0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <xQueueGenericSend+0x8e>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	623b      	str	r3, [r7, #32]
}
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800744e:	f001 f9e3 	bl	8008818 <xTaskGetSchedulerState>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d102      	bne.n	800745e <xQueueGenericSend+0x9e>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <xQueueGenericSend+0xa2>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <xQueueGenericSend+0xa4>
 8007462:	2300      	movs	r3, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <xQueueGenericSend+0xbe>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	61fb      	str	r3, [r7, #28]
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800747e:	f001 ff29 	bl	80092d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748a:	429a      	cmp	r2, r3
 800748c:	d302      	bcc.n	8007494 <xQueueGenericSend+0xd4>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d129      	bne.n	80074e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800749a:	f000 fa0b 	bl	80078b4 <prvCopyDataToQueue>
 800749e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d010      	beq.n	80074ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	3324      	adds	r3, #36	; 0x24
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 ffcf 	bl	8008450 <xTaskRemoveFromEventList>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d013      	beq.n	80074e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80074b8:	4b3f      	ldr	r3, [pc, #252]	; (80075b8 <xQueueGenericSend+0x1f8>)
 80074ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	e00a      	b.n	80074e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d007      	beq.n	80074e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80074d0:	4b39      	ldr	r3, [pc, #228]	; (80075b8 <xQueueGenericSend+0x1f8>)
 80074d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074e0:	f001 ff28 	bl	8009334 <vPortExitCritical>
				return pdPASS;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e063      	b.n	80075b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d103      	bne.n	80074f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074ee:	f001 ff21 	bl	8009334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	e05c      	b.n	80075b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d106      	bne.n	800750a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074fc:	f107 0314 	add.w	r3, r7, #20
 8007500:	4618      	mov	r0, r3
 8007502:	f001 f82f 	bl	8008564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007506:	2301      	movs	r3, #1
 8007508:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800750a:	f001 ff13 	bl	8009334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800750e:	f000 fd7b 	bl	8008008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007512:	f001 fedf 	bl	80092d4 <vPortEnterCritical>
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800751c:	b25b      	sxtb	r3, r3
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007522:	d103      	bne.n	800752c <xQueueGenericSend+0x16c>
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007532:	b25b      	sxtb	r3, r3
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007538:	d103      	bne.n	8007542 <xQueueGenericSend+0x182>
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007542:	f001 fef7 	bl	8009334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007546:	1d3a      	adds	r2, r7, #4
 8007548:	f107 0314 	add.w	r3, r7, #20
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f001 f81e 	bl	8008590 <xTaskCheckForTimeOut>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d124      	bne.n	80075a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800755a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800755c:	f000 faa2 	bl	8007aa4 <prvIsQueueFull>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d018      	beq.n	8007598 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	3310      	adds	r3, #16
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	4611      	mov	r1, r2
 800756e:	4618      	mov	r0, r3
 8007570:	f000 ff1e 	bl	80083b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007576:	f000 fa2d 	bl	80079d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800757a:	f000 fd53 	bl	8008024 <xTaskResumeAll>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	f47f af7c 	bne.w	800747e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007586:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <xQueueGenericSend+0x1f8>)
 8007588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	e772      	b.n	800747e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800759a:	f000 fa1b 	bl	80079d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800759e:	f000 fd41 	bl	8008024 <xTaskResumeAll>
 80075a2:	e76c      	b.n	800747e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80075a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075a6:	f000 fa15 	bl	80079d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075aa:	f000 fd3b 	bl	8008024 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3738      	adds	r7, #56	; 0x38
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b090      	sub	sp, #64	; 0x40
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075e6:	bf00      	nop
 80075e8:	e7fe      	b.n	80075e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d103      	bne.n	80075f8 <xQueueGenericSendFromISR+0x3c>
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <xQueueGenericSendFromISR+0x40>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <xQueueGenericSendFromISR+0x42>
 80075fc:	2300      	movs	r3, #0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d103      	bne.n	8007626 <xQueueGenericSendFromISR+0x6a>
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <xQueueGenericSendFromISR+0x6e>
 8007626:	2301      	movs	r3, #1
 8007628:	e000      	b.n	800762c <xQueueGenericSendFromISR+0x70>
 800762a:	2300      	movs	r3, #0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	623b      	str	r3, [r7, #32]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007646:	f001 ff27 	bl	8009498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800764a:	f3ef 8211 	mrs	r2, BASEPRI
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	61fa      	str	r2, [r7, #28]
 8007660:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007662:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007664:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766e:	429a      	cmp	r2, r3
 8007670:	d302      	bcc.n	8007678 <xQueueGenericSendFromISR+0xbc>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b02      	cmp	r3, #2
 8007676:	d12f      	bne.n	80076d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800767e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800768e:	f000 f911 	bl	80078b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007692:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800769a:	d112      	bne.n	80076c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d016      	beq.n	80076d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	3324      	adds	r3, #36	; 0x24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 fed1 	bl	8008450 <xTaskRemoveFromEventList>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00e      	beq.n	80076d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00b      	beq.n	80076d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	e007      	b.n	80076d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076c6:	3301      	adds	r3, #1
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	b25a      	sxtb	r2, r3
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80076d2:	2301      	movs	r3, #1
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80076d6:	e001      	b.n	80076dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80076d8:	2300      	movs	r3, #0
 80076da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80076e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3740      	adds	r7, #64	; 0x40
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08c      	sub	sp, #48	; 0x30
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007700:	2300      	movs	r3, #0
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <xQueueReceive+0x30>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	623b      	str	r3, [r7, #32]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d103      	bne.n	8007732 <xQueueReceive+0x3e>
 800772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <xQueueReceive+0x42>
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <xQueueReceive+0x44>
 8007736:	2300      	movs	r3, #0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10a      	bne.n	8007752 <xQueueReceive+0x5e>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	61fb      	str	r3, [r7, #28]
}
 800774e:	bf00      	nop
 8007750:	e7fe      	b.n	8007750 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007752:	f001 f861 	bl	8008818 <xTaskGetSchedulerState>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <xQueueReceive+0x6e>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <xQueueReceive+0x72>
 8007762:	2301      	movs	r3, #1
 8007764:	e000      	b.n	8007768 <xQueueReceive+0x74>
 8007766:	2300      	movs	r3, #0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10a      	bne.n	8007782 <xQueueReceive+0x8e>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	61bb      	str	r3, [r7, #24]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007782:	f001 fda7 	bl	80092d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	2b00      	cmp	r3, #0
 8007790:	d01f      	beq.n	80077d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007796:	f000 f8f7 	bl	8007988 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	1e5a      	subs	r2, r3, #1
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00f      	beq.n	80077ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	3310      	adds	r3, #16
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fe4e 	bl	8008450 <xTaskRemoveFromEventList>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d007      	beq.n	80077ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077ba:	4b3d      	ldr	r3, [pc, #244]	; (80078b0 <xQueueReceive+0x1bc>)
 80077bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077ca:	f001 fdb3 	bl	8009334 <vPortExitCritical>
				return pdPASS;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e069      	b.n	80078a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d103      	bne.n	80077e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077d8:	f001 fdac 	bl	8009334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077dc:	2300      	movs	r3, #0
 80077de:	e062      	b.n	80078a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d106      	bne.n	80077f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077e6:	f107 0310 	add.w	r3, r7, #16
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 feba 	bl	8008564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077f4:	f001 fd9e 	bl	8009334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077f8:	f000 fc06 	bl	8008008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077fc:	f001 fd6a 	bl	80092d4 <vPortEnterCritical>
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007806:	b25b      	sxtb	r3, r3
 8007808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800780c:	d103      	bne.n	8007816 <xQueueReceive+0x122>
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800781c:	b25b      	sxtb	r3, r3
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007822:	d103      	bne.n	800782c <xQueueReceive+0x138>
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800782c:	f001 fd82 	bl	8009334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007830:	1d3a      	adds	r2, r7, #4
 8007832:	f107 0310 	add.w	r3, r7, #16
 8007836:	4611      	mov	r1, r2
 8007838:	4618      	mov	r0, r3
 800783a:	f000 fea9 	bl	8008590 <xTaskCheckForTimeOut>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d123      	bne.n	800788c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007846:	f000 f917 	bl	8007a78 <prvIsQueueEmpty>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d017      	beq.n	8007880 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	3324      	adds	r3, #36	; 0x24
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4611      	mov	r1, r2
 8007858:	4618      	mov	r0, r3
 800785a:	f000 fda9 	bl	80083b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800785e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007860:	f000 f8b8 	bl	80079d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007864:	f000 fbde 	bl	8008024 <xTaskResumeAll>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d189      	bne.n	8007782 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800786e:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <xQueueReceive+0x1bc>)
 8007870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	e780      	b.n	8007782 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007882:	f000 f8a7 	bl	80079d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007886:	f000 fbcd 	bl	8008024 <xTaskResumeAll>
 800788a:	e77a      	b.n	8007782 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800788c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800788e:	f000 f8a1 	bl	80079d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007892:	f000 fbc7 	bl	8008024 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007898:	f000 f8ee 	bl	8007a78 <prvIsQueueEmpty>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f43f af6f 	beq.w	8007782 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3730      	adds	r7, #48	; 0x30
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	e000ed04 	.word	0xe000ed04

080078b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80078c0:	2300      	movs	r3, #0
 80078c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10d      	bne.n	80078ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d14d      	bne.n	8007976 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 ffb8 	bl	8008854 <xTaskPriorityDisinherit>
 80078e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	e043      	b.n	8007976 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d119      	bne.n	8007928 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6858      	ldr	r0, [r3, #4]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fc:	461a      	mov	r2, r3
 80078fe:	68b9      	ldr	r1, [r7, #8]
 8007900:	f00f f9b1 	bl	8016c66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790c:	441a      	add	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	429a      	cmp	r2, r3
 800791c:	d32b      	bcc.n	8007976 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	605a      	str	r2, [r3, #4]
 8007926:	e026      	b.n	8007976 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	68d8      	ldr	r0, [r3, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007930:	461a      	mov	r2, r3
 8007932:	68b9      	ldr	r1, [r7, #8]
 8007934:	f00f f997 	bl	8016c66 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	425b      	negs	r3, r3
 8007942:	441a      	add	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	429a      	cmp	r2, r3
 8007952:	d207      	bcs.n	8007964 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	425b      	negs	r3, r3
 800795e:	441a      	add	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b02      	cmp	r3, #2
 8007968:	d105      	bne.n	8007976 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	3b01      	subs	r3, #1
 8007974:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800797e:	697b      	ldr	r3, [r7, #20]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	2b00      	cmp	r3, #0
 8007998:	d018      	beq.n	80079cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	441a      	add	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d303      	bcc.n	80079bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68d9      	ldr	r1, [r3, #12]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c4:	461a      	mov	r2, r3
 80079c6:	6838      	ldr	r0, [r7, #0]
 80079c8:	f00f f94d 	bl	8016c66 <memcpy>
	}
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80079dc:	f001 fc7a 	bl	80092d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079e8:	e011      	b.n	8007a0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d012      	beq.n	8007a18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3324      	adds	r3, #36	; 0x24
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 fd2a 	bl	8008450 <xTaskRemoveFromEventList>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a02:	f000 fe27 	bl	8008654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	dce9      	bgt.n	80079ea <prvUnlockQueue+0x16>
 8007a16:	e000      	b.n	8007a1a <prvUnlockQueue+0x46>
					break;
 8007a18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	22ff      	movs	r2, #255	; 0xff
 8007a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a22:	f001 fc87 	bl	8009334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a26:	f001 fc55 	bl	80092d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a32:	e011      	b.n	8007a58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d012      	beq.n	8007a62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3310      	adds	r3, #16
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fd05 	bl	8008450 <xTaskRemoveFromEventList>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a4c:	f000 fe02 	bl	8008654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dce9      	bgt.n	8007a34 <prvUnlockQueue+0x60>
 8007a60:	e000      	b.n	8007a64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	22ff      	movs	r2, #255	; 0xff
 8007a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a6c:	f001 fc62 	bl	8009334 <vPortExitCritical>
}
 8007a70:	bf00      	nop
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a80:	f001 fc28 	bl	80092d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d102      	bne.n	8007a92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	e001      	b.n	8007a96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a96:	f001 fc4d 	bl	8009334 <vPortExitCritical>

	return xReturn;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007aac:	f001 fc12 	bl	80092d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d102      	bne.n	8007ac2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	e001      	b.n	8007ac6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ac6:	f001 fc35 	bl	8009334 <vPortExitCritical>

	return xReturn;
 8007aca:	68fb      	ldr	r3, [r7, #12]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	e014      	b.n	8007b0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ae4:	4a0f      	ldr	r2, [pc, #60]	; (8007b24 <vQueueAddToRegistry+0x50>)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10b      	bne.n	8007b08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007af0:	490c      	ldr	r1, [pc, #48]	; (8007b24 <vQueueAddToRegistry+0x50>)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007afa:	4a0a      	ldr	r2, [pc, #40]	; (8007b24 <vQueueAddToRegistry+0x50>)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	4413      	add	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b06:	e006      	b.n	8007b16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b07      	cmp	r3, #7
 8007b12:	d9e7      	bls.n	8007ae4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	20004e58 	.word	0x20004e58

08007b28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b38:	f001 fbcc 	bl	80092d4 <vPortEnterCritical>
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b42:	b25b      	sxtb	r3, r3
 8007b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b48:	d103      	bne.n	8007b52 <vQueueWaitForMessageRestricted+0x2a>
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b58:	b25b      	sxtb	r3, r3
 8007b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b5e:	d103      	bne.n	8007b68 <vQueueWaitForMessageRestricted+0x40>
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b68:	f001 fbe4 	bl	8009334 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d106      	bne.n	8007b82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	3324      	adds	r3, #36	; 0x24
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	68b9      	ldr	r1, [r7, #8]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fc3b 	bl	80083f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b82:	6978      	ldr	r0, [r7, #20]
 8007b84:	f7ff ff26 	bl	80079d4 <prvUnlockQueue>
	}
 8007b88:	bf00      	nop
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08e      	sub	sp, #56	; 0x38
 8007b94:	af04      	add	r7, sp, #16
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	623b      	str	r3, [r7, #32]
}
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10a      	bne.n	8007bd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	61fb      	str	r3, [r7, #28]
}
 8007bd2:	bf00      	nop
 8007bd4:	e7fe      	b.n	8007bd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007bd6:	235c      	movs	r3, #92	; 0x5c
 8007bd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	2b5c      	cmp	r3, #92	; 0x5c
 8007bde:	d00a      	beq.n	8007bf6 <xTaskCreateStatic+0x66>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	61bb      	str	r3, [r7, #24]
}
 8007bf2:	bf00      	nop
 8007bf4:	e7fe      	b.n	8007bf4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bf6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d01e      	beq.n	8007c3c <xTaskCreateStatic+0xac>
 8007bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d01b      	beq.n	8007c3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	2202      	movs	r2, #2
 8007c12:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c16:	2300      	movs	r3, #0
 8007c18:	9303      	str	r3, [sp, #12]
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	9302      	str	r3, [sp, #8]
 8007c1e:	f107 0314 	add.w	r3, r7, #20
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 f850 	bl	8007cd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c36:	f000 f8dd 	bl	8007df4 <prvAddNewTaskToReadyList>
 8007c3a:	e001      	b.n	8007c40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c40:	697b      	ldr	r3, [r7, #20]
	}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3728      	adds	r7, #40	; 0x28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b08c      	sub	sp, #48	; 0x30
 8007c4e:	af04      	add	r7, sp, #16
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	603b      	str	r3, [r7, #0]
 8007c56:	4613      	mov	r3, r2
 8007c58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c5a:	88fb      	ldrh	r3, [r7, #6]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f001 fc5a 	bl	8009518 <pvPortMalloc>
 8007c64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00e      	beq.n	8007c8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c6c:	205c      	movs	r0, #92	; 0x5c
 8007c6e:	f001 fc53 	bl	8009518 <pvPortMalloc>
 8007c72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8007c80:	e005      	b.n	8007c8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c82:	6978      	ldr	r0, [r7, #20]
 8007c84:	f001 fd14 	bl	80096b0 <vPortFree>
 8007c88:	e001      	b.n	8007c8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d017      	beq.n	8007cc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c9c:	88fa      	ldrh	r2, [r7, #6]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	9303      	str	r3, [sp, #12]
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	9302      	str	r3, [sp, #8]
 8007ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 f80e 	bl	8007cd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cb8:	69f8      	ldr	r0, [r7, #28]
 8007cba:	f000 f89b 	bl	8007df4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	61bb      	str	r3, [r7, #24]
 8007cc2:	e002      	b.n	8007cca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007cca:	69bb      	ldr	r3, [r7, #24]
	}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3720      	adds	r7, #32
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	461a      	mov	r2, r3
 8007cec:	21a5      	movs	r1, #165	; 0xa5
 8007cee:	f00e fef1 	bl	8016ad4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	f023 0307 	bic.w	r3, r3, #7
 8007d0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	f003 0307 	and.w	r3, r3, #7
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	617b      	str	r3, [r7, #20]
}
 8007d28:	bf00      	nop
 8007d2a:	e7fe      	b.n	8007d2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d01f      	beq.n	8007d72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d32:	2300      	movs	r3, #0
 8007d34:	61fb      	str	r3, [r7, #28]
 8007d36:	e012      	b.n	8007d5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	7819      	ldrb	r1, [r3, #0]
 8007d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	4413      	add	r3, r2
 8007d46:	3334      	adds	r3, #52	; 0x34
 8007d48:	460a      	mov	r2, r1
 8007d4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	4413      	add	r3, r2
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d006      	beq.n	8007d66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	61fb      	str	r3, [r7, #28]
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	2b0f      	cmp	r3, #15
 8007d62:	d9e9      	bls.n	8007d38 <prvInitialiseNewTask+0x64>
 8007d64:	e000      	b.n	8007d68 <prvInitialiseNewTask+0x94>
			{
				break;
 8007d66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d70:	e003      	b.n	8007d7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	2b37      	cmp	r3, #55	; 0x37
 8007d7e:	d901      	bls.n	8007d84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d80:	2337      	movs	r3, #55	; 0x37
 8007d82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d92:	2200      	movs	r2, #0
 8007d94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff f978 	bl	8007090 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	3318      	adds	r3, #24
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7ff f973 	bl	8007090 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	68f9      	ldr	r1, [r7, #12]
 8007dd2:	69b8      	ldr	r0, [r7, #24]
 8007dd4:	f001 f94e 	bl	8009074 <pxPortInitialiseStack>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dea:	bf00      	nop
 8007dec:	3720      	adds	r7, #32
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dfc:	f001 fa6a 	bl	80092d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e00:	4b2d      	ldr	r3, [pc, #180]	; (8007eb8 <prvAddNewTaskToReadyList+0xc4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3301      	adds	r3, #1
 8007e06:	4a2c      	ldr	r2, [pc, #176]	; (8007eb8 <prvAddNewTaskToReadyList+0xc4>)
 8007e08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e0a:	4b2c      	ldr	r3, [pc, #176]	; (8007ebc <prvAddNewTaskToReadyList+0xc8>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d109      	bne.n	8007e26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e12:	4a2a      	ldr	r2, [pc, #168]	; (8007ebc <prvAddNewTaskToReadyList+0xc8>)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e18:	4b27      	ldr	r3, [pc, #156]	; (8007eb8 <prvAddNewTaskToReadyList+0xc4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d110      	bne.n	8007e42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e20:	f000 fc3c 	bl	800869c <prvInitialiseTaskLists>
 8007e24:	e00d      	b.n	8007e42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e26:	4b26      	ldr	r3, [pc, #152]	; (8007ec0 <prvAddNewTaskToReadyList+0xcc>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d109      	bne.n	8007e42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e2e:	4b23      	ldr	r3, [pc, #140]	; (8007ebc <prvAddNewTaskToReadyList+0xc8>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d802      	bhi.n	8007e42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e3c:	4a1f      	ldr	r2, [pc, #124]	; (8007ebc <prvAddNewTaskToReadyList+0xc8>)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e42:	4b20      	ldr	r3, [pc, #128]	; (8007ec4 <prvAddNewTaskToReadyList+0xd0>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3301      	adds	r3, #1
 8007e48:	4a1e      	ldr	r2, [pc, #120]	; (8007ec4 <prvAddNewTaskToReadyList+0xd0>)
 8007e4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e4c:	4b1d      	ldr	r3, [pc, #116]	; (8007ec4 <prvAddNewTaskToReadyList+0xd0>)
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e58:	4b1b      	ldr	r3, [pc, #108]	; (8007ec8 <prvAddNewTaskToReadyList+0xd4>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d903      	bls.n	8007e68 <prvAddNewTaskToReadyList+0x74>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	4a18      	ldr	r2, [pc, #96]	; (8007ec8 <prvAddNewTaskToReadyList+0xd4>)
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4a15      	ldr	r2, [pc, #84]	; (8007ecc <prvAddNewTaskToReadyList+0xd8>)
 8007e76:	441a      	add	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4610      	mov	r0, r2
 8007e80:	f7ff f913 	bl	80070aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e84:	f001 fa56 	bl	8009334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e88:	4b0d      	ldr	r3, [pc, #52]	; (8007ec0 <prvAddNewTaskToReadyList+0xcc>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00e      	beq.n	8007eae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <prvAddNewTaskToReadyList+0xc8>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d207      	bcs.n	8007eae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <prvAddNewTaskToReadyList+0xdc>)
 8007ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	2000536c 	.word	0x2000536c
 8007ebc:	20004e98 	.word	0x20004e98
 8007ec0:	20005378 	.word	0x20005378
 8007ec4:	20005388 	.word	0x20005388
 8007ec8:	20005374 	.word	0x20005374
 8007ecc:	20004e9c 	.word	0x20004e9c
 8007ed0:	e000ed04 	.word	0xe000ed04

08007ed4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d017      	beq.n	8007f16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ee6:	4b13      	ldr	r3, [pc, #76]	; (8007f34 <vTaskDelay+0x60>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00a      	beq.n	8007f04 <vTaskDelay+0x30>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	60bb      	str	r3, [r7, #8]
}
 8007f00:	bf00      	nop
 8007f02:	e7fe      	b.n	8007f02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f04:	f000 f880 	bl	8008008 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f08:	2100      	movs	r1, #0
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fd10 	bl	8008930 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f10:	f000 f888 	bl	8008024 <xTaskResumeAll>
 8007f14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d107      	bne.n	8007f2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007f1c:	4b06      	ldr	r3, [pc, #24]	; (8007f38 <vTaskDelay+0x64>)
 8007f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f2c:	bf00      	nop
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20005394 	.word	0x20005394
 8007f38:	e000ed04 	.word	0xe000ed04

08007f3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b08a      	sub	sp, #40	; 0x28
 8007f40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f4a:	463a      	mov	r2, r7
 8007f4c:	1d39      	adds	r1, r7, #4
 8007f4e:	f107 0308 	add.w	r3, r7, #8
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff f848 	bl	8006fe8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	9202      	str	r2, [sp, #8]
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	2300      	movs	r3, #0
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	2300      	movs	r3, #0
 8007f68:	460a      	mov	r2, r1
 8007f6a:	4921      	ldr	r1, [pc, #132]	; (8007ff0 <vTaskStartScheduler+0xb4>)
 8007f6c:	4821      	ldr	r0, [pc, #132]	; (8007ff4 <vTaskStartScheduler+0xb8>)
 8007f6e:	f7ff fe0f 	bl	8007b90 <xTaskCreateStatic>
 8007f72:	4603      	mov	r3, r0
 8007f74:	4a20      	ldr	r2, [pc, #128]	; (8007ff8 <vTaskStartScheduler+0xbc>)
 8007f76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f78:	4b1f      	ldr	r3, [pc, #124]	; (8007ff8 <vTaskStartScheduler+0xbc>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f80:	2301      	movs	r3, #1
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	e001      	b.n	8007f8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d102      	bne.n	8007f96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f90:	f000 fd22 	bl	80089d8 <xTimerCreateTimerTask>
 8007f94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d116      	bne.n	8007fca <vTaskStartScheduler+0x8e>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	613b      	str	r3, [r7, #16]
}
 8007fae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fb0:	4b12      	ldr	r3, [pc, #72]	; (8007ffc <vTaskStartScheduler+0xc0>)
 8007fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fb8:	4b11      	ldr	r3, [pc, #68]	; (8008000 <vTaskStartScheduler+0xc4>)
 8007fba:	2201      	movs	r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fbe:	4b11      	ldr	r3, [pc, #68]	; (8008004 <vTaskStartScheduler+0xc8>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fc4:	f001 f8e4 	bl	8009190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fc8:	e00e      	b.n	8007fe8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fd0:	d10a      	bne.n	8007fe8 <vTaskStartScheduler+0xac>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	60fb      	str	r3, [r7, #12]
}
 8007fe4:	bf00      	nop
 8007fe6:	e7fe      	b.n	8007fe6 <vTaskStartScheduler+0xaa>
}
 8007fe8:	bf00      	nop
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	08017aa0 	.word	0x08017aa0
 8007ff4:	0800866d 	.word	0x0800866d
 8007ff8:	20005390 	.word	0x20005390
 8007ffc:	2000538c 	.word	0x2000538c
 8008000:	20005378 	.word	0x20005378
 8008004:	20005370 	.word	0x20005370

08008008 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800800c:	4b04      	ldr	r3, [pc, #16]	; (8008020 <vTaskSuspendAll+0x18>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3301      	adds	r3, #1
 8008012:	4a03      	ldr	r2, [pc, #12]	; (8008020 <vTaskSuspendAll+0x18>)
 8008014:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008016:	bf00      	nop
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	20005394 	.word	0x20005394

08008024 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800802e:	2300      	movs	r3, #0
 8008030:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008032:	4b42      	ldr	r3, [pc, #264]	; (800813c <xTaskResumeAll+0x118>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10a      	bne.n	8008050 <xTaskResumeAll+0x2c>
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	603b      	str	r3, [r7, #0]
}
 800804c:	bf00      	nop
 800804e:	e7fe      	b.n	800804e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008050:	f001 f940 	bl	80092d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008054:	4b39      	ldr	r3, [pc, #228]	; (800813c <xTaskResumeAll+0x118>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3b01      	subs	r3, #1
 800805a:	4a38      	ldr	r2, [pc, #224]	; (800813c <xTaskResumeAll+0x118>)
 800805c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800805e:	4b37      	ldr	r3, [pc, #220]	; (800813c <xTaskResumeAll+0x118>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d162      	bne.n	800812c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008066:	4b36      	ldr	r3, [pc, #216]	; (8008140 <xTaskResumeAll+0x11c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d05e      	beq.n	800812c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800806e:	e02f      	b.n	80080d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008070:	4b34      	ldr	r3, [pc, #208]	; (8008144 <xTaskResumeAll+0x120>)
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3318      	adds	r3, #24
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff f871 	bl	8007164 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3304      	adds	r3, #4
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff f86c 	bl	8007164 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008090:	4b2d      	ldr	r3, [pc, #180]	; (8008148 <xTaskResumeAll+0x124>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d903      	bls.n	80080a0 <xTaskResumeAll+0x7c>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	4a2a      	ldr	r2, [pc, #168]	; (8008148 <xTaskResumeAll+0x124>)
 800809e:	6013      	str	r3, [r2, #0]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a4:	4613      	mov	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4a27      	ldr	r2, [pc, #156]	; (800814c <xTaskResumeAll+0x128>)
 80080ae:	441a      	add	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f7fe fff7 	bl	80070aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c0:	4b23      	ldr	r3, [pc, #140]	; (8008150 <xTaskResumeAll+0x12c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d302      	bcc.n	80080d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80080ca:	4b22      	ldr	r3, [pc, #136]	; (8008154 <xTaskResumeAll+0x130>)
 80080cc:	2201      	movs	r2, #1
 80080ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080d0:	4b1c      	ldr	r3, [pc, #112]	; (8008144 <xTaskResumeAll+0x120>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1cb      	bne.n	8008070 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080de:	f000 fb7b 	bl	80087d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80080e2:	4b1d      	ldr	r3, [pc, #116]	; (8008158 <xTaskResumeAll+0x134>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d010      	beq.n	8008110 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080ee:	f000 f847 	bl	8008180 <xTaskIncrementTick>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80080f8:	4b16      	ldr	r3, [pc, #88]	; (8008154 <xTaskResumeAll+0x130>)
 80080fa:	2201      	movs	r2, #1
 80080fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3b01      	subs	r3, #1
 8008102:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1f1      	bne.n	80080ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800810a:	4b13      	ldr	r3, [pc, #76]	; (8008158 <xTaskResumeAll+0x134>)
 800810c:	2200      	movs	r2, #0
 800810e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008110:	4b10      	ldr	r3, [pc, #64]	; (8008154 <xTaskResumeAll+0x130>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d009      	beq.n	800812c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008118:	2301      	movs	r3, #1
 800811a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800811c:	4b0f      	ldr	r3, [pc, #60]	; (800815c <xTaskResumeAll+0x138>)
 800811e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800812c:	f001 f902 	bl	8009334 <vPortExitCritical>

	return xAlreadyYielded;
 8008130:	68bb      	ldr	r3, [r7, #8]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20005394 	.word	0x20005394
 8008140:	2000536c 	.word	0x2000536c
 8008144:	2000532c 	.word	0x2000532c
 8008148:	20005374 	.word	0x20005374
 800814c:	20004e9c 	.word	0x20004e9c
 8008150:	20004e98 	.word	0x20004e98
 8008154:	20005380 	.word	0x20005380
 8008158:	2000537c 	.word	0x2000537c
 800815c:	e000ed04 	.word	0xe000ed04

08008160 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008166:	4b05      	ldr	r3, [pc, #20]	; (800817c <xTaskGetTickCount+0x1c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800816c:	687b      	ldr	r3, [r7, #4]
}
 800816e:	4618      	mov	r0, r3
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20005370 	.word	0x20005370

08008180 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800818a:	4b4f      	ldr	r3, [pc, #316]	; (80082c8 <xTaskIncrementTick+0x148>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	f040 808f 	bne.w	80082b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008194:	4b4d      	ldr	r3, [pc, #308]	; (80082cc <xTaskIncrementTick+0x14c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3301      	adds	r3, #1
 800819a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800819c:	4a4b      	ldr	r2, [pc, #300]	; (80082cc <xTaskIncrementTick+0x14c>)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d120      	bne.n	80081ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80081a8:	4b49      	ldr	r3, [pc, #292]	; (80082d0 <xTaskIncrementTick+0x150>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	603b      	str	r3, [r7, #0]
}
 80081c4:	bf00      	nop
 80081c6:	e7fe      	b.n	80081c6 <xTaskIncrementTick+0x46>
 80081c8:	4b41      	ldr	r3, [pc, #260]	; (80082d0 <xTaskIncrementTick+0x150>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	4b41      	ldr	r3, [pc, #260]	; (80082d4 <xTaskIncrementTick+0x154>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a3f      	ldr	r2, [pc, #252]	; (80082d0 <xTaskIncrementTick+0x150>)
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	4a3f      	ldr	r2, [pc, #252]	; (80082d4 <xTaskIncrementTick+0x154>)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6013      	str	r3, [r2, #0]
 80081dc:	4b3e      	ldr	r3, [pc, #248]	; (80082d8 <xTaskIncrementTick+0x158>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3301      	adds	r3, #1
 80081e2:	4a3d      	ldr	r2, [pc, #244]	; (80082d8 <xTaskIncrementTick+0x158>)
 80081e4:	6013      	str	r3, [r2, #0]
 80081e6:	f000 faf7 	bl	80087d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081ea:	4b3c      	ldr	r3, [pc, #240]	; (80082dc <xTaskIncrementTick+0x15c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d349      	bcc.n	8008288 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081f4:	4b36      	ldr	r3, [pc, #216]	; (80082d0 <xTaskIncrementTick+0x150>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d104      	bne.n	8008208 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081fe:	4b37      	ldr	r3, [pc, #220]	; (80082dc <xTaskIncrementTick+0x15c>)
 8008200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008204:	601a      	str	r2, [r3, #0]
					break;
 8008206:	e03f      	b.n	8008288 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008208:	4b31      	ldr	r3, [pc, #196]	; (80082d0 <xTaskIncrementTick+0x150>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	429a      	cmp	r2, r3
 800821e:	d203      	bcs.n	8008228 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008220:	4a2e      	ldr	r2, [pc, #184]	; (80082dc <xTaskIncrementTick+0x15c>)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008226:	e02f      	b.n	8008288 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	3304      	adds	r3, #4
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe ff99 	bl	8007164 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008236:	2b00      	cmp	r3, #0
 8008238:	d004      	beq.n	8008244 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	3318      	adds	r3, #24
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe ff90 	bl	8007164 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008248:	4b25      	ldr	r3, [pc, #148]	; (80082e0 <xTaskIncrementTick+0x160>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	429a      	cmp	r2, r3
 800824e:	d903      	bls.n	8008258 <xTaskIncrementTick+0xd8>
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008254:	4a22      	ldr	r2, [pc, #136]	; (80082e0 <xTaskIncrementTick+0x160>)
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825c:	4613      	mov	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4a1f      	ldr	r2, [pc, #124]	; (80082e4 <xTaskIncrementTick+0x164>)
 8008266:	441a      	add	r2, r3
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	3304      	adds	r3, #4
 800826c:	4619      	mov	r1, r3
 800826e:	4610      	mov	r0, r2
 8008270:	f7fe ff1b 	bl	80070aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008278:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <xTaskIncrementTick+0x168>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	429a      	cmp	r2, r3
 8008280:	d3b8      	bcc.n	80081f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008282:	2301      	movs	r3, #1
 8008284:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008286:	e7b5      	b.n	80081f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008288:	4b17      	ldr	r3, [pc, #92]	; (80082e8 <xTaskIncrementTick+0x168>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828e:	4915      	ldr	r1, [pc, #84]	; (80082e4 <xTaskIncrementTick+0x164>)
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d901      	bls.n	80082a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80082a0:	2301      	movs	r3, #1
 80082a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80082a4:	4b11      	ldr	r3, [pc, #68]	; (80082ec <xTaskIncrementTick+0x16c>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d007      	beq.n	80082bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80082ac:	2301      	movs	r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	e004      	b.n	80082bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80082b2:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <xTaskIncrementTick+0x170>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3301      	adds	r3, #1
 80082b8:	4a0d      	ldr	r2, [pc, #52]	; (80082f0 <xTaskIncrementTick+0x170>)
 80082ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80082bc:	697b      	ldr	r3, [r7, #20]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20005394 	.word	0x20005394
 80082cc:	20005370 	.word	0x20005370
 80082d0:	20005324 	.word	0x20005324
 80082d4:	20005328 	.word	0x20005328
 80082d8:	20005384 	.word	0x20005384
 80082dc:	2000538c 	.word	0x2000538c
 80082e0:	20005374 	.word	0x20005374
 80082e4:	20004e9c 	.word	0x20004e9c
 80082e8:	20004e98 	.word	0x20004e98
 80082ec:	20005380 	.word	0x20005380
 80082f0:	2000537c 	.word	0x2000537c

080082f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082fa:	4b28      	ldr	r3, [pc, #160]	; (800839c <vTaskSwitchContext+0xa8>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008302:	4b27      	ldr	r3, [pc, #156]	; (80083a0 <vTaskSwitchContext+0xac>)
 8008304:	2201      	movs	r2, #1
 8008306:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008308:	e041      	b.n	800838e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800830a:	4b25      	ldr	r3, [pc, #148]	; (80083a0 <vTaskSwitchContext+0xac>)
 800830c:	2200      	movs	r2, #0
 800830e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008310:	4b24      	ldr	r3, [pc, #144]	; (80083a4 <vTaskSwitchContext+0xb0>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	e010      	b.n	800833a <vTaskSwitchContext+0x46>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10a      	bne.n	8008334 <vTaskSwitchContext+0x40>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	607b      	str	r3, [r7, #4]
}
 8008330:	bf00      	nop
 8008332:	e7fe      	b.n	8008332 <vTaskSwitchContext+0x3e>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3b01      	subs	r3, #1
 8008338:	60fb      	str	r3, [r7, #12]
 800833a:	491b      	ldr	r1, [pc, #108]	; (80083a8 <vTaskSwitchContext+0xb4>)
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4613      	mov	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	440b      	add	r3, r1
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0e4      	beq.n	8008318 <vTaskSwitchContext+0x24>
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	4613      	mov	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4a13      	ldr	r2, [pc, #76]	; (80083a8 <vTaskSwitchContext+0xb4>)
 800835a:	4413      	add	r3, r2
 800835c:	60bb      	str	r3, [r7, #8]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	605a      	str	r2, [r3, #4]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	3308      	adds	r3, #8
 8008370:	429a      	cmp	r2, r3
 8008372:	d104      	bne.n	800837e <vTaskSwitchContext+0x8a>
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	605a      	str	r2, [r3, #4]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	4a09      	ldr	r2, [pc, #36]	; (80083ac <vTaskSwitchContext+0xb8>)
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	4a06      	ldr	r2, [pc, #24]	; (80083a4 <vTaskSwitchContext+0xb0>)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6013      	str	r3, [r2, #0]
}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	20005394 	.word	0x20005394
 80083a0:	20005380 	.word	0x20005380
 80083a4:	20005374 	.word	0x20005374
 80083a8:	20004e9c 	.word	0x20004e9c
 80083ac:	20004e98 	.word	0x20004e98

080083b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10a      	bne.n	80083d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	60fb      	str	r3, [r7, #12]
}
 80083d2:	bf00      	nop
 80083d4:	e7fe      	b.n	80083d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083d6:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <vTaskPlaceOnEventList+0x44>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3318      	adds	r3, #24
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7fe fe87 	bl	80070f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083e4:	2101      	movs	r1, #1
 80083e6:	6838      	ldr	r0, [r7, #0]
 80083e8:	f000 faa2 	bl	8008930 <prvAddCurrentTaskToDelayedList>
}
 80083ec:	bf00      	nop
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	20004e98 	.word	0x20004e98

080083f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10a      	bne.n	8008420 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	617b      	str	r3, [r7, #20]
}
 800841c:	bf00      	nop
 800841e:	e7fe      	b.n	800841e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008420:	4b0a      	ldr	r3, [pc, #40]	; (800844c <vTaskPlaceOnEventListRestricted+0x54>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3318      	adds	r3, #24
 8008426:	4619      	mov	r1, r3
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f7fe fe3e 	bl	80070aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008438:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	68b8      	ldr	r0, [r7, #8]
 800843e:	f000 fa77 	bl	8008930 <prvAddCurrentTaskToDelayedList>
	}
 8008442:	bf00      	nop
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20004e98 	.word	0x20004e98

08008450 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10a      	bne.n	800847c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	60fb      	str	r3, [r7, #12]
}
 8008478:	bf00      	nop
 800847a:	e7fe      	b.n	800847a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	3318      	adds	r3, #24
 8008480:	4618      	mov	r0, r3
 8008482:	f7fe fe6f 	bl	8007164 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008486:	4b1e      	ldr	r3, [pc, #120]	; (8008500 <xTaskRemoveFromEventList+0xb0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d11d      	bne.n	80084ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	3304      	adds	r3, #4
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe fe66 	bl	8007164 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800849c:	4b19      	ldr	r3, [pc, #100]	; (8008504 <xTaskRemoveFromEventList+0xb4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d903      	bls.n	80084ac <xTaskRemoveFromEventList+0x5c>
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	4a16      	ldr	r2, [pc, #88]	; (8008504 <xTaskRemoveFromEventList+0xb4>)
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b0:	4613      	mov	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4a13      	ldr	r2, [pc, #76]	; (8008508 <xTaskRemoveFromEventList+0xb8>)
 80084ba:	441a      	add	r2, r3
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	3304      	adds	r3, #4
 80084c0:	4619      	mov	r1, r3
 80084c2:	4610      	mov	r0, r2
 80084c4:	f7fe fdf1 	bl	80070aa <vListInsertEnd>
 80084c8:	e005      	b.n	80084d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	3318      	adds	r3, #24
 80084ce:	4619      	mov	r1, r3
 80084d0:	480e      	ldr	r0, [pc, #56]	; (800850c <xTaskRemoveFromEventList+0xbc>)
 80084d2:	f7fe fdea 	bl	80070aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084da:	4b0d      	ldr	r3, [pc, #52]	; (8008510 <xTaskRemoveFromEventList+0xc0>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d905      	bls.n	80084f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80084e4:	2301      	movs	r3, #1
 80084e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80084e8:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <xTaskRemoveFromEventList+0xc4>)
 80084ea:	2201      	movs	r2, #1
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	e001      	b.n	80084f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80084f0:	2300      	movs	r3, #0
 80084f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80084f4:	697b      	ldr	r3, [r7, #20]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20005394 	.word	0x20005394
 8008504:	20005374 	.word	0x20005374
 8008508:	20004e9c 	.word	0x20004e9c
 800850c:	2000532c 	.word	0x2000532c
 8008510:	20004e98 	.word	0x20004e98
 8008514:	20005380 	.word	0x20005380

08008518 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10a      	bne.n	800853c <vTaskSetTimeOutState+0x24>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	60fb      	str	r3, [r7, #12]
}
 8008538:	bf00      	nop
 800853a:	e7fe      	b.n	800853a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800853c:	f000 feca 	bl	80092d4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008540:	4b06      	ldr	r3, [pc, #24]	; (800855c <vTaskSetTimeOutState+0x44>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008548:	4b05      	ldr	r3, [pc, #20]	; (8008560 <vTaskSetTimeOutState+0x48>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008550:	f000 fef0 	bl	8009334 <vPortExitCritical>
}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20005384 	.word	0x20005384
 8008560:	20005370 	.word	0x20005370

08008564 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800856c:	4b06      	ldr	r3, [pc, #24]	; (8008588 <vTaskInternalSetTimeOutState+0x24>)
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008574:	4b05      	ldr	r3, [pc, #20]	; (800858c <vTaskInternalSetTimeOutState+0x28>)
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	605a      	str	r2, [r3, #4]
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	20005384 	.word	0x20005384
 800858c:	20005370 	.word	0x20005370

08008590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	613b      	str	r3, [r7, #16]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10a      	bne.n	80085d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	60fb      	str	r3, [r7, #12]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80085d2:	f000 fe7f 	bl	80092d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085d6:	4b1d      	ldr	r3, [pc, #116]	; (800864c <xTaskCheckForTimeOut+0xbc>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085ee:	d102      	bne.n	80085f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61fb      	str	r3, [r7, #28]
 80085f4:	e023      	b.n	800863e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	4b15      	ldr	r3, [pc, #84]	; (8008650 <xTaskCheckForTimeOut+0xc0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d007      	beq.n	8008612 <xTaskCheckForTimeOut+0x82>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	429a      	cmp	r2, r3
 800860a:	d302      	bcc.n	8008612 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800860c:	2301      	movs	r3, #1
 800860e:	61fb      	str	r3, [r7, #28]
 8008610:	e015      	b.n	800863e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	429a      	cmp	r2, r3
 800861a:	d20b      	bcs.n	8008634 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	1ad2      	subs	r2, r2, r3
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff ff9b 	bl	8008564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800862e:	2300      	movs	r3, #0
 8008630:	61fb      	str	r3, [r7, #28]
 8008632:	e004      	b.n	800863e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800863a:	2301      	movs	r3, #1
 800863c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800863e:	f000 fe79 	bl	8009334 <vPortExitCritical>

	return xReturn;
 8008642:	69fb      	ldr	r3, [r7, #28]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3720      	adds	r7, #32
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	20005370 	.word	0x20005370
 8008650:	20005384 	.word	0x20005384

08008654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008658:	4b03      	ldr	r3, [pc, #12]	; (8008668 <vTaskMissedYield+0x14>)
 800865a:	2201      	movs	r2, #1
 800865c:	601a      	str	r2, [r3, #0]
}
 800865e:	bf00      	nop
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	20005380 	.word	0x20005380

0800866c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008674:	f000 f852 	bl	800871c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008678:	4b06      	ldr	r3, [pc, #24]	; (8008694 <prvIdleTask+0x28>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d9f9      	bls.n	8008674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008680:	4b05      	ldr	r3, [pc, #20]	; (8008698 <prvIdleTask+0x2c>)
 8008682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008690:	e7f0      	b.n	8008674 <prvIdleTask+0x8>
 8008692:	bf00      	nop
 8008694:	20004e9c 	.word	0x20004e9c
 8008698:	e000ed04 	.word	0xe000ed04

0800869c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086a2:	2300      	movs	r3, #0
 80086a4:	607b      	str	r3, [r7, #4]
 80086a6:	e00c      	b.n	80086c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	4613      	mov	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4a12      	ldr	r2, [pc, #72]	; (80086fc <prvInitialiseTaskLists+0x60>)
 80086b4:	4413      	add	r3, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe fcca 	bl	8007050 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3301      	adds	r3, #1
 80086c0:	607b      	str	r3, [r7, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b37      	cmp	r3, #55	; 0x37
 80086c6:	d9ef      	bls.n	80086a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086c8:	480d      	ldr	r0, [pc, #52]	; (8008700 <prvInitialiseTaskLists+0x64>)
 80086ca:	f7fe fcc1 	bl	8007050 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086ce:	480d      	ldr	r0, [pc, #52]	; (8008704 <prvInitialiseTaskLists+0x68>)
 80086d0:	f7fe fcbe 	bl	8007050 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086d4:	480c      	ldr	r0, [pc, #48]	; (8008708 <prvInitialiseTaskLists+0x6c>)
 80086d6:	f7fe fcbb 	bl	8007050 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086da:	480c      	ldr	r0, [pc, #48]	; (800870c <prvInitialiseTaskLists+0x70>)
 80086dc:	f7fe fcb8 	bl	8007050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086e0:	480b      	ldr	r0, [pc, #44]	; (8008710 <prvInitialiseTaskLists+0x74>)
 80086e2:	f7fe fcb5 	bl	8007050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086e6:	4b0b      	ldr	r3, [pc, #44]	; (8008714 <prvInitialiseTaskLists+0x78>)
 80086e8:	4a05      	ldr	r2, [pc, #20]	; (8008700 <prvInitialiseTaskLists+0x64>)
 80086ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086ec:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <prvInitialiseTaskLists+0x7c>)
 80086ee:	4a05      	ldr	r2, [pc, #20]	; (8008704 <prvInitialiseTaskLists+0x68>)
 80086f0:	601a      	str	r2, [r3, #0]
}
 80086f2:	bf00      	nop
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20004e9c 	.word	0x20004e9c
 8008700:	200052fc 	.word	0x200052fc
 8008704:	20005310 	.word	0x20005310
 8008708:	2000532c 	.word	0x2000532c
 800870c:	20005340 	.word	0x20005340
 8008710:	20005358 	.word	0x20005358
 8008714:	20005324 	.word	0x20005324
 8008718:	20005328 	.word	0x20005328

0800871c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008722:	e019      	b.n	8008758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008724:	f000 fdd6 	bl	80092d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008728:	4b10      	ldr	r3, [pc, #64]	; (800876c <prvCheckTasksWaitingTermination+0x50>)
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3304      	adds	r3, #4
 8008734:	4618      	mov	r0, r3
 8008736:	f7fe fd15 	bl	8007164 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800873a:	4b0d      	ldr	r3, [pc, #52]	; (8008770 <prvCheckTasksWaitingTermination+0x54>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3b01      	subs	r3, #1
 8008740:	4a0b      	ldr	r2, [pc, #44]	; (8008770 <prvCheckTasksWaitingTermination+0x54>)
 8008742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008744:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <prvCheckTasksWaitingTermination+0x58>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3b01      	subs	r3, #1
 800874a:	4a0a      	ldr	r2, [pc, #40]	; (8008774 <prvCheckTasksWaitingTermination+0x58>)
 800874c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800874e:	f000 fdf1 	bl	8009334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f810 	bl	8008778 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008758:	4b06      	ldr	r3, [pc, #24]	; (8008774 <prvCheckTasksWaitingTermination+0x58>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e1      	bne.n	8008724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20005340 	.word	0x20005340
 8008770:	2000536c 	.word	0x2000536c
 8008774:	20005354 	.word	0x20005354

08008778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008786:	2b00      	cmp	r3, #0
 8008788:	d108      	bne.n	800879c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878e:	4618      	mov	r0, r3
 8008790:	f000 ff8e 	bl	80096b0 <vPortFree>
				vPortFree( pxTCB );
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 ff8b 	bl	80096b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800879a:	e018      	b.n	80087ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d103      	bne.n	80087ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 ff82 	bl	80096b0 <vPortFree>
	}
 80087ac:	e00f      	b.n	80087ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d00a      	beq.n	80087ce <prvDeleteTCB+0x56>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	60fb      	str	r3, [r7, #12]
}
 80087ca:	bf00      	nop
 80087cc:	e7fe      	b.n	80087cc <prvDeleteTCB+0x54>
	}
 80087ce:	bf00      	nop
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087de:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <prvResetNextTaskUnblockTime+0x38>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d104      	bne.n	80087f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087e8:	4b0a      	ldr	r3, [pc, #40]	; (8008814 <prvResetNextTaskUnblockTime+0x3c>)
 80087ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087f0:	e008      	b.n	8008804 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087f2:	4b07      	ldr	r3, [pc, #28]	; (8008810 <prvResetNextTaskUnblockTime+0x38>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	4a04      	ldr	r2, [pc, #16]	; (8008814 <prvResetNextTaskUnblockTime+0x3c>)
 8008802:	6013      	str	r3, [r2, #0]
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	20005324 	.word	0x20005324
 8008814:	2000538c 	.word	0x2000538c

08008818 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800881e:	4b0b      	ldr	r3, [pc, #44]	; (800884c <xTaskGetSchedulerState+0x34>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d102      	bne.n	800882c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008826:	2301      	movs	r3, #1
 8008828:	607b      	str	r3, [r7, #4]
 800882a:	e008      	b.n	800883e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800882c:	4b08      	ldr	r3, [pc, #32]	; (8008850 <xTaskGetSchedulerState+0x38>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d102      	bne.n	800883a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008834:	2302      	movs	r3, #2
 8008836:	607b      	str	r3, [r7, #4]
 8008838:	e001      	b.n	800883e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800883a:	2300      	movs	r3, #0
 800883c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800883e:	687b      	ldr	r3, [r7, #4]
	}
 8008840:	4618      	mov	r0, r3
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	20005378 	.word	0x20005378
 8008850:	20005394 	.word	0x20005394

08008854 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008860:	2300      	movs	r3, #0
 8008862:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d056      	beq.n	8008918 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800886a:	4b2e      	ldr	r3, [pc, #184]	; (8008924 <xTaskPriorityDisinherit+0xd0>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	429a      	cmp	r2, r3
 8008872:	d00a      	beq.n	800888a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	60fb      	str	r3, [r7, #12]
}
 8008886:	bf00      	nop
 8008888:	e7fe      	b.n	8008888 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	60bb      	str	r3, [r7, #8]
}
 80088a4:	bf00      	nop
 80088a6:	e7fe      	b.n	80088a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ac:	1e5a      	subs	r2, r3, #1
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d02c      	beq.n	8008918 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d128      	bne.n	8008918 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	3304      	adds	r3, #4
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fe fc4a 	bl	8007164 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e8:	4b0f      	ldr	r3, [pc, #60]	; (8008928 <xTaskPriorityDisinherit+0xd4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d903      	bls.n	80088f8 <xTaskPriorityDisinherit+0xa4>
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	4a0c      	ldr	r2, [pc, #48]	; (8008928 <xTaskPriorityDisinherit+0xd4>)
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4a09      	ldr	r2, [pc, #36]	; (800892c <xTaskPriorityDisinherit+0xd8>)
 8008906:	441a      	add	r2, r3
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	3304      	adds	r3, #4
 800890c:	4619      	mov	r1, r3
 800890e:	4610      	mov	r0, r2
 8008910:	f7fe fbcb 	bl	80070aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008914:	2301      	movs	r3, #1
 8008916:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008918:	697b      	ldr	r3, [r7, #20]
	}
 800891a:	4618      	mov	r0, r3
 800891c:	3718      	adds	r7, #24
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	20004e98 	.word	0x20004e98
 8008928:	20005374 	.word	0x20005374
 800892c:	20004e9c 	.word	0x20004e9c

08008930 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800893a:	4b21      	ldr	r3, [pc, #132]	; (80089c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008940:	4b20      	ldr	r3, [pc, #128]	; (80089c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3304      	adds	r3, #4
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fc0c 	bl	8007164 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008952:	d10a      	bne.n	800896a <prvAddCurrentTaskToDelayedList+0x3a>
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d007      	beq.n	800896a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800895a:	4b1a      	ldr	r3, [pc, #104]	; (80089c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3304      	adds	r3, #4
 8008960:	4619      	mov	r1, r3
 8008962:	4819      	ldr	r0, [pc, #100]	; (80089c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008964:	f7fe fba1 	bl	80070aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008968:	e026      	b.n	80089b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4413      	add	r3, r2
 8008970:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008972:	4b14      	ldr	r3, [pc, #80]	; (80089c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	429a      	cmp	r2, r3
 8008980:	d209      	bcs.n	8008996 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008982:	4b12      	ldr	r3, [pc, #72]	; (80089cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3304      	adds	r3, #4
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f7fe fbaf 	bl	80070f2 <vListInsert>
}
 8008994:	e010      	b.n	80089b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008996:	4b0e      	ldr	r3, [pc, #56]	; (80089d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	4b0a      	ldr	r3, [pc, #40]	; (80089c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3304      	adds	r3, #4
 80089a0:	4619      	mov	r1, r3
 80089a2:	4610      	mov	r0, r2
 80089a4:	f7fe fba5 	bl	80070f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089a8:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d202      	bcs.n	80089b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80089b2:	4a08      	ldr	r2, [pc, #32]	; (80089d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	6013      	str	r3, [r2, #0]
}
 80089b8:	bf00      	nop
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20005370 	.word	0x20005370
 80089c4:	20004e98 	.word	0x20004e98
 80089c8:	20005358 	.word	0x20005358
 80089cc:	20005328 	.word	0x20005328
 80089d0:	20005324 	.word	0x20005324
 80089d4:	2000538c 	.word	0x2000538c

080089d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08a      	sub	sp, #40	; 0x28
 80089dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80089de:	2300      	movs	r3, #0
 80089e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80089e2:	f000 fb07 	bl	8008ff4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80089e6:	4b1c      	ldr	r3, [pc, #112]	; (8008a58 <xTimerCreateTimerTask+0x80>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d021      	beq.n	8008a32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80089f6:	1d3a      	adds	r2, r7, #4
 80089f8:	f107 0108 	add.w	r1, r7, #8
 80089fc:	f107 030c 	add.w	r3, r7, #12
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fe fb0b 	bl	800701c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a06:	6879      	ldr	r1, [r7, #4]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	9202      	str	r2, [sp, #8]
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	2302      	movs	r3, #2
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	2300      	movs	r3, #0
 8008a16:	460a      	mov	r2, r1
 8008a18:	4910      	ldr	r1, [pc, #64]	; (8008a5c <xTimerCreateTimerTask+0x84>)
 8008a1a:	4811      	ldr	r0, [pc, #68]	; (8008a60 <xTimerCreateTimerTask+0x88>)
 8008a1c:	f7ff f8b8 	bl	8007b90 <xTaskCreateStatic>
 8008a20:	4603      	mov	r3, r0
 8008a22:	4a10      	ldr	r2, [pc, #64]	; (8008a64 <xTimerCreateTimerTask+0x8c>)
 8008a24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a26:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <xTimerCreateTimerTask+0x8c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10a      	bne.n	8008a4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	613b      	str	r3, [r7, #16]
}
 8008a4a:	bf00      	nop
 8008a4c:	e7fe      	b.n	8008a4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008a4e:	697b      	ldr	r3, [r7, #20]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	200053c8 	.word	0x200053c8
 8008a5c:	08017aa8 	.word	0x08017aa8
 8008a60:	08008b9d 	.word	0x08008b9d
 8008a64:	200053cc 	.word	0x200053cc

08008a68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08a      	sub	sp, #40	; 0x28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10a      	bne.n	8008a96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	623b      	str	r3, [r7, #32]
}
 8008a92:	bf00      	nop
 8008a94:	e7fe      	b.n	8008a94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a96:	4b1a      	ldr	r3, [pc, #104]	; (8008b00 <xTimerGenericCommand+0x98>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d02a      	beq.n	8008af4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2b05      	cmp	r3, #5
 8008aae:	dc18      	bgt.n	8008ae2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ab0:	f7ff feb2 	bl	8008818 <xTaskGetSchedulerState>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d109      	bne.n	8008ace <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008aba:	4b11      	ldr	r3, [pc, #68]	; (8008b00 <xTimerGenericCommand+0x98>)
 8008abc:	6818      	ldr	r0, [r3, #0]
 8008abe:	f107 0110 	add.w	r1, r7, #16
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ac6:	f7fe fc7b 	bl	80073c0 <xQueueGenericSend>
 8008aca:	6278      	str	r0, [r7, #36]	; 0x24
 8008acc:	e012      	b.n	8008af4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ace:	4b0c      	ldr	r3, [pc, #48]	; (8008b00 <xTimerGenericCommand+0x98>)
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	f107 0110 	add.w	r1, r7, #16
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f7fe fc71 	bl	80073c0 <xQueueGenericSend>
 8008ade:	6278      	str	r0, [r7, #36]	; 0x24
 8008ae0:	e008      	b.n	8008af4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ae2:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <xTimerGenericCommand+0x98>)
 8008ae4:	6818      	ldr	r0, [r3, #0]
 8008ae6:	f107 0110 	add.w	r1, r7, #16
 8008aea:	2300      	movs	r3, #0
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	f7fe fd65 	bl	80075bc <xQueueGenericSendFromISR>
 8008af2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3728      	adds	r7, #40	; 0x28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	200053c8 	.word	0x200053c8

08008b04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af02      	add	r7, sp, #8
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b0e:	4b22      	ldr	r3, [pc, #136]	; (8008b98 <prvProcessExpiredTimer+0x94>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fe fb21 	bl	8007164 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d022      	beq.n	8008b76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	699a      	ldr	r2, [r3, #24]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	18d1      	adds	r1, r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	6978      	ldr	r0, [r7, #20]
 8008b3e:	f000 f8d1 	bl	8008ce4 <prvInsertTimerInActiveList>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d01f      	beq.n	8008b88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b48:	2300      	movs	r3, #0
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	2100      	movs	r1, #0
 8008b52:	6978      	ldr	r0, [r7, #20]
 8008b54:	f7ff ff88 	bl	8008a68 <xTimerGenericCommand>
 8008b58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d113      	bne.n	8008b88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	60fb      	str	r3, [r7, #12]
}
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b7c:	f023 0301 	bic.w	r3, r3, #1
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	6a1b      	ldr	r3, [r3, #32]
 8008b8c:	6978      	ldr	r0, [r7, #20]
 8008b8e:	4798      	blx	r3
}
 8008b90:	bf00      	nop
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	200053c0 	.word	0x200053c0

08008b9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ba4:	f107 0308 	add.w	r3, r7, #8
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 f857 	bl	8008c5c <prvGetNextExpireTime>
 8008bae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 f803 	bl	8008bc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008bba:	f000 f8d5 	bl	8008d68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bbe:	e7f1      	b.n	8008ba4 <prvTimerTask+0x8>

08008bc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008bca:	f7ff fa1d 	bl	8008008 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bce:	f107 0308 	add.w	r3, r7, #8
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 f866 	bl	8008ca4 <prvSampleTimeNow>
 8008bd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d130      	bne.n	8008c42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10a      	bne.n	8008bfc <prvProcessTimerOrBlockTask+0x3c>
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d806      	bhi.n	8008bfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008bee:	f7ff fa19 	bl	8008024 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008bf2:	68f9      	ldr	r1, [r7, #12]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7ff ff85 	bl	8008b04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008bfa:	e024      	b.n	8008c46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d008      	beq.n	8008c14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c02:	4b13      	ldr	r3, [pc, #76]	; (8008c50 <prvProcessTimerOrBlockTask+0x90>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <prvProcessTimerOrBlockTask+0x50>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e000      	b.n	8008c12 <prvProcessTimerOrBlockTask+0x52>
 8008c10:	2300      	movs	r3, #0
 8008c12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c14:	4b0f      	ldr	r3, [pc, #60]	; (8008c54 <prvProcessTimerOrBlockTask+0x94>)
 8008c16:	6818      	ldr	r0, [r3, #0]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	4619      	mov	r1, r3
 8008c22:	f7fe ff81 	bl	8007b28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c26:	f7ff f9fd 	bl	8008024 <xTaskResumeAll>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c30:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <prvProcessTimerOrBlockTask+0x98>)
 8008c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	f3bf 8f6f 	isb	sy
}
 8008c40:	e001      	b.n	8008c46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c42:	f7ff f9ef 	bl	8008024 <xTaskResumeAll>
}
 8008c46:	bf00      	nop
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	200053c4 	.word	0x200053c4
 8008c54:	200053c8 	.word	0x200053c8
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c64:	4b0e      	ldr	r3, [pc, #56]	; (8008ca0 <prvGetNextExpireTime+0x44>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <prvGetNextExpireTime+0x16>
 8008c6e:	2201      	movs	r2, #1
 8008c70:	e000      	b.n	8008c74 <prvGetNextExpireTime+0x18>
 8008c72:	2200      	movs	r2, #0
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d105      	bne.n	8008c8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c80:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <prvGetNextExpireTime+0x44>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	e001      	b.n	8008c90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c90:	68fb      	ldr	r3, [r7, #12]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	200053c0 	.word	0x200053c0

08008ca4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008cac:	f7ff fa58 	bl	8008160 <xTaskGetTickCount>
 8008cb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008cb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ce0 <prvSampleTimeNow+0x3c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d205      	bcs.n	8008cc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008cbc:	f000 f936 	bl	8008f2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	e002      	b.n	8008cce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008cce:	4a04      	ldr	r2, [pc, #16]	; (8008ce0 <prvSampleTimeNow+0x3c>)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	200053d0 	.word	0x200053d0

08008ce4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d812      	bhi.n	8008d30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	1ad2      	subs	r2, r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d302      	bcc.n	8008d1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	617b      	str	r3, [r7, #20]
 8008d1c:	e01b      	b.n	8008d56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d1e:	4b10      	ldr	r3, [pc, #64]	; (8008d60 <prvInsertTimerInActiveList+0x7c>)
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3304      	adds	r3, #4
 8008d26:	4619      	mov	r1, r3
 8008d28:	4610      	mov	r0, r2
 8008d2a:	f7fe f9e2 	bl	80070f2 <vListInsert>
 8008d2e:	e012      	b.n	8008d56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d206      	bcs.n	8008d46 <prvInsertTimerInActiveList+0x62>
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d302      	bcc.n	8008d46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d40:	2301      	movs	r3, #1
 8008d42:	617b      	str	r3, [r7, #20]
 8008d44:	e007      	b.n	8008d56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d46:	4b07      	ldr	r3, [pc, #28]	; (8008d64 <prvInsertTimerInActiveList+0x80>)
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4610      	mov	r0, r2
 8008d52:	f7fe f9ce 	bl	80070f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d56:	697b      	ldr	r3, [r7, #20]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	200053c4 	.word	0x200053c4
 8008d64:	200053c0 	.word	0x200053c0

08008d68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08e      	sub	sp, #56	; 0x38
 8008d6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d6e:	e0ca      	b.n	8008f06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	da18      	bge.n	8008da8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d76:	1d3b      	adds	r3, r7, #4
 8008d78:	3304      	adds	r3, #4
 8008d7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10a      	bne.n	8008d98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	61fb      	str	r3, [r7, #28]
}
 8008d94:	bf00      	nop
 8008d96:	e7fe      	b.n	8008d96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d9e:	6850      	ldr	r0, [r2, #4]
 8008da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008da2:	6892      	ldr	r2, [r2, #8]
 8008da4:	4611      	mov	r1, r2
 8008da6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f2c0 80ab 	blt.w	8008f06 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fe f9cf 	bl	8007164 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dc6:	463b      	mov	r3, r7
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7ff ff6b 	bl	8008ca4 <prvSampleTimeNow>
 8008dce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b09      	cmp	r3, #9
 8008dd4:	f200 8096 	bhi.w	8008f04 <prvProcessReceivedCommands+0x19c>
 8008dd8:	a201      	add	r2, pc, #4	; (adr r2, 8008de0 <prvProcessReceivedCommands+0x78>)
 8008dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dde:	bf00      	nop
 8008de0:	08008e09 	.word	0x08008e09
 8008de4:	08008e09 	.word	0x08008e09
 8008de8:	08008e09 	.word	0x08008e09
 8008dec:	08008e7d 	.word	0x08008e7d
 8008df0:	08008e91 	.word	0x08008e91
 8008df4:	08008edb 	.word	0x08008edb
 8008df8:	08008e09 	.word	0x08008e09
 8008dfc:	08008e09 	.word	0x08008e09
 8008e00:	08008e7d 	.word	0x08008e7d
 8008e04:	08008e91 	.word	0x08008e91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e0e:	f043 0301 	orr.w	r3, r3, #1
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	18d1      	adds	r1, r2, r3
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e28:	f7ff ff5c 	bl	8008ce4 <prvInsertTimerInActiveList>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d069      	beq.n	8008f06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d05e      	beq.n	8008f06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	441a      	add	r2, r3
 8008e50:	2300      	movs	r3, #0
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	2300      	movs	r3, #0
 8008e56:	2100      	movs	r1, #0
 8008e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e5a:	f7ff fe05 	bl	8008a68 <xTimerGenericCommand>
 8008e5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e60:	6a3b      	ldr	r3, [r7, #32]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d14f      	bne.n	8008f06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	61bb      	str	r3, [r7, #24]
}
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e82:	f023 0301 	bic.w	r3, r3, #1
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008e8e:	e03a      	b.n	8008f06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e96:	f043 0301 	orr.w	r3, r3, #1
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	617b      	str	r3, [r7, #20]
}
 8008ec2:	bf00      	nop
 8008ec4:	e7fe      	b.n	8008ec4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec8:	699a      	ldr	r2, [r3, #24]
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	18d1      	adds	r1, r2, r3
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ed4:	f7ff ff06 	bl	8008ce4 <prvInsertTimerInActiveList>
					break;
 8008ed8:	e015      	b.n	8008f06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ee0:	f003 0302 	and.w	r3, r3, #2
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d103      	bne.n	8008ef0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eea:	f000 fbe1 	bl	80096b0 <vPortFree>
 8008eee:	e00a      	b.n	8008f06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ef6:	f023 0301 	bic.w	r3, r3, #1
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f02:	e000      	b.n	8008f06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008f04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f06:	4b08      	ldr	r3, [pc, #32]	; (8008f28 <prvProcessReceivedCommands+0x1c0>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	1d39      	adds	r1, r7, #4
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe fbf0 	bl	80076f4 <xQueueReceive>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f47f af2a 	bne.w	8008d70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008f1c:	bf00      	nop
 8008f1e:	bf00      	nop
 8008f20:	3730      	adds	r7, #48	; 0x30
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	200053c8 	.word	0x200053c8

08008f2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f32:	e048      	b.n	8008fc6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f34:	4b2d      	ldr	r3, [pc, #180]	; (8008fec <prvSwitchTimerLists+0xc0>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f3e:	4b2b      	ldr	r3, [pc, #172]	; (8008fec <prvSwitchTimerLists+0xc0>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fe f909 	bl	8007164 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d02e      	beq.n	8008fc6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	4413      	add	r3, r2
 8008f70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d90e      	bls.n	8008f98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f86:	4b19      	ldr	r3, [pc, #100]	; (8008fec <prvSwitchTimerLists+0xc0>)
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4610      	mov	r0, r2
 8008f92:	f7fe f8ae 	bl	80070f2 <vListInsert>
 8008f96:	e016      	b.n	8008fc6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f98:	2300      	movs	r3, #0
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7ff fd60 	bl	8008a68 <xTimerGenericCommand>
 8008fa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	603b      	str	r3, [r7, #0]
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fc6:	4b09      	ldr	r3, [pc, #36]	; (8008fec <prvSwitchTimerLists+0xc0>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1b1      	bne.n	8008f34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008fd0:	4b06      	ldr	r3, [pc, #24]	; (8008fec <prvSwitchTimerLists+0xc0>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008fd6:	4b06      	ldr	r3, [pc, #24]	; (8008ff0 <prvSwitchTimerLists+0xc4>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a04      	ldr	r2, [pc, #16]	; (8008fec <prvSwitchTimerLists+0xc0>)
 8008fdc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008fde:	4a04      	ldr	r2, [pc, #16]	; (8008ff0 <prvSwitchTimerLists+0xc4>)
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	6013      	str	r3, [r2, #0]
}
 8008fe4:	bf00      	nop
 8008fe6:	3718      	adds	r7, #24
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	200053c0 	.word	0x200053c0
 8008ff0:	200053c4 	.word	0x200053c4

08008ff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ffa:	f000 f96b 	bl	80092d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ffe:	4b15      	ldr	r3, [pc, #84]	; (8009054 <prvCheckForValidListAndQueue+0x60>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d120      	bne.n	8009048 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009006:	4814      	ldr	r0, [pc, #80]	; (8009058 <prvCheckForValidListAndQueue+0x64>)
 8009008:	f7fe f822 	bl	8007050 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800900c:	4813      	ldr	r0, [pc, #76]	; (800905c <prvCheckForValidListAndQueue+0x68>)
 800900e:	f7fe f81f 	bl	8007050 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009012:	4b13      	ldr	r3, [pc, #76]	; (8009060 <prvCheckForValidListAndQueue+0x6c>)
 8009014:	4a10      	ldr	r2, [pc, #64]	; (8009058 <prvCheckForValidListAndQueue+0x64>)
 8009016:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009018:	4b12      	ldr	r3, [pc, #72]	; (8009064 <prvCheckForValidListAndQueue+0x70>)
 800901a:	4a10      	ldr	r2, [pc, #64]	; (800905c <prvCheckForValidListAndQueue+0x68>)
 800901c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800901e:	2300      	movs	r3, #0
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	4b11      	ldr	r3, [pc, #68]	; (8009068 <prvCheckForValidListAndQueue+0x74>)
 8009024:	4a11      	ldr	r2, [pc, #68]	; (800906c <prvCheckForValidListAndQueue+0x78>)
 8009026:	2110      	movs	r1, #16
 8009028:	200a      	movs	r0, #10
 800902a:	f7fe f92d 	bl	8007288 <xQueueGenericCreateStatic>
 800902e:	4603      	mov	r3, r0
 8009030:	4a08      	ldr	r2, [pc, #32]	; (8009054 <prvCheckForValidListAndQueue+0x60>)
 8009032:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009034:	4b07      	ldr	r3, [pc, #28]	; (8009054 <prvCheckForValidListAndQueue+0x60>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d005      	beq.n	8009048 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800903c:	4b05      	ldr	r3, [pc, #20]	; (8009054 <prvCheckForValidListAndQueue+0x60>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	490b      	ldr	r1, [pc, #44]	; (8009070 <prvCheckForValidListAndQueue+0x7c>)
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe fd46 	bl	8007ad4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009048:	f000 f974 	bl	8009334 <vPortExitCritical>
}
 800904c:	bf00      	nop
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	200053c8 	.word	0x200053c8
 8009058:	20005398 	.word	0x20005398
 800905c:	200053ac 	.word	0x200053ac
 8009060:	200053c0 	.word	0x200053c0
 8009064:	200053c4 	.word	0x200053c4
 8009068:	20005474 	.word	0x20005474
 800906c:	200053d4 	.word	0x200053d4
 8009070:	08017ab0 	.word	0x08017ab0

08009074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	3b04      	subs	r3, #4
 8009084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800908c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3b04      	subs	r3, #4
 8009092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f023 0201 	bic.w	r2, r3, #1
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3b04      	subs	r3, #4
 80090a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090a4:	4a0c      	ldr	r2, [pc, #48]	; (80090d8 <pxPortInitialiseStack+0x64>)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	3b14      	subs	r3, #20
 80090ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	3b04      	subs	r3, #4
 80090ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f06f 0202 	mvn.w	r2, #2
 80090c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	3b20      	subs	r3, #32
 80090c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090ca:	68fb      	ldr	r3, [r7, #12]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	080090dd 	.word	0x080090dd

080090dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090e6:	4b12      	ldr	r3, [pc, #72]	; (8009130 <prvTaskExitError+0x54>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090ee:	d00a      	beq.n	8009106 <prvTaskExitError+0x2a>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	60fb      	str	r3, [r7, #12]
}
 8009102:	bf00      	nop
 8009104:	e7fe      	b.n	8009104 <prvTaskExitError+0x28>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	60bb      	str	r3, [r7, #8]
}
 8009118:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800911a:	bf00      	nop
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0fc      	beq.n	800911c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009122:	bf00      	nop
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	20000010 	.word	0x20000010
	...

08009140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009140:	4b07      	ldr	r3, [pc, #28]	; (8009160 <pxCurrentTCBConst2>)
 8009142:	6819      	ldr	r1, [r3, #0]
 8009144:	6808      	ldr	r0, [r1, #0]
 8009146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914a:	f380 8809 	msr	PSP, r0
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f04f 0000 	mov.w	r0, #0
 8009156:	f380 8811 	msr	BASEPRI, r0
 800915a:	4770      	bx	lr
 800915c:	f3af 8000 	nop.w

08009160 <pxCurrentTCBConst2>:
 8009160:	20004e98 	.word	0x20004e98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop

08009168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009168:	4808      	ldr	r0, [pc, #32]	; (800918c <prvPortStartFirstTask+0x24>)
 800916a:	6800      	ldr	r0, [r0, #0]
 800916c:	6800      	ldr	r0, [r0, #0]
 800916e:	f380 8808 	msr	MSP, r0
 8009172:	f04f 0000 	mov.w	r0, #0
 8009176:	f380 8814 	msr	CONTROL, r0
 800917a:	b662      	cpsie	i
 800917c:	b661      	cpsie	f
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	df00      	svc	0
 8009188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800918a:	bf00      	nop
 800918c:	e000ed08 	.word	0xe000ed08

08009190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009196:	4b46      	ldr	r3, [pc, #280]	; (80092b0 <xPortStartScheduler+0x120>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a46      	ldr	r2, [pc, #280]	; (80092b4 <xPortStartScheduler+0x124>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d10a      	bne.n	80091b6 <xPortStartScheduler+0x26>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	613b      	str	r3, [r7, #16]
}
 80091b2:	bf00      	nop
 80091b4:	e7fe      	b.n	80091b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091b6:	4b3e      	ldr	r3, [pc, #248]	; (80092b0 <xPortStartScheduler+0x120>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a3f      	ldr	r2, [pc, #252]	; (80092b8 <xPortStartScheduler+0x128>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d10a      	bne.n	80091d6 <xPortStartScheduler+0x46>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	60fb      	str	r3, [r7, #12]
}
 80091d2:	bf00      	nop
 80091d4:	e7fe      	b.n	80091d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091d6:	4b39      	ldr	r3, [pc, #228]	; (80092bc <xPortStartScheduler+0x12c>)
 80091d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	22ff      	movs	r2, #255	; 0xff
 80091e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091f0:	78fb      	ldrb	r3, [r7, #3]
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	4b31      	ldr	r3, [pc, #196]	; (80092c0 <xPortStartScheduler+0x130>)
 80091fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091fe:	4b31      	ldr	r3, [pc, #196]	; (80092c4 <xPortStartScheduler+0x134>)
 8009200:	2207      	movs	r2, #7
 8009202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009204:	e009      	b.n	800921a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009206:	4b2f      	ldr	r3, [pc, #188]	; (80092c4 <xPortStartScheduler+0x134>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3b01      	subs	r3, #1
 800920c:	4a2d      	ldr	r2, [pc, #180]	; (80092c4 <xPortStartScheduler+0x134>)
 800920e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	b2db      	uxtb	r3, r3
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	b2db      	uxtb	r3, r3
 8009218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800921a:	78fb      	ldrb	r3, [r7, #3]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009222:	2b80      	cmp	r3, #128	; 0x80
 8009224:	d0ef      	beq.n	8009206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009226:	4b27      	ldr	r3, [pc, #156]	; (80092c4 <xPortStartScheduler+0x134>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f1c3 0307 	rsb	r3, r3, #7
 800922e:	2b04      	cmp	r3, #4
 8009230:	d00a      	beq.n	8009248 <xPortStartScheduler+0xb8>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	60bb      	str	r3, [r7, #8]
}
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009248:	4b1e      	ldr	r3, [pc, #120]	; (80092c4 <xPortStartScheduler+0x134>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	021b      	lsls	r3, r3, #8
 800924e:	4a1d      	ldr	r2, [pc, #116]	; (80092c4 <xPortStartScheduler+0x134>)
 8009250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009252:	4b1c      	ldr	r3, [pc, #112]	; (80092c4 <xPortStartScheduler+0x134>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800925a:	4a1a      	ldr	r2, [pc, #104]	; (80092c4 <xPortStartScheduler+0x134>)
 800925c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	b2da      	uxtb	r2, r3
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009266:	4b18      	ldr	r3, [pc, #96]	; (80092c8 <xPortStartScheduler+0x138>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a17      	ldr	r2, [pc, #92]	; (80092c8 <xPortStartScheduler+0x138>)
 800926c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009272:	4b15      	ldr	r3, [pc, #84]	; (80092c8 <xPortStartScheduler+0x138>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a14      	ldr	r2, [pc, #80]	; (80092c8 <xPortStartScheduler+0x138>)
 8009278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800927c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800927e:	f000 f8dd 	bl	800943c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009282:	4b12      	ldr	r3, [pc, #72]	; (80092cc <xPortStartScheduler+0x13c>)
 8009284:	2200      	movs	r2, #0
 8009286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009288:	f000 f8fc 	bl	8009484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800928c:	4b10      	ldr	r3, [pc, #64]	; (80092d0 <xPortStartScheduler+0x140>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a0f      	ldr	r2, [pc, #60]	; (80092d0 <xPortStartScheduler+0x140>)
 8009292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009298:	f7ff ff66 	bl	8009168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800929c:	f7ff f82a 	bl	80082f4 <vTaskSwitchContext>
	prvTaskExitError();
 80092a0:	f7ff ff1c 	bl	80090dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3718      	adds	r7, #24
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	e000ed00 	.word	0xe000ed00
 80092b4:	410fc271 	.word	0x410fc271
 80092b8:	410fc270 	.word	0x410fc270
 80092bc:	e000e400 	.word	0xe000e400
 80092c0:	200054c4 	.word	0x200054c4
 80092c4:	200054c8 	.word	0x200054c8
 80092c8:	e000ed20 	.word	0xe000ed20
 80092cc:	20000010 	.word	0x20000010
 80092d0:	e000ef34 	.word	0xe000ef34

080092d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	607b      	str	r3, [r7, #4]
}
 80092ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092ee:	4b0f      	ldr	r3, [pc, #60]	; (800932c <vPortEnterCritical+0x58>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3301      	adds	r3, #1
 80092f4:	4a0d      	ldr	r2, [pc, #52]	; (800932c <vPortEnterCritical+0x58>)
 80092f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092f8:	4b0c      	ldr	r3, [pc, #48]	; (800932c <vPortEnterCritical+0x58>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d10f      	bne.n	8009320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009300:	4b0b      	ldr	r3, [pc, #44]	; (8009330 <vPortEnterCritical+0x5c>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00a      	beq.n	8009320 <vPortEnterCritical+0x4c>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	603b      	str	r3, [r7, #0]
}
 800931c:	bf00      	nop
 800931e:	e7fe      	b.n	800931e <vPortEnterCritical+0x4a>
	}
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	20000010 	.word	0x20000010
 8009330:	e000ed04 	.word	0xe000ed04

08009334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800933a:	4b12      	ldr	r3, [pc, #72]	; (8009384 <vPortExitCritical+0x50>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10a      	bne.n	8009358 <vPortExitCritical+0x24>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	607b      	str	r3, [r7, #4]
}
 8009354:	bf00      	nop
 8009356:	e7fe      	b.n	8009356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009358:	4b0a      	ldr	r3, [pc, #40]	; (8009384 <vPortExitCritical+0x50>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3b01      	subs	r3, #1
 800935e:	4a09      	ldr	r2, [pc, #36]	; (8009384 <vPortExitCritical+0x50>)
 8009360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009362:	4b08      	ldr	r3, [pc, #32]	; (8009384 <vPortExitCritical+0x50>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d105      	bne.n	8009376 <vPortExitCritical+0x42>
 800936a:	2300      	movs	r3, #0
 800936c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	f383 8811 	msr	BASEPRI, r3
}
 8009374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009376:	bf00      	nop
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	20000010 	.word	0x20000010
	...

08009390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009390:	f3ef 8009 	mrs	r0, PSP
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	4b15      	ldr	r3, [pc, #84]	; (80093f0 <pxCurrentTCBConst>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	f01e 0f10 	tst.w	lr, #16
 80093a0:	bf08      	it	eq
 80093a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093aa:	6010      	str	r0, [r2, #0]
 80093ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80093b4:	f380 8811 	msr	BASEPRI, r0
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f7fe ff98 	bl	80082f4 <vTaskSwitchContext>
 80093c4:	f04f 0000 	mov.w	r0, #0
 80093c8:	f380 8811 	msr	BASEPRI, r0
 80093cc:	bc09      	pop	{r0, r3}
 80093ce:	6819      	ldr	r1, [r3, #0]
 80093d0:	6808      	ldr	r0, [r1, #0]
 80093d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d6:	f01e 0f10 	tst.w	lr, #16
 80093da:	bf08      	it	eq
 80093dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80093e0:	f380 8809 	msr	PSP, r0
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	f3af 8000 	nop.w

080093f0 <pxCurrentTCBConst>:
 80093f0:	20004e98 	.word	0x20004e98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093f4:	bf00      	nop
 80093f6:	bf00      	nop

080093f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	607b      	str	r3, [r7, #4]
}
 8009410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009412:	f7fe feb5 	bl	8008180 <xTaskIncrementTick>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d003      	beq.n	8009424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800941c:	4b06      	ldr	r3, [pc, #24]	; (8009438 <xPortSysTickHandler+0x40>)
 800941e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	2300      	movs	r3, #0
 8009426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	f383 8811 	msr	BASEPRI, r3
}
 800942e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	e000ed04 	.word	0xe000ed04

0800943c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009440:	4b0b      	ldr	r3, [pc, #44]	; (8009470 <vPortSetupTimerInterrupt+0x34>)
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009446:	4b0b      	ldr	r3, [pc, #44]	; (8009474 <vPortSetupTimerInterrupt+0x38>)
 8009448:	2200      	movs	r2, #0
 800944a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800944c:	4b0a      	ldr	r3, [pc, #40]	; (8009478 <vPortSetupTimerInterrupt+0x3c>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a0a      	ldr	r2, [pc, #40]	; (800947c <vPortSetupTimerInterrupt+0x40>)
 8009452:	fba2 2303 	umull	r2, r3, r2, r3
 8009456:	099b      	lsrs	r3, r3, #6
 8009458:	4a09      	ldr	r2, [pc, #36]	; (8009480 <vPortSetupTimerInterrupt+0x44>)
 800945a:	3b01      	subs	r3, #1
 800945c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800945e:	4b04      	ldr	r3, [pc, #16]	; (8009470 <vPortSetupTimerInterrupt+0x34>)
 8009460:	2207      	movs	r2, #7
 8009462:	601a      	str	r2, [r3, #0]
}
 8009464:	bf00      	nop
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	e000e010 	.word	0xe000e010
 8009474:	e000e018 	.word	0xe000e018
 8009478:	20000004 	.word	0x20000004
 800947c:	10624dd3 	.word	0x10624dd3
 8009480:	e000e014 	.word	0xe000e014

08009484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009494 <vPortEnableVFP+0x10>
 8009488:	6801      	ldr	r1, [r0, #0]
 800948a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800948e:	6001      	str	r1, [r0, #0]
 8009490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009492:	bf00      	nop
 8009494:	e000ed88 	.word	0xe000ed88

08009498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800949e:	f3ef 8305 	mrs	r3, IPSR
 80094a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b0f      	cmp	r3, #15
 80094a8:	d914      	bls.n	80094d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80094aa:	4a17      	ldr	r2, [pc, #92]	; (8009508 <vPortValidateInterruptPriority+0x70>)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4413      	add	r3, r2
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80094b4:	4b15      	ldr	r3, [pc, #84]	; (800950c <vPortValidateInterruptPriority+0x74>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	7afa      	ldrb	r2, [r7, #11]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d20a      	bcs.n	80094d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	607b      	str	r3, [r7, #4]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80094d4:	4b0e      	ldr	r3, [pc, #56]	; (8009510 <vPortValidateInterruptPriority+0x78>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80094dc:	4b0d      	ldr	r3, [pc, #52]	; (8009514 <vPortValidateInterruptPriority+0x7c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d90a      	bls.n	80094fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	603b      	str	r3, [r7, #0]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <vPortValidateInterruptPriority+0x60>
	}
 80094fa:	bf00      	nop
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	e000e3f0 	.word	0xe000e3f0
 800950c:	200054c4 	.word	0x200054c4
 8009510:	e000ed0c 	.word	0xe000ed0c
 8009514:	200054c8 	.word	0x200054c8

08009518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b08a      	sub	sp, #40	; 0x28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009520:	2300      	movs	r3, #0
 8009522:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009524:	f7fe fd70 	bl	8008008 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009528:	4b5b      	ldr	r3, [pc, #364]	; (8009698 <pvPortMalloc+0x180>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009530:	f000 f920 	bl	8009774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009534:	4b59      	ldr	r3, [pc, #356]	; (800969c <pvPortMalloc+0x184>)
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4013      	ands	r3, r2
 800953c:	2b00      	cmp	r3, #0
 800953e:	f040 8093 	bne.w	8009668 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d01d      	beq.n	8009584 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009548:	2208      	movs	r2, #8
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4413      	add	r3, r2
 800954e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f003 0307 	and.w	r3, r3, #7
 8009556:	2b00      	cmp	r3, #0
 8009558:	d014      	beq.n	8009584 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f023 0307 	bic.w	r3, r3, #7
 8009560:	3308      	adds	r3, #8
 8009562:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f003 0307 	and.w	r3, r3, #7
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <pvPortMalloc+0x6c>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	617b      	str	r3, [r7, #20]
}
 8009580:	bf00      	nop
 8009582:	e7fe      	b.n	8009582 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d06e      	beq.n	8009668 <pvPortMalloc+0x150>
 800958a:	4b45      	ldr	r3, [pc, #276]	; (80096a0 <pvPortMalloc+0x188>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d869      	bhi.n	8009668 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009594:	4b43      	ldr	r3, [pc, #268]	; (80096a4 <pvPortMalloc+0x18c>)
 8009596:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009598:	4b42      	ldr	r3, [pc, #264]	; (80096a4 <pvPortMalloc+0x18c>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800959e:	e004      	b.n	80095aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d903      	bls.n	80095bc <pvPortMalloc+0xa4>
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1f1      	bne.n	80095a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095bc:	4b36      	ldr	r3, [pc, #216]	; (8009698 <pvPortMalloc+0x180>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d050      	beq.n	8009668 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2208      	movs	r2, #8
 80095cc:	4413      	add	r3, r2
 80095ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	1ad2      	subs	r2, r2, r3
 80095e0:	2308      	movs	r3, #8
 80095e2:	005b      	lsls	r3, r3, #1
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d91f      	bls.n	8009628 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4413      	add	r3, r2
 80095ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00a      	beq.n	8009610 <pvPortMalloc+0xf8>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	613b      	str	r3, [r7, #16]
}
 800960c:	bf00      	nop
 800960e:	e7fe      	b.n	800960e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	685a      	ldr	r2, [r3, #4]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	1ad2      	subs	r2, r2, r3
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009622:	69b8      	ldr	r0, [r7, #24]
 8009624:	f000 f908 	bl	8009838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009628:	4b1d      	ldr	r3, [pc, #116]	; (80096a0 <pvPortMalloc+0x188>)
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	4a1b      	ldr	r2, [pc, #108]	; (80096a0 <pvPortMalloc+0x188>)
 8009634:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009636:	4b1a      	ldr	r3, [pc, #104]	; (80096a0 <pvPortMalloc+0x188>)
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	4b1b      	ldr	r3, [pc, #108]	; (80096a8 <pvPortMalloc+0x190>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	429a      	cmp	r2, r3
 8009640:	d203      	bcs.n	800964a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009642:	4b17      	ldr	r3, [pc, #92]	; (80096a0 <pvPortMalloc+0x188>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a18      	ldr	r2, [pc, #96]	; (80096a8 <pvPortMalloc+0x190>)
 8009648:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	4b13      	ldr	r3, [pc, #76]	; (800969c <pvPortMalloc+0x184>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	431a      	orrs	r2, r3
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	2200      	movs	r2, #0
 800965c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800965e:	4b13      	ldr	r3, [pc, #76]	; (80096ac <pvPortMalloc+0x194>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3301      	adds	r3, #1
 8009664:	4a11      	ldr	r2, [pc, #68]	; (80096ac <pvPortMalloc+0x194>)
 8009666:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009668:	f7fe fcdc 	bl	8008024 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	f003 0307 	and.w	r3, r3, #7
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00a      	beq.n	800968c <pvPortMalloc+0x174>
	__asm volatile
 8009676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	60fb      	str	r3, [r7, #12]
}
 8009688:	bf00      	nop
 800968a:	e7fe      	b.n	800968a <pvPortMalloc+0x172>
	return pvReturn;
 800968c:	69fb      	ldr	r3, [r7, #28]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3728      	adds	r7, #40	; 0x28
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	200090d4 	.word	0x200090d4
 800969c:	200090e8 	.word	0x200090e8
 80096a0:	200090d8 	.word	0x200090d8
 80096a4:	200090cc 	.word	0x200090cc
 80096a8:	200090dc 	.word	0x200090dc
 80096ac:	200090e0 	.word	0x200090e0

080096b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d04d      	beq.n	800975e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096c2:	2308      	movs	r3, #8
 80096c4:	425b      	negs	r3, r3
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	4413      	add	r3, r2
 80096ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	4b24      	ldr	r3, [pc, #144]	; (8009768 <vPortFree+0xb8>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4013      	ands	r3, r2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10a      	bne.n	80096f4 <vPortFree+0x44>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	60fb      	str	r3, [r7, #12]
}
 80096f0:	bf00      	nop
 80096f2:	e7fe      	b.n	80096f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00a      	beq.n	8009712 <vPortFree+0x62>
	__asm volatile
 80096fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	60bb      	str	r3, [r7, #8]
}
 800970e:	bf00      	nop
 8009710:	e7fe      	b.n	8009710 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	4b14      	ldr	r3, [pc, #80]	; (8009768 <vPortFree+0xb8>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4013      	ands	r3, r2
 800971c:	2b00      	cmp	r3, #0
 800971e:	d01e      	beq.n	800975e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d11a      	bne.n	800975e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	4b0e      	ldr	r3, [pc, #56]	; (8009768 <vPortFree+0xb8>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	43db      	mvns	r3, r3
 8009732:	401a      	ands	r2, r3
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009738:	f7fe fc66 	bl	8008008 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	4b0a      	ldr	r3, [pc, #40]	; (800976c <vPortFree+0xbc>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4413      	add	r3, r2
 8009746:	4a09      	ldr	r2, [pc, #36]	; (800976c <vPortFree+0xbc>)
 8009748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800974a:	6938      	ldr	r0, [r7, #16]
 800974c:	f000 f874 	bl	8009838 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009750:	4b07      	ldr	r3, [pc, #28]	; (8009770 <vPortFree+0xc0>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3301      	adds	r3, #1
 8009756:	4a06      	ldr	r2, [pc, #24]	; (8009770 <vPortFree+0xc0>)
 8009758:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800975a:	f7fe fc63 	bl	8008024 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800975e:	bf00      	nop
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	200090e8 	.word	0x200090e8
 800976c:	200090d8 	.word	0x200090d8
 8009770:	200090e4 	.word	0x200090e4

08009774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800977a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800977e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009780:	4b27      	ldr	r3, [pc, #156]	; (8009820 <prvHeapInit+0xac>)
 8009782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f003 0307 	and.w	r3, r3, #7
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00c      	beq.n	80097a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3307      	adds	r3, #7
 8009792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 0307 	bic.w	r3, r3, #7
 800979a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	4a1f      	ldr	r2, [pc, #124]	; (8009820 <prvHeapInit+0xac>)
 80097a4:	4413      	add	r3, r2
 80097a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097ac:	4a1d      	ldr	r2, [pc, #116]	; (8009824 <prvHeapInit+0xb0>)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097b2:	4b1c      	ldr	r3, [pc, #112]	; (8009824 <prvHeapInit+0xb0>)
 80097b4:	2200      	movs	r2, #0
 80097b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	4413      	add	r3, r2
 80097be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097c0:	2208      	movs	r2, #8
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	1a9b      	subs	r3, r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f023 0307 	bic.w	r3, r3, #7
 80097ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	4a15      	ldr	r2, [pc, #84]	; (8009828 <prvHeapInit+0xb4>)
 80097d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097d6:	4b14      	ldr	r3, [pc, #80]	; (8009828 <prvHeapInit+0xb4>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2200      	movs	r2, #0
 80097dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097de:	4b12      	ldr	r3, [pc, #72]	; (8009828 <prvHeapInit+0xb4>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2200      	movs	r2, #0
 80097e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	1ad2      	subs	r2, r2, r3
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097f4:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <prvHeapInit+0xb4>)
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	4a0a      	ldr	r2, [pc, #40]	; (800982c <prvHeapInit+0xb8>)
 8009802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	4a09      	ldr	r2, [pc, #36]	; (8009830 <prvHeapInit+0xbc>)
 800980a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800980c:	4b09      	ldr	r3, [pc, #36]	; (8009834 <prvHeapInit+0xc0>)
 800980e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009812:	601a      	str	r2, [r3, #0]
}
 8009814:	bf00      	nop
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	200054cc 	.word	0x200054cc
 8009824:	200090cc 	.word	0x200090cc
 8009828:	200090d4 	.word	0x200090d4
 800982c:	200090dc 	.word	0x200090dc
 8009830:	200090d8 	.word	0x200090d8
 8009834:	200090e8 	.word	0x200090e8

08009838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009840:	4b28      	ldr	r3, [pc, #160]	; (80098e4 <prvInsertBlockIntoFreeList+0xac>)
 8009842:	60fb      	str	r3, [r7, #12]
 8009844:	e002      	b.n	800984c <prvInsertBlockIntoFreeList+0x14>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	60fb      	str	r3, [r7, #12]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	429a      	cmp	r2, r3
 8009854:	d8f7      	bhi.n	8009846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	4413      	add	r3, r2
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	429a      	cmp	r2, r3
 8009866:	d108      	bne.n	800987a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	685a      	ldr	r2, [r3, #4]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	441a      	add	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	441a      	add	r2, r3
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	429a      	cmp	r2, r3
 800988c:	d118      	bne.n	80098c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	4b15      	ldr	r3, [pc, #84]	; (80098e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	429a      	cmp	r2, r3
 8009898:	d00d      	beq.n	80098b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	441a      	add	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	e008      	b.n	80098c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098b6:	4b0c      	ldr	r3, [pc, #48]	; (80098e8 <prvInsertBlockIntoFreeList+0xb0>)
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	e003      	b.n	80098c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d002      	beq.n	80098d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098d6:	bf00      	nop
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	200090cc 	.word	0x200090cc
 80098e8:	200090d4 	.word	0x200090d4

080098ec <rcl_get_zero_initialized_publisher>:
 80098ec:	4b01      	ldr	r3, [pc, #4]	; (80098f4 <rcl_get_zero_initialized_publisher+0x8>)
 80098ee:	6818      	ldr	r0, [r3, #0]
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	08017b1c 	.word	0x08017b1c

080098f8 <rcl_publisher_init>:
 80098f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098fc:	b088      	sub	sp, #32
 80098fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009900:	2d00      	cmp	r5, #0
 8009902:	d069      	beq.n	80099d8 <rcl_publisher_init+0xe0>
 8009904:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8009908:	4604      	mov	r4, r0
 800990a:	4648      	mov	r0, r9
 800990c:	460e      	mov	r6, r1
 800990e:	4690      	mov	r8, r2
 8009910:	461f      	mov	r7, r3
 8009912:	f001 f83d 	bl	800a990 <rcutils_allocator_is_valid>
 8009916:	2800      	cmp	r0, #0
 8009918:	d05e      	beq.n	80099d8 <rcl_publisher_init+0xe0>
 800991a:	2c00      	cmp	r4, #0
 800991c:	d05c      	beq.n	80099d8 <rcl_publisher_init+0xe0>
 800991e:	f8d4 a000 	ldr.w	sl, [r4]
 8009922:	f1ba 0f00 	cmp.w	sl, #0
 8009926:	d004      	beq.n	8009932 <rcl_publisher_init+0x3a>
 8009928:	2764      	movs	r7, #100	; 0x64
 800992a:	4638      	mov	r0, r7
 800992c:	b008      	add	sp, #32
 800992e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009932:	4630      	mov	r0, r6
 8009934:	f006 fb1a 	bl	800ff6c <rcl_node_is_valid>
 8009938:	2800      	cmp	r0, #0
 800993a:	d052      	beq.n	80099e2 <rcl_publisher_init+0xea>
 800993c:	f1b8 0f00 	cmp.w	r8, #0
 8009940:	d04a      	beq.n	80099d8 <rcl_publisher_init+0xe0>
 8009942:	2f00      	cmp	r7, #0
 8009944:	d048      	beq.n	80099d8 <rcl_publisher_init+0xe0>
 8009946:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800994a:	aa07      	add	r2, sp, #28
 800994c:	9205      	str	r2, [sp, #20]
 800994e:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8009952:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009956:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800995a:	f8cd a01c 	str.w	sl, [sp, #28]
 800995e:	4639      	mov	r1, r7
 8009960:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009964:	4630      	mov	r0, r6
 8009966:	f006 fb55 	bl	8010014 <rcl_node_resolve_name>
 800996a:	4607      	mov	r7, r0
 800996c:	2800      	cmp	r0, #0
 800996e:	d14f      	bne.n	8009a10 <rcl_publisher_init+0x118>
 8009970:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009972:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8009974:	20c8      	movs	r0, #200	; 0xc8
 8009976:	4798      	blx	r3
 8009978:	6020      	str	r0, [r4, #0]
 800997a:	2800      	cmp	r0, #0
 800997c:	d04e      	beq.n	8009a1c <rcl_publisher_init+0x124>
 800997e:	4630      	mov	r0, r6
 8009980:	f006 fb16 	bl	800ffb0 <rcl_node_get_rmw_handle>
 8009984:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	9a07      	ldr	r2, [sp, #28]
 800998c:	6827      	ldr	r7, [r4, #0]
 800998e:	462b      	mov	r3, r5
 8009990:	4641      	mov	r1, r8
 8009992:	f001 f90b 	bl	800abac <rmw_create_publisher>
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800999c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80099a0:	b370      	cbz	r0, 8009a00 <rcl_publisher_init+0x108>
 80099a2:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80099a6:	f001 f9df 	bl	800ad68 <rmw_publisher_get_actual_qos>
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	4607      	mov	r7, r0
 80099ae:	b9d0      	cbnz	r0, 80099e6 <rcl_publisher_init+0xee>
 80099b0:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 80099b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80099b8:	4629      	mov	r1, r5
 80099ba:	2270      	movs	r2, #112	; 0x70
 80099bc:	4618      	mov	r0, r3
 80099be:	f00d f952 	bl	8016c66 <memcpy>
 80099c2:	6832      	ldr	r2, [r6, #0]
 80099c4:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 80099c8:	9807      	ldr	r0, [sp, #28]
 80099ca:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80099cc:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80099ce:	4798      	blx	r3
 80099d0:	4638      	mov	r0, r7
 80099d2:	b008      	add	sp, #32
 80099d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d8:	270b      	movs	r7, #11
 80099da:	4638      	mov	r0, r7
 80099dc:	b008      	add	sp, #32
 80099de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e2:	27c8      	movs	r7, #200	; 0xc8
 80099e4:	e7a1      	b.n	800992a <rcl_publisher_init+0x32>
 80099e6:	b18b      	cbz	r3, 8009a0c <rcl_publisher_init+0x114>
 80099e8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80099ec:	b142      	cbz	r2, 8009a00 <rcl_publisher_init+0x108>
 80099ee:	4630      	mov	r0, r6
 80099f0:	f006 fade 	bl	800ffb0 <rcl_node_get_rmw_handle>
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80099fa:	f001 f9c5 	bl	800ad88 <rmw_destroy_publisher>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8009a02:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8009a04:	4618      	mov	r0, r3
 8009a06:	4790      	blx	r2
 8009a08:	2300      	movs	r3, #0
 8009a0a:	6023      	str	r3, [r4, #0]
 8009a0c:	2701      	movs	r7, #1
 8009a0e:	e7db      	b.n	80099c8 <rcl_publisher_init+0xd0>
 8009a10:	2867      	cmp	r0, #103	; 0x67
 8009a12:	d0d9      	beq.n	80099c8 <rcl_publisher_init+0xd0>
 8009a14:	2869      	cmp	r0, #105	; 0x69
 8009a16:	d003      	beq.n	8009a20 <rcl_publisher_init+0x128>
 8009a18:	280a      	cmp	r0, #10
 8009a1a:	d1f7      	bne.n	8009a0c <rcl_publisher_init+0x114>
 8009a1c:	270a      	movs	r7, #10
 8009a1e:	e7d3      	b.n	80099c8 <rcl_publisher_init+0xd0>
 8009a20:	2767      	movs	r7, #103	; 0x67
 8009a22:	e7d1      	b.n	80099c8 <rcl_publisher_init+0xd0>

08009a24 <rcl_publisher_get_default_options>:
 8009a24:	b570      	push	{r4, r5, r6, lr}
 8009a26:	4d14      	ldr	r5, [pc, #80]	; (8009a78 <rcl_publisher_get_default_options+0x54>)
 8009a28:	4914      	ldr	r1, [pc, #80]	; (8009a7c <rcl_publisher_get_default_options+0x58>)
 8009a2a:	b088      	sub	sp, #32
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	2250      	movs	r2, #80	; 0x50
 8009a30:	4628      	mov	r0, r5
 8009a32:	f00d f918 	bl	8016c66 <memcpy>
 8009a36:	a802      	add	r0, sp, #8
 8009a38:	f000 ff9c 	bl	800a974 <rcutils_get_default_allocator>
 8009a3c:	f10d 0c08 	add.w	ip, sp, #8
 8009a40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009a44:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8009a48:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009a4c:	466e      	mov	r6, sp
 8009a4e:	f8dc 3000 	ldr.w	r3, [ip]
 8009a52:	f8ce 3000 	str.w	r3, [lr]
 8009a56:	4630      	mov	r0, r6
 8009a58:	f001 f82a 	bl	800aab0 <rmw_get_default_publisher_options>
 8009a5c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009a60:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8009a64:	e883 0003 	stmia.w	r3, {r0, r1}
 8009a68:	2270      	movs	r2, #112	; 0x70
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f00d f8fa 	bl	8016c66 <memcpy>
 8009a72:	4620      	mov	r0, r4
 8009a74:	b008      	add	sp, #32
 8009a76:	bd70      	pop	{r4, r5, r6, pc}
 8009a78:	200090f0 	.word	0x200090f0
 8009a7c:	08017b20 	.word	0x08017b20

08009a80 <rcl_publish>:
 8009a80:	b1f8      	cbz	r0, 8009ac2 <rcl_publish+0x42>
 8009a82:	6803      	ldr	r3, [r0, #0]
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	4604      	mov	r4, r0
 8009a88:	b1b3      	cbz	r3, 8009ab8 <rcl_publish+0x38>
 8009a8a:	4616      	mov	r6, r2
 8009a8c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009a90:	b192      	cbz	r2, 8009ab8 <rcl_publish+0x38>
 8009a92:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8009a96:	460d      	mov	r5, r1
 8009a98:	f005 fe8e 	bl	800f7b8 <rcl_context_is_valid>
 8009a9c:	b160      	cbz	r0, 8009ab8 <rcl_publish+0x38>
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8009aa4:	b140      	cbz	r0, 8009ab8 <rcl_publish+0x38>
 8009aa6:	b155      	cbz	r5, 8009abe <rcl_publish+0x3e>
 8009aa8:	4632      	mov	r2, r6
 8009aaa:	4629      	mov	r1, r5
 8009aac:	f001 f81e 	bl	800aaec <rmw_publish>
 8009ab0:	3800      	subs	r0, #0
 8009ab2:	bf18      	it	ne
 8009ab4:	2001      	movne	r0, #1
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009abc:	bd70      	pop	{r4, r5, r6, pc}
 8009abe:	200b      	movs	r0, #11
 8009ac0:	bd70      	pop	{r4, r5, r6, pc}
 8009ac2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009ac6:	4770      	bx	lr

08009ac8 <rcl_publisher_is_valid>:
 8009ac8:	b1a0      	cbz	r0, 8009af4 <rcl_publisher_is_valid+0x2c>
 8009aca:	6803      	ldr	r3, [r0, #0]
 8009acc:	b510      	push	{r4, lr}
 8009ace:	4604      	mov	r4, r0
 8009ad0:	b173      	cbz	r3, 8009af0 <rcl_publisher_is_valid+0x28>
 8009ad2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009ad6:	b15a      	cbz	r2, 8009af0 <rcl_publisher_is_valid+0x28>
 8009ad8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8009adc:	f005 fe6c 	bl	800f7b8 <rcl_context_is_valid>
 8009ae0:	b130      	cbz	r0, 8009af0 <rcl_publisher_is_valid+0x28>
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8009ae8:	3800      	subs	r0, #0
 8009aea:	bf18      	it	ne
 8009aec:	2001      	movne	r0, #1
 8009aee:	bd10      	pop	{r4, pc}
 8009af0:	2000      	movs	r0, #0
 8009af2:	bd10      	pop	{r4, pc}
 8009af4:	2000      	movs	r0, #0
 8009af6:	4770      	bx	lr

08009af8 <rcl_publisher_is_valid_except_context>:
 8009af8:	b130      	cbz	r0, 8009b08 <rcl_publisher_is_valid_except_context+0x10>
 8009afa:	6800      	ldr	r0, [r0, #0]
 8009afc:	b120      	cbz	r0, 8009b08 <rcl_publisher_is_valid_except_context+0x10>
 8009afe:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8009b02:	3800      	subs	r0, #0
 8009b04:	bf18      	it	ne
 8009b06:	2001      	movne	r0, #1
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop

08009b0c <_rclc_check_for_new_data>:
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d046      	beq.n	8009b9e <_rclc_check_for_new_data+0x92>
 8009b10:	b510      	push	{r4, lr}
 8009b12:	7802      	ldrb	r2, [r0, #0]
 8009b14:	b084      	sub	sp, #16
 8009b16:	4603      	mov	r3, r0
 8009b18:	2a0a      	cmp	r2, #10
 8009b1a:	d842      	bhi.n	8009ba2 <_rclc_check_for_new_data+0x96>
 8009b1c:	e8df f002 	tbb	[pc, r2]
 8009b20:	14181212 	.word	0x14181212
 8009b24:	06060614 	.word	0x06060614
 8009b28:	2e1a      	.short	0x2e1a
 8009b2a:	16          	.byte	0x16
 8009b2b:	00          	.byte	0x00
 8009b2c:	6a0a      	ldr	r2, [r1, #32]
 8009b2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009b30:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009b34:	2000      	movs	r0, #0
 8009b36:	1a12      	subs	r2, r2, r0
 8009b38:	bf18      	it	ne
 8009b3a:	2201      	movne	r2, #1
 8009b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009b40:	b004      	add	sp, #16
 8009b42:	bd10      	pop	{r4, pc}
 8009b44:	680a      	ldr	r2, [r1, #0]
 8009b46:	e7f2      	b.n	8009b2e <_rclc_check_for_new_data+0x22>
 8009b48:	698a      	ldr	r2, [r1, #24]
 8009b4a:	e7f0      	b.n	8009b2e <_rclc_check_for_new_data+0x22>
 8009b4c:	688a      	ldr	r2, [r1, #8]
 8009b4e:	e7ee      	b.n	8009b2e <_rclc_check_for_new_data+0x22>
 8009b50:	690a      	ldr	r2, [r1, #16]
 8009b52:	e7ec      	b.n	8009b2e <_rclc_check_for_new_data+0x22>
 8009b54:	685c      	ldr	r4, [r3, #4]
 8009b56:	4608      	mov	r0, r1
 8009b58:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8009b5c:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8009b60:	f104 0342 	add.w	r3, r4, #66	; 0x42
 8009b64:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8009b6e:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8009b72:	f104 0110 	add.w	r1, r4, #16
 8009b76:	f007 ff1b 	bl	80119b0 <rcl_action_client_wait_set_get_entities_ready>
 8009b7a:	e7e1      	b.n	8009b40 <_rclc_check_for_new_data+0x34>
 8009b7c:	685c      	ldr	r4, [r3, #4]
 8009b7e:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8009b82:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8009b86:	e9cd 3200 	strd	r3, r2, [sp]
 8009b8a:	4608      	mov	r0, r1
 8009b8c:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8009b90:	f104 0220 	add.w	r2, r4, #32
 8009b94:	f104 0110 	add.w	r1, r4, #16
 8009b98:	f008 f920 	bl	8011ddc <rcl_action_server_wait_set_get_entities_ready>
 8009b9c:	e7d0      	b.n	8009b40 <_rclc_check_for_new_data+0x34>
 8009b9e:	200b      	movs	r0, #11
 8009ba0:	4770      	bx	lr
 8009ba2:	2001      	movs	r0, #1
 8009ba4:	e7cc      	b.n	8009b40 <_rclc_check_for_new_data+0x34>
 8009ba6:	bf00      	nop

08009ba8 <_rclc_take_new_data>:
 8009ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009baa:	b09b      	sub	sp, #108	; 0x6c
 8009bac:	2800      	cmp	r0, #0
 8009bae:	f000 8088 	beq.w	8009cc2 <_rclc_take_new_data+0x11a>
 8009bb2:	7803      	ldrb	r3, [r0, #0]
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	2b0a      	cmp	r3, #10
 8009bb8:	f200 8167 	bhi.w	8009e8a <_rclc_take_new_data+0x2e2>
 8009bbc:	e8df f003 	tbb	[pc, r3]
 8009bc0:	44152d2d 	.word	0x44152d2d
 8009bc4:	19191944 	.word	0x19191944
 8009bc8:	065a      	.short	0x065a
 8009bca:	15          	.byte	0x15
 8009bcb:	00          	.byte	0x00
 8009bcc:	6840      	ldr	r0, [r0, #4]
 8009bce:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f040 80b2 	bne.w	8009d3c <_rclc_take_new_data+0x194>
 8009bd8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f040 80e4 	bne.w	8009daa <_rclc_take_new_data+0x202>
 8009be2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d16f      	bne.n	8009cca <_rclc_take_new_data+0x122>
 8009bea:	2500      	movs	r5, #0
 8009bec:	4628      	mov	r0, r5
 8009bee:	b01b      	add	sp, #108	; 0x6c
 8009bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bf2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009bf4:	6a0b      	ldr	r3, [r1, #32]
 8009bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d0f5      	beq.n	8009bea <_rclc_take_new_data+0x42>
 8009bfe:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009c02:	f104 0110 	add.w	r1, r4, #16
 8009c06:	f006 fbaf 	bl	8010368 <rcl_take_request>
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d0ec      	beq.n	8009bea <_rclc_take_new_data+0x42>
 8009c10:	f240 2359 	movw	r3, #601	; 0x259
 8009c14:	4298      	cmp	r0, r3
 8009c16:	d013      	beq.n	8009c40 <_rclc_take_new_data+0x98>
 8009c18:	e029      	b.n	8009c6e <_rclc_take_new_data+0xc6>
 8009c1a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009c1c:	680b      	ldr	r3, [r1, #0]
 8009c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0e1      	beq.n	8009bea <_rclc_take_new_data+0x42>
 8009c26:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	aa0a      	add	r2, sp, #40	; 0x28
 8009c2e:	f006 fcd9 	bl	80105e4 <rcl_take>
 8009c32:	4605      	mov	r5, r0
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d0d9      	beq.n	8009bec <_rclc_take_new_data+0x44>
 8009c38:	f240 1391 	movw	r3, #401	; 0x191
 8009c3c:	4298      	cmp	r0, r3
 8009c3e:	d116      	bne.n	8009c6e <_rclc_take_new_data+0xc6>
 8009c40:	2300      	movs	r3, #0
 8009c42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8009c46:	e7d1      	b.n	8009bec <_rclc_take_new_data+0x44>
 8009c48:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009c4a:	698b      	ldr	r3, [r1, #24]
 8009c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d0ca      	beq.n	8009bea <_rclc_take_new_data+0x42>
 8009c54:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009c58:	f104 0110 	add.w	r1, r4, #16
 8009c5c:	f005 fd3c 	bl	800f6d8 <rcl_take_response>
 8009c60:	4605      	mov	r5, r0
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d0c1      	beq.n	8009bea <_rclc_take_new_data+0x42>
 8009c66:	f240 13f5 	movw	r3, #501	; 0x1f5
 8009c6a:	4298      	cmp	r0, r3
 8009c6c:	d0be      	beq.n	8009bec <_rclc_take_new_data+0x44>
 8009c6e:	f000 feb3 	bl	800a9d8 <rcutils_reset_error>
 8009c72:	e7bb      	b.n	8009bec <_rclc_take_new_data+0x44>
 8009c74:	6840      	ldr	r0, [r0, #4]
 8009c76:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d17d      	bne.n	8009d7a <_rclc_take_new_data+0x1d2>
 8009c7e:	69c3      	ldr	r3, [r0, #28]
 8009c80:	b11b      	cbz	r3, 8009c8a <_rclc_take_new_data+0xe2>
 8009c82:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d144      	bne.n	8009d14 <_rclc_take_new_data+0x16c>
 8009c8a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f040 80ac 	bne.w	8009dec <_rclc_take_new_data+0x244>
 8009c94:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d0a6      	beq.n	8009bea <_rclc_take_new_data+0x42>
 8009c9c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009c9e:	a90a      	add	r1, sp, #40	; 0x28
 8009ca0:	3010      	adds	r0, #16
 8009ca2:	f007 fd5d 	bl	8011760 <rcl_action_take_result_response>
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d1e0      	bne.n	8009c6e <_rclc_take_new_data+0xc6>
 8009cac:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009cb0:	6860      	ldr	r0, [r4, #4]
 8009cb2:	f008 f9b7 	bl	8012024 <rclc_action_find_handle_by_result_request_sequence_number>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d098      	beq.n	8009bec <_rclc_take_new_data+0x44>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8009cc0:	e794      	b.n	8009bec <_rclc_take_new_data+0x44>
 8009cc2:	250b      	movs	r5, #11
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	b01b      	add	sp, #108	; 0x6c
 8009cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cca:	ae04      	add	r6, sp, #16
 8009ccc:	aa0a      	add	r2, sp, #40	; 0x28
 8009cce:	3010      	adds	r0, #16
 8009cd0:	4631      	mov	r1, r6
 8009cd2:	f007 ffb7 	bl	8011c44 <rcl_action_take_cancel_request>
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d1c8      	bne.n	8009c6e <_rclc_take_new_data+0xc6>
 8009cdc:	6860      	ldr	r0, [r4, #4]
 8009cde:	a90a      	add	r1, sp, #40	; 0x28
 8009ce0:	f008 f95e 	bl	8011fa0 <rclc_action_find_goal_handle_by_uuid>
 8009ce4:	4607      	mov	r7, r0
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	f000 80bb 	beq.w	8009e62 <_rclc_take_new_data+0x2ba>
 8009cec:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009cf0:	2101      	movs	r1, #1
 8009cf2:	f008 f8df 	bl	8011eb4 <rcl_action_transition_goal_state>
 8009cf6:	2803      	cmp	r0, #3
 8009cf8:	4684      	mov	ip, r0
 8009cfa:	f040 80a7 	bne.w	8009e4c <_rclc_take_new_data+0x2a4>
 8009cfe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009d00:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8009d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d06:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009d0a:	e884 0003 	stmia.w	r4, {r0, r1}
 8009d0e:	f887 c008 	strb.w	ip, [r7, #8]
 8009d12:	e76b      	b.n	8009bec <_rclc_take_new_data+0x44>
 8009d14:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009d16:	3010      	adds	r0, #16
 8009d18:	f007 fda2 	bl	8011860 <rcl_action_take_feedback>
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	d1a5      	bne.n	8009c6e <_rclc_take_new_data+0xc6>
 8009d22:	6860      	ldr	r0, [r4, #4]
 8009d24:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009d26:	f008 f93b 	bl	8011fa0 <rclc_action_find_goal_handle_by_uuid>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	f000 80a3 	beq.w	8009e78 <_rclc_take_new_data+0x2d0>
 8009d32:	2201      	movs	r2, #1
 8009d34:	6860      	ldr	r0, [r4, #4]
 8009d36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8009d3a:	e7a6      	b.n	8009c8a <_rclc_take_new_data+0xe2>
 8009d3c:	f008 f90a 	bl	8011f54 <rclc_action_take_goal_handle>
 8009d40:	4606      	mov	r6, r0
 8009d42:	6860      	ldr	r0, [r4, #4]
 8009d44:	2e00      	cmp	r6, #0
 8009d46:	f43f af47 	beq.w	8009bd8 <_rclc_take_new_data+0x30>
 8009d4a:	6070      	str	r0, [r6, #4]
 8009d4c:	69f2      	ldr	r2, [r6, #28]
 8009d4e:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8009d52:	3010      	adds	r0, #16
 8009d54:	f007 fec0 	bl	8011ad8 <rcl_action_take_goal_request>
 8009d58:	4605      	mov	r5, r0
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	f040 808e 	bne.w	8009e7c <_rclc_take_new_data+0x2d4>
 8009d60:	69f7      	ldr	r7, [r6, #28]
 8009d62:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009d64:	7235      	strb	r5, [r6, #8]
 8009d66:	f8c6 0009 	str.w	r0, [r6, #9]
 8009d6a:	f8c6 100d 	str.w	r1, [r6, #13]
 8009d6e:	6860      	ldr	r0, [r4, #4]
 8009d70:	f8c6 2011 	str.w	r2, [r6, #17]
 8009d74:	f8c6 3015 	str.w	r3, [r6, #21]
 8009d78:	e72e      	b.n	8009bd8 <_rclc_take_new_data+0x30>
 8009d7a:	aa04      	add	r2, sp, #16
 8009d7c:	a90a      	add	r1, sp, #40	; 0x28
 8009d7e:	3010      	adds	r0, #16
 8009d80:	f007 fc76 	bl	8011670 <rcl_action_take_goal_response>
 8009d84:	4605      	mov	r5, r0
 8009d86:	2800      	cmp	r0, #0
 8009d88:	f47f af71 	bne.w	8009c6e <_rclc_take_new_data+0xc6>
 8009d8c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d90:	6860      	ldr	r0, [r4, #4]
 8009d92:	f008 f935 	bl	8012000 <rclc_action_find_handle_by_goal_request_sequence_number>
 8009d96:	b130      	cbz	r0, 8009da6 <_rclc_take_new_data+0x1fe>
 8009d98:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009d9c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8009da0:	2201      	movs	r2, #1
 8009da2:	f880 2020 	strb.w	r2, [r0, #32]
 8009da6:	6860      	ldr	r0, [r4, #4]
 8009da8:	e769      	b.n	8009c7e <_rclc_take_new_data+0xd6>
 8009daa:	aa04      	add	r2, sp, #16
 8009dac:	3010      	adds	r0, #16
 8009dae:	a90a      	add	r1, sp, #40	; 0x28
 8009db0:	f007 ff08 	bl	8011bc4 <rcl_action_take_result_request>
 8009db4:	4605      	mov	r5, r0
 8009db6:	2800      	cmp	r0, #0
 8009db8:	f47f af59 	bne.w	8009c6e <_rclc_take_new_data+0xc6>
 8009dbc:	6860      	ldr	r0, [r4, #4]
 8009dbe:	a904      	add	r1, sp, #16
 8009dc0:	f008 f8ee 	bl	8011fa0 <rclc_action_find_goal_handle_by_uuid>
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	b160      	cbz	r0, 8009de2 <_rclc_take_new_data+0x23a>
 8009dc8:	ad0a      	add	r5, sp, #40	; 0x28
 8009dca:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8009dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dd0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009dd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009dd6:	f04f 0c02 	mov.w	ip, #2
 8009dda:	e886 0003 	stmia.w	r6, {r0, r1}
 8009dde:	f887 c008 	strb.w	ip, [r7, #8]
 8009de2:	6860      	ldr	r0, [r4, #4]
 8009de4:	2300      	movs	r3, #0
 8009de6:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8009dea:	e6fa      	b.n	8009be2 <_rclc_take_new_data+0x3a>
 8009dec:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8009df0:	a90a      	add	r1, sp, #40	; 0x28
 8009df2:	3010      	adds	r0, #16
 8009df4:	f007 fcf4 	bl	80117e0 <rcl_action_take_cancel_response>
 8009df8:	4605      	mov	r5, r0
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	f47f af37 	bne.w	8009c6e <_rclc_take_new_data+0xc6>
 8009e00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009e04:	6860      	ldr	r0, [r4, #4]
 8009e06:	f008 f91f 	bl	8012048 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	6860      	ldr	r0, [r4, #4]
 8009e0e:	2e00      	cmp	r6, #0
 8009e10:	f43f af40 	beq.w	8009c94 <_rclc_take_new_data+0xec>
 8009e14:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009e16:	2701      	movs	r7, #1
 8009e18:	84b7      	strh	r7, [r6, #36]	; 0x24
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f43f af3a 	beq.w	8009c94 <_rclc_take_new_data+0xec>
 8009e20:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009e22:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009e26:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009e2a:	f008 f8b9 	bl	8011fa0 <rclc_action_find_goal_handle_by_uuid>
 8009e2e:	b138      	cbz	r0, 8009e40 <_rclc_take_new_data+0x298>
 8009e30:	6860      	ldr	r0, [r4, #4]
 8009e32:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009e34:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8009e38:	3501      	adds	r5, #1
 8009e3a:	42ab      	cmp	r3, r5
 8009e3c:	d8f0      	bhi.n	8009e20 <_rclc_take_new_data+0x278>
 8009e3e:	e729      	b.n	8009c94 <_rclc_take_new_data+0xec>
 8009e40:	6860      	ldr	r0, [r4, #4]
 8009e42:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009e44:	3501      	adds	r5, #1
 8009e46:	42ab      	cmp	r3, r5
 8009e48:	d8ea      	bhi.n	8009e20 <_rclc_take_new_data+0x278>
 8009e4a:	e723      	b.n	8009c94 <_rclc_take_new_data+0xec>
 8009e4c:	ab06      	add	r3, sp, #24
 8009e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e50:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009e54:	2103      	movs	r1, #3
 8009e56:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009e5a:	6860      	ldr	r0, [r4, #4]
 8009e5c:	f008 f968 	bl	8012130 <rclc_action_server_goal_cancel_reject>
 8009e60:	e6c4      	b.n	8009bec <_rclc_take_new_data+0x44>
 8009e62:	ab06      	add	r3, sp, #24
 8009e64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e66:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009e6a:	2102      	movs	r1, #2
 8009e6c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009e70:	6860      	ldr	r0, [r4, #4]
 8009e72:	f008 f95d 	bl	8012130 <rclc_action_server_goal_cancel_reject>
 8009e76:	e6b9      	b.n	8009bec <_rclc_take_new_data+0x44>
 8009e78:	6860      	ldr	r0, [r4, #4]
 8009e7a:	e706      	b.n	8009c8a <_rclc_take_new_data+0xe2>
 8009e7c:	6860      	ldr	r0, [r4, #4]
 8009e7e:	4631      	mov	r1, r6
 8009e80:	f008 f878 	bl	8011f74 <rclc_action_remove_used_goal_handle>
 8009e84:	f000 fda8 	bl	800a9d8 <rcutils_reset_error>
 8009e88:	e6b0      	b.n	8009bec <_rclc_take_new_data+0x44>
 8009e8a:	2501      	movs	r5, #1
 8009e8c:	e6ae      	b.n	8009bec <_rclc_take_new_data+0x44>
 8009e8e:	bf00      	nop

08009e90 <_rclc_execute.part.0>:
 8009e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e92:	7803      	ldrb	r3, [r0, #0]
 8009e94:	b087      	sub	sp, #28
 8009e96:	4604      	mov	r4, r0
 8009e98:	2b0a      	cmp	r3, #10
 8009e9a:	f200 8136 	bhi.w	800a10a <_rclc_execute.part.0+0x27a>
 8009e9e:	e8df f003 	tbb	[pc, r3]
 8009ea2:	435e      	.short	0x435e
 8009ea4:	06a1664f 	.word	0x06a1664f
 8009ea8:	6c1e0606 	.word	0x6c1e0606
 8009eac:	59          	.byte	0x59
 8009ead:	00          	.byte	0x00
 8009eae:	2b06      	cmp	r3, #6
 8009eb0:	f000 8122 	beq.w	800a0f8 <_rclc_execute.part.0+0x268>
 8009eb4:	2b07      	cmp	r3, #7
 8009eb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009eb8:	f040 8118 	bne.w	800a0ec <_rclc_execute.part.0+0x25c>
 8009ebc:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 8009ec0:	6880      	ldr	r0, [r0, #8]
 8009ec2:	4798      	blx	r3
 8009ec4:	f104 0110 	add.w	r1, r4, #16
 8009ec8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009eca:	6860      	ldr	r0, [r4, #4]
 8009ecc:	f006 fa8c 	bl	80103e8 <rcl_send_response>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d033      	beq.n	8009f3c <_rclc_execute.part.0+0xac>
 8009ed4:	9005      	str	r0, [sp, #20]
 8009ed6:	f000 fd7f 	bl	800a9d8 <rcutils_reset_error>
 8009eda:	9805      	ldr	r0, [sp, #20]
 8009edc:	e02e      	b.n	8009f3c <_rclc_execute.part.0+0xac>
 8009ede:	6840      	ldr	r0, [r0, #4]
 8009ee0:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 8086 	beq.w	8009ff6 <_rclc_execute.part.0+0x166>
 8009eea:	2600      	movs	r6, #0
 8009eec:	2701      	movs	r7, #1
 8009eee:	e004      	b.n	8009efa <_rclc_execute.part.0+0x6a>
 8009ef0:	f008 f80a 	bl	8011f08 <rclc_action_send_result_request>
 8009ef4:	b998      	cbnz	r0, 8009f1e <_rclc_execute.part.0+0x8e>
 8009ef6:	722f      	strb	r7, [r5, #8]
 8009ef8:	6860      	ldr	r0, [r4, #4]
 8009efa:	f008 f8b7 	bl	801206c <rclc_action_find_first_handle_with_goal_response>
 8009efe:	4605      	mov	r5, r0
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d077      	beq.n	8009ff4 <_rclc_execute.part.0+0x164>
 8009f04:	6863      	ldr	r3, [r4, #4]
 8009f06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8009f0e:	f885 6020 	strb.w	r6, [r5, #32]
 8009f12:	4798      	blx	r3
 8009f14:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8009f18:	4628      	mov	r0, r5
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1e8      	bne.n	8009ef0 <_rclc_execute.part.0+0x60>
 8009f1e:	6860      	ldr	r0, [r4, #4]
 8009f20:	4629      	mov	r1, r5
 8009f22:	f008 f827 	bl	8011f74 <rclc_action_remove_used_goal_handle>
 8009f26:	e7e7      	b.n	8009ef8 <_rclc_execute.part.0+0x68>
 8009f28:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 8009f2c:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 8009f30:	2d00      	cmp	r5, #0
 8009f32:	f000 80c9 	beq.w	800a0c8 <_rclc_execute.part.0+0x238>
 8009f36:	6880      	ldr	r0, [r0, #8]
 8009f38:	4798      	blx	r3
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	b007      	add	sp, #28
 8009f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f40:	6840      	ldr	r0, [r0, #4]
 8009f42:	f006 fc53 	bl	80107ec <rcl_timer_call>
 8009f46:	f240 3321 	movw	r3, #801	; 0x321
 8009f4a:	4298      	cmp	r0, r3
 8009f4c:	d004      	beq.n	8009f58 <_rclc_execute.part.0+0xc8>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d0f4      	beq.n	8009f3c <_rclc_execute.part.0+0xac>
 8009f52:	e7bf      	b.n	8009ed4 <_rclc_execute.part.0+0x44>
 8009f54:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009f56:	4798      	blx	r3
 8009f58:	2000      	movs	r0, #0
 8009f5a:	b007      	add	sp, #28
 8009f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f5e:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 8009f62:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009f64:	b925      	cbnz	r5, 8009f70 <_rclc_execute.part.0+0xe0>
 8009f66:	4628      	mov	r0, r5
 8009f68:	4798      	blx	r3
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	e7e6      	b.n	8009f3c <_rclc_execute.part.0+0xac>
 8009f6e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009f70:	68a0      	ldr	r0, [r4, #8]
 8009f72:	4798      	blx	r3
 8009f74:	2000      	movs	r0, #0
 8009f76:	b007      	add	sp, #28
 8009f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f7a:	6840      	ldr	r0, [r0, #4]
 8009f7c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8009f80:	bb3b      	cbnz	r3, 8009fd2 <_rclc_execute.part.0+0x142>
 8009f82:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d07b      	beq.n	800a082 <_rclc_execute.part.0+0x1f2>
 8009f8a:	f640 0634 	movw	r6, #2100	; 0x834
 8009f8e:	2701      	movs	r7, #1
 8009f90:	e007      	b.n	8009fa2 <_rclc_execute.part.0+0x112>
 8009f92:	4628      	mov	r0, r5
 8009f94:	f008 f882 	bl	801209c <rclc_action_server_response_goal_request>
 8009f98:	6860      	ldr	r0, [r4, #4]
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	f007 ffea 	bl	8011f74 <rclc_action_remove_used_goal_handle>
 8009fa0:	6860      	ldr	r0, [r4, #4]
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	f008 f814 	bl	8011fd0 <rclc_action_find_first_handle_by_status>
 8009fa8:	4605      	mov	r5, r0
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d066      	beq.n	800a07c <_rclc_execute.part.0+0x1ec>
 8009fae:	6863      	ldr	r3, [r4, #4]
 8009fb0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	4798      	blx	r3
 8009fb6:	42b0      	cmp	r0, r6
 8009fb8:	f04f 0100 	mov.w	r1, #0
 8009fbc:	d1e9      	bne.n	8009f92 <_rclc_execute.part.0+0x102>
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	f008 f86b 	bl	801209c <rclc_action_server_response_goal_request>
 8009fc6:	722f      	strb	r7, [r5, #8]
 8009fc8:	e7ea      	b.n	8009fa0 <_rclc_execute.part.0+0x110>
 8009fca:	6848      	ldr	r0, [r1, #4]
 8009fcc:	f007 ffd2 	bl	8011f74 <rclc_action_remove_used_goal_handle>
 8009fd0:	6860      	ldr	r0, [r4, #4]
 8009fd2:	f008 f809 	bl	8011fe8 <rclc_action_find_first_terminated_handle>
 8009fd6:	4601      	mov	r1, r0
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d1f6      	bne.n	8009fca <_rclc_execute.part.0+0x13a>
 8009fdc:	6860      	ldr	r0, [r4, #4]
 8009fde:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8009fe2:	e7ce      	b.n	8009f82 <_rclc_execute.part.0+0xf2>
 8009fe4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009fe6:	6880      	ldr	r0, [r0, #8]
 8009fe8:	f104 0110 	add.w	r1, r4, #16
 8009fec:	4798      	blx	r3
 8009fee:	2000      	movs	r0, #0
 8009ff0:	b007      	add	sp, #28
 8009ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ff4:	6860      	ldr	r0, [r4, #4]
 8009ff6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009ffa:	b18b      	cbz	r3, 800a020 <_rclc_execute.part.0+0x190>
 8009ffc:	68c5      	ldr	r5, [r0, #12]
 8009ffe:	b32d      	cbz	r5, 800a04c <_rclc_execute.part.0+0x1bc>
 800a000:	2600      	movs	r6, #0
 800a002:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800a006:	b143      	cbz	r3, 800a01a <_rclc_execute.part.0+0x18a>
 800a008:	69c3      	ldr	r3, [r0, #28]
 800a00a:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800a00e:	b123      	cbz	r3, 800a01a <_rclc_execute.part.0+0x18a>
 800a010:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a012:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a014:	4628      	mov	r0, r5
 800a016:	4798      	blx	r3
 800a018:	6860      	ldr	r0, [r4, #4]
 800a01a:	682d      	ldr	r5, [r5, #0]
 800a01c:	2d00      	cmp	r5, #0
 800a01e:	d1f0      	bne.n	800a002 <_rclc_execute.part.0+0x172>
 800a020:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800a024:	b193      	cbz	r3, 800a04c <_rclc_execute.part.0+0x1bc>
 800a026:	68c5      	ldr	r5, [r0, #12]
 800a028:	b185      	cbz	r5, 800a04c <_rclc_execute.part.0+0x1bc>
 800a02a:	2600      	movs	r6, #0
 800a02c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800a030:	b14b      	cbz	r3, 800a046 <_rclc_execute.part.0+0x1b6>
 800a032:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a034:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800a038:	b12b      	cbz	r3, 800a046 <_rclc_execute.part.0+0x1b6>
 800a03a:	4628      	mov	r0, r5
 800a03c:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800a040:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a042:	4798      	blx	r3
 800a044:	6860      	ldr	r0, [r4, #4]
 800a046:	682d      	ldr	r5, [r5, #0]
 800a048:	2d00      	cmp	r5, #0
 800a04a:	d1ef      	bne.n	800a02c <_rclc_execute.part.0+0x19c>
 800a04c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a050:	2b00      	cmp	r3, #0
 800a052:	d081      	beq.n	8009f58 <_rclc_execute.part.0+0xc8>
 800a054:	2700      	movs	r7, #0
 800a056:	e00b      	b.n	800a070 <_rclc_execute.part.0+0x1e0>
 800a058:	6863      	ldr	r3, [r4, #4]
 800a05a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a05c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a05e:	6a1e      	ldr	r6, [r3, #32]
 800a060:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800a064:	47b0      	blx	r6
 800a066:	6860      	ldr	r0, [r4, #4]
 800a068:	4629      	mov	r1, r5
 800a06a:	f007 ff83 	bl	8011f74 <rclc_action_remove_used_goal_handle>
 800a06e:	6860      	ldr	r0, [r4, #4]
 800a070:	f008 f808 	bl	8012084 <rclc_action_find_first_handle_with_result_response>
 800a074:	4605      	mov	r5, r0
 800a076:	2800      	cmp	r0, #0
 800a078:	d1ee      	bne.n	800a058 <_rclc_execute.part.0+0x1c8>
 800a07a:	e76d      	b.n	8009f58 <_rclc_execute.part.0+0xc8>
 800a07c:	6860      	ldr	r0, [r4, #4]
 800a07e:	f880 5020 	strb.w	r5, [r0, #32]
 800a082:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a086:	2b00      	cmp	r3, #0
 800a088:	f43f af66 	beq.w	8009f58 <_rclc_execute.part.0+0xc8>
 800a08c:	68c5      	ldr	r5, [r0, #12]
 800a08e:	b1b5      	cbz	r5, 800a0be <_rclc_execute.part.0+0x22e>
 800a090:	2602      	movs	r6, #2
 800a092:	e001      	b.n	800a098 <_rclc_execute.part.0+0x208>
 800a094:	682d      	ldr	r5, [r5, #0]
 800a096:	b195      	cbz	r5, 800a0be <_rclc_execute.part.0+0x22e>
 800a098:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d1f9      	bne.n	800a094 <_rclc_execute.part.0+0x204>
 800a0a0:	69c3      	ldr	r3, [r0, #28]
 800a0a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	4798      	blx	r3
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800a0b4:	b163      	cbz	r3, 800a0d0 <_rclc_execute.part.0+0x240>
 800a0b6:	f008 f80f 	bl	80120d8 <rclc_action_server_goal_cancel_accept>
 800a0ba:	6860      	ldr	r0, [r4, #4]
 800a0bc:	e7ea      	b.n	800a094 <_rclc_execute.part.0+0x204>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	e739      	b.n	8009f3c <_rclc_execute.part.0+0xac>
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	4798      	blx	r3
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	e735      	b.n	8009f3c <_rclc_execute.part.0+0xac>
 800a0d0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a0d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a0d6:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800a0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0de:	6860      	ldr	r0, [r4, #4]
 800a0e0:	2101      	movs	r1, #1
 800a0e2:	f008 f825 	bl	8012130 <rclc_action_server_goal_cancel_reject>
 800a0e6:	722e      	strb	r6, [r5, #8]
 800a0e8:	6860      	ldr	r0, [r4, #4]
 800a0ea:	e7d3      	b.n	800a094 <_rclc_execute.part.0+0x204>
 800a0ec:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a0ee:	6880      	ldr	r0, [r0, #8]
 800a0f0:	4798      	blx	r3
 800a0f2:	f104 0110 	add.w	r1, r4, #16
 800a0f6:	e6e7      	b.n	8009ec8 <_rclc_execute.part.0+0x38>
 800a0f8:	f100 0110 	add.w	r1, r0, #16
 800a0fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a0fe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a100:	6880      	ldr	r0, [r0, #8]
 800a102:	9105      	str	r1, [sp, #20]
 800a104:	4798      	blx	r3
 800a106:	9905      	ldr	r1, [sp, #20]
 800a108:	e6de      	b.n	8009ec8 <_rclc_execute.part.0+0x38>
 800a10a:	2001      	movs	r0, #1
 800a10c:	e716      	b.n	8009f3c <_rclc_execute.part.0+0xac>
 800a10e:	bf00      	nop

0800a110 <rclc_executor_trigger_any>:
 800a110:	2800      	cmp	r0, #0
 800a112:	d03f      	beq.n	800a194 <rclc_executor_trigger_any+0x84>
 800a114:	2900      	cmp	r1, #0
 800a116:	d03e      	beq.n	800a196 <rclc_executor_trigger_any+0x86>
 800a118:	4603      	mov	r3, r0
 800a11a:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800a11e:	2200      	movs	r2, #0
 800a120:	2800      	cmp	r0, #0
 800a122:	d037      	beq.n	800a194 <rclc_executor_trigger_any+0x84>
 800a124:	b430      	push	{r4, r5}
 800a126:	f893 c000 	ldrb.w	ip, [r3]
 800a12a:	f1bc 0f08 	cmp.w	ip, #8
 800a12e:	d11e      	bne.n	800a16e <rclc_executor_trigger_any+0x5e>
 800a130:	685c      	ldr	r4, [r3, #4]
 800a132:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800a134:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800a138:	d105      	bne.n	800a146 <rclc_executor_trigger_any+0x36>
 800a13a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800a13e:	b910      	cbnz	r0, 800a146 <rclc_executor_trigger_any+0x36>
 800a140:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800a144:	b128      	cbz	r0, 800a152 <rclc_executor_trigger_any+0x42>
 800a146:	bc30      	pop	{r4, r5}
 800a148:	4770      	bx	lr
 800a14a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800a14e:	2800      	cmp	r0, #0
 800a150:	d1f9      	bne.n	800a146 <rclc_executor_trigger_any+0x36>
 800a152:	3201      	adds	r2, #1
 800a154:	4291      	cmp	r1, r2
 800a156:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a15a:	d018      	beq.n	800a18e <rclc_executor_trigger_any+0x7e>
 800a15c:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800a160:	2800      	cmp	r0, #0
 800a162:	d0f0      	beq.n	800a146 <rclc_executor_trigger_any+0x36>
 800a164:	f893 c000 	ldrb.w	ip, [r3]
 800a168:	f1bc 0f08 	cmp.w	ip, #8
 800a16c:	d0e0      	beq.n	800a130 <rclc_executor_trigger_any+0x20>
 800a16e:	f1bc 0f09 	cmp.w	ip, #9
 800a172:	d1ea      	bne.n	800a14a <rclc_executor_trigger_any+0x3a>
 800a174:	685c      	ldr	r4, [r3, #4]
 800a176:	6a25      	ldr	r5, [r4, #32]
 800a178:	2d00      	cmp	r5, #0
 800a17a:	d1e4      	bne.n	800a146 <rclc_executor_trigger_any+0x36>
 800a17c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800a180:	2800      	cmp	r0, #0
 800a182:	d1e0      	bne.n	800a146 <rclc_executor_trigger_any+0x36>
 800a184:	3201      	adds	r2, #1
 800a186:	4291      	cmp	r1, r2
 800a188:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a18c:	d1e6      	bne.n	800a15c <rclc_executor_trigger_any+0x4c>
 800a18e:	2000      	movs	r0, #0
 800a190:	bc30      	pop	{r4, r5}
 800a192:	4770      	bx	lr
 800a194:	4770      	bx	lr
 800a196:	4608      	mov	r0, r1
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	0000      	movs	r0, r0
	...

0800a1a0 <rclc_executor_init>:
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d05f      	beq.n	800a264 <rclc_executor_init+0xc4>
 800a1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	b0b0      	sub	sp, #192	; 0xc0
 800a1ac:	2900      	cmp	r1, #0
 800a1ae:	d051      	beq.n	800a254 <rclc_executor_init+0xb4>
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	4616      	mov	r6, r2
 800a1b6:	461f      	mov	r7, r3
 800a1b8:	f000 fbea 	bl	800a990 <rcutils_allocator_is_valid>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d049      	beq.n	800a254 <rclc_executor_init+0xb4>
 800a1c0:	2e00      	cmp	r6, #0
 800a1c2:	d047      	beq.n	800a254 <rclc_executor_init+0xb4>
 800a1c4:	492c      	ldr	r1, [pc, #176]	; (800a278 <rclc_executor_init+0xd8>)
 800a1c6:	2288      	movs	r2, #136	; 0x88
 800a1c8:	a80e      	add	r0, sp, #56	; 0x38
 800a1ca:	f00c fd4c 	bl	8016c66 <memcpy>
 800a1ce:	a90e      	add	r1, sp, #56	; 0x38
 800a1d0:	2288      	movs	r2, #136	; 0x88
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f00c fd47 	bl	8016c66 <memcpy>
 800a1d8:	602c      	str	r4, [r5, #0]
 800a1da:	4668      	mov	r0, sp
 800a1dc:	60ae      	str	r6, [r5, #8]
 800a1de:	466c      	mov	r4, sp
 800a1e0:	f006 fc76 	bl	8010ad0 <rcl_get_zero_initialized_wait_set>
 800a1e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1e6:	f105 0c14 	add.w	ip, r5, #20
 800a1ea:	f8d7 8000 	ldr.w	r8, [r7]
 800a1ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1fe:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 800a270 <rclc_executor_init+0xd0>
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	f8cc 3000 	str.w	r3, [ip]
 800a208:	6939      	ldr	r1, [r7, #16]
 800a20a:	612f      	str	r7, [r5, #16]
 800a20c:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 800a210:	01b0      	lsls	r0, r6, #6
 800a212:	47c0      	blx	r8
 800a214:	6068      	str	r0, [r5, #4]
 800a216:	b338      	cbz	r0, 800a268 <rclc_executor_init+0xc8>
 800a218:	2400      	movs	r4, #0
 800a21a:	e000      	b.n	800a21e <rclc_executor_init+0x7e>
 800a21c:	6868      	ldr	r0, [r5, #4]
 800a21e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a222:	4631      	mov	r1, r6
 800a224:	3401      	adds	r4, #1
 800a226:	f000 fa6b 	bl	800a700 <rclc_executor_handle_init>
 800a22a:	42a6      	cmp	r6, r4
 800a22c:	d1f6      	bne.n	800a21c <rclc_executor_init+0x7c>
 800a22e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800a232:	f000 fa5b 	bl	800a6ec <rclc_executor_handle_counters_zero_init>
 800a236:	4a11      	ldr	r2, [pc, #68]	; (800a27c <rclc_executor_init+0xdc>)
 800a238:	686b      	ldr	r3, [r5, #4]
 800a23a:	2000      	movs	r0, #0
 800a23c:	e9c5 201e 	strd	r2, r0, [r5, #120]	; 0x78
 800a240:	b163      	cbz	r3, 800a25c <rclc_executor_init+0xbc>
 800a242:	692b      	ldr	r3, [r5, #16]
 800a244:	b153      	cbz	r3, 800a25c <rclc_executor_init+0xbc>
 800a246:	68ab      	ldr	r3, [r5, #8]
 800a248:	b143      	cbz	r3, 800a25c <rclc_executor_init+0xbc>
 800a24a:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
 800a24e:	b030      	add	sp, #192	; 0xc0
 800a250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a254:	200b      	movs	r0, #11
 800a256:	b030      	add	sp, #192	; 0xc0
 800a258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25c:	4618      	mov	r0, r3
 800a25e:	b030      	add	sp, #192	; 0xc0
 800a260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a264:	200b      	movs	r0, #11
 800a266:	4770      	bx	lr
 800a268:	200a      	movs	r0, #10
 800a26a:	e7f4      	b.n	800a256 <rclc_executor_init+0xb6>
 800a26c:	f3af 8000 	nop.w
 800a270:	3b9aca00 	.word	0x3b9aca00
 800a274:	00000000 	.word	0x00000000
 800a278:	08017b70 	.word	0x08017b70
 800a27c:	0800a111 	.word	0x0800a111

0800a280 <rclc_executor_add_subscription>:
 800a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a282:	f89d e018 	ldrb.w	lr, [sp, #24]
 800a286:	b338      	cbz	r0, 800a2d8 <rclc_executor_add_subscription+0x58>
 800a288:	b331      	cbz	r1, 800a2d8 <rclc_executor_add_subscription+0x58>
 800a28a:	b32a      	cbz	r2, 800a2d8 <rclc_executor_add_subscription+0x58>
 800a28c:	b323      	cbz	r3, 800a2d8 <rclc_executor_add_subscription+0x58>
 800a28e:	4604      	mov	r4, r0
 800a290:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800a294:	42a8      	cmp	r0, r5
 800a296:	d301      	bcc.n	800a29c <rclc_executor_add_subscription+0x1c>
 800a298:	2001      	movs	r0, #1
 800a29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a29c:	6866      	ldr	r6, [r4, #4]
 800a29e:	0187      	lsls	r7, r0, #6
 800a2a0:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800a2a4:	2500      	movs	r5, #0
 800a2a6:	55f5      	strb	r5, [r6, r7]
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
 800a2ae:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	f104 0514 	add.w	r5, r4, #20
 800a2b8:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800a2bc:	f88c e001 	strb.w	lr, [ip, #1]
 800a2c0:	f8ac 3038 	strh.w	r3, [ip, #56]	; 0x38
 800a2c4:	60e0      	str	r0, [r4, #12]
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	f006 fc16 	bl	8010af8 <rcl_wait_set_is_valid>
 800a2cc:	b930      	cbnz	r0, 800a2dc <rclc_executor_add_subscription+0x5c>
 800a2ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	64a3      	str	r3, [r4, #72]	; 0x48
 800a2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2d8:	200b      	movs	r0, #11
 800a2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2dc:	4628      	mov	r0, r5
 800a2de:	f006 fc11 	bl	8010b04 <rcl_wait_set_fini>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d0f3      	beq.n	800a2ce <rclc_executor_add_subscription+0x4e>
 800a2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a2e8 <rclc_executor_prepare>:
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d044      	beq.n	800a376 <rclc_executor_prepare+0x8e>
 800a2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ee:	f100 0514 	add.w	r5, r0, #20
 800a2f2:	b09b      	sub	sp, #108	; 0x6c
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	f006 fbfe 	bl	8010af8 <rcl_wait_set_is_valid>
 800a2fc:	b110      	cbz	r0, 800a304 <rclc_executor_prepare+0x1c>
 800a2fe:	2000      	movs	r0, #0
 800a300:	b01b      	add	sp, #108	; 0x6c
 800a302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a304:	4628      	mov	r0, r5
 800a306:	f006 fbfd 	bl	8010b04 <rcl_wait_set_fini>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d130      	bne.n	800a370 <rclc_executor_prepare+0x88>
 800a30e:	a80c      	add	r0, sp, #48	; 0x30
 800a310:	f006 fbde 	bl	8010ad0 <rcl_get_zero_initialized_wait_set>
 800a314:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800a318:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a31c:	46ae      	mov	lr, r5
 800a31e:	6927      	ldr	r7, [r4, #16]
 800a320:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a324:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a328:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a32c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a330:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a334:	f8dc 3000 	ldr.w	r3, [ip]
 800a338:	f8ce 3000 	str.w	r3, [lr]
 800a33c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a33e:	ae04      	add	r6, sp, #16
 800a340:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	6822      	ldr	r2, [r4, #0]
 800a346:	6033      	str	r3, [r6, #0]
 800a348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a34a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a34c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a350:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 800a354:	e9cd 2100 	strd	r2, r1, [sp]
 800a358:	4628      	mov	r0, r5
 800a35a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a35c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a35e:	f006 fecf 	bl	8011100 <rcl_wait_set_init>
 800a362:	2800      	cmp	r0, #0
 800a364:	d0cc      	beq.n	800a300 <rclc_executor_prepare+0x18>
 800a366:	900b      	str	r0, [sp, #44]	; 0x2c
 800a368:	f000 fb36 	bl	800a9d8 <rcutils_reset_error>
 800a36c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a36e:	e7c7      	b.n	800a300 <rclc_executor_prepare+0x18>
 800a370:	f000 fb32 	bl	800a9d8 <rcutils_reset_error>
 800a374:	e7cb      	b.n	800a30e <rclc_executor_prepare+0x26>
 800a376:	200b      	movs	r0, #11
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop

0800a37c <rclc_executor_spin_some.part.0>:
 800a37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a380:	f100 0614 	add.w	r6, r0, #20
 800a384:	b083      	sub	sp, #12
 800a386:	4691      	mov	r9, r2
 800a388:	4698      	mov	r8, r3
 800a38a:	4605      	mov	r5, r0
 800a38c:	f7ff ffac 	bl	800a2e8 <rclc_executor_prepare>
 800a390:	4630      	mov	r0, r6
 800a392:	f006 fc83 	bl	8010c9c <rcl_wait_set_clear>
 800a396:	4607      	mov	r7, r0
 800a398:	2800      	cmp	r0, #0
 800a39a:	f040 80ed 	bne.w	800a578 <rclc_executor_spin_some.part.0+0x1fc>
 800a39e:	68ab      	ldr	r3, [r5, #8]
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	b303      	cbz	r3, 800a3e6 <rclc_executor_spin_some.part.0+0x6a>
 800a3a4:	6869      	ldr	r1, [r5, #4]
 800a3a6:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800a3aa:	01a2      	lsls	r2, r4, #6
 800a3ac:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800a3b0:	b1cb      	cbz	r3, 800a3e6 <rclc_executor_spin_some.part.0+0x6a>
 800a3b2:	5c8b      	ldrb	r3, [r1, r2]
 800a3b4:	2b0a      	cmp	r3, #10
 800a3b6:	f200 80d8 	bhi.w	800a56a <rclc_executor_spin_some.part.0+0x1ee>
 800a3ba:	e8df f003 	tbb	[pc, r3]
 800a3be:	9c9c      	.short	0x9c9c
 800a3c0:	068c8ca7 	.word	0x068c8ca7
 800a3c4:	bdc90606 	.word	0xbdc90606
 800a3c8:	b2          	.byte	0xb2
 800a3c9:	00          	.byte	0x00
 800a3ca:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a3ce:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f006 ffaa 	bl	801132c <rcl_wait_set_add_service>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	f040 8086 	bne.w	800a4ea <rclc_executor_spin_some.part.0+0x16e>
 800a3de:	68ab      	ldr	r3, [r5, #8]
 800a3e0:	3401      	adds	r4, #1
 800a3e2:	429c      	cmp	r4, r3
 800a3e4:	d3de      	bcc.n	800a3a4 <rclc_executor_spin_some.part.0+0x28>
 800a3e6:	4643      	mov	r3, r8
 800a3e8:	464a      	mov	r2, r9
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f006 ffcc 	bl	8011388 <rcl_wait>
 800a3f0:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f000 80c7 	beq.w	800a588 <rclc_executor_spin_some.part.0+0x20c>
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	f040 80b5 	bne.w	800a56a <rclc_executor_spin_some.part.0+0x1ee>
 800a400:	68ab      	ldr	r3, [r5, #8]
 800a402:	2b00      	cmp	r3, #0
 800a404:	f000 8159 	beq.w	800a6ba <rclc_executor_spin_some.part.0+0x33e>
 800a408:	2400      	movs	r4, #0
 800a40a:	46a0      	mov	r8, r4
 800a40c:	f240 1991 	movw	r9, #401	; 0x191
 800a410:	e00a      	b.n	800a428 <rclc_executor_spin_some.part.0+0xac>
 800a412:	f7ff fb7b 	bl	8009b0c <_rclc_check_for_new_data>
 800a416:	4604      	mov	r4, r0
 800a418:	b110      	cbz	r0, 800a420 <rclc_executor_spin_some.part.0+0xa4>
 800a41a:	4548      	cmp	r0, r9
 800a41c:	f040 80b2 	bne.w	800a584 <rclc_executor_spin_some.part.0+0x208>
 800a420:	68ab      	ldr	r3, [r5, #8]
 800a422:	4598      	cmp	r8, r3
 800a424:	f080 8126 	bcs.w	800a674 <rclc_executor_spin_some.part.0+0x2f8>
 800a428:	686a      	ldr	r2, [r5, #4]
 800a42a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a42e:	4631      	mov	r1, r6
 800a430:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a434:	f108 0801 	add.w	r8, r8, #1
 800a438:	f1bc 0f00 	cmp.w	ip, #0
 800a43c:	d1e9      	bne.n	800a412 <rclc_executor_spin_some.part.0+0x96>
 800a43e:	4619      	mov	r1, r3
 800a440:	4610      	mov	r0, r2
 800a442:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800a446:	4798      	blx	r3
 800a448:	2800      	cmp	r0, #0
 800a44a:	f000 809b 	beq.w	800a584 <rclc_executor_spin_some.part.0+0x208>
 800a44e:	68ab      	ldr	r3, [r5, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	f000 8097 	beq.w	800a584 <rclc_executor_spin_some.part.0+0x208>
 800a456:	f04f 0800 	mov.w	r8, #0
 800a45a:	f240 1991 	movw	r9, #401	; 0x191
 800a45e:	e009      	b.n	800a474 <rclc_executor_spin_some.part.0+0xf8>
 800a460:	f7ff fba2 	bl	8009ba8 <_rclc_take_new_data>
 800a464:	4604      	mov	r4, r0
 800a466:	b110      	cbz	r0, 800a46e <rclc_executor_spin_some.part.0+0xf2>
 800a468:	4548      	cmp	r0, r9
 800a46a:	f040 808b 	bne.w	800a584 <rclc_executor_spin_some.part.0+0x208>
 800a46e:	68ab      	ldr	r3, [r5, #8]
 800a470:	4598      	cmp	r8, r3
 800a472:	d209      	bcs.n	800a488 <rclc_executor_spin_some.part.0+0x10c>
 800a474:	6868      	ldr	r0, [r5, #4]
 800a476:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a47a:	4631      	mov	r1, r6
 800a47c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800a480:	f108 0801 	add.w	r8, r8, #1
 800a484:	2a00      	cmp	r2, #0
 800a486:	d1eb      	bne.n	800a460 <rclc_executor_spin_some.part.0+0xe4>
 800a488:	2600      	movs	r6, #0
 800a48a:	b97b      	cbnz	r3, 800a4ac <rclc_executor_spin_some.part.0+0x130>
 800a48c:	e07a      	b.n	800a584 <rclc_executor_spin_some.part.0+0x208>
 800a48e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800a492:	2a08      	cmp	r2, #8
 800a494:	f000 80fd 	beq.w	800a692 <rclc_executor_spin_some.part.0+0x316>
 800a498:	2a09      	cmp	r2, #9
 800a49a:	f000 80ef 	beq.w	800a67c <rclc_executor_spin_some.part.0+0x300>
 800a49e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800a4a2:	b98a      	cbnz	r2, 800a4c8 <rclc_executor_spin_some.part.0+0x14c>
 800a4a4:	3601      	adds	r6, #1
 800a4a6:	429e      	cmp	r6, r3
 800a4a8:	d262      	bcs.n	800a570 <rclc_executor_spin_some.part.0+0x1f4>
 800a4aa:	2400      	movs	r4, #0
 800a4ac:	686a      	ldr	r2, [r5, #4]
 800a4ae:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a4b2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800a4b6:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800a4ba:	2900      	cmp	r1, #0
 800a4bc:	d062      	beq.n	800a584 <rclc_executor_spin_some.part.0+0x208>
 800a4be:	7841      	ldrb	r1, [r0, #1]
 800a4c0:	2900      	cmp	r1, #0
 800a4c2:	d0e4      	beq.n	800a48e <rclc_executor_spin_some.part.0+0x112>
 800a4c4:	2901      	cmp	r1, #1
 800a4c6:	d1ed      	bne.n	800a4a4 <rclc_executor_spin_some.part.0+0x128>
 800a4c8:	f7ff fce2 	bl	8009e90 <_rclc_execute.part.0>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	f040 80b6 	bne.w	800a63e <rclc_executor_spin_some.part.0+0x2c2>
 800a4d2:	68ab      	ldr	r3, [r5, #8]
 800a4d4:	e7e6      	b.n	800a4a4 <rclc_executor_spin_some.part.0+0x128>
 800a4d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a4da:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f006 fef8 	bl	80112d4 <rcl_wait_set_add_client>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f43f af7a 	beq.w	800a3de <rclc_executor_spin_some.part.0+0x62>
 800a4ea:	9001      	str	r0, [sp, #4]
 800a4ec:	f000 fa74 	bl	800a9d8 <rcutils_reset_error>
 800a4f0:	9801      	ldr	r0, [sp, #4]
 800a4f2:	4607      	mov	r7, r0
 800a4f4:	e03c      	b.n	800a570 <rclc_executor_spin_some.part.0+0x1f4>
 800a4f6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a4fa:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a4fe:	4630      	mov	r0, r6
 800a500:	f006 fba0 	bl	8010c44 <rcl_wait_set_add_subscription>
 800a504:	2800      	cmp	r0, #0
 800a506:	f43f af6a 	beq.w	800a3de <rclc_executor_spin_some.part.0+0x62>
 800a50a:	e7ee      	b.n	800a4ea <rclc_executor_spin_some.part.0+0x16e>
 800a50c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a510:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a514:	4630      	mov	r0, r6
 800a516:	f006 fead 	bl	8011274 <rcl_wait_set_add_timer>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	f43f af5f 	beq.w	800a3de <rclc_executor_spin_some.part.0+0x62>
 800a520:	e7e3      	b.n	800a4ea <rclc_executor_spin_some.part.0+0x16e>
 800a522:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a526:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a52a:	4630      	mov	r0, r6
 800a52c:	f006 fe76 	bl	801121c <rcl_wait_set_add_guard_condition>
 800a530:	2800      	cmp	r0, #0
 800a532:	f43f af54 	beq.w	800a3de <rclc_executor_spin_some.part.0+0x62>
 800a536:	e7d8      	b.n	800a4ea <rclc_executor_spin_some.part.0+0x16e>
 800a538:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a53c:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a540:	3110      	adds	r1, #16
 800a542:	4630      	mov	r0, r6
 800a544:	f007 fbf6 	bl	8011d34 <rcl_action_wait_set_add_action_server>
 800a548:	2800      	cmp	r0, #0
 800a54a:	f43f af48 	beq.w	800a3de <rclc_executor_spin_some.part.0+0x62>
 800a54e:	e7cc      	b.n	800a4ea <rclc_executor_spin_some.part.0+0x16e>
 800a550:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a554:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800a558:	3110      	adds	r1, #16
 800a55a:	2300      	movs	r3, #0
 800a55c:	4630      	mov	r0, r6
 800a55e:	f007 f9c3 	bl	80118e8 <rcl_action_wait_set_add_action_client>
 800a562:	2800      	cmp	r0, #0
 800a564:	f43f af3b 	beq.w	800a3de <rclc_executor_spin_some.part.0+0x62>
 800a568:	e7bf      	b.n	800a4ea <rclc_executor_spin_some.part.0+0x16e>
 800a56a:	f000 fa35 	bl	800a9d8 <rcutils_reset_error>
 800a56e:	2701      	movs	r7, #1
 800a570:	4638      	mov	r0, r7
 800a572:	b003      	add	sp, #12
 800a574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a578:	f000 fa2e 	bl	800a9d8 <rcutils_reset_error>
 800a57c:	4638      	mov	r0, r7
 800a57e:	b003      	add	sp, #12
 800a580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a584:	4627      	mov	r7, r4
 800a586:	e7f3      	b.n	800a570 <rclc_executor_spin_some.part.0+0x1f4>
 800a588:	68ab      	ldr	r3, [r5, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 8092 	beq.w	800a6b4 <rclc_executor_spin_some.part.0+0x338>
 800a590:	2400      	movs	r4, #0
 800a592:	46a0      	mov	r8, r4
 800a594:	f240 1991 	movw	r9, #401	; 0x191
 800a598:	e008      	b.n	800a5ac <rclc_executor_spin_some.part.0+0x230>
 800a59a:	f7ff fab7 	bl	8009b0c <_rclc_check_for_new_data>
 800a59e:	4604      	mov	r4, r0
 800a5a0:	b108      	cbz	r0, 800a5a6 <rclc_executor_spin_some.part.0+0x22a>
 800a5a2:	4548      	cmp	r0, r9
 800a5a4:	d1ee      	bne.n	800a584 <rclc_executor_spin_some.part.0+0x208>
 800a5a6:	68ab      	ldr	r3, [r5, #8]
 800a5a8:	4598      	cmp	r8, r3
 800a5aa:	d265      	bcs.n	800a678 <rclc_executor_spin_some.part.0+0x2fc>
 800a5ac:	686a      	ldr	r2, [r5, #4]
 800a5ae:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a5b2:	4631      	mov	r1, r6
 800a5b4:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a5b8:	f108 0801 	add.w	r8, r8, #1
 800a5bc:	f1bc 0f00 	cmp.w	ip, #0
 800a5c0:	d1eb      	bne.n	800a59a <rclc_executor_spin_some.part.0+0x21e>
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800a5ca:	4798      	blx	r3
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d0d9      	beq.n	800a584 <rclc_executor_spin_some.part.0+0x208>
 800a5d0:	68ab      	ldr	r3, [r5, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d0d6      	beq.n	800a584 <rclc_executor_spin_some.part.0+0x208>
 800a5d6:	f04f 0800 	mov.w	r8, #0
 800a5da:	f240 1991 	movw	r9, #401	; 0x191
 800a5de:	f240 2a59 	movw	sl, #601	; 0x259
 800a5e2:	e00e      	b.n	800a602 <rclc_executor_spin_some.part.0+0x286>
 800a5e4:	f813 300b 	ldrb.w	r3, [r3, fp]
 800a5e8:	2b08      	cmp	r3, #8
 800a5ea:	d033      	beq.n	800a654 <rclc_executor_spin_some.part.0+0x2d8>
 800a5ec:	2b09      	cmp	r3, #9
 800a5ee:	d028      	beq.n	800a642 <rclc_executor_spin_some.part.0+0x2c6>
 800a5f0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a5f4:	b9fb      	cbnz	r3, 800a636 <rclc_executor_spin_some.part.0+0x2ba>
 800a5f6:	68ab      	ldr	r3, [r5, #8]
 800a5f8:	f108 0801 	add.w	r8, r8, #1
 800a5fc:	4598      	cmp	r8, r3
 800a5fe:	d2b7      	bcs.n	800a570 <rclc_executor_spin_some.part.0+0x1f4>
 800a600:	2400      	movs	r4, #0
 800a602:	6868      	ldr	r0, [r5, #4]
 800a604:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a608:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a60c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a610:	2b00      	cmp	r3, #0
 800a612:	d0b7      	beq.n	800a584 <rclc_executor_spin_some.part.0+0x208>
 800a614:	4631      	mov	r1, r6
 800a616:	f7ff fac7 	bl	8009ba8 <_rclc_take_new_data>
 800a61a:	b118      	cbz	r0, 800a624 <rclc_executor_spin_some.part.0+0x2a8>
 800a61c:	4548      	cmp	r0, r9
 800a61e:	d001      	beq.n	800a624 <rclc_executor_spin_some.part.0+0x2a8>
 800a620:	4550      	cmp	r0, sl
 800a622:	d10c      	bne.n	800a63e <rclc_executor_spin_some.part.0+0x2c2>
 800a624:	686b      	ldr	r3, [r5, #4]
 800a626:	eb13 000b 	adds.w	r0, r3, fp
 800a62a:	d021      	beq.n	800a670 <rclc_executor_spin_some.part.0+0x2f4>
 800a62c:	7842      	ldrb	r2, [r0, #1]
 800a62e:	2a00      	cmp	r2, #0
 800a630:	d0d8      	beq.n	800a5e4 <rclc_executor_spin_some.part.0+0x268>
 800a632:	2a01      	cmp	r2, #1
 800a634:	d1df      	bne.n	800a5f6 <rclc_executor_spin_some.part.0+0x27a>
 800a636:	f7ff fc2b 	bl	8009e90 <_rclc_execute.part.0>
 800a63a:	2800      	cmp	r0, #0
 800a63c:	d0db      	beq.n	800a5f6 <rclc_executor_spin_some.part.0+0x27a>
 800a63e:	4607      	mov	r7, r0
 800a640:	e796      	b.n	800a570 <rclc_executor_spin_some.part.0+0x1f4>
 800a642:	6843      	ldr	r3, [r0, #4]
 800a644:	6a1a      	ldr	r2, [r3, #32]
 800a646:	2a00      	cmp	r2, #0
 800a648:	d1f5      	bne.n	800a636 <rclc_executor_spin_some.part.0+0x2ba>
 800a64a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d0d1      	beq.n	800a5f6 <rclc_executor_spin_some.part.0+0x27a>
 800a652:	e7f0      	b.n	800a636 <rclc_executor_spin_some.part.0+0x2ba>
 800a654:	6843      	ldr	r3, [r0, #4]
 800a656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a658:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800a65c:	d1eb      	bne.n	800a636 <rclc_executor_spin_some.part.0+0x2ba>
 800a65e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a662:	2a00      	cmp	r2, #0
 800a664:	d1e7      	bne.n	800a636 <rclc_executor_spin_some.part.0+0x2ba>
 800a666:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0c3      	beq.n	800a5f6 <rclc_executor_spin_some.part.0+0x27a>
 800a66e:	e7e2      	b.n	800a636 <rclc_executor_spin_some.part.0+0x2ba>
 800a670:	270b      	movs	r7, #11
 800a672:	e77d      	b.n	800a570 <rclc_executor_spin_some.part.0+0x1f4>
 800a674:	686a      	ldr	r2, [r5, #4]
 800a676:	e6e2      	b.n	800a43e <rclc_executor_spin_some.part.0+0xc2>
 800a678:	686a      	ldr	r2, [r5, #4]
 800a67a:	e7a2      	b.n	800a5c2 <rclc_executor_spin_some.part.0+0x246>
 800a67c:	6842      	ldr	r2, [r0, #4]
 800a67e:	6a11      	ldr	r1, [r2, #32]
 800a680:	2900      	cmp	r1, #0
 800a682:	f47f af21 	bne.w	800a4c8 <rclc_executor_spin_some.part.0+0x14c>
 800a686:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a68a:	2a00      	cmp	r2, #0
 800a68c:	f43f af0a 	beq.w	800a4a4 <rclc_executor_spin_some.part.0+0x128>
 800a690:	e71a      	b.n	800a4c8 <rclc_executor_spin_some.part.0+0x14c>
 800a692:	6842      	ldr	r2, [r0, #4]
 800a694:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a696:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800a69a:	f47f af15 	bne.w	800a4c8 <rclc_executor_spin_some.part.0+0x14c>
 800a69e:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800a6a2:	2900      	cmp	r1, #0
 800a6a4:	f47f af10 	bne.w	800a4c8 <rclc_executor_spin_some.part.0+0x14c>
 800a6a8:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800a6ac:	2a00      	cmp	r2, #0
 800a6ae:	f43f aef9 	beq.w	800a4a4 <rclc_executor_spin_some.part.0+0x128>
 800a6b2:	e709      	b.n	800a4c8 <rclc_executor_spin_some.part.0+0x14c>
 800a6b4:	686a      	ldr	r2, [r5, #4]
 800a6b6:	461c      	mov	r4, r3
 800a6b8:	e783      	b.n	800a5c2 <rclc_executor_spin_some.part.0+0x246>
 800a6ba:	686a      	ldr	r2, [r5, #4]
 800a6bc:	461c      	mov	r4, r3
 800a6be:	e6be      	b.n	800a43e <rclc_executor_spin_some.part.0+0xc2>

0800a6c0 <rclc_executor_spin_some>:
 800a6c0:	b190      	cbz	r0, 800a6e8 <rclc_executor_spin_some+0x28>
 800a6c2:	b570      	push	{r4, r5, r6, lr}
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	6800      	ldr	r0, [r0, #0]
 800a6c8:	4616      	mov	r6, r2
 800a6ca:	461d      	mov	r5, r3
 800a6cc:	f005 f874 	bl	800f7b8 <rcl_context_is_valid>
 800a6d0:	b130      	cbz	r0, 800a6e0 <rclc_executor_spin_some+0x20>
 800a6d2:	4632      	mov	r2, r6
 800a6d4:	462b      	mov	r3, r5
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6dc:	f7ff be4e 	b.w	800a37c <rclc_executor_spin_some.part.0>
 800a6e0:	f000 f97a 	bl	800a9d8 <rcutils_reset_error>
 800a6e4:	2001      	movs	r0, #1
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}
 800a6e8:	200b      	movs	r0, #11
 800a6ea:	4770      	bx	lr

0800a6ec <rclc_executor_handle_counters_zero_init>:
 800a6ec:	b130      	cbz	r0, 800a6fc <rclc_executor_handle_counters_zero_init+0x10>
 800a6ee:	b508      	push	{r3, lr}
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	f00c f9ee 	bl	8016ad4 <memset>
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	bd08      	pop	{r3, pc}
 800a6fc:	200b      	movs	r0, #11
 800a6fe:	4770      	bx	lr

0800a700 <rclc_executor_handle_init>:
 800a700:	b168      	cbz	r0, 800a71e <rclc_executor_handle_init+0x1e>
 800a702:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800a728 <rclc_executor_handle_init+0x28>
 800a706:	2300      	movs	r3, #0
 800a708:	220b      	movs	r2, #11
 800a70a:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 800a70e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a712:	e9c0 310c 	strd	r3, r1, [r0, #48]	; 0x30
 800a716:	8002      	strh	r2, [r0, #0]
 800a718:	8703      	strh	r3, [r0, #56]	; 0x38
 800a71a:	4618      	mov	r0, r3
 800a71c:	4770      	bx	lr
 800a71e:	200b      	movs	r0, #11
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	f3af 8000 	nop.w
	...

0800a730 <rclc_support_init>:
 800a730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a734:	b086      	sub	sp, #24
 800a736:	b3b8      	cbz	r0, 800a7a8 <rclc_support_init+0x78>
 800a738:	461c      	mov	r4, r3
 800a73a:	b3ab      	cbz	r3, 800a7a8 <rclc_support_init+0x78>
 800a73c:	460f      	mov	r7, r1
 800a73e:	4690      	mov	r8, r2
 800a740:	4606      	mov	r6, r0
 800a742:	f005 f9a3 	bl	800fa8c <rcl_get_zero_initialized_init_options>
 800a746:	f104 030c 	add.w	r3, r4, #12
 800a74a:	9005      	str	r0, [sp, #20]
 800a74c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a750:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a754:	a805      	add	r0, sp, #20
 800a756:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a75a:	f005 f999 	bl	800fa90 <rcl_init_options_init>
 800a75e:	4605      	mov	r5, r0
 800a760:	b9e0      	cbnz	r0, 800a79c <rclc_support_init+0x6c>
 800a762:	ad02      	add	r5, sp, #8
 800a764:	4628      	mov	r0, r5
 800a766:	f005 f81d 	bl	800f7a4 <rcl_get_zero_initialized_context>
 800a76a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a76e:	4633      	mov	r3, r6
 800a770:	e886 0003 	stmia.w	r6, {r0, r1}
 800a774:	aa05      	add	r2, sp, #20
 800a776:	4641      	mov	r1, r8
 800a778:	4638      	mov	r0, r7
 800a77a:	f005 f883 	bl	800f884 <rcl_init>
 800a77e:	4605      	mov	r5, r0
 800a780:	b9b8      	cbnz	r0, 800a7b2 <rclc_support_init+0x82>
 800a782:	60b4      	str	r4, [r6, #8]
 800a784:	4622      	mov	r2, r4
 800a786:	f106 010c 	add.w	r1, r6, #12
 800a78a:	2003      	movs	r0, #3
 800a78c:	f005 ffaa 	bl	80106e4 <rcl_clock_init>
 800a790:	4605      	mov	r5, r0
 800a792:	b970      	cbnz	r0, 800a7b2 <rclc_support_init+0x82>
 800a794:	a805      	add	r0, sp, #20
 800a796:	f005 f9e1 	bl	800fb5c <rcl_init_options_fini>
 800a79a:	b108      	cbz	r0, 800a7a0 <rclc_support_init+0x70>
 800a79c:	f000 f91c 	bl	800a9d8 <rcutils_reset_error>
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	b006      	add	sp, #24
 800a7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a8:	250b      	movs	r5, #11
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	b006      	add	sp, #24
 800a7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7b2:	f000 f911 	bl	800a9d8 <rcutils_reset_error>
 800a7b6:	a805      	add	r0, sp, #20
 800a7b8:	f005 f9d0 	bl	800fb5c <rcl_init_options_fini>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d0ef      	beq.n	800a7a0 <rclc_support_init+0x70>
 800a7c0:	e7ec      	b.n	800a79c <rclc_support_init+0x6c>
 800a7c2:	bf00      	nop

0800a7c4 <rclc_node_init_default>:
 800a7c4:	b3b8      	cbz	r0, 800a836 <rclc_node_init_default+0x72>
 800a7c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	b0a1      	sub	sp, #132	; 0x84
 800a7ce:	b329      	cbz	r1, 800a81c <rclc_node_init_default+0x58>
 800a7d0:	4616      	mov	r6, r2
 800a7d2:	b31a      	cbz	r2, 800a81c <rclc_node_init_default+0x58>
 800a7d4:	461f      	mov	r7, r3
 800a7d6:	b30b      	cbz	r3, 800a81c <rclc_node_init_default+0x58>
 800a7d8:	f10d 0810 	add.w	r8, sp, #16
 800a7dc:	4604      	mov	r4, r0
 800a7de:	4640      	mov	r0, r8
 800a7e0:	f005 fa74 	bl	800fccc <rcl_get_zero_initialized_node>
 800a7e4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a7e8:	f10d 0918 	add.w	r9, sp, #24
 800a7ec:	e884 0003 	stmia.w	r4, {r0, r1}
 800a7f0:	4648      	mov	r0, r9
 800a7f2:	f005 fbe3 	bl	800ffbc <rcl_node_get_default_options>
 800a7f6:	4640      	mov	r0, r8
 800a7f8:	f005 fa68 	bl	800fccc <rcl_get_zero_initialized_node>
 800a7fc:	f8cd 9000 	str.w	r9, [sp]
 800a800:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a804:	463b      	mov	r3, r7
 800a806:	e884 0003 	stmia.w	r4, {r0, r1}
 800a80a:	4632      	mov	r2, r6
 800a80c:	4629      	mov	r1, r5
 800a80e:	4620      	mov	r0, r4
 800a810:	f005 fa66 	bl	800fce0 <rcl_node_init>
 800a814:	b930      	cbnz	r0, 800a824 <rclc_node_init_default+0x60>
 800a816:	b021      	add	sp, #132	; 0x84
 800a818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a81c:	200b      	movs	r0, #11
 800a81e:	b021      	add	sp, #132	; 0x84
 800a820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a824:	9003      	str	r0, [sp, #12]
 800a826:	f000 f8d7 	bl	800a9d8 <rcutils_reset_error>
 800a82a:	f000 f8d5 	bl	800a9d8 <rcutils_reset_error>
 800a82e:	9803      	ldr	r0, [sp, #12]
 800a830:	b021      	add	sp, #132	; 0x84
 800a832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a836:	200b      	movs	r0, #11
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop

0800a83c <rclc_publisher_init_best_effort>:
 800a83c:	b368      	cbz	r0, 800a89a <rclc_publisher_init_best_effort+0x5e>
 800a83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a842:	460d      	mov	r5, r1
 800a844:	b0a0      	sub	sp, #128	; 0x80
 800a846:	b321      	cbz	r1, 800a892 <rclc_publisher_init_best_effort+0x56>
 800a848:	4616      	mov	r6, r2
 800a84a:	b312      	cbz	r2, 800a892 <rclc_publisher_init_best_effort+0x56>
 800a84c:	461f      	mov	r7, r3
 800a84e:	b303      	cbz	r3, 800a892 <rclc_publisher_init_best_effort+0x56>
 800a850:	4604      	mov	r4, r0
 800a852:	f7ff f84b 	bl	80098ec <rcl_get_zero_initialized_publisher>
 800a856:	f10d 0810 	add.w	r8, sp, #16
 800a85a:	6020      	str	r0, [r4, #0]
 800a85c:	4640      	mov	r0, r8
 800a85e:	f7ff f8e1 	bl	8009a24 <rcl_publisher_get_default_options>
 800a862:	490f      	ldr	r1, [pc, #60]	; (800a8a0 <rclc_publisher_init_best_effort+0x64>)
 800a864:	2250      	movs	r2, #80	; 0x50
 800a866:	4640      	mov	r0, r8
 800a868:	f00c f9fd 	bl	8016c66 <memcpy>
 800a86c:	f8cd 8000 	str.w	r8, [sp]
 800a870:	463b      	mov	r3, r7
 800a872:	4632      	mov	r2, r6
 800a874:	4629      	mov	r1, r5
 800a876:	4620      	mov	r0, r4
 800a878:	f7ff f83e 	bl	80098f8 <rcl_publisher_init>
 800a87c:	b910      	cbnz	r0, 800a884 <rclc_publisher_init_best_effort+0x48>
 800a87e:	b020      	add	sp, #128	; 0x80
 800a880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a884:	9003      	str	r0, [sp, #12]
 800a886:	f000 f8a7 	bl	800a9d8 <rcutils_reset_error>
 800a88a:	9803      	ldr	r0, [sp, #12]
 800a88c:	b020      	add	sp, #128	; 0x80
 800a88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a892:	200b      	movs	r0, #11
 800a894:	b020      	add	sp, #128	; 0x80
 800a896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a89a:	200b      	movs	r0, #11
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	08017bf8 	.word	0x08017bf8

0800a8a4 <rclc_subscription_init_best_effort>:
 800a8a4:	b368      	cbz	r0, 800a902 <rclc_subscription_init_best_effort+0x5e>
 800a8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8aa:	460d      	mov	r5, r1
 800a8ac:	b0a0      	sub	sp, #128	; 0x80
 800a8ae:	b321      	cbz	r1, 800a8fa <rclc_subscription_init_best_effort+0x56>
 800a8b0:	4616      	mov	r6, r2
 800a8b2:	b312      	cbz	r2, 800a8fa <rclc_subscription_init_best_effort+0x56>
 800a8b4:	461f      	mov	r7, r3
 800a8b6:	b303      	cbz	r3, 800a8fa <rclc_subscription_init_best_effort+0x56>
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	f005 fdb7 	bl	801042c <rcl_get_zero_initialized_subscription>
 800a8be:	f10d 0810 	add.w	r8, sp, #16
 800a8c2:	6020      	str	r0, [r4, #0]
 800a8c4:	4640      	mov	r0, r8
 800a8c6:	f005 fe5f 	bl	8010588 <rcl_subscription_get_default_options>
 800a8ca:	490f      	ldr	r1, [pc, #60]	; (800a908 <rclc_subscription_init_best_effort+0x64>)
 800a8cc:	2250      	movs	r2, #80	; 0x50
 800a8ce:	4640      	mov	r0, r8
 800a8d0:	f00c f9c9 	bl	8016c66 <memcpy>
 800a8d4:	f8cd 8000 	str.w	r8, [sp]
 800a8d8:	463b      	mov	r3, r7
 800a8da:	4632      	mov	r2, r6
 800a8dc:	4629      	mov	r1, r5
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f005 fdaa 	bl	8010438 <rcl_subscription_init>
 800a8e4:	b910      	cbnz	r0, 800a8ec <rclc_subscription_init_best_effort+0x48>
 800a8e6:	b020      	add	sp, #128	; 0x80
 800a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ec:	9003      	str	r0, [sp, #12]
 800a8ee:	f000 f873 	bl	800a9d8 <rcutils_reset_error>
 800a8f2:	9803      	ldr	r0, [sp, #12]
 800a8f4:	b020      	add	sp, #128	; 0x80
 800a8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8fa:	200b      	movs	r0, #11
 800a8fc:	b020      	add	sp, #128	; 0x80
 800a8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a902:	200b      	movs	r0, #11
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	08017c48 	.word	0x08017c48

0800a90c <__default_zero_allocate>:
 800a90c:	f00b bcf2 	b.w	80162f4 <calloc>

0800a910 <__default_reallocate>:
 800a910:	f00b be7e 	b.w	8016610 <realloc>

0800a914 <__default_deallocate>:
 800a914:	f00b bd5c 	b.w	80163d0 <free>

0800a918 <__default_allocate>:
 800a918:	f00b bd52 	b.w	80163c0 <malloc>

0800a91c <rcutils_get_zero_initialized_allocator>:
 800a91c:	b510      	push	{r4, lr}
 800a91e:	4c05      	ldr	r4, [pc, #20]	; (800a934 <rcutils_get_zero_initialized_allocator+0x18>)
 800a920:	4686      	mov	lr, r0
 800a922:	4684      	mov	ip, r0
 800a924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a926:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	f8cc 3000 	str.w	r3, [ip]
 800a930:	4670      	mov	r0, lr
 800a932:	bd10      	pop	{r4, pc}
 800a934:	08017c98 	.word	0x08017c98

0800a938 <rcutils_set_default_allocator>:
 800a938:	b1a8      	cbz	r0, 800a966 <rcutils_set_default_allocator+0x2e>
 800a93a:	6802      	ldr	r2, [r0, #0]
 800a93c:	b1a2      	cbz	r2, 800a968 <rcutils_set_default_allocator+0x30>
 800a93e:	6841      	ldr	r1, [r0, #4]
 800a940:	b1a1      	cbz	r1, 800a96c <rcutils_set_default_allocator+0x34>
 800a942:	b410      	push	{r4}
 800a944:	68c4      	ldr	r4, [r0, #12]
 800a946:	b164      	cbz	r4, 800a962 <rcutils_set_default_allocator+0x2a>
 800a948:	6880      	ldr	r0, [r0, #8]
 800a94a:	b138      	cbz	r0, 800a95c <rcutils_set_default_allocator+0x24>
 800a94c:	4b08      	ldr	r3, [pc, #32]	; (800a970 <rcutils_set_default_allocator+0x38>)
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	2200      	movs	r2, #0
 800a952:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a956:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a95a:	2001      	movs	r0, #1
 800a95c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	4620      	mov	r0, r4
 800a964:	e7fa      	b.n	800a95c <rcutils_set_default_allocator+0x24>
 800a966:	4770      	bx	lr
 800a968:	4610      	mov	r0, r2
 800a96a:	4770      	bx	lr
 800a96c:	4608      	mov	r0, r1
 800a96e:	4770      	bx	lr
 800a970:	20000014 	.word	0x20000014

0800a974 <rcutils_get_default_allocator>:
 800a974:	b510      	push	{r4, lr}
 800a976:	4c05      	ldr	r4, [pc, #20]	; (800a98c <rcutils_get_default_allocator+0x18>)
 800a978:	4686      	mov	lr, r0
 800a97a:	4684      	mov	ip, r0
 800a97c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a97e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a982:	6823      	ldr	r3, [r4, #0]
 800a984:	f8cc 3000 	str.w	r3, [ip]
 800a988:	4670      	mov	r0, lr
 800a98a:	bd10      	pop	{r4, pc}
 800a98c:	20000014 	.word	0x20000014

0800a990 <rcutils_allocator_is_valid>:
 800a990:	b158      	cbz	r0, 800a9aa <rcutils_allocator_is_valid+0x1a>
 800a992:	6803      	ldr	r3, [r0, #0]
 800a994:	b143      	cbz	r3, 800a9a8 <rcutils_allocator_is_valid+0x18>
 800a996:	6843      	ldr	r3, [r0, #4]
 800a998:	b133      	cbz	r3, 800a9a8 <rcutils_allocator_is_valid+0x18>
 800a99a:	68c3      	ldr	r3, [r0, #12]
 800a99c:	b123      	cbz	r3, 800a9a8 <rcutils_allocator_is_valid+0x18>
 800a99e:	6880      	ldr	r0, [r0, #8]
 800a9a0:	3800      	subs	r0, #0
 800a9a2:	bf18      	it	ne
 800a9a4:	2001      	movne	r0, #1
 800a9a6:	4770      	bx	lr
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	4770      	bx	lr

0800a9ac <rcutils_get_error_string>:
 800a9ac:	4b06      	ldr	r3, [pc, #24]	; (800a9c8 <rcutils_get_error_string+0x1c>)
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	b13b      	cbz	r3, 800a9c2 <rcutils_get_error_string+0x16>
 800a9b2:	4b06      	ldr	r3, [pc, #24]	; (800a9cc <rcutils_get_error_string+0x20>)
 800a9b4:	781a      	ldrb	r2, [r3, #0]
 800a9b6:	b90a      	cbnz	r2, 800a9bc <rcutils_get_error_string+0x10>
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	701a      	strb	r2, [r3, #0]
 800a9bc:	4b04      	ldr	r3, [pc, #16]	; (800a9d0 <rcutils_get_error_string+0x24>)
 800a9be:	7818      	ldrb	r0, [r3, #0]
 800a9c0:	4770      	bx	lr
 800a9c2:	4b04      	ldr	r3, [pc, #16]	; (800a9d4 <rcutils_get_error_string+0x28>)
 800a9c4:	7818      	ldrb	r0, [r3, #0]
 800a9c6:	4770      	bx	lr
 800a9c8:	20009160 	.word	0x20009160
 800a9cc:	20009179 	.word	0x20009179
 800a9d0:	20009178 	.word	0x20009178
 800a9d4:	08017cac 	.word	0x08017cac

0800a9d8 <rcutils_reset_error>:
 800a9d8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800a9f8 <rcutils_reset_error+0x20>
 800a9dc:	4a08      	ldr	r2, [pc, #32]	; (800aa00 <rcutils_reset_error+0x28>)
 800a9de:	4809      	ldr	r0, [pc, #36]	; (800aa04 <rcutils_reset_error+0x2c>)
 800a9e0:	4909      	ldr	r1, [pc, #36]	; (800aa08 <rcutils_reset_error+0x30>)
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	8013      	strh	r3, [r2, #0]
 800a9e6:	ed82 7b02 	vstr	d7, [r2, #8]
 800a9ea:	4a08      	ldr	r2, [pc, #32]	; (800aa0c <rcutils_reset_error+0x34>)
 800a9ec:	7003      	strb	r3, [r0, #0]
 800a9ee:	700b      	strb	r3, [r1, #0]
 800a9f0:	7013      	strb	r3, [r2, #0]
 800a9f2:	4770      	bx	lr
 800a9f4:	f3af 8000 	nop.w
	...
 800aa00:	20009168 	.word	0x20009168
 800aa04:	20009179 	.word	0x20009179
 800aa08:	20009178 	.word	0x20009178
 800aa0c:	20009160 	.word	0x20009160

0800aa10 <rcutils_system_time_now>:
 800aa10:	b308      	cbz	r0, 800aa56 <rcutils_system_time_now+0x46>
 800aa12:	b570      	push	{r4, r5, r6, lr}
 800aa14:	b084      	sub	sp, #16
 800aa16:	4604      	mov	r4, r0
 800aa18:	4669      	mov	r1, sp
 800aa1a:	2001      	movs	r0, #1
 800aa1c:	f7f7 f8ec 	bl	8001bf8 <clock_gettime>
 800aa20:	e9dd 3500 	ldrd	r3, r5, [sp]
 800aa24:	2d00      	cmp	r5, #0
 800aa26:	db13      	blt.n	800aa50 <rcutils_system_time_now+0x40>
 800aa28:	9902      	ldr	r1, [sp, #8]
 800aa2a:	2900      	cmp	r1, #0
 800aa2c:	db0d      	blt.n	800aa4a <rcutils_system_time_now+0x3a>
 800aa2e:	4e0b      	ldr	r6, [pc, #44]	; (800aa5c <rcutils_system_time_now+0x4c>)
 800aa30:	fba3 3206 	umull	r3, r2, r3, r6
 800aa34:	185b      	adds	r3, r3, r1
 800aa36:	fb06 2205 	mla	r2, r6, r5, r2
 800aa3a:	f04f 0000 	mov.w	r0, #0
 800aa3e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800aa42:	e9c4 3200 	strd	r3, r2, [r4]
 800aa46:	b004      	add	sp, #16
 800aa48:	bd70      	pop	{r4, r5, r6, pc}
 800aa4a:	ea53 0205 	orrs.w	r2, r3, r5
 800aa4e:	d1ee      	bne.n	800aa2e <rcutils_system_time_now+0x1e>
 800aa50:	2002      	movs	r0, #2
 800aa52:	b004      	add	sp, #16
 800aa54:	bd70      	pop	{r4, r5, r6, pc}
 800aa56:	200b      	movs	r0, #11
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	3b9aca00 	.word	0x3b9aca00

0800aa60 <rcutils_steady_time_now>:
 800aa60:	b308      	cbz	r0, 800aaa6 <rcutils_steady_time_now+0x46>
 800aa62:	b570      	push	{r4, r5, r6, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	4604      	mov	r4, r0
 800aa68:	4669      	mov	r1, sp
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	f7f7 f8c4 	bl	8001bf8 <clock_gettime>
 800aa70:	e9dd 3500 	ldrd	r3, r5, [sp]
 800aa74:	2d00      	cmp	r5, #0
 800aa76:	db13      	blt.n	800aaa0 <rcutils_steady_time_now+0x40>
 800aa78:	9902      	ldr	r1, [sp, #8]
 800aa7a:	2900      	cmp	r1, #0
 800aa7c:	db0d      	blt.n	800aa9a <rcutils_steady_time_now+0x3a>
 800aa7e:	4e0b      	ldr	r6, [pc, #44]	; (800aaac <rcutils_steady_time_now+0x4c>)
 800aa80:	fba3 3206 	umull	r3, r2, r3, r6
 800aa84:	185b      	adds	r3, r3, r1
 800aa86:	fb06 2205 	mla	r2, r6, r5, r2
 800aa8a:	f04f 0000 	mov.w	r0, #0
 800aa8e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800aa92:	e9c4 3200 	strd	r3, r2, [r4]
 800aa96:	b004      	add	sp, #16
 800aa98:	bd70      	pop	{r4, r5, r6, pc}
 800aa9a:	ea53 0205 	orrs.w	r2, r3, r5
 800aa9e:	d1ee      	bne.n	800aa7e <rcutils_steady_time_now+0x1e>
 800aaa0:	2002      	movs	r0, #2
 800aaa2:	b004      	add	sp, #16
 800aaa4:	bd70      	pop	{r4, r5, r6, pc}
 800aaa6:	200b      	movs	r0, #11
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	3b9aca00 	.word	0x3b9aca00

0800aab0 <rmw_get_default_publisher_options>:
 800aab0:	2200      	movs	r2, #0
 800aab2:	6002      	str	r2, [r0, #0]
 800aab4:	7102      	strb	r2, [r0, #4]
 800aab6:	4770      	bx	lr

0800aab8 <rmw_uros_set_custom_transport>:
 800aab8:	b470      	push	{r4, r5, r6}
 800aaba:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800aabe:	b162      	cbz	r2, 800aada <rmw_uros_set_custom_transport+0x22>
 800aac0:	b15b      	cbz	r3, 800aada <rmw_uros_set_custom_transport+0x22>
 800aac2:	b155      	cbz	r5, 800aada <rmw_uros_set_custom_transport+0x22>
 800aac4:	b14e      	cbz	r6, 800aada <rmw_uros_set_custom_transport+0x22>
 800aac6:	4c06      	ldr	r4, [pc, #24]	; (800aae0 <rmw_uros_set_custom_transport+0x28>)
 800aac8:	7020      	strb	r0, [r4, #0]
 800aaca:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800aace:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800aad2:	6166      	str	r6, [r4, #20]
 800aad4:	2000      	movs	r0, #0
 800aad6:	bc70      	pop	{r4, r5, r6}
 800aad8:	4770      	bx	lr
 800aada:	200b      	movs	r0, #11
 800aadc:	bc70      	pop	{r4, r5, r6}
 800aade:	4770      	bx	lr
 800aae0:	2000917c 	.word	0x2000917c

0800aae4 <flush_session>:
 800aae4:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800aae6:	f002 be47 	b.w	800d778 <uxr_run_session_until_confirm_delivery>
 800aaea:	bf00      	nop

0800aaec <rmw_publish>:
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d053      	beq.n	800ab98 <rmw_publish+0xac>
 800aaf0:	b570      	push	{r4, r5, r6, lr}
 800aaf2:	460d      	mov	r5, r1
 800aaf4:	b08e      	sub	sp, #56	; 0x38
 800aaf6:	2900      	cmp	r1, #0
 800aaf8:	d04b      	beq.n	800ab92 <rmw_publish+0xa6>
 800aafa:	4604      	mov	r4, r0
 800aafc:	6800      	ldr	r0, [r0, #0]
 800aafe:	f000 fced 	bl	800b4dc <is_uxrce_rmw_identifier_valid>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d045      	beq.n	800ab92 <rmw_publish+0xa6>
 800ab06:	6866      	ldr	r6, [r4, #4]
 800ab08:	2e00      	cmp	r6, #0
 800ab0a:	d042      	beq.n	800ab92 <rmw_publish+0xa6>
 800ab0c:	69b4      	ldr	r4, [r6, #24]
 800ab0e:	4628      	mov	r0, r5
 800ab10:	6923      	ldr	r3, [r4, #16]
 800ab12:	4798      	blx	r3
 800ab14:	69f3      	ldr	r3, [r6, #28]
 800ab16:	9005      	str	r0, [sp, #20]
 800ab18:	b113      	cbz	r3, 800ab20 <rmw_publish+0x34>
 800ab1a:	a805      	add	r0, sp, #20
 800ab1c:	4798      	blx	r3
 800ab1e:	9805      	ldr	r0, [sp, #20]
 800ab20:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	9000      	str	r0, [sp, #0]
 800ab28:	6972      	ldr	r2, [r6, #20]
 800ab2a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ab2c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ab30:	ab06      	add	r3, sp, #24
 800ab32:	f003 fc0d 	bl	800e350 <uxr_prepare_output_stream>
 800ab36:	b1d8      	cbz	r0, 800ab70 <rmw_publish+0x84>
 800ab38:	68a3      	ldr	r3, [r4, #8]
 800ab3a:	a906      	add	r1, sp, #24
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	4798      	blx	r3
 800ab40:	6a33      	ldr	r3, [r6, #32]
 800ab42:	4604      	mov	r4, r0
 800ab44:	b10b      	cbz	r3, 800ab4a <rmw_publish+0x5e>
 800ab46:	a806      	add	r0, sp, #24
 800ab48:	4798      	blx	r3
 800ab4a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ab54:	d022      	beq.n	800ab9c <rmw_publish+0xb0>
 800ab56:	6918      	ldr	r0, [r3, #16]
 800ab58:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800ab5a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ab5e:	f002 fe0b 	bl	800d778 <uxr_run_session_until_confirm_delivery>
 800ab62:	4020      	ands	r0, r4
 800ab64:	b2c4      	uxtb	r4, r0
 800ab66:	f084 0001 	eor.w	r0, r4, #1
 800ab6a:	b2c0      	uxtb	r0, r0
 800ab6c:	b00e      	add	sp, #56	; 0x38
 800ab6e:	bd70      	pop	{r4, r5, r6, pc}
 800ab70:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ab74:	6918      	ldr	r0, [r3, #16]
 800ab76:	9b05      	ldr	r3, [sp, #20]
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	4b0b      	ldr	r3, [pc, #44]	; (800aba8 <rmw_publish+0xbc>)
 800ab7c:	9301      	str	r3, [sp, #4]
 800ab7e:	9602      	str	r6, [sp, #8]
 800ab80:	6972      	ldr	r2, [r6, #20]
 800ab82:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ab84:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ab88:	ab06      	add	r3, sp, #24
 800ab8a:	f003 fc11 	bl	800e3b0 <uxr_prepare_output_stream_fragmented>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d1d2      	bne.n	800ab38 <rmw_publish+0x4c>
 800ab92:	2001      	movs	r0, #1
 800ab94:	b00e      	add	sp, #56	; 0x38
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	2001      	movs	r0, #1
 800ab9a:	4770      	bx	lr
 800ab9c:	6918      	ldr	r0, [r3, #16]
 800ab9e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800aba2:	f002 fa29 	bl	800cff8 <uxr_flash_output_streams>
 800aba6:	e7de      	b.n	800ab66 <rmw_publish+0x7a>
 800aba8:	0800aae5 	.word	0x0800aae5

0800abac <rmw_create_publisher>:
 800abac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb0:	b087      	sub	sp, #28
 800abb2:	2800      	cmp	r0, #0
 800abb4:	f000 80cc 	beq.w	800ad50 <rmw_create_publisher+0x1a4>
 800abb8:	460e      	mov	r6, r1
 800abba:	2900      	cmp	r1, #0
 800abbc:	f000 80c8 	beq.w	800ad50 <rmw_create_publisher+0x1a4>
 800abc0:	4604      	mov	r4, r0
 800abc2:	6800      	ldr	r0, [r0, #0]
 800abc4:	4615      	mov	r5, r2
 800abc6:	4698      	mov	r8, r3
 800abc8:	f000 fc88 	bl	800b4dc <is_uxrce_rmw_identifier_valid>
 800abcc:	2800      	cmp	r0, #0
 800abce:	f000 80bf 	beq.w	800ad50 <rmw_create_publisher+0x1a4>
 800abd2:	2d00      	cmp	r5, #0
 800abd4:	f000 80bc 	beq.w	800ad50 <rmw_create_publisher+0x1a4>
 800abd8:	782b      	ldrb	r3, [r5, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 80b8 	beq.w	800ad50 <rmw_create_publisher+0x1a4>
 800abe0:	f1b8 0f00 	cmp.w	r8, #0
 800abe4:	f000 80b4 	beq.w	800ad50 <rmw_create_publisher+0x1a4>
 800abe8:	485c      	ldr	r0, [pc, #368]	; (800ad5c <rmw_create_publisher+0x1b0>)
 800abea:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800abee:	f008 f81f 	bl	8012c30 <get_memory>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	f000 80ac 	beq.w	800ad50 <rmw_create_publisher+0x1a4>
 800abf8:	6884      	ldr	r4, [r0, #8]
 800abfa:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800abfe:	f008 f87f 	bl	8012d00 <rmw_get_implementation_identifier>
 800ac02:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800ac06:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800ac0a:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f7f5 faf0 	bl	80001f4 <strlen>
 800ac14:	3001      	adds	r0, #1
 800ac16:	283c      	cmp	r0, #60	; 0x3c
 800ac18:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800ac1c:	f200 8091 	bhi.w	800ad42 <rmw_create_publisher+0x196>
 800ac20:	4a4f      	ldr	r2, [pc, #316]	; (800ad60 <rmw_create_publisher+0x1b4>)
 800ac22:	462b      	mov	r3, r5
 800ac24:	213c      	movs	r1, #60	; 0x3c
 800ac26:	4650      	mov	r0, sl
 800ac28:	f00b fe7a 	bl	8016920 <sniprintf>
 800ac2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac30:	67e3      	str	r3, [r4, #124]	; 0x7c
 800ac32:	4641      	mov	r1, r8
 800ac34:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800ac38:	2250      	movs	r2, #80	; 0x50
 800ac3a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ac3e:	f00c f812 	bl	8016c66 <memcpy>
 800ac42:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ac46:	4947      	ldr	r1, [pc, #284]	; (800ad64 <rmw_create_publisher+0x1b8>)
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac4e:	bf0c      	ite	eq
 800ac50:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800ac54:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800ac58:	67a3      	str	r3, [r4, #120]	; 0x78
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ac60:	4630      	mov	r0, r6
 800ac62:	f000 fc49 	bl	800b4f8 <get_message_typesupport_handle>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d06b      	beq.n	800ad42 <rmw_create_publisher+0x196>
 800ac6a:	6842      	ldr	r2, [r0, #4]
 800ac6c:	61a2      	str	r2, [r4, #24]
 800ac6e:	2a00      	cmp	r2, #0
 800ac70:	d067      	beq.n	800ad42 <rmw_create_publisher+0x196>
 800ac72:	4629      	mov	r1, r5
 800ac74:	4643      	mov	r3, r8
 800ac76:	4648      	mov	r0, r9
 800ac78:	f008 faa8 	bl	80131cc <create_topic>
 800ac7c:	6260      	str	r0, [r4, #36]	; 0x24
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d063      	beq.n	800ad4a <rmw_create_publisher+0x19e>
 800ac82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac8a:	2103      	movs	r1, #3
 800ac8c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800ac90:	1c42      	adds	r2, r0, #1
 800ac92:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800ac96:	f002 f85f 	bl	800cd58 <uxr_object_id>
 800ac9a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800ac9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aca2:	6120      	str	r0, [r4, #16]
 800aca4:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800aca8:	6910      	ldr	r0, [r2, #16]
 800acaa:	2506      	movs	r5, #6
 800acac:	9500      	str	r5, [sp, #0]
 800acae:	6819      	ldr	r1, [r3, #0]
 800acb0:	6922      	ldr	r2, [r4, #16]
 800acb2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800acb6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800acba:	f001 feff 	bl	800cabc <uxr_buffer_create_publisher_bin>
 800acbe:	4602      	mov	r2, r0
 800acc0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800acc4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800acc8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800accc:	f000 fb86 	bl	800b3dc <run_xrce_session>
 800acd0:	b3b8      	cbz	r0, 800ad42 <rmw_create_publisher+0x196>
 800acd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800acd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acda:	2105      	movs	r1, #5
 800acdc:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800ace0:	1c42      	adds	r2, r0, #1
 800ace2:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800ace6:	f002 f837 	bl	800cd58 <uxr_object_id>
 800acea:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800acee:	6160      	str	r0, [r4, #20]
 800acf0:	691e      	ldr	r6, [r3, #16]
 800acf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800acf6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800acfa:	f10d 0a10 	add.w	sl, sp, #16
 800acfe:	4641      	mov	r1, r8
 800ad00:	4650      	mov	r0, sl
 800ad02:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800ad06:	f000 fb85 	bl	800b414 <convert_qos_profile>
 800ad0a:	9503      	str	r5, [sp, #12]
 800ad0c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ad10:	9001      	str	r0, [sp, #4]
 800ad12:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ad16:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800ad20:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ad24:	f8d8 1000 	ldr.w	r1, [r8]
 800ad28:	4630      	mov	r0, r6
 800ad2a:	f001 ff27 	bl	800cb7c <uxr_buffer_create_datawriter_bin>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ad34:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ad38:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ad3c:	f000 fb4e 	bl	800b3dc <run_xrce_session>
 800ad40:	b938      	cbnz	r0, 800ad52 <rmw_create_publisher+0x1a6>
 800ad42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ad44:	b108      	cbz	r0, 800ad4a <rmw_create_publisher+0x19e>
 800ad46:	f000 fa47 	bl	800b1d8 <rmw_uxrce_fini_topic_memory>
 800ad4a:	4638      	mov	r0, r7
 800ad4c:	f000 f9ec 	bl	800b128 <rmw_uxrce_fini_publisher_memory>
 800ad50:	2700      	movs	r7, #0
 800ad52:	4638      	mov	r0, r7
 800ad54:	b007      	add	sp, #28
 800ad56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5a:	bf00      	nop
 800ad5c:	2000da74 	.word	0x2000da74
 800ad60:	08017ce4 	.word	0x08017ce4
 800ad64:	08017cb0 	.word	0x08017cb0

0800ad68 <rmw_publisher_get_actual_qos>:
 800ad68:	b150      	cbz	r0, 800ad80 <rmw_publisher_get_actual_qos+0x18>
 800ad6a:	b508      	push	{r3, lr}
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	b149      	cbz	r1, 800ad84 <rmw_publisher_get_actual_qos+0x1c>
 800ad70:	6841      	ldr	r1, [r0, #4]
 800ad72:	2250      	movs	r2, #80	; 0x50
 800ad74:	3128      	adds	r1, #40	; 0x28
 800ad76:	4618      	mov	r0, r3
 800ad78:	f00b ff75 	bl	8016c66 <memcpy>
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	bd08      	pop	{r3, pc}
 800ad80:	200b      	movs	r0, #11
 800ad82:	4770      	bx	lr
 800ad84:	200b      	movs	r0, #11
 800ad86:	bd08      	pop	{r3, pc}

0800ad88 <rmw_destroy_publisher>:
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8a:	b128      	cbz	r0, 800ad98 <rmw_destroy_publisher+0x10>
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	6800      	ldr	r0, [r0, #0]
 800ad90:	460d      	mov	r5, r1
 800ad92:	f000 fba3 	bl	800b4dc <is_uxrce_rmw_identifier_valid>
 800ad96:	b910      	cbnz	r0, 800ad9e <rmw_destroy_publisher+0x16>
 800ad98:	2401      	movs	r4, #1
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad9e:	6863      	ldr	r3, [r4, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d0f9      	beq.n	800ad98 <rmw_destroy_publisher+0x10>
 800ada4:	2d00      	cmp	r5, #0
 800ada6:	d0f7      	beq.n	800ad98 <rmw_destroy_publisher+0x10>
 800ada8:	6828      	ldr	r0, [r5, #0]
 800adaa:	f000 fb97 	bl	800b4dc <is_uxrce_rmw_identifier_valid>
 800adae:	2800      	cmp	r0, #0
 800adb0:	d0f2      	beq.n	800ad98 <rmw_destroy_publisher+0x10>
 800adb2:	686c      	ldr	r4, [r5, #4]
 800adb4:	2c00      	cmp	r4, #0
 800adb6:	d0ef      	beq.n	800ad98 <rmw_destroy_publisher+0x10>
 800adb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800adba:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800adbe:	f008 fa55 	bl	801326c <destroy_topic>
 800adc2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800adc6:	6962      	ldr	r2, [r4, #20]
 800adc8:	6918      	ldr	r0, [r3, #16]
 800adca:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800adce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800add2:	6819      	ldr	r1, [r3, #0]
 800add4:	f001 fdbe 	bl	800c954 <uxr_buffer_delete_entity>
 800add8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800addc:	6922      	ldr	r2, [r4, #16]
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800ade4:	4604      	mov	r4, r0
 800ade6:	6809      	ldr	r1, [r1, #0]
 800ade8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800adec:	f001 fdb2 	bl	800c954 <uxr_buffer_delete_entity>
 800adf0:	693e      	ldr	r6, [r7, #16]
 800adf2:	4622      	mov	r2, r4
 800adf4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800adf8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800adfc:	4604      	mov	r4, r0
 800adfe:	4630      	mov	r0, r6
 800ae00:	f000 faec 	bl	800b3dc <run_xrce_session>
 800ae04:	693e      	ldr	r6, [r7, #16]
 800ae06:	4622      	mov	r2, r4
 800ae08:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800ae0c:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800ae10:	4604      	mov	r4, r0
 800ae12:	4630      	mov	r0, r6
 800ae14:	f000 fae2 	bl	800b3dc <run_xrce_session>
 800ae18:	b12c      	cbz	r4, 800ae26 <rmw_destroy_publisher+0x9e>
 800ae1a:	b120      	cbz	r0, 800ae26 <rmw_destroy_publisher+0x9e>
 800ae1c:	2400      	movs	r4, #0
 800ae1e:	4628      	mov	r0, r5
 800ae20:	f000 f982 	bl	800b128 <rmw_uxrce_fini_publisher_memory>
 800ae24:	e7b9      	b.n	800ad9a <rmw_destroy_publisher+0x12>
 800ae26:	2402      	movs	r4, #2
 800ae28:	e7f9      	b.n	800ae1e <rmw_destroy_publisher+0x96>
 800ae2a:	bf00      	nop

0800ae2c <rmw_uxrce_init_service_memory>:
 800ae2c:	b1e2      	cbz	r2, 800ae68 <rmw_uxrce_init_service_memory+0x3c>
 800ae2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae32:	7b05      	ldrb	r5, [r0, #12]
 800ae34:	4606      	mov	r6, r0
 800ae36:	b9ad      	cbnz	r5, 800ae64 <rmw_uxrce_init_service_memory+0x38>
 800ae38:	23c8      	movs	r3, #200	; 0xc8
 800ae3a:	e9c0 5500 	strd	r5, r5, [r0]
 800ae3e:	6083      	str	r3, [r0, #8]
 800ae40:	f240 1301 	movw	r3, #257	; 0x101
 800ae44:	4617      	mov	r7, r2
 800ae46:	8183      	strh	r3, [r0, #12]
 800ae48:	460c      	mov	r4, r1
 800ae4a:	46a8      	mov	r8, r5
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	4630      	mov	r0, r6
 800ae50:	3501      	adds	r5, #1
 800ae52:	f007 fefd 	bl	8012c50 <put_memory>
 800ae56:	42af      	cmp	r7, r5
 800ae58:	60a4      	str	r4, [r4, #8]
 800ae5a:	f884 800c 	strb.w	r8, [r4, #12]
 800ae5e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800ae62:	d1f3      	bne.n	800ae4c <rmw_uxrce_init_service_memory+0x20>
 800ae64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop

0800ae6c <rmw_uxrce_init_client_memory>:
 800ae6c:	b1e2      	cbz	r2, 800aea8 <rmw_uxrce_init_client_memory+0x3c>
 800ae6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae72:	7b05      	ldrb	r5, [r0, #12]
 800ae74:	4606      	mov	r6, r0
 800ae76:	b9ad      	cbnz	r5, 800aea4 <rmw_uxrce_init_client_memory+0x38>
 800ae78:	23c8      	movs	r3, #200	; 0xc8
 800ae7a:	e9c0 5500 	strd	r5, r5, [r0]
 800ae7e:	6083      	str	r3, [r0, #8]
 800ae80:	f240 1301 	movw	r3, #257	; 0x101
 800ae84:	4617      	mov	r7, r2
 800ae86:	8183      	strh	r3, [r0, #12]
 800ae88:	460c      	mov	r4, r1
 800ae8a:	46a8      	mov	r8, r5
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	4630      	mov	r0, r6
 800ae90:	3501      	adds	r5, #1
 800ae92:	f007 fedd 	bl	8012c50 <put_memory>
 800ae96:	42af      	cmp	r7, r5
 800ae98:	60a4      	str	r4, [r4, #8]
 800ae9a:	f884 800c 	strb.w	r8, [r4, #12]
 800ae9e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800aea2:	d1f3      	bne.n	800ae8c <rmw_uxrce_init_client_memory+0x20>
 800aea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop

0800aeac <rmw_uxrce_init_publisher_memory>:
 800aeac:	b1e2      	cbz	r2, 800aee8 <rmw_uxrce_init_publisher_memory+0x3c>
 800aeae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb2:	7b05      	ldrb	r5, [r0, #12]
 800aeb4:	4606      	mov	r6, r0
 800aeb6:	b9ad      	cbnz	r5, 800aee4 <rmw_uxrce_init_publisher_memory+0x38>
 800aeb8:	23d8      	movs	r3, #216	; 0xd8
 800aeba:	e9c0 5500 	strd	r5, r5, [r0]
 800aebe:	6083      	str	r3, [r0, #8]
 800aec0:	f240 1301 	movw	r3, #257	; 0x101
 800aec4:	4617      	mov	r7, r2
 800aec6:	8183      	strh	r3, [r0, #12]
 800aec8:	460c      	mov	r4, r1
 800aeca:	46a8      	mov	r8, r5
 800aecc:	4621      	mov	r1, r4
 800aece:	4630      	mov	r0, r6
 800aed0:	3501      	adds	r5, #1
 800aed2:	f007 febd 	bl	8012c50 <put_memory>
 800aed6:	42af      	cmp	r7, r5
 800aed8:	60a4      	str	r4, [r4, #8]
 800aeda:	f884 800c 	strb.w	r8, [r4, #12]
 800aede:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800aee2:	d1f3      	bne.n	800aecc <rmw_uxrce_init_publisher_memory+0x20>
 800aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop

0800aeec <rmw_uxrce_init_subscription_memory>:
 800aeec:	b1e2      	cbz	r2, 800af28 <rmw_uxrce_init_subscription_memory+0x3c>
 800aeee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef2:	7b05      	ldrb	r5, [r0, #12]
 800aef4:	4606      	mov	r6, r0
 800aef6:	b9ad      	cbnz	r5, 800af24 <rmw_uxrce_init_subscription_memory+0x38>
 800aef8:	23d8      	movs	r3, #216	; 0xd8
 800aefa:	e9c0 5500 	strd	r5, r5, [r0]
 800aefe:	6083      	str	r3, [r0, #8]
 800af00:	f240 1301 	movw	r3, #257	; 0x101
 800af04:	4617      	mov	r7, r2
 800af06:	8183      	strh	r3, [r0, #12]
 800af08:	460c      	mov	r4, r1
 800af0a:	46a8      	mov	r8, r5
 800af0c:	4621      	mov	r1, r4
 800af0e:	4630      	mov	r0, r6
 800af10:	3501      	adds	r5, #1
 800af12:	f007 fe9d 	bl	8012c50 <put_memory>
 800af16:	42af      	cmp	r7, r5
 800af18:	60a4      	str	r4, [r4, #8]
 800af1a:	f884 800c 	strb.w	r8, [r4, #12]
 800af1e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800af22:	d1f3      	bne.n	800af0c <rmw_uxrce_init_subscription_memory+0x20>
 800af24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop

0800af2c <rmw_uxrce_init_node_memory>:
 800af2c:	b1e2      	cbz	r2, 800af68 <rmw_uxrce_init_node_memory+0x3c>
 800af2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af32:	7b05      	ldrb	r5, [r0, #12]
 800af34:	4606      	mov	r6, r0
 800af36:	b9ad      	cbnz	r5, 800af64 <rmw_uxrce_init_node_memory+0x38>
 800af38:	23a4      	movs	r3, #164	; 0xa4
 800af3a:	e9c0 5500 	strd	r5, r5, [r0]
 800af3e:	6083      	str	r3, [r0, #8]
 800af40:	f240 1301 	movw	r3, #257	; 0x101
 800af44:	4617      	mov	r7, r2
 800af46:	8183      	strh	r3, [r0, #12]
 800af48:	460c      	mov	r4, r1
 800af4a:	46a8      	mov	r8, r5
 800af4c:	4621      	mov	r1, r4
 800af4e:	4630      	mov	r0, r6
 800af50:	3501      	adds	r5, #1
 800af52:	f007 fe7d 	bl	8012c50 <put_memory>
 800af56:	42af      	cmp	r7, r5
 800af58:	60a4      	str	r4, [r4, #8]
 800af5a:	f884 800c 	strb.w	r8, [r4, #12]
 800af5e:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800af62:	d1f3      	bne.n	800af4c <rmw_uxrce_init_node_memory+0x20>
 800af64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop

0800af6c <rmw_uxrce_init_session_memory>:
 800af6c:	b1ea      	cbz	r2, 800afaa <rmw_uxrce_init_session_memory+0x3e>
 800af6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af72:	7b05      	ldrb	r5, [r0, #12]
 800af74:	4606      	mov	r6, r0
 800af76:	b9b5      	cbnz	r5, 800afa6 <rmw_uxrce_init_session_memory+0x3a>
 800af78:	e9c0 5500 	strd	r5, r5, [r0]
 800af7c:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800af80:	f240 1301 	movw	r3, #257	; 0x101
 800af84:	4617      	mov	r7, r2
 800af86:	f8c0 8008 	str.w	r8, [r0, #8]
 800af8a:	460c      	mov	r4, r1
 800af8c:	8183      	strh	r3, [r0, #12]
 800af8e:	46a9      	mov	r9, r5
 800af90:	4621      	mov	r1, r4
 800af92:	4630      	mov	r0, r6
 800af94:	3501      	adds	r5, #1
 800af96:	f007 fe5b 	bl	8012c50 <put_memory>
 800af9a:	42af      	cmp	r7, r5
 800af9c:	60a4      	str	r4, [r4, #8]
 800af9e:	f884 900c 	strb.w	r9, [r4, #12]
 800afa2:	4444      	add	r4, r8
 800afa4:	d1f4      	bne.n	800af90 <rmw_uxrce_init_session_memory+0x24>
 800afa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afaa:	4770      	bx	lr

0800afac <rmw_uxrce_init_topic_memory>:
 800afac:	b1e2      	cbz	r2, 800afe8 <rmw_uxrce_init_topic_memory+0x3c>
 800afae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb2:	7b05      	ldrb	r5, [r0, #12]
 800afb4:	4606      	mov	r6, r0
 800afb6:	b9ad      	cbnz	r5, 800afe4 <rmw_uxrce_init_topic_memory+0x38>
 800afb8:	231c      	movs	r3, #28
 800afba:	e9c0 5500 	strd	r5, r5, [r0]
 800afbe:	6083      	str	r3, [r0, #8]
 800afc0:	f240 1301 	movw	r3, #257	; 0x101
 800afc4:	4617      	mov	r7, r2
 800afc6:	8183      	strh	r3, [r0, #12]
 800afc8:	460c      	mov	r4, r1
 800afca:	46a8      	mov	r8, r5
 800afcc:	4621      	mov	r1, r4
 800afce:	4630      	mov	r0, r6
 800afd0:	3501      	adds	r5, #1
 800afd2:	f007 fe3d 	bl	8012c50 <put_memory>
 800afd6:	42af      	cmp	r7, r5
 800afd8:	60a4      	str	r4, [r4, #8]
 800afda:	f884 800c 	strb.w	r8, [r4, #12]
 800afde:	f104 041c 	add.w	r4, r4, #28
 800afe2:	d1f3      	bne.n	800afcc <rmw_uxrce_init_topic_memory+0x20>
 800afe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop

0800afec <rmw_uxrce_init_static_input_buffer_memory>:
 800afec:	b1ea      	cbz	r2, 800b02a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800afee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff2:	7b05      	ldrb	r5, [r0, #12]
 800aff4:	4606      	mov	r6, r0
 800aff6:	b9b5      	cbnz	r5, 800b026 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800aff8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800affc:	e9c0 5500 	strd	r5, r5, [r0]
 800b000:	6083      	str	r3, [r0, #8]
 800b002:	f240 1301 	movw	r3, #257	; 0x101
 800b006:	4617      	mov	r7, r2
 800b008:	8183      	strh	r3, [r0, #12]
 800b00a:	460c      	mov	r4, r1
 800b00c:	46a8      	mov	r8, r5
 800b00e:	4621      	mov	r1, r4
 800b010:	4630      	mov	r0, r6
 800b012:	3501      	adds	r5, #1
 800b014:	f007 fe1c 	bl	8012c50 <put_memory>
 800b018:	42af      	cmp	r7, r5
 800b01a:	60a4      	str	r4, [r4, #8]
 800b01c:	f884 800c 	strb.w	r8, [r4, #12]
 800b020:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800b024:	d1f3      	bne.n	800b00e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800b026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b02a:	4770      	bx	lr

0800b02c <rmw_uxrce_init_init_options_impl_memory>:
 800b02c:	b1e2      	cbz	r2, 800b068 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800b02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b032:	7b05      	ldrb	r5, [r0, #12]
 800b034:	4606      	mov	r6, r0
 800b036:	b9ad      	cbnz	r5, 800b064 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800b038:	232c      	movs	r3, #44	; 0x2c
 800b03a:	e9c0 5500 	strd	r5, r5, [r0]
 800b03e:	6083      	str	r3, [r0, #8]
 800b040:	f240 1301 	movw	r3, #257	; 0x101
 800b044:	4617      	mov	r7, r2
 800b046:	8183      	strh	r3, [r0, #12]
 800b048:	460c      	mov	r4, r1
 800b04a:	46a8      	mov	r8, r5
 800b04c:	4621      	mov	r1, r4
 800b04e:	4630      	mov	r0, r6
 800b050:	3501      	adds	r5, #1
 800b052:	f007 fdfd 	bl	8012c50 <put_memory>
 800b056:	42af      	cmp	r7, r5
 800b058:	60a4      	str	r4, [r4, #8]
 800b05a:	f884 800c 	strb.w	r8, [r4, #12]
 800b05e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800b062:	d1f3      	bne.n	800b04c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800b064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop

0800b06c <rmw_uxrce_init_wait_set_memory>:
 800b06c:	b1e2      	cbz	r2, 800b0a8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800b06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b072:	7b05      	ldrb	r5, [r0, #12]
 800b074:	4606      	mov	r6, r0
 800b076:	b9ad      	cbnz	r5, 800b0a4 <rmw_uxrce_init_wait_set_memory+0x38>
 800b078:	231c      	movs	r3, #28
 800b07a:	e9c0 5500 	strd	r5, r5, [r0]
 800b07e:	6083      	str	r3, [r0, #8]
 800b080:	f240 1301 	movw	r3, #257	; 0x101
 800b084:	4617      	mov	r7, r2
 800b086:	8183      	strh	r3, [r0, #12]
 800b088:	460c      	mov	r4, r1
 800b08a:	46a8      	mov	r8, r5
 800b08c:	4621      	mov	r1, r4
 800b08e:	4630      	mov	r0, r6
 800b090:	3501      	adds	r5, #1
 800b092:	f007 fddd 	bl	8012c50 <put_memory>
 800b096:	42af      	cmp	r7, r5
 800b098:	60a4      	str	r4, [r4, #8]
 800b09a:	f884 800c 	strb.w	r8, [r4, #12]
 800b09e:	f104 041c 	add.w	r4, r4, #28
 800b0a2:	d1f3      	bne.n	800b08c <rmw_uxrce_init_wait_set_memory+0x20>
 800b0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop

0800b0ac <rmw_uxrce_init_guard_condition_memory>:
 800b0ac:	b1e2      	cbz	r2, 800b0e8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800b0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b2:	7b05      	ldrb	r5, [r0, #12]
 800b0b4:	4606      	mov	r6, r0
 800b0b6:	b9ad      	cbnz	r5, 800b0e4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800b0b8:	2320      	movs	r3, #32
 800b0ba:	e9c0 5500 	strd	r5, r5, [r0]
 800b0be:	6083      	str	r3, [r0, #8]
 800b0c0:	f240 1301 	movw	r3, #257	; 0x101
 800b0c4:	4617      	mov	r7, r2
 800b0c6:	8183      	strh	r3, [r0, #12]
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	46a8      	mov	r8, r5
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	3501      	adds	r5, #1
 800b0d2:	f007 fdbd 	bl	8012c50 <put_memory>
 800b0d6:	42af      	cmp	r7, r5
 800b0d8:	60a4      	str	r4, [r4, #8]
 800b0da:	f884 800c 	strb.w	r8, [r4, #12]
 800b0de:	f104 0420 	add.w	r4, r4, #32
 800b0e2:	d1f3      	bne.n	800b0cc <rmw_uxrce_init_guard_condition_memory+0x20>
 800b0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop

0800b0ec <rmw_uxrce_fini_session_memory>:
 800b0ec:	4601      	mov	r1, r0
 800b0ee:	4801      	ldr	r0, [pc, #4]	; (800b0f4 <rmw_uxrce_fini_session_memory+0x8>)
 800b0f0:	f007 bdae 	b.w	8012c50 <put_memory>
 800b0f4:	2000da94 	.word	0x2000da94

0800b0f8 <rmw_uxrce_fini_node_memory>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	6800      	ldr	r0, [r0, #0]
 800b0fe:	b128      	cbz	r0, 800b10c <rmw_uxrce_fini_node_memory+0x14>
 800b100:	4b07      	ldr	r3, [pc, #28]	; (800b120 <rmw_uxrce_fini_node_memory+0x28>)
 800b102:	6819      	ldr	r1, [r3, #0]
 800b104:	f7f5 f86c 	bl	80001e0 <strcmp>
 800b108:	b940      	cbnz	r0, 800b11c <rmw_uxrce_fini_node_memory+0x24>
 800b10a:	6020      	str	r0, [r4, #0]
 800b10c:	6861      	ldr	r1, [r4, #4]
 800b10e:	b129      	cbz	r1, 800b11c <rmw_uxrce_fini_node_memory+0x24>
 800b110:	2500      	movs	r5, #0
 800b112:	4804      	ldr	r0, [pc, #16]	; (800b124 <rmw_uxrce_fini_node_memory+0x2c>)
 800b114:	610d      	str	r5, [r1, #16]
 800b116:	f007 fd9b 	bl	8012c50 <put_memory>
 800b11a:	6065      	str	r5, [r4, #4]
 800b11c:	bd38      	pop	{r3, r4, r5, pc}
 800b11e:	bf00      	nop
 800b120:	080184fc 	.word	0x080184fc
 800b124:	2000da64 	.word	0x2000da64

0800b128 <rmw_uxrce_fini_publisher_memory>:
 800b128:	b510      	push	{r4, lr}
 800b12a:	4604      	mov	r4, r0
 800b12c:	6800      	ldr	r0, [r0, #0]
 800b12e:	b128      	cbz	r0, 800b13c <rmw_uxrce_fini_publisher_memory+0x14>
 800b130:	4b06      	ldr	r3, [pc, #24]	; (800b14c <rmw_uxrce_fini_publisher_memory+0x24>)
 800b132:	6819      	ldr	r1, [r3, #0]
 800b134:	f7f5 f854 	bl	80001e0 <strcmp>
 800b138:	b938      	cbnz	r0, 800b14a <rmw_uxrce_fini_publisher_memory+0x22>
 800b13a:	6020      	str	r0, [r4, #0]
 800b13c:	6861      	ldr	r1, [r4, #4]
 800b13e:	b121      	cbz	r1, 800b14a <rmw_uxrce_fini_publisher_memory+0x22>
 800b140:	4803      	ldr	r0, [pc, #12]	; (800b150 <rmw_uxrce_fini_publisher_memory+0x28>)
 800b142:	f007 fd85 	bl	8012c50 <put_memory>
 800b146:	2300      	movs	r3, #0
 800b148:	6063      	str	r3, [r4, #4]
 800b14a:	bd10      	pop	{r4, pc}
 800b14c:	080184fc 	.word	0x080184fc
 800b150:	2000da74 	.word	0x2000da74

0800b154 <rmw_uxrce_fini_subscription_memory>:
 800b154:	b510      	push	{r4, lr}
 800b156:	4604      	mov	r4, r0
 800b158:	6800      	ldr	r0, [r0, #0]
 800b15a:	b128      	cbz	r0, 800b168 <rmw_uxrce_fini_subscription_memory+0x14>
 800b15c:	4b06      	ldr	r3, [pc, #24]	; (800b178 <rmw_uxrce_fini_subscription_memory+0x24>)
 800b15e:	6819      	ldr	r1, [r3, #0]
 800b160:	f7f5 f83e 	bl	80001e0 <strcmp>
 800b164:	b938      	cbnz	r0, 800b176 <rmw_uxrce_fini_subscription_memory+0x22>
 800b166:	6020      	str	r0, [r4, #0]
 800b168:	6861      	ldr	r1, [r4, #4]
 800b16a:	b121      	cbz	r1, 800b176 <rmw_uxrce_fini_subscription_memory+0x22>
 800b16c:	4803      	ldr	r0, [pc, #12]	; (800b17c <rmw_uxrce_fini_subscription_memory+0x28>)
 800b16e:	f007 fd6f 	bl	8012c50 <put_memory>
 800b172:	2300      	movs	r3, #0
 800b174:	6063      	str	r3, [r4, #4]
 800b176:	bd10      	pop	{r4, pc}
 800b178:	080184fc 	.word	0x080184fc
 800b17c:	2000dab4 	.word	0x2000dab4

0800b180 <rmw_uxrce_fini_service_memory>:
 800b180:	b510      	push	{r4, lr}
 800b182:	4604      	mov	r4, r0
 800b184:	6800      	ldr	r0, [r0, #0]
 800b186:	b128      	cbz	r0, 800b194 <rmw_uxrce_fini_service_memory+0x14>
 800b188:	4b06      	ldr	r3, [pc, #24]	; (800b1a4 <rmw_uxrce_fini_service_memory+0x24>)
 800b18a:	6819      	ldr	r1, [r3, #0]
 800b18c:	f7f5 f828 	bl	80001e0 <strcmp>
 800b190:	b938      	cbnz	r0, 800b1a2 <rmw_uxrce_fini_service_memory+0x22>
 800b192:	6020      	str	r0, [r4, #0]
 800b194:	6861      	ldr	r1, [r4, #4]
 800b196:	b121      	cbz	r1, 800b1a2 <rmw_uxrce_fini_service_memory+0x22>
 800b198:	4803      	ldr	r0, [pc, #12]	; (800b1a8 <rmw_uxrce_fini_service_memory+0x28>)
 800b19a:	f007 fd59 	bl	8012c50 <put_memory>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	6063      	str	r3, [r4, #4]
 800b1a2:	bd10      	pop	{r4, pc}
 800b1a4:	080184fc 	.word	0x080184fc
 800b1a8:	2000da84 	.word	0x2000da84

0800b1ac <rmw_uxrce_fini_client_memory>:
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	6800      	ldr	r0, [r0, #0]
 800b1b2:	b128      	cbz	r0, 800b1c0 <rmw_uxrce_fini_client_memory+0x14>
 800b1b4:	4b06      	ldr	r3, [pc, #24]	; (800b1d0 <rmw_uxrce_fini_client_memory+0x24>)
 800b1b6:	6819      	ldr	r1, [r3, #0]
 800b1b8:	f7f5 f812 	bl	80001e0 <strcmp>
 800b1bc:	b938      	cbnz	r0, 800b1ce <rmw_uxrce_fini_client_memory+0x22>
 800b1be:	6020      	str	r0, [r4, #0]
 800b1c0:	6861      	ldr	r1, [r4, #4]
 800b1c2:	b121      	cbz	r1, 800b1ce <rmw_uxrce_fini_client_memory+0x22>
 800b1c4:	4803      	ldr	r0, [pc, #12]	; (800b1d4 <rmw_uxrce_fini_client_memory+0x28>)
 800b1c6:	f007 fd43 	bl	8012c50 <put_memory>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	6063      	str	r3, [r4, #4]
 800b1ce:	bd10      	pop	{r4, pc}
 800b1d0:	080184fc 	.word	0x080184fc
 800b1d4:	20009198 	.word	0x20009198

0800b1d8 <rmw_uxrce_fini_topic_memory>:
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4621      	mov	r1, r4
 800b1de:	4803      	ldr	r0, [pc, #12]	; (800b1ec <rmw_uxrce_fini_topic_memory+0x14>)
 800b1e0:	f007 fd36 	bl	8012c50 <put_memory>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	61a3      	str	r3, [r4, #24]
 800b1e8:	bd10      	pop	{r4, pc}
 800b1ea:	bf00      	nop
 800b1ec:	2000dac4 	.word	0x2000dac4

0800b1f0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	b530      	push	{r4, r5, lr}
 800b1f4:	4925      	ldr	r1, [pc, #148]	; (800b28c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b1f6:	680d      	ldr	r5, [r1, #0]
 800b1f8:	ac03      	add	r4, sp, #12
 800b1fa:	e884 000c 	stmia.w	r4, {r2, r3}
 800b1fe:	461c      	mov	r4, r3
 800b200:	2d00      	cmp	r5, #0
 800b202:	d041      	beq.n	800b288 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800b204:	462b      	mov	r3, r5
 800b206:	2100      	movs	r1, #0
 800b208:	689a      	ldr	r2, [r3, #8]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800b210:	4290      	cmp	r0, r2
 800b212:	bf08      	it	eq
 800b214:	3101      	addeq	r1, #1
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1f6      	bne.n	800b208 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800b21a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d029      	beq.n	800b276 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b222:	d907      	bls.n	800b234 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b224:	2b03      	cmp	r3, #3
 800b226:	d005      	beq.n	800b234 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b228:	2100      	movs	r1, #0
 800b22a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b22e:	4608      	mov	r0, r1
 800b230:	b002      	add	sp, #8
 800b232:	4770      	bx	lr
 800b234:	b314      	cbz	r4, 800b27c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b236:	428c      	cmp	r4, r1
 800b238:	d820      	bhi.n	800b27c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b23a:	2d00      	cmp	r5, #0
 800b23c:	d0f4      	beq.n	800b228 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b23e:	2100      	movs	r1, #0
 800b240:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b244:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800b248:	e002      	b.n	800b250 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800b24a:	686d      	ldr	r5, [r5, #4]
 800b24c:	2d00      	cmp	r5, #0
 800b24e:	d0ec      	beq.n	800b22a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b250:	68ab      	ldr	r3, [r5, #8]
 800b252:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800b256:	4290      	cmp	r0, r2
 800b258:	d1f7      	bne.n	800b24a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b25a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800b25e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800b262:	4562      	cmp	r2, ip
 800b264:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b268:	eb73 0e04 	sbcs.w	lr, r3, r4
 800b26c:	daed      	bge.n	800b24a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b26e:	4694      	mov	ip, r2
 800b270:	461c      	mov	r4, r3
 800b272:	4629      	mov	r1, r5
 800b274:	e7e9      	b.n	800b24a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b276:	b10c      	cbz	r4, 800b27c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b278:	428c      	cmp	r4, r1
 800b27a:	d9d5      	bls.n	800b228 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b27c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b280:	4802      	ldr	r0, [pc, #8]	; (800b28c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b282:	b002      	add	sp, #8
 800b284:	f007 bcd4 	b.w	8012c30 <get_memory>
 800b288:	4629      	mov	r1, r5
 800b28a:	e7c6      	b.n	800b21a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800b28c:	2000daa4 	.word	0x2000daa4

0800b290 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b290:	4b11      	ldr	r3, [pc, #68]	; (800b2d8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	b530      	push	{r4, r5, lr}
 800b296:	b1e3      	cbz	r3, 800b2d2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800b298:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800b29c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800b2a0:	2400      	movs	r4, #0
 800b2a2:	e001      	b.n	800b2a8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	b193      	cbz	r3, 800b2ce <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800b2a8:	689a      	ldr	r2, [r3, #8]
 800b2aa:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800b2ae:	4288      	cmp	r0, r1
 800b2b0:	d1f8      	bne.n	800b2a4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b2b2:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800b2b6:	f8d2 281c 	ldr.w	r2, [r2, #2076]	; 0x81c
 800b2ba:	4571      	cmp	r1, lr
 800b2bc:	eb72 050c 	sbcs.w	r5, r2, ip
 800b2c0:	daf0      	bge.n	800b2a4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b2c2:	461c      	mov	r4, r3
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	468e      	mov	lr, r1
 800b2c8:	4694      	mov	ip, r2
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1ec      	bne.n	800b2a8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	bd30      	pop	{r4, r5, pc}
 800b2d2:	461c      	mov	r4, r3
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	bd30      	pop	{r4, r5, pc}
 800b2d8:	2000daa4 	.word	0x2000daa4
 800b2dc:	00000000 	.word	0x00000000

0800b2e0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e4:	4b3c      	ldr	r3, [pc, #240]	; (800b3d8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b2e6:	ed2d 8b06 	vpush	{d8-d10}
 800b2ea:	681f      	ldr	r7, [r3, #0]
 800b2ec:	b08d      	sub	sp, #52	; 0x34
 800b2ee:	f008 fddd 	bl	8013eac <rmw_uros_epoch_nanos>
 800b2f2:	2f00      	cmp	r7, #0
 800b2f4:	d05d      	beq.n	800b3b2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b2f6:	46b8      	mov	r8, r7
 800b2f8:	ed9f 8b31 	vldr	d8, [pc, #196]	; 800b3c0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800b2fc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b300:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800b304:	2b04      	cmp	r3, #4
 800b306:	ed9f ab30 	vldr	d10, [pc, #192]	; 800b3c8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800b30a:	ed9f 9b31 	vldr	d9, [pc, #196]	; 800b3d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800b30e:	4681      	mov	r9, r0
 800b310:	468a      	mov	sl, r1
 800b312:	ac04      	add	r4, sp, #16
 800b314:	d03f      	beq.n	800b396 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b316:	2b05      	cmp	r3, #5
 800b318:	d044      	beq.n	800b3a4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d03b      	beq.n	800b396 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b31e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b322:	ed8d ab06 	vstr	d10, [sp, #24]
 800b326:	ed8d 8b08 	vstr	d8, [sp, #32]
 800b32a:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800b32e:	ab08      	add	r3, sp, #32
 800b330:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b332:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b336:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b33a:	f007 faad 	bl	8012898 <rmw_time_equal>
 800b33e:	b118      	cbz	r0, 800b348 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b340:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b344:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b348:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b34c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800b350:	f8d5 781c 	ldr.w	r7, [r5, #2076]	; 0x81c
 800b354:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b358:	f007 faf2 	bl	8012940 <rmw_time_total_nsec>
 800b35c:	1830      	adds	r0, r6, r0
 800b35e:	eb47 0101 	adc.w	r1, r7, r1
 800b362:	4548      	cmp	r0, r9
 800b364:	eb71 030a 	sbcs.w	r3, r1, sl
 800b368:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800b36c:	db05      	blt.n	800b37a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800b36e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b372:	4591      	cmp	r9, r2
 800b374:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b378:	da03      	bge.n	800b382 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800b37a:	4817      	ldr	r0, [pc, #92]	; (800b3d8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b37c:	4641      	mov	r1, r8
 800b37e:	f007 fc67 	bl	8012c50 <put_memory>
 800b382:	f1bb 0f00 	cmp.w	fp, #0
 800b386:	d014      	beq.n	800b3b2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b388:	46d8      	mov	r8, fp
 800b38a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b38e:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800b392:	2b04      	cmp	r3, #4
 800b394:	d1bf      	bne.n	800b316 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800b396:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800b39a:	3340      	adds	r3, #64	; 0x40
 800b39c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b39e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b3a2:	e7c0      	b.n	800b326 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b3a4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800b3a8:	3348      	adds	r3, #72	; 0x48
 800b3aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b3ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b3b0:	e7b9      	b.n	800b326 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b3b2:	b00d      	add	sp, #52	; 0x34
 800b3b4:	ecbd 8b06 	vpop	{d8-d10}
 800b3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3bc:	f3af 8000 	nop.w
	...
 800b3c8:	00000001 	.word	0x00000001
 800b3cc:	00000000 	.word	0x00000000
 800b3d0:	0000001e 	.word	0x0000001e
 800b3d4:	00000000 	.word	0x00000000
 800b3d8:	2000daa4 	.word	0x2000daa4

0800b3dc <run_xrce_session>:
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	788c      	ldrb	r4, [r1, #2]
 800b3e0:	b086      	sub	sp, #24
 800b3e2:	2c01      	cmp	r4, #1
 800b3e4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b3e8:	d00c      	beq.n	800b404 <run_xrce_session+0x28>
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	f10d 020e 	add.w	r2, sp, #14
 800b3f4:	f10d 0317 	add.w	r3, sp, #23
 800b3f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b3fc:	f002 f9e2 	bl	800d7c4 <uxr_run_session_until_all_status>
 800b400:	b006      	add	sp, #24
 800b402:	bd10      	pop	{r4, pc}
 800b404:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b408:	f001 fdf6 	bl	800cff8 <uxr_flash_output_streams>
 800b40c:	4620      	mov	r0, r4
 800b40e:	b006      	add	sp, #24
 800b410:	bd10      	pop	{r4, pc}
 800b412:	bf00      	nop

0800b414 <convert_qos_profile>:
 800b414:	7a4a      	ldrb	r2, [r1, #9]
 800b416:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b41a:	2a02      	cmp	r2, #2
 800b41c:	bf18      	it	ne
 800b41e:	2200      	movne	r2, #0
 800b420:	7002      	strb	r2, [r0, #0]
 800b422:	780a      	ldrb	r2, [r1, #0]
 800b424:	8889      	ldrh	r1, [r1, #4]
 800b426:	8081      	strh	r1, [r0, #4]
 800b428:	f1ac 0c02 	sub.w	ip, ip, #2
 800b42c:	f1a2 0202 	sub.w	r2, r2, #2
 800b430:	fabc fc8c 	clz	ip, ip
 800b434:	fab2 f282 	clz	r2, r2
 800b438:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b43c:	0952      	lsrs	r2, r2, #5
 800b43e:	f880 c001 	strb.w	ip, [r0, #1]
 800b442:	7082      	strb	r2, [r0, #2]
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop

0800b448 <generate_type_name>:
 800b448:	b530      	push	{r4, r5, lr}
 800b44a:	2300      	movs	r3, #0
 800b44c:	700b      	strb	r3, [r1, #0]
 800b44e:	6803      	ldr	r3, [r0, #0]
 800b450:	b087      	sub	sp, #28
 800b452:	4614      	mov	r4, r2
 800b454:	b1d3      	cbz	r3, 800b48c <generate_type_name+0x44>
 800b456:	4a0f      	ldr	r2, [pc, #60]	; (800b494 <generate_type_name+0x4c>)
 800b458:	4615      	mov	r5, r2
 800b45a:	9203      	str	r2, [sp, #12]
 800b45c:	9500      	str	r5, [sp, #0]
 800b45e:	6842      	ldr	r2, [r0, #4]
 800b460:	480d      	ldr	r0, [pc, #52]	; (800b498 <generate_type_name+0x50>)
 800b462:	9001      	str	r0, [sp, #4]
 800b464:	4608      	mov	r0, r1
 800b466:	490d      	ldr	r1, [pc, #52]	; (800b49c <generate_type_name+0x54>)
 800b468:	9204      	str	r2, [sp, #16]
 800b46a:	9105      	str	r1, [sp, #20]
 800b46c:	9102      	str	r1, [sp, #8]
 800b46e:	4a0c      	ldr	r2, [pc, #48]	; (800b4a0 <generate_type_name+0x58>)
 800b470:	4621      	mov	r1, r4
 800b472:	f00b fa55 	bl	8016920 <sniprintf>
 800b476:	2800      	cmp	r0, #0
 800b478:	db05      	blt.n	800b486 <generate_type_name+0x3e>
 800b47a:	4284      	cmp	r4, r0
 800b47c:	bfd4      	ite	le
 800b47e:	2000      	movle	r0, #0
 800b480:	2001      	movgt	r0, #1
 800b482:	b007      	add	sp, #28
 800b484:	bd30      	pop	{r4, r5, pc}
 800b486:	2000      	movs	r0, #0
 800b488:	b007      	add	sp, #28
 800b48a:	bd30      	pop	{r4, r5, pc}
 800b48c:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <generate_type_name+0x5c>)
 800b48e:	4a01      	ldr	r2, [pc, #4]	; (800b494 <generate_type_name+0x4c>)
 800b490:	461d      	mov	r5, r3
 800b492:	e7e2      	b.n	800b45a <generate_type_name+0x12>
 800b494:	08017cd4 	.word	0x08017cd4
 800b498:	08017cec 	.word	0x08017cec
 800b49c:	08017ce8 	.word	0x08017ce8
 800b4a0:	08017cd8 	.word	0x08017cd8
 800b4a4:	080182d4 	.word	0x080182d4

0800b4a8 <generate_topic_name>:
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	4614      	mov	r4, r2
 800b4ae:	9000      	str	r0, [sp, #0]
 800b4b0:	4b08      	ldr	r3, [pc, #32]	; (800b4d4 <generate_topic_name+0x2c>)
 800b4b2:	4a09      	ldr	r2, [pc, #36]	; (800b4d8 <generate_topic_name+0x30>)
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	4621      	mov	r1, r4
 800b4b8:	f00b fa32 	bl	8016920 <sniprintf>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	db05      	blt.n	800b4cc <generate_topic_name+0x24>
 800b4c0:	4284      	cmp	r4, r0
 800b4c2:	bfd4      	ite	le
 800b4c4:	2000      	movle	r0, #0
 800b4c6:	2001      	movgt	r0, #1
 800b4c8:	b002      	add	sp, #8
 800b4ca:	bd10      	pop	{r4, pc}
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	b002      	add	sp, #8
 800b4d0:	bd10      	pop	{r4, pc}
 800b4d2:	bf00      	nop
 800b4d4:	08017cf8 	.word	0x08017cf8
 800b4d8:	08017cf0 	.word	0x08017cf0

0800b4dc <is_uxrce_rmw_identifier_valid>:
 800b4dc:	b510      	push	{r4, lr}
 800b4de:	4604      	mov	r4, r0
 800b4e0:	b140      	cbz	r0, 800b4f4 <is_uxrce_rmw_identifier_valid+0x18>
 800b4e2:	f007 fc0d 	bl	8012d00 <rmw_get_implementation_identifier>
 800b4e6:	4601      	mov	r1, r0
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f7f4 fe79 	bl	80001e0 <strcmp>
 800b4ee:	fab0 f080 	clz	r0, r0
 800b4f2:	0940      	lsrs	r0, r0, #5
 800b4f4:	bd10      	pop	{r4, pc}
 800b4f6:	bf00      	nop

0800b4f8 <get_message_typesupport_handle>:
 800b4f8:	6883      	ldr	r3, [r0, #8]
 800b4fa:	4718      	bx	r3

0800b4fc <get_message_typesupport_handle_function>:
 800b4fc:	b510      	push	{r4, lr}
 800b4fe:	4604      	mov	r4, r0
 800b500:	6800      	ldr	r0, [r0, #0]
 800b502:	f7f4 fe6d 	bl	80001e0 <strcmp>
 800b506:	2800      	cmp	r0, #0
 800b508:	bf0c      	ite	eq
 800b50a:	4620      	moveq	r0, r4
 800b50c:	2000      	movne	r0, #0
 800b50e:	bd10      	pop	{r4, pc}

0800b510 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b510:	4b04      	ldr	r3, [pc, #16]	; (800b524 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	b10a      	cbz	r2, 800b51a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 800b516:	4803      	ldr	r0, [pc, #12]	; (800b524 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b518:	4770      	bx	lr
 800b51a:	4a03      	ldr	r2, [pc, #12]	; (800b528 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 800b51c:	4801      	ldr	r0, [pc, #4]	; (800b524 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b51e:	6812      	ldr	r2, [r2, #0]
 800b520:	601a      	str	r2, [r3, #0]
 800b522:	4770      	bx	lr
 800b524:	20000030 	.word	0x20000030
 800b528:	20000130 	.word	0x20000130

0800b52c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b52c:	4a02      	ldr	r2, [pc, #8]	; (800b538 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xc>)
 800b52e:	4b03      	ldr	r3, [pc, #12]	; (800b53c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x10>)
 800b530:	6812      	ldr	r2, [r2, #0]
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	20000130 	.word	0x20000130
 800b53c:	20000030 	.word	0x20000030

0800b540 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b540:	4b04      	ldr	r3, [pc, #16]	; (800b554 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	b10a      	cbz	r2, 800b54a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b546:	4803      	ldr	r0, [pc, #12]	; (800b554 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b548:	4770      	bx	lr
 800b54a:	4a03      	ldr	r2, [pc, #12]	; (800b558 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b54c:	4801      	ldr	r0, [pc, #4]	; (800b554 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b54e:	6812      	ldr	r2, [r2, #0]
 800b550:	601a      	str	r2, [r3, #0]
 800b552:	4770      	bx	lr
 800b554:	20000044 	.word	0x20000044
 800b558:	20000130 	.word	0x20000130

0800b55c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b55c:	4a02      	ldr	r2, [pc, #8]	; (800b568 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800b55e:	4b03      	ldr	r3, [pc, #12]	; (800b56c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800b560:	6812      	ldr	r2, [r2, #0]
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	20000130 	.word	0x20000130
 800b56c:	20000044 	.word	0x20000044

0800b570 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_init_function>:
 800b570:	f008 bcd8 	b.w	8013f24 <std_msgs__msg__Float32__init>

0800b574 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_fini_function>:
 800b574:	f008 bcda 	b.w	8013f2c <std_msgs__msg__Float32__fini>

0800b578 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b578:	4b04      	ldr	r3, [pc, #16]	; (800b58c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	b10a      	cbz	r2, 800b582 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 800b57e:	4803      	ldr	r0, [pc, #12]	; (800b58c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b580:	4770      	bx	lr
 800b582:	4a03      	ldr	r2, [pc, #12]	; (800b590 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 800b584:	4801      	ldr	r0, [pc, #4]	; (800b58c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b586:	6812      	ldr	r2, [r2, #0]
 800b588:	601a      	str	r2, [r3, #0]
 800b58a:	4770      	bx	lr
 800b58c:	2000008c 	.word	0x2000008c
 800b590:	20000134 	.word	0x20000134

0800b594 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800b594:	f008 bccc 	b.w	8013f30 <std_msgs__msg__Int32__init>

0800b598 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800b598:	f008 bcce 	b.w	8013f38 <std_msgs__msg__Int32__fini>

0800b59c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b59c:	4b04      	ldr	r3, [pc, #16]	; (800b5b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	b10a      	cbz	r2, 800b5a6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b5a2:	4803      	ldr	r0, [pc, #12]	; (800b5b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b5a4:	4770      	bx	lr
 800b5a6:	4a03      	ldr	r2, [pc, #12]	; (800b5b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b5a8:	4801      	ldr	r0, [pc, #4]	; (800b5b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b5aa:	6812      	ldr	r2, [r2, #0]
 800b5ac:	601a      	str	r2, [r3, #0]
 800b5ae:	4770      	bx	lr
 800b5b0:	200000d4 	.word	0x200000d4
 800b5b4:	20000134 	.word	0x20000134

0800b5b8 <_Float32__max_serialized_size>:
 800b5b8:	b508      	push	{r3, lr}
 800b5ba:	2104      	movs	r1, #4
 800b5bc:	2000      	movs	r0, #0
 800b5be:	f001 f95d 	bl	800c87c <ucdr_alignment>
 800b5c2:	3004      	adds	r0, #4
 800b5c4:	bd08      	pop	{r3, pc}
 800b5c6:	bf00      	nop

0800b5c8 <_Float32__cdr_deserialize>:
 800b5c8:	b109      	cbz	r1, 800b5ce <_Float32__cdr_deserialize+0x6>
 800b5ca:	f001 b86f 	b.w	800c6ac <ucdr_deserialize_float>
 800b5ce:	4608      	mov	r0, r1
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop

0800b5d4 <get_serialized_size_std_msgs__msg__Float32>:
 800b5d4:	b138      	cbz	r0, 800b5e6 <get_serialized_size_std_msgs__msg__Float32+0x12>
 800b5d6:	b508      	push	{r3, lr}
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4618      	mov	r0, r3
 800b5dc:	2104      	movs	r1, #4
 800b5de:	f001 f94d 	bl	800c87c <ucdr_alignment>
 800b5e2:	3004      	adds	r0, #4
 800b5e4:	bd08      	pop	{r3, pc}
 800b5e6:	4770      	bx	lr

0800b5e8 <_Float32__cdr_serialize>:
 800b5e8:	b120      	cbz	r0, 800b5f4 <_Float32__cdr_serialize+0xc>
 800b5ea:	ed90 0a00 	vldr	s0, [r0]
 800b5ee:	4608      	mov	r0, r1
 800b5f0:	f000 bfc4 	b.w	800c57c <ucdr_serialize_float>
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop

0800b5f8 <_Float32__get_serialized_size>:
 800b5f8:	b130      	cbz	r0, 800b608 <_Float32__get_serialized_size+0x10>
 800b5fa:	b508      	push	{r3, lr}
 800b5fc:	2104      	movs	r1, #4
 800b5fe:	2000      	movs	r0, #0
 800b600:	f001 f93c 	bl	800c87c <ucdr_alignment>
 800b604:	3004      	adds	r0, #4
 800b606:	bd08      	pop	{r3, pc}
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop

0800b60c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b60c:	4800      	ldr	r0, [pc, #0]	; (800b610 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32+0x4>)
 800b60e:	4770      	bx	lr
 800b610:	200000e0 	.word	0x200000e0

0800b614 <_Int32__max_serialized_size>:
 800b614:	b508      	push	{r3, lr}
 800b616:	2104      	movs	r1, #4
 800b618:	2000      	movs	r0, #0
 800b61a:	f001 f92f 	bl	800c87c <ucdr_alignment>
 800b61e:	3004      	adds	r0, #4
 800b620:	bd08      	pop	{r3, pc}
 800b622:	bf00      	nop

0800b624 <_Int32__cdr_deserialize>:
 800b624:	b109      	cbz	r1, 800b62a <_Int32__cdr_deserialize+0x6>
 800b626:	f000 bf19 	b.w	800c45c <ucdr_deserialize_int32_t>
 800b62a:	4608      	mov	r0, r1
 800b62c:	4770      	bx	lr
 800b62e:	bf00      	nop

0800b630 <get_serialized_size_std_msgs__msg__Int32>:
 800b630:	b138      	cbz	r0, 800b642 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800b632:	b508      	push	{r3, lr}
 800b634:	460b      	mov	r3, r1
 800b636:	4618      	mov	r0, r3
 800b638:	2104      	movs	r1, #4
 800b63a:	f001 f91f 	bl	800c87c <ucdr_alignment>
 800b63e:	3004      	adds	r0, #4
 800b640:	bd08      	pop	{r3, pc}
 800b642:	4770      	bx	lr

0800b644 <_Int32__cdr_serialize>:
 800b644:	460a      	mov	r2, r1
 800b646:	b118      	cbz	r0, 800b650 <_Int32__cdr_serialize+0xc>
 800b648:	6801      	ldr	r1, [r0, #0]
 800b64a:	4610      	mov	r0, r2
 800b64c:	f000 be6e 	b.w	800c32c <ucdr_serialize_int32_t>
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop

0800b654 <_Int32__get_serialized_size>:
 800b654:	b130      	cbz	r0, 800b664 <_Int32__get_serialized_size+0x10>
 800b656:	b508      	push	{r3, lr}
 800b658:	2104      	movs	r1, #4
 800b65a:	2000      	movs	r0, #0
 800b65c:	f001 f90e 	bl	800c87c <ucdr_alignment>
 800b660:	3004      	adds	r0, #4
 800b662:	bd08      	pop	{r3, pc}
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop

0800b668 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b668:	4800      	ldr	r0, [pc, #0]	; (800b66c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800b66a:	4770      	bx	lr
 800b66c:	20000108 	.word	0x20000108

0800b670 <ucdr_serialize_bool>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	460d      	mov	r5, r1
 800b674:	2101      	movs	r1, #1
 800b676:	4604      	mov	r4, r0
 800b678:	f001 f8b4 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800b67c:	b148      	cbz	r0, 800b692 <ucdr_serialize_bool+0x22>
 800b67e:	68a3      	ldr	r3, [r4, #8]
 800b680:	701d      	strb	r5, [r3, #0]
 800b682:	68a2      	ldr	r2, [r4, #8]
 800b684:	6923      	ldr	r3, [r4, #16]
 800b686:	2101      	movs	r1, #1
 800b688:	440a      	add	r2, r1
 800b68a:	440b      	add	r3, r1
 800b68c:	60a2      	str	r2, [r4, #8]
 800b68e:	6123      	str	r3, [r4, #16]
 800b690:	7561      	strb	r1, [r4, #21]
 800b692:	7da0      	ldrb	r0, [r4, #22]
 800b694:	f080 0001 	eor.w	r0, r0, #1
 800b698:	bd38      	pop	{r3, r4, r5, pc}
 800b69a:	bf00      	nop

0800b69c <ucdr_deserialize_bool>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	460d      	mov	r5, r1
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	f001 f89e 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800b6a8:	b160      	cbz	r0, 800b6c4 <ucdr_deserialize_bool+0x28>
 800b6aa:	68a2      	ldr	r2, [r4, #8]
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b6b2:	3900      	subs	r1, #0
 800b6b4:	bf18      	it	ne
 800b6b6:	2101      	movne	r1, #1
 800b6b8:	7029      	strb	r1, [r5, #0]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	2101      	movs	r1, #1
 800b6be:	60a2      	str	r2, [r4, #8]
 800b6c0:	6123      	str	r3, [r4, #16]
 800b6c2:	7561      	strb	r1, [r4, #21]
 800b6c4:	7da0      	ldrb	r0, [r4, #22]
 800b6c6:	f080 0001 	eor.w	r0, r0, #1
 800b6ca:	bd38      	pop	{r3, r4, r5, pc}

0800b6cc <ucdr_serialize_uint8_t>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	460d      	mov	r5, r1
 800b6d0:	2101      	movs	r1, #1
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	f001 f886 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800b6d8:	b148      	cbz	r0, 800b6ee <ucdr_serialize_uint8_t+0x22>
 800b6da:	68a3      	ldr	r3, [r4, #8]
 800b6dc:	701d      	strb	r5, [r3, #0]
 800b6de:	68a2      	ldr	r2, [r4, #8]
 800b6e0:	6923      	ldr	r3, [r4, #16]
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	440a      	add	r2, r1
 800b6e6:	440b      	add	r3, r1
 800b6e8:	60a2      	str	r2, [r4, #8]
 800b6ea:	6123      	str	r3, [r4, #16]
 800b6ec:	7561      	strb	r1, [r4, #21]
 800b6ee:	7da0      	ldrb	r0, [r4, #22]
 800b6f0:	f080 0001 	eor.w	r0, r0, #1
 800b6f4:	bd38      	pop	{r3, r4, r5, pc}
 800b6f6:	bf00      	nop

0800b6f8 <ucdr_deserialize_uint8_t>:
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	2101      	movs	r1, #1
 800b6fe:	4604      	mov	r4, r0
 800b700:	f001 f870 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800b704:	b150      	cbz	r0, 800b71c <ucdr_deserialize_uint8_t+0x24>
 800b706:	68a3      	ldr	r3, [r4, #8]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	702b      	strb	r3, [r5, #0]
 800b70c:	68a2      	ldr	r2, [r4, #8]
 800b70e:	6923      	ldr	r3, [r4, #16]
 800b710:	2101      	movs	r1, #1
 800b712:	440a      	add	r2, r1
 800b714:	440b      	add	r3, r1
 800b716:	60a2      	str	r2, [r4, #8]
 800b718:	6123      	str	r3, [r4, #16]
 800b71a:	7561      	strb	r1, [r4, #21]
 800b71c:	7da0      	ldrb	r0, [r4, #22]
 800b71e:	f080 0001 	eor.w	r0, r0, #1
 800b722:	bd38      	pop	{r3, r4, r5, pc}

0800b724 <ucdr_serialize_uint16_t>:
 800b724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b728:	b082      	sub	sp, #8
 800b72a:	460b      	mov	r3, r1
 800b72c:	2102      	movs	r1, #2
 800b72e:	4604      	mov	r4, r0
 800b730:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b734:	f001 f8aa 	bl	800c88c <ucdr_buffer_alignment>
 800b738:	4601      	mov	r1, r0
 800b73a:	4620      	mov	r0, r4
 800b73c:	7d67      	ldrb	r7, [r4, #21]
 800b73e:	f001 f8e9 	bl	800c914 <ucdr_advance_buffer>
 800b742:	2102      	movs	r1, #2
 800b744:	4620      	mov	r0, r4
 800b746:	f001 f841 	bl	800c7cc <ucdr_check_buffer_available_for>
 800b74a:	bb78      	cbnz	r0, 800b7ac <ucdr_serialize_uint16_t+0x88>
 800b74c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b750:	42ab      	cmp	r3, r5
 800b752:	d926      	bls.n	800b7a2 <ucdr_serialize_uint16_t+0x7e>
 800b754:	1b5e      	subs	r6, r3, r5
 800b756:	60a3      	str	r3, [r4, #8]
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	f1c6 0802 	rsb	r8, r6, #2
 800b75e:	4433      	add	r3, r6
 800b760:	6123      	str	r3, [r4, #16]
 800b762:	4641      	mov	r1, r8
 800b764:	4620      	mov	r0, r4
 800b766:	f001 f83d 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d03b      	beq.n	800b7e6 <ucdr_serialize_uint16_t+0xc2>
 800b76e:	7d23      	ldrb	r3, [r4, #20]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d04a      	beq.n	800b80a <ucdr_serialize_uint16_t+0xe6>
 800b774:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b778:	702b      	strb	r3, [r5, #0]
 800b77a:	2e00      	cmp	r6, #0
 800b77c:	d040      	beq.n	800b800 <ucdr_serialize_uint16_t+0xdc>
 800b77e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b782:	706b      	strb	r3, [r5, #1]
 800b784:	6923      	ldr	r3, [r4, #16]
 800b786:	68a2      	ldr	r2, [r4, #8]
 800b788:	7da0      	ldrb	r0, [r4, #22]
 800b78a:	3302      	adds	r3, #2
 800b78c:	1b9e      	subs	r6, r3, r6
 800b78e:	4442      	add	r2, r8
 800b790:	2302      	movs	r3, #2
 800b792:	f080 0001 	eor.w	r0, r0, #1
 800b796:	60a2      	str	r2, [r4, #8]
 800b798:	6126      	str	r6, [r4, #16]
 800b79a:	7563      	strb	r3, [r4, #21]
 800b79c:	b002      	add	sp, #8
 800b79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a2:	2102      	movs	r1, #2
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	f001 f81d 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800b7aa:	b190      	cbz	r0, 800b7d2 <ucdr_serialize_uint16_t+0xae>
 800b7ac:	7d23      	ldrb	r3, [r4, #20]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	68a3      	ldr	r3, [r4, #8]
 800b7b2:	d014      	beq.n	800b7de <ucdr_serialize_uint16_t+0xba>
 800b7b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b7b8:	701a      	strb	r2, [r3, #0]
 800b7ba:	68a3      	ldr	r3, [r4, #8]
 800b7bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b7c0:	705a      	strb	r2, [r3, #1]
 800b7c2:	68a2      	ldr	r2, [r4, #8]
 800b7c4:	6923      	ldr	r3, [r4, #16]
 800b7c6:	3202      	adds	r2, #2
 800b7c8:	3302      	adds	r3, #2
 800b7ca:	2102      	movs	r1, #2
 800b7cc:	60a2      	str	r2, [r4, #8]
 800b7ce:	6123      	str	r3, [r4, #16]
 800b7d0:	7561      	strb	r1, [r4, #21]
 800b7d2:	7da0      	ldrb	r0, [r4, #22]
 800b7d4:	f080 0001 	eor.w	r0, r0, #1
 800b7d8:	b002      	add	sp, #8
 800b7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b7e2:	801a      	strh	r2, [r3, #0]
 800b7e4:	e7ed      	b.n	800b7c2 <ucdr_serialize_uint16_t+0x9e>
 800b7e6:	68a2      	ldr	r2, [r4, #8]
 800b7e8:	6923      	ldr	r3, [r4, #16]
 800b7ea:	7da0      	ldrb	r0, [r4, #22]
 800b7ec:	7567      	strb	r7, [r4, #21]
 800b7ee:	1b92      	subs	r2, r2, r6
 800b7f0:	1b9b      	subs	r3, r3, r6
 800b7f2:	f080 0001 	eor.w	r0, r0, #1
 800b7f6:	60a2      	str	r2, [r4, #8]
 800b7f8:	6123      	str	r3, [r4, #16]
 800b7fa:	b002      	add	sp, #8
 800b7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b800:	68a3      	ldr	r3, [r4, #8]
 800b802:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b806:	701a      	strb	r2, [r3, #0]
 800b808:	e7bc      	b.n	800b784 <ucdr_serialize_uint16_t+0x60>
 800b80a:	4628      	mov	r0, r5
 800b80c:	f10d 0506 	add.w	r5, sp, #6
 800b810:	4629      	mov	r1, r5
 800b812:	4632      	mov	r2, r6
 800b814:	f00b fa27 	bl	8016c66 <memcpy>
 800b818:	68a0      	ldr	r0, [r4, #8]
 800b81a:	4642      	mov	r2, r8
 800b81c:	19a9      	adds	r1, r5, r6
 800b81e:	f00b fa22 	bl	8016c66 <memcpy>
 800b822:	e7af      	b.n	800b784 <ucdr_serialize_uint16_t+0x60>

0800b824 <ucdr_serialize_endian_uint16_t>:
 800b824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b828:	b083      	sub	sp, #12
 800b82a:	460d      	mov	r5, r1
 800b82c:	2102      	movs	r1, #2
 800b82e:	4604      	mov	r4, r0
 800b830:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b834:	f001 f82a 	bl	800c88c <ucdr_buffer_alignment>
 800b838:	4601      	mov	r1, r0
 800b83a:	4620      	mov	r0, r4
 800b83c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b840:	f001 f868 	bl	800c914 <ucdr_advance_buffer>
 800b844:	2102      	movs	r1, #2
 800b846:	4620      	mov	r0, r4
 800b848:	f000 ffc0 	bl	800c7cc <ucdr_check_buffer_available_for>
 800b84c:	bb70      	cbnz	r0, 800b8ac <ucdr_serialize_endian_uint16_t+0x88>
 800b84e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b852:	42be      	cmp	r6, r7
 800b854:	d925      	bls.n	800b8a2 <ucdr_serialize_endian_uint16_t+0x7e>
 800b856:	6923      	ldr	r3, [r4, #16]
 800b858:	60a6      	str	r6, [r4, #8]
 800b85a:	1bf6      	subs	r6, r6, r7
 800b85c:	4433      	add	r3, r6
 800b85e:	f1c6 0902 	rsb	r9, r6, #2
 800b862:	6123      	str	r3, [r4, #16]
 800b864:	4649      	mov	r1, r9
 800b866:	4620      	mov	r0, r4
 800b868:	f000 ffbc 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d039      	beq.n	800b8e4 <ucdr_serialize_endian_uint16_t+0xc0>
 800b870:	2d01      	cmp	r5, #1
 800b872:	d04a      	beq.n	800b90a <ucdr_serialize_endian_uint16_t+0xe6>
 800b874:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b878:	703b      	strb	r3, [r7, #0]
 800b87a:	2e00      	cmp	r6, #0
 800b87c:	d040      	beq.n	800b900 <ucdr_serialize_endian_uint16_t+0xdc>
 800b87e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b882:	707b      	strb	r3, [r7, #1]
 800b884:	6923      	ldr	r3, [r4, #16]
 800b886:	68a2      	ldr	r2, [r4, #8]
 800b888:	7da0      	ldrb	r0, [r4, #22]
 800b88a:	3302      	adds	r3, #2
 800b88c:	444a      	add	r2, r9
 800b88e:	1b9b      	subs	r3, r3, r6
 800b890:	2102      	movs	r1, #2
 800b892:	f080 0001 	eor.w	r0, r0, #1
 800b896:	60a2      	str	r2, [r4, #8]
 800b898:	6123      	str	r3, [r4, #16]
 800b89a:	7561      	strb	r1, [r4, #21]
 800b89c:	b003      	add	sp, #12
 800b89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8a2:	2102      	movs	r1, #2
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f000 ff9d 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800b8aa:	b188      	cbz	r0, 800b8d0 <ucdr_serialize_endian_uint16_t+0xac>
 800b8ac:	2d01      	cmp	r5, #1
 800b8ae:	68a3      	ldr	r3, [r4, #8]
 800b8b0:	d014      	beq.n	800b8dc <ucdr_serialize_endian_uint16_t+0xb8>
 800b8b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b8b6:	701a      	strb	r2, [r3, #0]
 800b8b8:	68a3      	ldr	r3, [r4, #8]
 800b8ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8be:	705a      	strb	r2, [r3, #1]
 800b8c0:	68a2      	ldr	r2, [r4, #8]
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	3202      	adds	r2, #2
 800b8c6:	3302      	adds	r3, #2
 800b8c8:	2102      	movs	r1, #2
 800b8ca:	60a2      	str	r2, [r4, #8]
 800b8cc:	6123      	str	r3, [r4, #16]
 800b8ce:	7561      	strb	r1, [r4, #21]
 800b8d0:	7da0      	ldrb	r0, [r4, #22]
 800b8d2:	f080 0001 	eor.w	r0, r0, #1
 800b8d6:	b003      	add	sp, #12
 800b8d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b8e0:	801a      	strh	r2, [r3, #0]
 800b8e2:	e7ed      	b.n	800b8c0 <ucdr_serialize_endian_uint16_t+0x9c>
 800b8e4:	68a2      	ldr	r2, [r4, #8]
 800b8e6:	6923      	ldr	r3, [r4, #16]
 800b8e8:	7da0      	ldrb	r0, [r4, #22]
 800b8ea:	f884 8015 	strb.w	r8, [r4, #21]
 800b8ee:	1b92      	subs	r2, r2, r6
 800b8f0:	1b9b      	subs	r3, r3, r6
 800b8f2:	f080 0001 	eor.w	r0, r0, #1
 800b8f6:	60a2      	str	r2, [r4, #8]
 800b8f8:	6123      	str	r3, [r4, #16]
 800b8fa:	b003      	add	sp, #12
 800b8fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b900:	68a3      	ldr	r3, [r4, #8]
 800b902:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b906:	701a      	strb	r2, [r3, #0]
 800b908:	e7bc      	b.n	800b884 <ucdr_serialize_endian_uint16_t+0x60>
 800b90a:	f10d 0506 	add.w	r5, sp, #6
 800b90e:	4629      	mov	r1, r5
 800b910:	4632      	mov	r2, r6
 800b912:	4638      	mov	r0, r7
 800b914:	f00b f9a7 	bl	8016c66 <memcpy>
 800b918:	68a0      	ldr	r0, [r4, #8]
 800b91a:	464a      	mov	r2, r9
 800b91c:	19a9      	adds	r1, r5, r6
 800b91e:	f00b f9a2 	bl	8016c66 <memcpy>
 800b922:	e7af      	b.n	800b884 <ucdr_serialize_endian_uint16_t+0x60>

0800b924 <ucdr_deserialize_uint16_t>:
 800b924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b928:	460d      	mov	r5, r1
 800b92a:	2102      	movs	r1, #2
 800b92c:	4604      	mov	r4, r0
 800b92e:	f000 ffad 	bl	800c88c <ucdr_buffer_alignment>
 800b932:	4601      	mov	r1, r0
 800b934:	4620      	mov	r0, r4
 800b936:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b93a:	f000 ffeb 	bl	800c914 <ucdr_advance_buffer>
 800b93e:	2102      	movs	r1, #2
 800b940:	4620      	mov	r0, r4
 800b942:	f000 ff43 	bl	800c7cc <ucdr_check_buffer_available_for>
 800b946:	bb60      	cbnz	r0, 800b9a2 <ucdr_deserialize_uint16_t+0x7e>
 800b948:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b94c:	42be      	cmp	r6, r7
 800b94e:	d923      	bls.n	800b998 <ucdr_deserialize_uint16_t+0x74>
 800b950:	6923      	ldr	r3, [r4, #16]
 800b952:	60a6      	str	r6, [r4, #8]
 800b954:	1bf6      	subs	r6, r6, r7
 800b956:	4433      	add	r3, r6
 800b958:	f1c6 0902 	rsb	r9, r6, #2
 800b95c:	6123      	str	r3, [r4, #16]
 800b95e:	4649      	mov	r1, r9
 800b960:	4620      	mov	r0, r4
 800b962:	f000 ff3f 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800b966:	2800      	cmp	r0, #0
 800b968:	d034      	beq.n	800b9d4 <ucdr_deserialize_uint16_t+0xb0>
 800b96a:	7d23      	ldrb	r3, [r4, #20]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d042      	beq.n	800b9f6 <ucdr_deserialize_uint16_t+0xd2>
 800b970:	787b      	ldrb	r3, [r7, #1]
 800b972:	702b      	strb	r3, [r5, #0]
 800b974:	2e00      	cmp	r6, #0
 800b976:	d03a      	beq.n	800b9ee <ucdr_deserialize_uint16_t+0xca>
 800b978:	783b      	ldrb	r3, [r7, #0]
 800b97a:	706b      	strb	r3, [r5, #1]
 800b97c:	6923      	ldr	r3, [r4, #16]
 800b97e:	68a2      	ldr	r2, [r4, #8]
 800b980:	7da0      	ldrb	r0, [r4, #22]
 800b982:	2102      	movs	r1, #2
 800b984:	3302      	adds	r3, #2
 800b986:	444a      	add	r2, r9
 800b988:	1b9b      	subs	r3, r3, r6
 800b98a:	7561      	strb	r1, [r4, #21]
 800b98c:	60a2      	str	r2, [r4, #8]
 800b98e:	6123      	str	r3, [r4, #16]
 800b990:	f080 0001 	eor.w	r0, r0, #1
 800b994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b998:	2102      	movs	r1, #2
 800b99a:	4620      	mov	r0, r4
 800b99c:	f000 ff22 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800b9a0:	b180      	cbz	r0, 800b9c4 <ucdr_deserialize_uint16_t+0xa0>
 800b9a2:	7d23      	ldrb	r3, [r4, #20]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	68a3      	ldr	r3, [r4, #8]
 800b9a8:	d011      	beq.n	800b9ce <ucdr_deserialize_uint16_t+0xaa>
 800b9aa:	785b      	ldrb	r3, [r3, #1]
 800b9ac:	702b      	strb	r3, [r5, #0]
 800b9ae:	68a3      	ldr	r3, [r4, #8]
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	706b      	strb	r3, [r5, #1]
 800b9b4:	68a2      	ldr	r2, [r4, #8]
 800b9b6:	6923      	ldr	r3, [r4, #16]
 800b9b8:	3202      	adds	r2, #2
 800b9ba:	3302      	adds	r3, #2
 800b9bc:	2102      	movs	r1, #2
 800b9be:	60a2      	str	r2, [r4, #8]
 800b9c0:	6123      	str	r3, [r4, #16]
 800b9c2:	7561      	strb	r1, [r4, #21]
 800b9c4:	7da0      	ldrb	r0, [r4, #22]
 800b9c6:	f080 0001 	eor.w	r0, r0, #1
 800b9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ce:	881b      	ldrh	r3, [r3, #0]
 800b9d0:	802b      	strh	r3, [r5, #0]
 800b9d2:	e7ef      	b.n	800b9b4 <ucdr_deserialize_uint16_t+0x90>
 800b9d4:	68a2      	ldr	r2, [r4, #8]
 800b9d6:	6923      	ldr	r3, [r4, #16]
 800b9d8:	7da0      	ldrb	r0, [r4, #22]
 800b9da:	f884 8015 	strb.w	r8, [r4, #21]
 800b9de:	1b92      	subs	r2, r2, r6
 800b9e0:	1b9b      	subs	r3, r3, r6
 800b9e2:	60a2      	str	r2, [r4, #8]
 800b9e4:	6123      	str	r3, [r4, #16]
 800b9e6:	f080 0001 	eor.w	r0, r0, #1
 800b9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ee:	68a3      	ldr	r3, [r4, #8]
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	706b      	strb	r3, [r5, #1]
 800b9f4:	e7c2      	b.n	800b97c <ucdr_deserialize_uint16_t+0x58>
 800b9f6:	4639      	mov	r1, r7
 800b9f8:	4632      	mov	r2, r6
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f00b f933 	bl	8016c66 <memcpy>
 800ba00:	68a1      	ldr	r1, [r4, #8]
 800ba02:	464a      	mov	r2, r9
 800ba04:	19a8      	adds	r0, r5, r6
 800ba06:	f00b f92e 	bl	8016c66 <memcpy>
 800ba0a:	e7b7      	b.n	800b97c <ucdr_deserialize_uint16_t+0x58>

0800ba0c <ucdr_deserialize_endian_uint16_t>:
 800ba0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba10:	460e      	mov	r6, r1
 800ba12:	2102      	movs	r1, #2
 800ba14:	4604      	mov	r4, r0
 800ba16:	4615      	mov	r5, r2
 800ba18:	f000 ff38 	bl	800c88c <ucdr_buffer_alignment>
 800ba1c:	4601      	mov	r1, r0
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ba24:	f000 ff76 	bl	800c914 <ucdr_advance_buffer>
 800ba28:	2102      	movs	r1, #2
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f000 fece 	bl	800c7cc <ucdr_check_buffer_available_for>
 800ba30:	bb70      	cbnz	r0, 800ba90 <ucdr_deserialize_endian_uint16_t+0x84>
 800ba32:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ba36:	4547      	cmp	r7, r8
 800ba38:	d925      	bls.n	800ba86 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ba3a:	6923      	ldr	r3, [r4, #16]
 800ba3c:	60a7      	str	r7, [r4, #8]
 800ba3e:	eba7 0708 	sub.w	r7, r7, r8
 800ba42:	443b      	add	r3, r7
 800ba44:	f1c7 0a02 	rsb	sl, r7, #2
 800ba48:	6123      	str	r3, [r4, #16]
 800ba4a:	4651      	mov	r1, sl
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f000 fec9 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d034      	beq.n	800bac0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ba56:	2e01      	cmp	r6, #1
 800ba58:	d043      	beq.n	800bae2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800ba5a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ba5e:	702b      	strb	r3, [r5, #0]
 800ba60:	2f00      	cmp	r7, #0
 800ba62:	d03a      	beq.n	800bada <ucdr_deserialize_endian_uint16_t+0xce>
 800ba64:	f898 3000 	ldrb.w	r3, [r8]
 800ba68:	706b      	strb	r3, [r5, #1]
 800ba6a:	6923      	ldr	r3, [r4, #16]
 800ba6c:	68a2      	ldr	r2, [r4, #8]
 800ba6e:	7da0      	ldrb	r0, [r4, #22]
 800ba70:	2102      	movs	r1, #2
 800ba72:	3302      	adds	r3, #2
 800ba74:	4452      	add	r2, sl
 800ba76:	1bdb      	subs	r3, r3, r7
 800ba78:	7561      	strb	r1, [r4, #21]
 800ba7a:	60a2      	str	r2, [r4, #8]
 800ba7c:	6123      	str	r3, [r4, #16]
 800ba7e:	f080 0001 	eor.w	r0, r0, #1
 800ba82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba86:	2102      	movs	r1, #2
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f000 feab 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800ba8e:	b178      	cbz	r0, 800bab0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800ba90:	2e01      	cmp	r6, #1
 800ba92:	68a3      	ldr	r3, [r4, #8]
 800ba94:	d011      	beq.n	800baba <ucdr_deserialize_endian_uint16_t+0xae>
 800ba96:	785b      	ldrb	r3, [r3, #1]
 800ba98:	702b      	strb	r3, [r5, #0]
 800ba9a:	68a3      	ldr	r3, [r4, #8]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	706b      	strb	r3, [r5, #1]
 800baa0:	68a2      	ldr	r2, [r4, #8]
 800baa2:	6923      	ldr	r3, [r4, #16]
 800baa4:	3202      	adds	r2, #2
 800baa6:	3302      	adds	r3, #2
 800baa8:	2102      	movs	r1, #2
 800baaa:	60a2      	str	r2, [r4, #8]
 800baac:	6123      	str	r3, [r4, #16]
 800baae:	7561      	strb	r1, [r4, #21]
 800bab0:	7da0      	ldrb	r0, [r4, #22]
 800bab2:	f080 0001 	eor.w	r0, r0, #1
 800bab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baba:	881b      	ldrh	r3, [r3, #0]
 800babc:	802b      	strh	r3, [r5, #0]
 800babe:	e7ef      	b.n	800baa0 <ucdr_deserialize_endian_uint16_t+0x94>
 800bac0:	68a2      	ldr	r2, [r4, #8]
 800bac2:	6923      	ldr	r3, [r4, #16]
 800bac4:	7da0      	ldrb	r0, [r4, #22]
 800bac6:	f884 9015 	strb.w	r9, [r4, #21]
 800baca:	1bd2      	subs	r2, r2, r7
 800bacc:	1bdb      	subs	r3, r3, r7
 800bace:	60a2      	str	r2, [r4, #8]
 800bad0:	6123      	str	r3, [r4, #16]
 800bad2:	f080 0001 	eor.w	r0, r0, #1
 800bad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bada:	68a3      	ldr	r3, [r4, #8]
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	706b      	strb	r3, [r5, #1]
 800bae0:	e7c3      	b.n	800ba6a <ucdr_deserialize_endian_uint16_t+0x5e>
 800bae2:	4641      	mov	r1, r8
 800bae4:	463a      	mov	r2, r7
 800bae6:	4628      	mov	r0, r5
 800bae8:	f00b f8bd 	bl	8016c66 <memcpy>
 800baec:	68a1      	ldr	r1, [r4, #8]
 800baee:	4652      	mov	r2, sl
 800baf0:	19e8      	adds	r0, r5, r7
 800baf2:	f00b f8b8 	bl	8016c66 <memcpy>
 800baf6:	e7b8      	b.n	800ba6a <ucdr_deserialize_endian_uint16_t+0x5e>

0800baf8 <ucdr_serialize_uint32_t>:
 800baf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bafc:	b082      	sub	sp, #8
 800bafe:	4604      	mov	r4, r0
 800bb00:	9101      	str	r1, [sp, #4]
 800bb02:	2104      	movs	r1, #4
 800bb04:	f000 fec2 	bl	800c88c <ucdr_buffer_alignment>
 800bb08:	4601      	mov	r1, r0
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	7d67      	ldrb	r7, [r4, #21]
 800bb0e:	f000 ff01 	bl	800c914 <ucdr_advance_buffer>
 800bb12:	2104      	movs	r1, #4
 800bb14:	4620      	mov	r0, r4
 800bb16:	f000 fe59 	bl	800c7cc <ucdr_check_buffer_available_for>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d139      	bne.n	800bb92 <ucdr_serialize_uint32_t+0x9a>
 800bb1e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bb22:	42ab      	cmp	r3, r5
 800bb24:	d930      	bls.n	800bb88 <ucdr_serialize_uint32_t+0x90>
 800bb26:	1b5e      	subs	r6, r3, r5
 800bb28:	60a3      	str	r3, [r4, #8]
 800bb2a:	6923      	ldr	r3, [r4, #16]
 800bb2c:	f1c6 0804 	rsb	r8, r6, #4
 800bb30:	4433      	add	r3, r6
 800bb32:	6123      	str	r3, [r4, #16]
 800bb34:	4641      	mov	r1, r8
 800bb36:	4620      	mov	r0, r4
 800bb38:	f000 fe54 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d04c      	beq.n	800bbda <ucdr_serialize_uint32_t+0xe2>
 800bb40:	7d23      	ldrb	r3, [r4, #20]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d063      	beq.n	800bc0e <ucdr_serialize_uint32_t+0x116>
 800bb46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bb4a:	702b      	strb	r3, [r5, #0]
 800bb4c:	2e00      	cmp	r6, #0
 800bb4e:	d051      	beq.n	800bbf4 <ucdr_serialize_uint32_t+0xfc>
 800bb50:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bb54:	706b      	strb	r3, [r5, #1]
 800bb56:	2e01      	cmp	r6, #1
 800bb58:	d050      	beq.n	800bbfc <ucdr_serialize_uint32_t+0x104>
 800bb5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bb5e:	70ab      	strb	r3, [r5, #2]
 800bb60:	2e02      	cmp	r6, #2
 800bb62:	d04f      	beq.n	800bc04 <ucdr_serialize_uint32_t+0x10c>
 800bb64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bb68:	70eb      	strb	r3, [r5, #3]
 800bb6a:	6923      	ldr	r3, [r4, #16]
 800bb6c:	68a2      	ldr	r2, [r4, #8]
 800bb6e:	7da0      	ldrb	r0, [r4, #22]
 800bb70:	3304      	adds	r3, #4
 800bb72:	1b9e      	subs	r6, r3, r6
 800bb74:	4442      	add	r2, r8
 800bb76:	2304      	movs	r3, #4
 800bb78:	f080 0001 	eor.w	r0, r0, #1
 800bb7c:	60a2      	str	r2, [r4, #8]
 800bb7e:	6126      	str	r6, [r4, #16]
 800bb80:	7563      	strb	r3, [r4, #21]
 800bb82:	b002      	add	sp, #8
 800bb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb88:	2104      	movs	r1, #4
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f000 fe2a 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800bb90:	b1d0      	cbz	r0, 800bbc8 <ucdr_serialize_uint32_t+0xd0>
 800bb92:	7d23      	ldrb	r3, [r4, #20]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	68a3      	ldr	r3, [r4, #8]
 800bb98:	d01c      	beq.n	800bbd4 <ucdr_serialize_uint32_t+0xdc>
 800bb9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bb9e:	701a      	strb	r2, [r3, #0]
 800bba0:	68a3      	ldr	r3, [r4, #8]
 800bba2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bba6:	705a      	strb	r2, [r3, #1]
 800bba8:	68a3      	ldr	r3, [r4, #8]
 800bbaa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bbae:	709a      	strb	r2, [r3, #2]
 800bbb0:	68a3      	ldr	r3, [r4, #8]
 800bbb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bbb6:	70da      	strb	r2, [r3, #3]
 800bbb8:	68a2      	ldr	r2, [r4, #8]
 800bbba:	6923      	ldr	r3, [r4, #16]
 800bbbc:	3204      	adds	r2, #4
 800bbbe:	3304      	adds	r3, #4
 800bbc0:	2104      	movs	r1, #4
 800bbc2:	60a2      	str	r2, [r4, #8]
 800bbc4:	6123      	str	r3, [r4, #16]
 800bbc6:	7561      	strb	r1, [r4, #21]
 800bbc8:	7da0      	ldrb	r0, [r4, #22]
 800bbca:	f080 0001 	eor.w	r0, r0, #1
 800bbce:	b002      	add	sp, #8
 800bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd4:	9a01      	ldr	r2, [sp, #4]
 800bbd6:	601a      	str	r2, [r3, #0]
 800bbd8:	e7ee      	b.n	800bbb8 <ucdr_serialize_uint32_t+0xc0>
 800bbda:	68a2      	ldr	r2, [r4, #8]
 800bbdc:	6923      	ldr	r3, [r4, #16]
 800bbde:	7da0      	ldrb	r0, [r4, #22]
 800bbe0:	7567      	strb	r7, [r4, #21]
 800bbe2:	1b92      	subs	r2, r2, r6
 800bbe4:	1b9b      	subs	r3, r3, r6
 800bbe6:	f080 0001 	eor.w	r0, r0, #1
 800bbea:	60a2      	str	r2, [r4, #8]
 800bbec:	6123      	str	r3, [r4, #16]
 800bbee:	b002      	add	sp, #8
 800bbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf4:	68a3      	ldr	r3, [r4, #8]
 800bbf6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bbfa:	701a      	strb	r2, [r3, #0]
 800bbfc:	68a3      	ldr	r3, [r4, #8]
 800bbfe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc02:	701a      	strb	r2, [r3, #0]
 800bc04:	68a3      	ldr	r3, [r4, #8]
 800bc06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc0a:	701a      	strb	r2, [r3, #0]
 800bc0c:	e7ad      	b.n	800bb6a <ucdr_serialize_uint32_t+0x72>
 800bc0e:	4628      	mov	r0, r5
 800bc10:	ad01      	add	r5, sp, #4
 800bc12:	4629      	mov	r1, r5
 800bc14:	4632      	mov	r2, r6
 800bc16:	f00b f826 	bl	8016c66 <memcpy>
 800bc1a:	68a0      	ldr	r0, [r4, #8]
 800bc1c:	4642      	mov	r2, r8
 800bc1e:	19a9      	adds	r1, r5, r6
 800bc20:	f00b f821 	bl	8016c66 <memcpy>
 800bc24:	e7a1      	b.n	800bb6a <ucdr_serialize_uint32_t+0x72>
 800bc26:	bf00      	nop

0800bc28 <ucdr_serialize_endian_uint32_t>:
 800bc28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc2c:	b083      	sub	sp, #12
 800bc2e:	460d      	mov	r5, r1
 800bc30:	2104      	movs	r1, #4
 800bc32:	4604      	mov	r4, r0
 800bc34:	9201      	str	r2, [sp, #4]
 800bc36:	f000 fe29 	bl	800c88c <ucdr_buffer_alignment>
 800bc3a:	4601      	mov	r1, r0
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bc42:	f000 fe67 	bl	800c914 <ucdr_advance_buffer>
 800bc46:	2104      	movs	r1, #4
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f000 fdbf 	bl	800c7cc <ucdr_check_buffer_available_for>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d138      	bne.n	800bcc4 <ucdr_serialize_endian_uint32_t+0x9c>
 800bc52:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bc56:	42b7      	cmp	r7, r6
 800bc58:	d92f      	bls.n	800bcba <ucdr_serialize_endian_uint32_t+0x92>
 800bc5a:	6923      	ldr	r3, [r4, #16]
 800bc5c:	60a7      	str	r7, [r4, #8]
 800bc5e:	1bbf      	subs	r7, r7, r6
 800bc60:	443b      	add	r3, r7
 800bc62:	f1c7 0904 	rsb	r9, r7, #4
 800bc66:	6123      	str	r3, [r4, #16]
 800bc68:	4649      	mov	r1, r9
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f000 fdba 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	d04a      	beq.n	800bd0a <ucdr_serialize_endian_uint32_t+0xe2>
 800bc74:	2d01      	cmp	r5, #1
 800bc76:	d063      	beq.n	800bd40 <ucdr_serialize_endian_uint32_t+0x118>
 800bc78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc7c:	7033      	strb	r3, [r6, #0]
 800bc7e:	2f00      	cmp	r7, #0
 800bc80:	d051      	beq.n	800bd26 <ucdr_serialize_endian_uint32_t+0xfe>
 800bc82:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bc86:	7073      	strb	r3, [r6, #1]
 800bc88:	2f01      	cmp	r7, #1
 800bc8a:	d050      	beq.n	800bd2e <ucdr_serialize_endian_uint32_t+0x106>
 800bc8c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bc90:	70b3      	strb	r3, [r6, #2]
 800bc92:	2f02      	cmp	r7, #2
 800bc94:	d04f      	beq.n	800bd36 <ucdr_serialize_endian_uint32_t+0x10e>
 800bc96:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bc9a:	70f3      	strb	r3, [r6, #3]
 800bc9c:	6923      	ldr	r3, [r4, #16]
 800bc9e:	68a2      	ldr	r2, [r4, #8]
 800bca0:	7da0      	ldrb	r0, [r4, #22]
 800bca2:	3304      	adds	r3, #4
 800bca4:	444a      	add	r2, r9
 800bca6:	1bdb      	subs	r3, r3, r7
 800bca8:	2104      	movs	r1, #4
 800bcaa:	f080 0001 	eor.w	r0, r0, #1
 800bcae:	60a2      	str	r2, [r4, #8]
 800bcb0:	6123      	str	r3, [r4, #16]
 800bcb2:	7561      	strb	r1, [r4, #21]
 800bcb4:	b003      	add	sp, #12
 800bcb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcba:	2104      	movs	r1, #4
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f000 fd91 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800bcc2:	b1c8      	cbz	r0, 800bcf8 <ucdr_serialize_endian_uint32_t+0xd0>
 800bcc4:	2d01      	cmp	r5, #1
 800bcc6:	68a3      	ldr	r3, [r4, #8]
 800bcc8:	d01c      	beq.n	800bd04 <ucdr_serialize_endian_uint32_t+0xdc>
 800bcca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bcce:	701a      	strb	r2, [r3, #0]
 800bcd0:	68a3      	ldr	r3, [r4, #8]
 800bcd2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bcd6:	705a      	strb	r2, [r3, #1]
 800bcd8:	68a3      	ldr	r3, [r4, #8]
 800bcda:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bcde:	709a      	strb	r2, [r3, #2]
 800bce0:	68a3      	ldr	r3, [r4, #8]
 800bce2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bce6:	70da      	strb	r2, [r3, #3]
 800bce8:	68a2      	ldr	r2, [r4, #8]
 800bcea:	6923      	ldr	r3, [r4, #16]
 800bcec:	3204      	adds	r2, #4
 800bcee:	3304      	adds	r3, #4
 800bcf0:	2104      	movs	r1, #4
 800bcf2:	60a2      	str	r2, [r4, #8]
 800bcf4:	6123      	str	r3, [r4, #16]
 800bcf6:	7561      	strb	r1, [r4, #21]
 800bcf8:	7da0      	ldrb	r0, [r4, #22]
 800bcfa:	f080 0001 	eor.w	r0, r0, #1
 800bcfe:	b003      	add	sp, #12
 800bd00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd04:	9a01      	ldr	r2, [sp, #4]
 800bd06:	601a      	str	r2, [r3, #0]
 800bd08:	e7ee      	b.n	800bce8 <ucdr_serialize_endian_uint32_t+0xc0>
 800bd0a:	68a2      	ldr	r2, [r4, #8]
 800bd0c:	6923      	ldr	r3, [r4, #16]
 800bd0e:	7da0      	ldrb	r0, [r4, #22]
 800bd10:	f884 8015 	strb.w	r8, [r4, #21]
 800bd14:	1bd2      	subs	r2, r2, r7
 800bd16:	1bdb      	subs	r3, r3, r7
 800bd18:	f080 0001 	eor.w	r0, r0, #1
 800bd1c:	60a2      	str	r2, [r4, #8]
 800bd1e:	6123      	str	r3, [r4, #16]
 800bd20:	b003      	add	sp, #12
 800bd22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd26:	68a3      	ldr	r3, [r4, #8]
 800bd28:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd2c:	701a      	strb	r2, [r3, #0]
 800bd2e:	68a3      	ldr	r3, [r4, #8]
 800bd30:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd34:	701a      	strb	r2, [r3, #0]
 800bd36:	68a3      	ldr	r3, [r4, #8]
 800bd38:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd3c:	701a      	strb	r2, [r3, #0]
 800bd3e:	e7ad      	b.n	800bc9c <ucdr_serialize_endian_uint32_t+0x74>
 800bd40:	ad01      	add	r5, sp, #4
 800bd42:	4629      	mov	r1, r5
 800bd44:	463a      	mov	r2, r7
 800bd46:	4630      	mov	r0, r6
 800bd48:	f00a ff8d 	bl	8016c66 <memcpy>
 800bd4c:	68a0      	ldr	r0, [r4, #8]
 800bd4e:	464a      	mov	r2, r9
 800bd50:	19e9      	adds	r1, r5, r7
 800bd52:	f00a ff88 	bl	8016c66 <memcpy>
 800bd56:	e7a1      	b.n	800bc9c <ucdr_serialize_endian_uint32_t+0x74>

0800bd58 <ucdr_deserialize_uint32_t>:
 800bd58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd5c:	460d      	mov	r5, r1
 800bd5e:	2104      	movs	r1, #4
 800bd60:	4604      	mov	r4, r0
 800bd62:	f000 fd93 	bl	800c88c <ucdr_buffer_alignment>
 800bd66:	4601      	mov	r1, r0
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bd6e:	f000 fdd1 	bl	800c914 <ucdr_advance_buffer>
 800bd72:	2104      	movs	r1, #4
 800bd74:	4620      	mov	r0, r4
 800bd76:	f000 fd29 	bl	800c7cc <ucdr_check_buffer_available_for>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d138      	bne.n	800bdf0 <ucdr_deserialize_uint32_t+0x98>
 800bd7e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bd82:	42b7      	cmp	r7, r6
 800bd84:	d92f      	bls.n	800bde6 <ucdr_deserialize_uint32_t+0x8e>
 800bd86:	6923      	ldr	r3, [r4, #16]
 800bd88:	60a7      	str	r7, [r4, #8]
 800bd8a:	1bbf      	subs	r7, r7, r6
 800bd8c:	443b      	add	r3, r7
 800bd8e:	f1c7 0904 	rsb	r9, r7, #4
 800bd92:	6123      	str	r3, [r4, #16]
 800bd94:	4649      	mov	r1, r9
 800bd96:	4620      	mov	r0, r4
 800bd98:	f000 fd24 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d046      	beq.n	800be2e <ucdr_deserialize_uint32_t+0xd6>
 800bda0:	7d23      	ldrb	r3, [r4, #20]
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d05c      	beq.n	800be60 <ucdr_deserialize_uint32_t+0x108>
 800bda6:	78f3      	ldrb	r3, [r6, #3]
 800bda8:	702b      	strb	r3, [r5, #0]
 800bdaa:	2f00      	cmp	r7, #0
 800bdac:	d04c      	beq.n	800be48 <ucdr_deserialize_uint32_t+0xf0>
 800bdae:	78b3      	ldrb	r3, [r6, #2]
 800bdb0:	706b      	strb	r3, [r5, #1]
 800bdb2:	2f01      	cmp	r7, #1
 800bdb4:	f105 0302 	add.w	r3, r5, #2
 800bdb8:	d04a      	beq.n	800be50 <ucdr_deserialize_uint32_t+0xf8>
 800bdba:	7873      	ldrb	r3, [r6, #1]
 800bdbc:	70ab      	strb	r3, [r5, #2]
 800bdbe:	2f02      	cmp	r7, #2
 800bdc0:	f105 0303 	add.w	r3, r5, #3
 800bdc4:	d048      	beq.n	800be58 <ucdr_deserialize_uint32_t+0x100>
 800bdc6:	7833      	ldrb	r3, [r6, #0]
 800bdc8:	70eb      	strb	r3, [r5, #3]
 800bdca:	6923      	ldr	r3, [r4, #16]
 800bdcc:	68a2      	ldr	r2, [r4, #8]
 800bdce:	7da0      	ldrb	r0, [r4, #22]
 800bdd0:	2104      	movs	r1, #4
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	444a      	add	r2, r9
 800bdd6:	1bdb      	subs	r3, r3, r7
 800bdd8:	7561      	strb	r1, [r4, #21]
 800bdda:	60a2      	str	r2, [r4, #8]
 800bddc:	6123      	str	r3, [r4, #16]
 800bdde:	f080 0001 	eor.w	r0, r0, #1
 800bde2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde6:	2104      	movs	r1, #4
 800bde8:	4620      	mov	r0, r4
 800bdea:	f000 fcfb 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800bdee:	b1b0      	cbz	r0, 800be1e <ucdr_deserialize_uint32_t+0xc6>
 800bdf0:	7d23      	ldrb	r3, [r4, #20]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	68a3      	ldr	r3, [r4, #8]
 800bdf6:	d017      	beq.n	800be28 <ucdr_deserialize_uint32_t+0xd0>
 800bdf8:	78db      	ldrb	r3, [r3, #3]
 800bdfa:	702b      	strb	r3, [r5, #0]
 800bdfc:	68a3      	ldr	r3, [r4, #8]
 800bdfe:	789b      	ldrb	r3, [r3, #2]
 800be00:	706b      	strb	r3, [r5, #1]
 800be02:	68a3      	ldr	r3, [r4, #8]
 800be04:	785b      	ldrb	r3, [r3, #1]
 800be06:	70ab      	strb	r3, [r5, #2]
 800be08:	68a3      	ldr	r3, [r4, #8]
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	70eb      	strb	r3, [r5, #3]
 800be0e:	68a2      	ldr	r2, [r4, #8]
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	3204      	adds	r2, #4
 800be14:	3304      	adds	r3, #4
 800be16:	2104      	movs	r1, #4
 800be18:	60a2      	str	r2, [r4, #8]
 800be1a:	6123      	str	r3, [r4, #16]
 800be1c:	7561      	strb	r1, [r4, #21]
 800be1e:	7da0      	ldrb	r0, [r4, #22]
 800be20:	f080 0001 	eor.w	r0, r0, #1
 800be24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	602b      	str	r3, [r5, #0]
 800be2c:	e7ef      	b.n	800be0e <ucdr_deserialize_uint32_t+0xb6>
 800be2e:	68a2      	ldr	r2, [r4, #8]
 800be30:	6923      	ldr	r3, [r4, #16]
 800be32:	7da0      	ldrb	r0, [r4, #22]
 800be34:	f884 8015 	strb.w	r8, [r4, #21]
 800be38:	1bd2      	subs	r2, r2, r7
 800be3a:	1bdb      	subs	r3, r3, r7
 800be3c:	60a2      	str	r2, [r4, #8]
 800be3e:	6123      	str	r3, [r4, #16]
 800be40:	f080 0001 	eor.w	r0, r0, #1
 800be44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be48:	68a3      	ldr	r3, [r4, #8]
 800be4a:	789b      	ldrb	r3, [r3, #2]
 800be4c:	706b      	strb	r3, [r5, #1]
 800be4e:	1cab      	adds	r3, r5, #2
 800be50:	68a2      	ldr	r2, [r4, #8]
 800be52:	7852      	ldrb	r2, [r2, #1]
 800be54:	f803 2b01 	strb.w	r2, [r3], #1
 800be58:	68a2      	ldr	r2, [r4, #8]
 800be5a:	7812      	ldrb	r2, [r2, #0]
 800be5c:	701a      	strb	r2, [r3, #0]
 800be5e:	e7b4      	b.n	800bdca <ucdr_deserialize_uint32_t+0x72>
 800be60:	4631      	mov	r1, r6
 800be62:	463a      	mov	r2, r7
 800be64:	4628      	mov	r0, r5
 800be66:	f00a fefe 	bl	8016c66 <memcpy>
 800be6a:	68a1      	ldr	r1, [r4, #8]
 800be6c:	464a      	mov	r2, r9
 800be6e:	19e8      	adds	r0, r5, r7
 800be70:	f00a fef9 	bl	8016c66 <memcpy>
 800be74:	e7a9      	b.n	800bdca <ucdr_deserialize_uint32_t+0x72>
 800be76:	bf00      	nop

0800be78 <ucdr_deserialize_endian_uint32_t>:
 800be78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be7c:	460e      	mov	r6, r1
 800be7e:	2104      	movs	r1, #4
 800be80:	4604      	mov	r4, r0
 800be82:	4615      	mov	r5, r2
 800be84:	f000 fd02 	bl	800c88c <ucdr_buffer_alignment>
 800be88:	4601      	mov	r1, r0
 800be8a:	4620      	mov	r0, r4
 800be8c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800be90:	f000 fd40 	bl	800c914 <ucdr_advance_buffer>
 800be94:	2104      	movs	r1, #4
 800be96:	4620      	mov	r0, r4
 800be98:	f000 fc98 	bl	800c7cc <ucdr_check_buffer_available_for>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d13c      	bne.n	800bf1a <ucdr_deserialize_endian_uint32_t+0xa2>
 800bea0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bea4:	42bb      	cmp	r3, r7
 800bea6:	d933      	bls.n	800bf10 <ucdr_deserialize_endian_uint32_t+0x98>
 800bea8:	eba3 0807 	sub.w	r8, r3, r7
 800beac:	60a3      	str	r3, [r4, #8]
 800beae:	6923      	ldr	r3, [r4, #16]
 800beb0:	f1c8 0a04 	rsb	sl, r8, #4
 800beb4:	4443      	add	r3, r8
 800beb6:	6123      	str	r3, [r4, #16]
 800beb8:	4651      	mov	r1, sl
 800beba:	4620      	mov	r0, r4
 800bebc:	f000 fc92 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d048      	beq.n	800bf56 <ucdr_deserialize_endian_uint32_t+0xde>
 800bec4:	2e01      	cmp	r6, #1
 800bec6:	d061      	beq.n	800bf8c <ucdr_deserialize_endian_uint32_t+0x114>
 800bec8:	78fb      	ldrb	r3, [r7, #3]
 800beca:	702b      	strb	r3, [r5, #0]
 800becc:	f1b8 0f00 	cmp.w	r8, #0
 800bed0:	d050      	beq.n	800bf74 <ucdr_deserialize_endian_uint32_t+0xfc>
 800bed2:	78bb      	ldrb	r3, [r7, #2]
 800bed4:	706b      	strb	r3, [r5, #1]
 800bed6:	f1b8 0f01 	cmp.w	r8, #1
 800beda:	f105 0302 	add.w	r3, r5, #2
 800bede:	d04d      	beq.n	800bf7c <ucdr_deserialize_endian_uint32_t+0x104>
 800bee0:	787b      	ldrb	r3, [r7, #1]
 800bee2:	70ab      	strb	r3, [r5, #2]
 800bee4:	f1b8 0f02 	cmp.w	r8, #2
 800bee8:	f105 0303 	add.w	r3, r5, #3
 800beec:	d04a      	beq.n	800bf84 <ucdr_deserialize_endian_uint32_t+0x10c>
 800beee:	783b      	ldrb	r3, [r7, #0]
 800bef0:	70eb      	strb	r3, [r5, #3]
 800bef2:	6923      	ldr	r3, [r4, #16]
 800bef4:	68a2      	ldr	r2, [r4, #8]
 800bef6:	7da0      	ldrb	r0, [r4, #22]
 800bef8:	2104      	movs	r1, #4
 800befa:	3304      	adds	r3, #4
 800befc:	4452      	add	r2, sl
 800befe:	eba3 0308 	sub.w	r3, r3, r8
 800bf02:	7561      	strb	r1, [r4, #21]
 800bf04:	60a2      	str	r2, [r4, #8]
 800bf06:	6123      	str	r3, [r4, #16]
 800bf08:	f080 0001 	eor.w	r0, r0, #1
 800bf0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf10:	2104      	movs	r1, #4
 800bf12:	4620      	mov	r0, r4
 800bf14:	f000 fc66 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800bf18:	b1a8      	cbz	r0, 800bf46 <ucdr_deserialize_endian_uint32_t+0xce>
 800bf1a:	2e01      	cmp	r6, #1
 800bf1c:	68a3      	ldr	r3, [r4, #8]
 800bf1e:	d017      	beq.n	800bf50 <ucdr_deserialize_endian_uint32_t+0xd8>
 800bf20:	78db      	ldrb	r3, [r3, #3]
 800bf22:	702b      	strb	r3, [r5, #0]
 800bf24:	68a3      	ldr	r3, [r4, #8]
 800bf26:	789b      	ldrb	r3, [r3, #2]
 800bf28:	706b      	strb	r3, [r5, #1]
 800bf2a:	68a3      	ldr	r3, [r4, #8]
 800bf2c:	785b      	ldrb	r3, [r3, #1]
 800bf2e:	70ab      	strb	r3, [r5, #2]
 800bf30:	68a3      	ldr	r3, [r4, #8]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	70eb      	strb	r3, [r5, #3]
 800bf36:	68a2      	ldr	r2, [r4, #8]
 800bf38:	6923      	ldr	r3, [r4, #16]
 800bf3a:	3204      	adds	r2, #4
 800bf3c:	3304      	adds	r3, #4
 800bf3e:	2104      	movs	r1, #4
 800bf40:	60a2      	str	r2, [r4, #8]
 800bf42:	6123      	str	r3, [r4, #16]
 800bf44:	7561      	strb	r1, [r4, #21]
 800bf46:	7da0      	ldrb	r0, [r4, #22]
 800bf48:	f080 0001 	eor.w	r0, r0, #1
 800bf4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	602b      	str	r3, [r5, #0]
 800bf54:	e7ef      	b.n	800bf36 <ucdr_deserialize_endian_uint32_t+0xbe>
 800bf56:	68a2      	ldr	r2, [r4, #8]
 800bf58:	6923      	ldr	r3, [r4, #16]
 800bf5a:	7da0      	ldrb	r0, [r4, #22]
 800bf5c:	f884 9015 	strb.w	r9, [r4, #21]
 800bf60:	eba2 0208 	sub.w	r2, r2, r8
 800bf64:	eba3 0308 	sub.w	r3, r3, r8
 800bf68:	60a2      	str	r2, [r4, #8]
 800bf6a:	6123      	str	r3, [r4, #16]
 800bf6c:	f080 0001 	eor.w	r0, r0, #1
 800bf70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf74:	68a3      	ldr	r3, [r4, #8]
 800bf76:	789b      	ldrb	r3, [r3, #2]
 800bf78:	706b      	strb	r3, [r5, #1]
 800bf7a:	1cab      	adds	r3, r5, #2
 800bf7c:	68a2      	ldr	r2, [r4, #8]
 800bf7e:	7852      	ldrb	r2, [r2, #1]
 800bf80:	f803 2b01 	strb.w	r2, [r3], #1
 800bf84:	68a2      	ldr	r2, [r4, #8]
 800bf86:	7812      	ldrb	r2, [r2, #0]
 800bf88:	701a      	strb	r2, [r3, #0]
 800bf8a:	e7b2      	b.n	800bef2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	4642      	mov	r2, r8
 800bf90:	4628      	mov	r0, r5
 800bf92:	f00a fe68 	bl	8016c66 <memcpy>
 800bf96:	68a1      	ldr	r1, [r4, #8]
 800bf98:	4652      	mov	r2, sl
 800bf9a:	eb05 0008 	add.w	r0, r5, r8
 800bf9e:	f00a fe62 	bl	8016c66 <memcpy>
 800bfa2:	e7a6      	b.n	800bef2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800bfa4 <ucdr_serialize_uint64_t>:
 800bfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa8:	2108      	movs	r1, #8
 800bfaa:	b082      	sub	sp, #8
 800bfac:	4604      	mov	r4, r0
 800bfae:	e9cd 2300 	strd	r2, r3, [sp]
 800bfb2:	f000 fc6b 	bl	800c88c <ucdr_buffer_alignment>
 800bfb6:	4601      	mov	r1, r0
 800bfb8:	4620      	mov	r0, r4
 800bfba:	7d67      	ldrb	r7, [r4, #21]
 800bfbc:	f000 fcaa 	bl	800c914 <ucdr_advance_buffer>
 800bfc0:	2108      	movs	r1, #8
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f000 fc02 	bl	800c7cc <ucdr_check_buffer_available_for>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d14e      	bne.n	800c06a <ucdr_serialize_uint64_t+0xc6>
 800bfcc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bfd0:	42ab      	cmp	r3, r5
 800bfd2:	d945      	bls.n	800c060 <ucdr_serialize_uint64_t+0xbc>
 800bfd4:	1b5e      	subs	r6, r3, r5
 800bfd6:	60a3      	str	r3, [r4, #8]
 800bfd8:	6923      	ldr	r3, [r4, #16]
 800bfda:	f1c6 0808 	rsb	r8, r6, #8
 800bfde:	4433      	add	r3, r6
 800bfe0:	6123      	str	r3, [r4, #16]
 800bfe2:	4641      	mov	r1, r8
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f000 fbfd 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d074      	beq.n	800c0d8 <ucdr_serialize_uint64_t+0x134>
 800bfee:	7d23      	ldrb	r3, [r4, #20]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	f000 809b 	beq.w	800c12c <ucdr_serialize_uint64_t+0x188>
 800bff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bffa:	702b      	strb	r3, [r5, #0]
 800bffc:	2e00      	cmp	r6, #0
 800bffe:	d078      	beq.n	800c0f2 <ucdr_serialize_uint64_t+0x14e>
 800c000:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c004:	706b      	strb	r3, [r5, #1]
 800c006:	2e01      	cmp	r6, #1
 800c008:	d077      	beq.n	800c0fa <ucdr_serialize_uint64_t+0x156>
 800c00a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c00e:	70ab      	strb	r3, [r5, #2]
 800c010:	2e02      	cmp	r6, #2
 800c012:	d076      	beq.n	800c102 <ucdr_serialize_uint64_t+0x15e>
 800c014:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c018:	70eb      	strb	r3, [r5, #3]
 800c01a:	2e03      	cmp	r6, #3
 800c01c:	d075      	beq.n	800c10a <ucdr_serialize_uint64_t+0x166>
 800c01e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c022:	712b      	strb	r3, [r5, #4]
 800c024:	2e04      	cmp	r6, #4
 800c026:	d074      	beq.n	800c112 <ucdr_serialize_uint64_t+0x16e>
 800c028:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c02c:	716b      	strb	r3, [r5, #5]
 800c02e:	2e05      	cmp	r6, #5
 800c030:	d073      	beq.n	800c11a <ucdr_serialize_uint64_t+0x176>
 800c032:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c036:	71ab      	strb	r3, [r5, #6]
 800c038:	2e06      	cmp	r6, #6
 800c03a:	d072      	beq.n	800c122 <ucdr_serialize_uint64_t+0x17e>
 800c03c:	f89d 3000 	ldrb.w	r3, [sp]
 800c040:	71eb      	strb	r3, [r5, #7]
 800c042:	6923      	ldr	r3, [r4, #16]
 800c044:	68a2      	ldr	r2, [r4, #8]
 800c046:	7da0      	ldrb	r0, [r4, #22]
 800c048:	3308      	adds	r3, #8
 800c04a:	1b9e      	subs	r6, r3, r6
 800c04c:	4442      	add	r2, r8
 800c04e:	2308      	movs	r3, #8
 800c050:	f080 0001 	eor.w	r0, r0, #1
 800c054:	60a2      	str	r2, [r4, #8]
 800c056:	6126      	str	r6, [r4, #16]
 800c058:	7563      	strb	r3, [r4, #21]
 800c05a:	b002      	add	sp, #8
 800c05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c060:	2108      	movs	r1, #8
 800c062:	4620      	mov	r0, r4
 800c064:	f000 fbbe 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800c068:	b350      	cbz	r0, 800c0c0 <ucdr_serialize_uint64_t+0x11c>
 800c06a:	7d23      	ldrb	r3, [r4, #20]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d02d      	beq.n	800c0cc <ucdr_serialize_uint64_t+0x128>
 800c070:	68a3      	ldr	r3, [r4, #8]
 800c072:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c076:	701a      	strb	r2, [r3, #0]
 800c078:	68a3      	ldr	r3, [r4, #8]
 800c07a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c07e:	705a      	strb	r2, [r3, #1]
 800c080:	68a3      	ldr	r3, [r4, #8]
 800c082:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c086:	709a      	strb	r2, [r3, #2]
 800c088:	68a3      	ldr	r3, [r4, #8]
 800c08a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c08e:	70da      	strb	r2, [r3, #3]
 800c090:	68a3      	ldr	r3, [r4, #8]
 800c092:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c096:	711a      	strb	r2, [r3, #4]
 800c098:	68a3      	ldr	r3, [r4, #8]
 800c09a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c09e:	715a      	strb	r2, [r3, #5]
 800c0a0:	68a3      	ldr	r3, [r4, #8]
 800c0a2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c0a6:	719a      	strb	r2, [r3, #6]
 800c0a8:	68a3      	ldr	r3, [r4, #8]
 800c0aa:	f89d 2000 	ldrb.w	r2, [sp]
 800c0ae:	71da      	strb	r2, [r3, #7]
 800c0b0:	68a2      	ldr	r2, [r4, #8]
 800c0b2:	6923      	ldr	r3, [r4, #16]
 800c0b4:	3208      	adds	r2, #8
 800c0b6:	3308      	adds	r3, #8
 800c0b8:	2108      	movs	r1, #8
 800c0ba:	60a2      	str	r2, [r4, #8]
 800c0bc:	6123      	str	r3, [r4, #16]
 800c0be:	7561      	strb	r1, [r4, #21]
 800c0c0:	7da0      	ldrb	r0, [r4, #22]
 800c0c2:	f080 0001 	eor.w	r0, r0, #1
 800c0c6:	b002      	add	sp, #8
 800c0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0cc:	466b      	mov	r3, sp
 800c0ce:	cb03      	ldmia	r3!, {r0, r1}
 800c0d0:	68a3      	ldr	r3, [r4, #8]
 800c0d2:	6018      	str	r0, [r3, #0]
 800c0d4:	6059      	str	r1, [r3, #4]
 800c0d6:	e7eb      	b.n	800c0b0 <ucdr_serialize_uint64_t+0x10c>
 800c0d8:	68a2      	ldr	r2, [r4, #8]
 800c0da:	6923      	ldr	r3, [r4, #16]
 800c0dc:	7da0      	ldrb	r0, [r4, #22]
 800c0de:	7567      	strb	r7, [r4, #21]
 800c0e0:	1b92      	subs	r2, r2, r6
 800c0e2:	1b9b      	subs	r3, r3, r6
 800c0e4:	f080 0001 	eor.w	r0, r0, #1
 800c0e8:	60a2      	str	r2, [r4, #8]
 800c0ea:	6123      	str	r3, [r4, #16]
 800c0ec:	b002      	add	sp, #8
 800c0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f2:	68a3      	ldr	r3, [r4, #8]
 800c0f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c0f8:	701a      	strb	r2, [r3, #0]
 800c0fa:	68a3      	ldr	r3, [r4, #8]
 800c0fc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c100:	701a      	strb	r2, [r3, #0]
 800c102:	68a3      	ldr	r3, [r4, #8]
 800c104:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c108:	701a      	strb	r2, [r3, #0]
 800c10a:	68a3      	ldr	r3, [r4, #8]
 800c10c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c110:	701a      	strb	r2, [r3, #0]
 800c112:	68a3      	ldr	r3, [r4, #8]
 800c114:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c118:	701a      	strb	r2, [r3, #0]
 800c11a:	68a3      	ldr	r3, [r4, #8]
 800c11c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c120:	701a      	strb	r2, [r3, #0]
 800c122:	68a3      	ldr	r3, [r4, #8]
 800c124:	f89d 2000 	ldrb.w	r2, [sp]
 800c128:	701a      	strb	r2, [r3, #0]
 800c12a:	e78a      	b.n	800c042 <ucdr_serialize_uint64_t+0x9e>
 800c12c:	4628      	mov	r0, r5
 800c12e:	466d      	mov	r5, sp
 800c130:	4629      	mov	r1, r5
 800c132:	4632      	mov	r2, r6
 800c134:	f00a fd97 	bl	8016c66 <memcpy>
 800c138:	68a0      	ldr	r0, [r4, #8]
 800c13a:	4642      	mov	r2, r8
 800c13c:	19a9      	adds	r1, r5, r6
 800c13e:	f00a fd92 	bl	8016c66 <memcpy>
 800c142:	e77e      	b.n	800c042 <ucdr_serialize_uint64_t+0x9e>

0800c144 <ucdr_serialize_int16_t>:
 800c144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c148:	b082      	sub	sp, #8
 800c14a:	460b      	mov	r3, r1
 800c14c:	2102      	movs	r1, #2
 800c14e:	4604      	mov	r4, r0
 800c150:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c154:	f000 fb9a 	bl	800c88c <ucdr_buffer_alignment>
 800c158:	4601      	mov	r1, r0
 800c15a:	4620      	mov	r0, r4
 800c15c:	7d67      	ldrb	r7, [r4, #21]
 800c15e:	f000 fbd9 	bl	800c914 <ucdr_advance_buffer>
 800c162:	2102      	movs	r1, #2
 800c164:	4620      	mov	r0, r4
 800c166:	f000 fb31 	bl	800c7cc <ucdr_check_buffer_available_for>
 800c16a:	bb78      	cbnz	r0, 800c1cc <ucdr_serialize_int16_t+0x88>
 800c16c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c170:	42ab      	cmp	r3, r5
 800c172:	d926      	bls.n	800c1c2 <ucdr_serialize_int16_t+0x7e>
 800c174:	1b5e      	subs	r6, r3, r5
 800c176:	60a3      	str	r3, [r4, #8]
 800c178:	6923      	ldr	r3, [r4, #16]
 800c17a:	f1c6 0802 	rsb	r8, r6, #2
 800c17e:	4433      	add	r3, r6
 800c180:	6123      	str	r3, [r4, #16]
 800c182:	4641      	mov	r1, r8
 800c184:	4620      	mov	r0, r4
 800c186:	f000 fb2d 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d03b      	beq.n	800c206 <ucdr_serialize_int16_t+0xc2>
 800c18e:	7d23      	ldrb	r3, [r4, #20]
 800c190:	2b01      	cmp	r3, #1
 800c192:	d04a      	beq.n	800c22a <ucdr_serialize_int16_t+0xe6>
 800c194:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c198:	702b      	strb	r3, [r5, #0]
 800c19a:	2e00      	cmp	r6, #0
 800c19c:	d040      	beq.n	800c220 <ucdr_serialize_int16_t+0xdc>
 800c19e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c1a2:	706b      	strb	r3, [r5, #1]
 800c1a4:	6923      	ldr	r3, [r4, #16]
 800c1a6:	68a2      	ldr	r2, [r4, #8]
 800c1a8:	7da0      	ldrb	r0, [r4, #22]
 800c1aa:	3302      	adds	r3, #2
 800c1ac:	1b9e      	subs	r6, r3, r6
 800c1ae:	4442      	add	r2, r8
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	f080 0001 	eor.w	r0, r0, #1
 800c1b6:	60a2      	str	r2, [r4, #8]
 800c1b8:	6126      	str	r6, [r4, #16]
 800c1ba:	7563      	strb	r3, [r4, #21]
 800c1bc:	b002      	add	sp, #8
 800c1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1c2:	2102      	movs	r1, #2
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f000 fb0d 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800c1ca:	b190      	cbz	r0, 800c1f2 <ucdr_serialize_int16_t+0xae>
 800c1cc:	7d23      	ldrb	r3, [r4, #20]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	68a3      	ldr	r3, [r4, #8]
 800c1d2:	d014      	beq.n	800c1fe <ucdr_serialize_int16_t+0xba>
 800c1d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c1d8:	701a      	strb	r2, [r3, #0]
 800c1da:	68a3      	ldr	r3, [r4, #8]
 800c1dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c1e0:	705a      	strb	r2, [r3, #1]
 800c1e2:	68a2      	ldr	r2, [r4, #8]
 800c1e4:	6923      	ldr	r3, [r4, #16]
 800c1e6:	3202      	adds	r2, #2
 800c1e8:	3302      	adds	r3, #2
 800c1ea:	2102      	movs	r1, #2
 800c1ec:	60a2      	str	r2, [r4, #8]
 800c1ee:	6123      	str	r3, [r4, #16]
 800c1f0:	7561      	strb	r1, [r4, #21]
 800c1f2:	7da0      	ldrb	r0, [r4, #22]
 800c1f4:	f080 0001 	eor.w	r0, r0, #1
 800c1f8:	b002      	add	sp, #8
 800c1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c202:	801a      	strh	r2, [r3, #0]
 800c204:	e7ed      	b.n	800c1e2 <ucdr_serialize_int16_t+0x9e>
 800c206:	68a2      	ldr	r2, [r4, #8]
 800c208:	6923      	ldr	r3, [r4, #16]
 800c20a:	7da0      	ldrb	r0, [r4, #22]
 800c20c:	7567      	strb	r7, [r4, #21]
 800c20e:	1b92      	subs	r2, r2, r6
 800c210:	1b9b      	subs	r3, r3, r6
 800c212:	f080 0001 	eor.w	r0, r0, #1
 800c216:	60a2      	str	r2, [r4, #8]
 800c218:	6123      	str	r3, [r4, #16]
 800c21a:	b002      	add	sp, #8
 800c21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c220:	68a3      	ldr	r3, [r4, #8]
 800c222:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c226:	701a      	strb	r2, [r3, #0]
 800c228:	e7bc      	b.n	800c1a4 <ucdr_serialize_int16_t+0x60>
 800c22a:	4628      	mov	r0, r5
 800c22c:	f10d 0506 	add.w	r5, sp, #6
 800c230:	4629      	mov	r1, r5
 800c232:	4632      	mov	r2, r6
 800c234:	f00a fd17 	bl	8016c66 <memcpy>
 800c238:	68a0      	ldr	r0, [r4, #8]
 800c23a:	4642      	mov	r2, r8
 800c23c:	19a9      	adds	r1, r5, r6
 800c23e:	f00a fd12 	bl	8016c66 <memcpy>
 800c242:	e7af      	b.n	800c1a4 <ucdr_serialize_int16_t+0x60>

0800c244 <ucdr_deserialize_int16_t>:
 800c244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c248:	460d      	mov	r5, r1
 800c24a:	2102      	movs	r1, #2
 800c24c:	4604      	mov	r4, r0
 800c24e:	f000 fb1d 	bl	800c88c <ucdr_buffer_alignment>
 800c252:	4601      	mov	r1, r0
 800c254:	4620      	mov	r0, r4
 800c256:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c25a:	f000 fb5b 	bl	800c914 <ucdr_advance_buffer>
 800c25e:	2102      	movs	r1, #2
 800c260:	4620      	mov	r0, r4
 800c262:	f000 fab3 	bl	800c7cc <ucdr_check_buffer_available_for>
 800c266:	bb60      	cbnz	r0, 800c2c2 <ucdr_deserialize_int16_t+0x7e>
 800c268:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c26c:	42be      	cmp	r6, r7
 800c26e:	d923      	bls.n	800c2b8 <ucdr_deserialize_int16_t+0x74>
 800c270:	6923      	ldr	r3, [r4, #16]
 800c272:	60a6      	str	r6, [r4, #8]
 800c274:	1bf6      	subs	r6, r6, r7
 800c276:	4433      	add	r3, r6
 800c278:	f1c6 0902 	rsb	r9, r6, #2
 800c27c:	6123      	str	r3, [r4, #16]
 800c27e:	4649      	mov	r1, r9
 800c280:	4620      	mov	r0, r4
 800c282:	f000 faaf 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800c286:	2800      	cmp	r0, #0
 800c288:	d034      	beq.n	800c2f4 <ucdr_deserialize_int16_t+0xb0>
 800c28a:	7d23      	ldrb	r3, [r4, #20]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d042      	beq.n	800c316 <ucdr_deserialize_int16_t+0xd2>
 800c290:	787b      	ldrb	r3, [r7, #1]
 800c292:	702b      	strb	r3, [r5, #0]
 800c294:	2e00      	cmp	r6, #0
 800c296:	d03a      	beq.n	800c30e <ucdr_deserialize_int16_t+0xca>
 800c298:	783b      	ldrb	r3, [r7, #0]
 800c29a:	706b      	strb	r3, [r5, #1]
 800c29c:	6923      	ldr	r3, [r4, #16]
 800c29e:	68a2      	ldr	r2, [r4, #8]
 800c2a0:	7da0      	ldrb	r0, [r4, #22]
 800c2a2:	2102      	movs	r1, #2
 800c2a4:	3302      	adds	r3, #2
 800c2a6:	444a      	add	r2, r9
 800c2a8:	1b9b      	subs	r3, r3, r6
 800c2aa:	7561      	strb	r1, [r4, #21]
 800c2ac:	60a2      	str	r2, [r4, #8]
 800c2ae:	6123      	str	r3, [r4, #16]
 800c2b0:	f080 0001 	eor.w	r0, r0, #1
 800c2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2b8:	2102      	movs	r1, #2
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	f000 fa92 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800c2c0:	b180      	cbz	r0, 800c2e4 <ucdr_deserialize_int16_t+0xa0>
 800c2c2:	7d23      	ldrb	r3, [r4, #20]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	68a3      	ldr	r3, [r4, #8]
 800c2c8:	d011      	beq.n	800c2ee <ucdr_deserialize_int16_t+0xaa>
 800c2ca:	785b      	ldrb	r3, [r3, #1]
 800c2cc:	702b      	strb	r3, [r5, #0]
 800c2ce:	68a3      	ldr	r3, [r4, #8]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	706b      	strb	r3, [r5, #1]
 800c2d4:	68a2      	ldr	r2, [r4, #8]
 800c2d6:	6923      	ldr	r3, [r4, #16]
 800c2d8:	3202      	adds	r2, #2
 800c2da:	3302      	adds	r3, #2
 800c2dc:	2102      	movs	r1, #2
 800c2de:	60a2      	str	r2, [r4, #8]
 800c2e0:	6123      	str	r3, [r4, #16]
 800c2e2:	7561      	strb	r1, [r4, #21]
 800c2e4:	7da0      	ldrb	r0, [r4, #22]
 800c2e6:	f080 0001 	eor.w	r0, r0, #1
 800c2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ee:	881b      	ldrh	r3, [r3, #0]
 800c2f0:	802b      	strh	r3, [r5, #0]
 800c2f2:	e7ef      	b.n	800c2d4 <ucdr_deserialize_int16_t+0x90>
 800c2f4:	68a2      	ldr	r2, [r4, #8]
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	7da0      	ldrb	r0, [r4, #22]
 800c2fa:	f884 8015 	strb.w	r8, [r4, #21]
 800c2fe:	1b92      	subs	r2, r2, r6
 800c300:	1b9b      	subs	r3, r3, r6
 800c302:	60a2      	str	r2, [r4, #8]
 800c304:	6123      	str	r3, [r4, #16]
 800c306:	f080 0001 	eor.w	r0, r0, #1
 800c30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c30e:	68a3      	ldr	r3, [r4, #8]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	706b      	strb	r3, [r5, #1]
 800c314:	e7c2      	b.n	800c29c <ucdr_deserialize_int16_t+0x58>
 800c316:	4639      	mov	r1, r7
 800c318:	4632      	mov	r2, r6
 800c31a:	4628      	mov	r0, r5
 800c31c:	f00a fca3 	bl	8016c66 <memcpy>
 800c320:	68a1      	ldr	r1, [r4, #8]
 800c322:	464a      	mov	r2, r9
 800c324:	19a8      	adds	r0, r5, r6
 800c326:	f00a fc9e 	bl	8016c66 <memcpy>
 800c32a:	e7b7      	b.n	800c29c <ucdr_deserialize_int16_t+0x58>

0800c32c <ucdr_serialize_int32_t>:
 800c32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c330:	b082      	sub	sp, #8
 800c332:	4604      	mov	r4, r0
 800c334:	9101      	str	r1, [sp, #4]
 800c336:	2104      	movs	r1, #4
 800c338:	f000 faa8 	bl	800c88c <ucdr_buffer_alignment>
 800c33c:	4601      	mov	r1, r0
 800c33e:	4620      	mov	r0, r4
 800c340:	7d67      	ldrb	r7, [r4, #21]
 800c342:	f000 fae7 	bl	800c914 <ucdr_advance_buffer>
 800c346:	2104      	movs	r1, #4
 800c348:	4620      	mov	r0, r4
 800c34a:	f000 fa3f 	bl	800c7cc <ucdr_check_buffer_available_for>
 800c34e:	2800      	cmp	r0, #0
 800c350:	d139      	bne.n	800c3c6 <ucdr_serialize_int32_t+0x9a>
 800c352:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c356:	42ab      	cmp	r3, r5
 800c358:	d930      	bls.n	800c3bc <ucdr_serialize_int32_t+0x90>
 800c35a:	1b5e      	subs	r6, r3, r5
 800c35c:	60a3      	str	r3, [r4, #8]
 800c35e:	6923      	ldr	r3, [r4, #16]
 800c360:	f1c6 0804 	rsb	r8, r6, #4
 800c364:	4433      	add	r3, r6
 800c366:	6123      	str	r3, [r4, #16]
 800c368:	4641      	mov	r1, r8
 800c36a:	4620      	mov	r0, r4
 800c36c:	f000 fa3a 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800c370:	2800      	cmp	r0, #0
 800c372:	d04c      	beq.n	800c40e <ucdr_serialize_int32_t+0xe2>
 800c374:	7d23      	ldrb	r3, [r4, #20]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d063      	beq.n	800c442 <ucdr_serialize_int32_t+0x116>
 800c37a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c37e:	702b      	strb	r3, [r5, #0]
 800c380:	2e00      	cmp	r6, #0
 800c382:	d051      	beq.n	800c428 <ucdr_serialize_int32_t+0xfc>
 800c384:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c388:	706b      	strb	r3, [r5, #1]
 800c38a:	2e01      	cmp	r6, #1
 800c38c:	d050      	beq.n	800c430 <ucdr_serialize_int32_t+0x104>
 800c38e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c392:	70ab      	strb	r3, [r5, #2]
 800c394:	2e02      	cmp	r6, #2
 800c396:	d04f      	beq.n	800c438 <ucdr_serialize_int32_t+0x10c>
 800c398:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c39c:	70eb      	strb	r3, [r5, #3]
 800c39e:	6923      	ldr	r3, [r4, #16]
 800c3a0:	68a2      	ldr	r2, [r4, #8]
 800c3a2:	7da0      	ldrb	r0, [r4, #22]
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	1b9e      	subs	r6, r3, r6
 800c3a8:	4442      	add	r2, r8
 800c3aa:	2304      	movs	r3, #4
 800c3ac:	f080 0001 	eor.w	r0, r0, #1
 800c3b0:	60a2      	str	r2, [r4, #8]
 800c3b2:	6126      	str	r6, [r4, #16]
 800c3b4:	7563      	strb	r3, [r4, #21]
 800c3b6:	b002      	add	sp, #8
 800c3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3bc:	2104      	movs	r1, #4
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f000 fa10 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800c3c4:	b1d0      	cbz	r0, 800c3fc <ucdr_serialize_int32_t+0xd0>
 800c3c6:	7d23      	ldrb	r3, [r4, #20]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	68a3      	ldr	r3, [r4, #8]
 800c3cc:	d01c      	beq.n	800c408 <ucdr_serialize_int32_t+0xdc>
 800c3ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c3d2:	701a      	strb	r2, [r3, #0]
 800c3d4:	68a3      	ldr	r3, [r4, #8]
 800c3d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c3da:	705a      	strb	r2, [r3, #1]
 800c3dc:	68a3      	ldr	r3, [r4, #8]
 800c3de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c3e2:	709a      	strb	r2, [r3, #2]
 800c3e4:	68a3      	ldr	r3, [r4, #8]
 800c3e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c3ea:	70da      	strb	r2, [r3, #3]
 800c3ec:	68a2      	ldr	r2, [r4, #8]
 800c3ee:	6923      	ldr	r3, [r4, #16]
 800c3f0:	3204      	adds	r2, #4
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	2104      	movs	r1, #4
 800c3f6:	60a2      	str	r2, [r4, #8]
 800c3f8:	6123      	str	r3, [r4, #16]
 800c3fa:	7561      	strb	r1, [r4, #21]
 800c3fc:	7da0      	ldrb	r0, [r4, #22]
 800c3fe:	f080 0001 	eor.w	r0, r0, #1
 800c402:	b002      	add	sp, #8
 800c404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c408:	9a01      	ldr	r2, [sp, #4]
 800c40a:	601a      	str	r2, [r3, #0]
 800c40c:	e7ee      	b.n	800c3ec <ucdr_serialize_int32_t+0xc0>
 800c40e:	68a2      	ldr	r2, [r4, #8]
 800c410:	6923      	ldr	r3, [r4, #16]
 800c412:	7da0      	ldrb	r0, [r4, #22]
 800c414:	7567      	strb	r7, [r4, #21]
 800c416:	1b92      	subs	r2, r2, r6
 800c418:	1b9b      	subs	r3, r3, r6
 800c41a:	f080 0001 	eor.w	r0, r0, #1
 800c41e:	60a2      	str	r2, [r4, #8]
 800c420:	6123      	str	r3, [r4, #16]
 800c422:	b002      	add	sp, #8
 800c424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c428:	68a3      	ldr	r3, [r4, #8]
 800c42a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c42e:	701a      	strb	r2, [r3, #0]
 800c430:	68a3      	ldr	r3, [r4, #8]
 800c432:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c436:	701a      	strb	r2, [r3, #0]
 800c438:	68a3      	ldr	r3, [r4, #8]
 800c43a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c43e:	701a      	strb	r2, [r3, #0]
 800c440:	e7ad      	b.n	800c39e <ucdr_serialize_int32_t+0x72>
 800c442:	4628      	mov	r0, r5
 800c444:	ad01      	add	r5, sp, #4
 800c446:	4629      	mov	r1, r5
 800c448:	4632      	mov	r2, r6
 800c44a:	f00a fc0c 	bl	8016c66 <memcpy>
 800c44e:	68a0      	ldr	r0, [r4, #8]
 800c450:	4642      	mov	r2, r8
 800c452:	19a9      	adds	r1, r5, r6
 800c454:	f00a fc07 	bl	8016c66 <memcpy>
 800c458:	e7a1      	b.n	800c39e <ucdr_serialize_int32_t+0x72>
 800c45a:	bf00      	nop

0800c45c <ucdr_deserialize_int32_t>:
 800c45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c460:	460d      	mov	r5, r1
 800c462:	2104      	movs	r1, #4
 800c464:	4604      	mov	r4, r0
 800c466:	f000 fa11 	bl	800c88c <ucdr_buffer_alignment>
 800c46a:	4601      	mov	r1, r0
 800c46c:	4620      	mov	r0, r4
 800c46e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c472:	f000 fa4f 	bl	800c914 <ucdr_advance_buffer>
 800c476:	2104      	movs	r1, #4
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 f9a7 	bl	800c7cc <ucdr_check_buffer_available_for>
 800c47e:	2800      	cmp	r0, #0
 800c480:	d138      	bne.n	800c4f4 <ucdr_deserialize_int32_t+0x98>
 800c482:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c486:	42b7      	cmp	r7, r6
 800c488:	d92f      	bls.n	800c4ea <ucdr_deserialize_int32_t+0x8e>
 800c48a:	6923      	ldr	r3, [r4, #16]
 800c48c:	60a7      	str	r7, [r4, #8]
 800c48e:	1bbf      	subs	r7, r7, r6
 800c490:	443b      	add	r3, r7
 800c492:	f1c7 0904 	rsb	r9, r7, #4
 800c496:	6123      	str	r3, [r4, #16]
 800c498:	4649      	mov	r1, r9
 800c49a:	4620      	mov	r0, r4
 800c49c:	f000 f9a2 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d046      	beq.n	800c532 <ucdr_deserialize_int32_t+0xd6>
 800c4a4:	7d23      	ldrb	r3, [r4, #20]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d05c      	beq.n	800c564 <ucdr_deserialize_int32_t+0x108>
 800c4aa:	78f3      	ldrb	r3, [r6, #3]
 800c4ac:	702b      	strb	r3, [r5, #0]
 800c4ae:	2f00      	cmp	r7, #0
 800c4b0:	d04c      	beq.n	800c54c <ucdr_deserialize_int32_t+0xf0>
 800c4b2:	78b3      	ldrb	r3, [r6, #2]
 800c4b4:	706b      	strb	r3, [r5, #1]
 800c4b6:	2f01      	cmp	r7, #1
 800c4b8:	f105 0302 	add.w	r3, r5, #2
 800c4bc:	d04a      	beq.n	800c554 <ucdr_deserialize_int32_t+0xf8>
 800c4be:	7873      	ldrb	r3, [r6, #1]
 800c4c0:	70ab      	strb	r3, [r5, #2]
 800c4c2:	2f02      	cmp	r7, #2
 800c4c4:	f105 0303 	add.w	r3, r5, #3
 800c4c8:	d048      	beq.n	800c55c <ucdr_deserialize_int32_t+0x100>
 800c4ca:	7833      	ldrb	r3, [r6, #0]
 800c4cc:	70eb      	strb	r3, [r5, #3]
 800c4ce:	6923      	ldr	r3, [r4, #16]
 800c4d0:	68a2      	ldr	r2, [r4, #8]
 800c4d2:	7da0      	ldrb	r0, [r4, #22]
 800c4d4:	2104      	movs	r1, #4
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	444a      	add	r2, r9
 800c4da:	1bdb      	subs	r3, r3, r7
 800c4dc:	7561      	strb	r1, [r4, #21]
 800c4de:	60a2      	str	r2, [r4, #8]
 800c4e0:	6123      	str	r3, [r4, #16]
 800c4e2:	f080 0001 	eor.w	r0, r0, #1
 800c4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ea:	2104      	movs	r1, #4
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	f000 f979 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800c4f2:	b1b0      	cbz	r0, 800c522 <ucdr_deserialize_int32_t+0xc6>
 800c4f4:	7d23      	ldrb	r3, [r4, #20]
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	68a3      	ldr	r3, [r4, #8]
 800c4fa:	d017      	beq.n	800c52c <ucdr_deserialize_int32_t+0xd0>
 800c4fc:	78db      	ldrb	r3, [r3, #3]
 800c4fe:	702b      	strb	r3, [r5, #0]
 800c500:	68a3      	ldr	r3, [r4, #8]
 800c502:	789b      	ldrb	r3, [r3, #2]
 800c504:	706b      	strb	r3, [r5, #1]
 800c506:	68a3      	ldr	r3, [r4, #8]
 800c508:	785b      	ldrb	r3, [r3, #1]
 800c50a:	70ab      	strb	r3, [r5, #2]
 800c50c:	68a3      	ldr	r3, [r4, #8]
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	70eb      	strb	r3, [r5, #3]
 800c512:	68a2      	ldr	r2, [r4, #8]
 800c514:	6923      	ldr	r3, [r4, #16]
 800c516:	3204      	adds	r2, #4
 800c518:	3304      	adds	r3, #4
 800c51a:	2104      	movs	r1, #4
 800c51c:	60a2      	str	r2, [r4, #8]
 800c51e:	6123      	str	r3, [r4, #16]
 800c520:	7561      	strb	r1, [r4, #21]
 800c522:	7da0      	ldrb	r0, [r4, #22]
 800c524:	f080 0001 	eor.w	r0, r0, #1
 800c528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	602b      	str	r3, [r5, #0]
 800c530:	e7ef      	b.n	800c512 <ucdr_deserialize_int32_t+0xb6>
 800c532:	68a2      	ldr	r2, [r4, #8]
 800c534:	6923      	ldr	r3, [r4, #16]
 800c536:	7da0      	ldrb	r0, [r4, #22]
 800c538:	f884 8015 	strb.w	r8, [r4, #21]
 800c53c:	1bd2      	subs	r2, r2, r7
 800c53e:	1bdb      	subs	r3, r3, r7
 800c540:	60a2      	str	r2, [r4, #8]
 800c542:	6123      	str	r3, [r4, #16]
 800c544:	f080 0001 	eor.w	r0, r0, #1
 800c548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c54c:	68a3      	ldr	r3, [r4, #8]
 800c54e:	789b      	ldrb	r3, [r3, #2]
 800c550:	706b      	strb	r3, [r5, #1]
 800c552:	1cab      	adds	r3, r5, #2
 800c554:	68a2      	ldr	r2, [r4, #8]
 800c556:	7852      	ldrb	r2, [r2, #1]
 800c558:	f803 2b01 	strb.w	r2, [r3], #1
 800c55c:	68a2      	ldr	r2, [r4, #8]
 800c55e:	7812      	ldrb	r2, [r2, #0]
 800c560:	701a      	strb	r2, [r3, #0]
 800c562:	e7b4      	b.n	800c4ce <ucdr_deserialize_int32_t+0x72>
 800c564:	4631      	mov	r1, r6
 800c566:	463a      	mov	r2, r7
 800c568:	4628      	mov	r0, r5
 800c56a:	f00a fb7c 	bl	8016c66 <memcpy>
 800c56e:	68a1      	ldr	r1, [r4, #8]
 800c570:	464a      	mov	r2, r9
 800c572:	19e8      	adds	r0, r5, r7
 800c574:	f00a fb77 	bl	8016c66 <memcpy>
 800c578:	e7a9      	b.n	800c4ce <ucdr_deserialize_int32_t+0x72>
 800c57a:	bf00      	nop

0800c57c <ucdr_serialize_float>:
 800c57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c580:	2104      	movs	r1, #4
 800c582:	b082      	sub	sp, #8
 800c584:	4604      	mov	r4, r0
 800c586:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c58a:	f000 f97f 	bl	800c88c <ucdr_buffer_alignment>
 800c58e:	4601      	mov	r1, r0
 800c590:	4620      	mov	r0, r4
 800c592:	7d67      	ldrb	r7, [r4, #21]
 800c594:	f000 f9be 	bl	800c914 <ucdr_advance_buffer>
 800c598:	2104      	movs	r1, #4
 800c59a:	4620      	mov	r0, r4
 800c59c:	f000 f916 	bl	800c7cc <ucdr_check_buffer_available_for>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d139      	bne.n	800c618 <ucdr_serialize_float+0x9c>
 800c5a4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c5a8:	42ab      	cmp	r3, r5
 800c5aa:	d930      	bls.n	800c60e <ucdr_serialize_float+0x92>
 800c5ac:	1b5e      	subs	r6, r3, r5
 800c5ae:	60a3      	str	r3, [r4, #8]
 800c5b0:	6923      	ldr	r3, [r4, #16]
 800c5b2:	f1c6 0804 	rsb	r8, r6, #4
 800c5b6:	4433      	add	r3, r6
 800c5b8:	6123      	str	r3, [r4, #16]
 800c5ba:	4641      	mov	r1, r8
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f000 f911 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d04c      	beq.n	800c660 <ucdr_serialize_float+0xe4>
 800c5c6:	7d23      	ldrb	r3, [r4, #20]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d063      	beq.n	800c694 <ucdr_serialize_float+0x118>
 800c5cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c5d0:	702b      	strb	r3, [r5, #0]
 800c5d2:	2e00      	cmp	r6, #0
 800c5d4:	d051      	beq.n	800c67a <ucdr_serialize_float+0xfe>
 800c5d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c5da:	706b      	strb	r3, [r5, #1]
 800c5dc:	2e01      	cmp	r6, #1
 800c5de:	d050      	beq.n	800c682 <ucdr_serialize_float+0x106>
 800c5e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c5e4:	70ab      	strb	r3, [r5, #2]
 800c5e6:	2e02      	cmp	r6, #2
 800c5e8:	d04f      	beq.n	800c68a <ucdr_serialize_float+0x10e>
 800c5ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c5ee:	70eb      	strb	r3, [r5, #3]
 800c5f0:	6923      	ldr	r3, [r4, #16]
 800c5f2:	68a2      	ldr	r2, [r4, #8]
 800c5f4:	7da0      	ldrb	r0, [r4, #22]
 800c5f6:	3304      	adds	r3, #4
 800c5f8:	1b9e      	subs	r6, r3, r6
 800c5fa:	4442      	add	r2, r8
 800c5fc:	2304      	movs	r3, #4
 800c5fe:	f080 0001 	eor.w	r0, r0, #1
 800c602:	60a2      	str	r2, [r4, #8]
 800c604:	6126      	str	r6, [r4, #16]
 800c606:	7563      	strb	r3, [r4, #21]
 800c608:	b002      	add	sp, #8
 800c60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c60e:	2104      	movs	r1, #4
 800c610:	4620      	mov	r0, r4
 800c612:	f000 f8e7 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800c616:	b1d0      	cbz	r0, 800c64e <ucdr_serialize_float+0xd2>
 800c618:	7d23      	ldrb	r3, [r4, #20]
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	68a3      	ldr	r3, [r4, #8]
 800c61e:	d01c      	beq.n	800c65a <ucdr_serialize_float+0xde>
 800c620:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c624:	701a      	strb	r2, [r3, #0]
 800c626:	68a3      	ldr	r3, [r4, #8]
 800c628:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c62c:	705a      	strb	r2, [r3, #1]
 800c62e:	68a3      	ldr	r3, [r4, #8]
 800c630:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c634:	709a      	strb	r2, [r3, #2]
 800c636:	68a3      	ldr	r3, [r4, #8]
 800c638:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c63c:	70da      	strb	r2, [r3, #3]
 800c63e:	68a2      	ldr	r2, [r4, #8]
 800c640:	6923      	ldr	r3, [r4, #16]
 800c642:	3204      	adds	r2, #4
 800c644:	3304      	adds	r3, #4
 800c646:	2104      	movs	r1, #4
 800c648:	60a2      	str	r2, [r4, #8]
 800c64a:	6123      	str	r3, [r4, #16]
 800c64c:	7561      	strb	r1, [r4, #21]
 800c64e:	7da0      	ldrb	r0, [r4, #22]
 800c650:	f080 0001 	eor.w	r0, r0, #1
 800c654:	b002      	add	sp, #8
 800c656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c65a:	9a01      	ldr	r2, [sp, #4]
 800c65c:	601a      	str	r2, [r3, #0]
 800c65e:	e7ee      	b.n	800c63e <ucdr_serialize_float+0xc2>
 800c660:	68a2      	ldr	r2, [r4, #8]
 800c662:	6923      	ldr	r3, [r4, #16]
 800c664:	7da0      	ldrb	r0, [r4, #22]
 800c666:	7567      	strb	r7, [r4, #21]
 800c668:	1b92      	subs	r2, r2, r6
 800c66a:	1b9b      	subs	r3, r3, r6
 800c66c:	f080 0001 	eor.w	r0, r0, #1
 800c670:	60a2      	str	r2, [r4, #8]
 800c672:	6123      	str	r3, [r4, #16]
 800c674:	b002      	add	sp, #8
 800c676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c67a:	68a3      	ldr	r3, [r4, #8]
 800c67c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c680:	701a      	strb	r2, [r3, #0]
 800c682:	68a3      	ldr	r3, [r4, #8]
 800c684:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c688:	701a      	strb	r2, [r3, #0]
 800c68a:	68a3      	ldr	r3, [r4, #8]
 800c68c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c690:	701a      	strb	r2, [r3, #0]
 800c692:	e7ad      	b.n	800c5f0 <ucdr_serialize_float+0x74>
 800c694:	4628      	mov	r0, r5
 800c696:	ad01      	add	r5, sp, #4
 800c698:	4629      	mov	r1, r5
 800c69a:	4632      	mov	r2, r6
 800c69c:	f00a fae3 	bl	8016c66 <memcpy>
 800c6a0:	68a0      	ldr	r0, [r4, #8]
 800c6a2:	4642      	mov	r2, r8
 800c6a4:	19a9      	adds	r1, r5, r6
 800c6a6:	f00a fade 	bl	8016c66 <memcpy>
 800c6aa:	e7a1      	b.n	800c5f0 <ucdr_serialize_float+0x74>

0800c6ac <ucdr_deserialize_float>:
 800c6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	2104      	movs	r1, #4
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	f000 f8e9 	bl	800c88c <ucdr_buffer_alignment>
 800c6ba:	4601      	mov	r1, r0
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c6c2:	f000 f927 	bl	800c914 <ucdr_advance_buffer>
 800c6c6:	2104      	movs	r1, #4
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f000 f87f 	bl	800c7cc <ucdr_check_buffer_available_for>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d138      	bne.n	800c744 <ucdr_deserialize_float+0x98>
 800c6d2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c6d6:	42b7      	cmp	r7, r6
 800c6d8:	d92f      	bls.n	800c73a <ucdr_deserialize_float+0x8e>
 800c6da:	6923      	ldr	r3, [r4, #16]
 800c6dc:	60a7      	str	r7, [r4, #8]
 800c6de:	1bbf      	subs	r7, r7, r6
 800c6e0:	443b      	add	r3, r7
 800c6e2:	f1c7 0904 	rsb	r9, r7, #4
 800c6e6:	6123      	str	r3, [r4, #16]
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	f000 f87a 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d046      	beq.n	800c782 <ucdr_deserialize_float+0xd6>
 800c6f4:	7d23      	ldrb	r3, [r4, #20]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d05c      	beq.n	800c7b4 <ucdr_deserialize_float+0x108>
 800c6fa:	78f3      	ldrb	r3, [r6, #3]
 800c6fc:	702b      	strb	r3, [r5, #0]
 800c6fe:	2f00      	cmp	r7, #0
 800c700:	d04c      	beq.n	800c79c <ucdr_deserialize_float+0xf0>
 800c702:	78b3      	ldrb	r3, [r6, #2]
 800c704:	706b      	strb	r3, [r5, #1]
 800c706:	2f01      	cmp	r7, #1
 800c708:	f105 0302 	add.w	r3, r5, #2
 800c70c:	d04a      	beq.n	800c7a4 <ucdr_deserialize_float+0xf8>
 800c70e:	7873      	ldrb	r3, [r6, #1]
 800c710:	70ab      	strb	r3, [r5, #2]
 800c712:	2f02      	cmp	r7, #2
 800c714:	f105 0303 	add.w	r3, r5, #3
 800c718:	d048      	beq.n	800c7ac <ucdr_deserialize_float+0x100>
 800c71a:	7833      	ldrb	r3, [r6, #0]
 800c71c:	70eb      	strb	r3, [r5, #3]
 800c71e:	6923      	ldr	r3, [r4, #16]
 800c720:	68a2      	ldr	r2, [r4, #8]
 800c722:	7da0      	ldrb	r0, [r4, #22]
 800c724:	2104      	movs	r1, #4
 800c726:	3304      	adds	r3, #4
 800c728:	444a      	add	r2, r9
 800c72a:	1bdb      	subs	r3, r3, r7
 800c72c:	7561      	strb	r1, [r4, #21]
 800c72e:	60a2      	str	r2, [r4, #8]
 800c730:	6123      	str	r3, [r4, #16]
 800c732:	f080 0001 	eor.w	r0, r0, #1
 800c736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c73a:	2104      	movs	r1, #4
 800c73c:	4620      	mov	r0, r4
 800c73e:	f000 f851 	bl	800c7e4 <ucdr_check_final_buffer_behavior>
 800c742:	b1b0      	cbz	r0, 800c772 <ucdr_deserialize_float+0xc6>
 800c744:	7d23      	ldrb	r3, [r4, #20]
 800c746:	2b01      	cmp	r3, #1
 800c748:	68a3      	ldr	r3, [r4, #8]
 800c74a:	d017      	beq.n	800c77c <ucdr_deserialize_float+0xd0>
 800c74c:	78db      	ldrb	r3, [r3, #3]
 800c74e:	702b      	strb	r3, [r5, #0]
 800c750:	68a3      	ldr	r3, [r4, #8]
 800c752:	789b      	ldrb	r3, [r3, #2]
 800c754:	706b      	strb	r3, [r5, #1]
 800c756:	68a3      	ldr	r3, [r4, #8]
 800c758:	785b      	ldrb	r3, [r3, #1]
 800c75a:	70ab      	strb	r3, [r5, #2]
 800c75c:	68a3      	ldr	r3, [r4, #8]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	70eb      	strb	r3, [r5, #3]
 800c762:	68a2      	ldr	r2, [r4, #8]
 800c764:	6923      	ldr	r3, [r4, #16]
 800c766:	3204      	adds	r2, #4
 800c768:	3304      	adds	r3, #4
 800c76a:	2104      	movs	r1, #4
 800c76c:	60a2      	str	r2, [r4, #8]
 800c76e:	6123      	str	r3, [r4, #16]
 800c770:	7561      	strb	r1, [r4, #21]
 800c772:	7da0      	ldrb	r0, [r4, #22]
 800c774:	f080 0001 	eor.w	r0, r0, #1
 800c778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	602b      	str	r3, [r5, #0]
 800c780:	e7ef      	b.n	800c762 <ucdr_deserialize_float+0xb6>
 800c782:	68a2      	ldr	r2, [r4, #8]
 800c784:	6923      	ldr	r3, [r4, #16]
 800c786:	7da0      	ldrb	r0, [r4, #22]
 800c788:	f884 8015 	strb.w	r8, [r4, #21]
 800c78c:	1bd2      	subs	r2, r2, r7
 800c78e:	1bdb      	subs	r3, r3, r7
 800c790:	60a2      	str	r2, [r4, #8]
 800c792:	6123      	str	r3, [r4, #16]
 800c794:	f080 0001 	eor.w	r0, r0, #1
 800c798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c79c:	68a3      	ldr	r3, [r4, #8]
 800c79e:	789b      	ldrb	r3, [r3, #2]
 800c7a0:	706b      	strb	r3, [r5, #1]
 800c7a2:	1cab      	adds	r3, r5, #2
 800c7a4:	68a2      	ldr	r2, [r4, #8]
 800c7a6:	7852      	ldrb	r2, [r2, #1]
 800c7a8:	f803 2b01 	strb.w	r2, [r3], #1
 800c7ac:	68a2      	ldr	r2, [r4, #8]
 800c7ae:	7812      	ldrb	r2, [r2, #0]
 800c7b0:	701a      	strb	r2, [r3, #0]
 800c7b2:	e7b4      	b.n	800c71e <ucdr_deserialize_float+0x72>
 800c7b4:	4631      	mov	r1, r6
 800c7b6:	463a      	mov	r2, r7
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	f00a fa54 	bl	8016c66 <memcpy>
 800c7be:	68a1      	ldr	r1, [r4, #8]
 800c7c0:	464a      	mov	r2, r9
 800c7c2:	19e8      	adds	r0, r5, r7
 800c7c4:	f00a fa4f 	bl	8016c66 <memcpy>
 800c7c8:	e7a9      	b.n	800c71e <ucdr_deserialize_float+0x72>
 800c7ca:	bf00      	nop

0800c7cc <ucdr_check_buffer_available_for>:
 800c7cc:	7d83      	ldrb	r3, [r0, #22]
 800c7ce:	b93b      	cbnz	r3, 800c7e0 <ucdr_check_buffer_available_for+0x14>
 800c7d0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c7d4:	4419      	add	r1, r3
 800c7d6:	4288      	cmp	r0, r1
 800c7d8:	bf34      	ite	cc
 800c7da:	2000      	movcc	r0, #0
 800c7dc:	2001      	movcs	r0, #1
 800c7de:	4770      	bx	lr
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	4770      	bx	lr

0800c7e4 <ucdr_check_final_buffer_behavior>:
 800c7e4:	7d83      	ldrb	r3, [r0, #22]
 800c7e6:	b943      	cbnz	r3, 800c7fa <ucdr_check_final_buffer_behavior+0x16>
 800c7e8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c7ec:	4291      	cmp	r1, r2
 800c7ee:	b510      	push	{r4, lr}
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	d205      	bcs.n	800c800 <ucdr_check_final_buffer_behavior+0x1c>
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	bd10      	pop	{r4, pc}
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	4770      	bx	lr
 800c800:	6982      	ldr	r2, [r0, #24]
 800c802:	b13a      	cbz	r2, 800c814 <ucdr_check_final_buffer_behavior+0x30>
 800c804:	69c1      	ldr	r1, [r0, #28]
 800c806:	4790      	blx	r2
 800c808:	f080 0301 	eor.w	r3, r0, #1
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	75a0      	strb	r0, [r4, #22]
 800c810:	4618      	mov	r0, r3
 800c812:	bd10      	pop	{r4, pc}
 800c814:	2001      	movs	r0, #1
 800c816:	75a0      	strb	r0, [r4, #22]
 800c818:	e7fa      	b.n	800c810 <ucdr_check_final_buffer_behavior+0x2c>
 800c81a:	bf00      	nop

0800c81c <ucdr_set_on_full_buffer_callback>:
 800c81c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop

0800c824 <ucdr_init_buffer_origin_offset_endian>:
 800c824:	b410      	push	{r4}
 800c826:	9c01      	ldr	r4, [sp, #4]
 800c828:	6001      	str	r1, [r0, #0]
 800c82a:	440a      	add	r2, r1
 800c82c:	6042      	str	r2, [r0, #4]
 800c82e:	190a      	adds	r2, r1, r4
 800c830:	441c      	add	r4, r3
 800c832:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c836:	6082      	str	r2, [r0, #8]
 800c838:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c83c:	7503      	strb	r3, [r0, #20]
 800c83e:	2200      	movs	r2, #0
 800c840:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c844:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c848:	7542      	strb	r2, [r0, #21]
 800c84a:	7582      	strb	r2, [r0, #22]
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop

0800c850 <ucdr_init_buffer_origin_offset>:
 800c850:	b510      	push	{r4, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	9c04      	ldr	r4, [sp, #16]
 800c856:	9400      	str	r4, [sp, #0]
 800c858:	2401      	movs	r4, #1
 800c85a:	9401      	str	r4, [sp, #4]
 800c85c:	f7ff ffe2 	bl	800c824 <ucdr_init_buffer_origin_offset_endian>
 800c860:	b002      	add	sp, #8
 800c862:	bd10      	pop	{r4, pc}

0800c864 <ucdr_init_buffer_origin>:
 800c864:	b510      	push	{r4, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	2400      	movs	r4, #0
 800c86a:	9400      	str	r4, [sp, #0]
 800c86c:	f7ff fff0 	bl	800c850 <ucdr_init_buffer_origin_offset>
 800c870:	b002      	add	sp, #8
 800c872:	bd10      	pop	{r4, pc}

0800c874 <ucdr_init_buffer>:
 800c874:	2300      	movs	r3, #0
 800c876:	f7ff bff5 	b.w	800c864 <ucdr_init_buffer_origin>
 800c87a:	bf00      	nop

0800c87c <ucdr_alignment>:
 800c87c:	fbb0 f3f1 	udiv	r3, r0, r1
 800c880:	fb03 0011 	mls	r0, r3, r1, r0
 800c884:	1a08      	subs	r0, r1, r0
 800c886:	3901      	subs	r1, #1
 800c888:	4008      	ands	r0, r1
 800c88a:	4770      	bx	lr

0800c88c <ucdr_buffer_alignment>:
 800c88c:	7d43      	ldrb	r3, [r0, #21]
 800c88e:	428b      	cmp	r3, r1
 800c890:	d208      	bcs.n	800c8a4 <ucdr_buffer_alignment+0x18>
 800c892:	6900      	ldr	r0, [r0, #16]
 800c894:	fbb0 f3f1 	udiv	r3, r0, r1
 800c898:	fb01 0013 	mls	r0, r1, r3, r0
 800c89c:	1a08      	subs	r0, r1, r0
 800c89e:	3901      	subs	r1, #1
 800c8a0:	4008      	ands	r0, r1
 800c8a2:	4770      	bx	lr
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	4770      	bx	lr

0800c8a8 <ucdr_align_to>:
 800c8a8:	b538      	push	{r3, r4, r5, lr}
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	460d      	mov	r5, r1
 800c8ae:	f7ff ffed 	bl	800c88c <ucdr_buffer_alignment>
 800c8b2:	68a3      	ldr	r3, [r4, #8]
 800c8b4:	6921      	ldr	r1, [r4, #16]
 800c8b6:	7565      	strb	r5, [r4, #21]
 800c8b8:	181a      	adds	r2, r3, r0
 800c8ba:	6863      	ldr	r3, [r4, #4]
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	4408      	add	r0, r1
 800c8c0:	bf28      	it	cs
 800c8c2:	4613      	movcs	r3, r2
 800c8c4:	6120      	str	r0, [r4, #16]
 800c8c6:	60a3      	str	r3, [r4, #8]
 800c8c8:	bd38      	pop	{r3, r4, r5, pc}
 800c8ca:	bf00      	nop

0800c8cc <ucdr_buffer_length>:
 800c8cc:	6882      	ldr	r2, [r0, #8]
 800c8ce:	6800      	ldr	r0, [r0, #0]
 800c8d0:	1a10      	subs	r0, r2, r0
 800c8d2:	4770      	bx	lr

0800c8d4 <ucdr_buffer_remaining>:
 800c8d4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c8d8:	1a10      	subs	r0, r2, r0
 800c8da:	4770      	bx	lr

0800c8dc <ucdr_check_final_buffer_behavior_array>:
 800c8dc:	b538      	push	{r3, r4, r5, lr}
 800c8de:	7d83      	ldrb	r3, [r0, #22]
 800c8e0:	b963      	cbnz	r3, 800c8fc <ucdr_check_final_buffer_behavior_array+0x20>
 800c8e2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	460d      	mov	r5, r1
 800c8ec:	d308      	bcc.n	800c900 <ucdr_check_final_buffer_behavior_array+0x24>
 800c8ee:	b139      	cbz	r1, 800c900 <ucdr_check_final_buffer_behavior_array+0x24>
 800c8f0:	6983      	ldr	r3, [r0, #24]
 800c8f2:	b163      	cbz	r3, 800c90e <ucdr_check_final_buffer_behavior_array+0x32>
 800c8f4:	69c1      	ldr	r1, [r0, #28]
 800c8f6:	4798      	blx	r3
 800c8f8:	75a0      	strb	r0, [r4, #22]
 800c8fa:	b108      	cbz	r0, 800c900 <ucdr_check_final_buffer_behavior_array+0x24>
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	bd38      	pop	{r3, r4, r5, pc}
 800c900:	4620      	mov	r0, r4
 800c902:	f7ff ffe7 	bl	800c8d4 <ucdr_buffer_remaining>
 800c906:	42a8      	cmp	r0, r5
 800c908:	bf28      	it	cs
 800c90a:	4628      	movcs	r0, r5
 800c90c:	bd38      	pop	{r3, r4, r5, pc}
 800c90e:	2301      	movs	r3, #1
 800c910:	7583      	strb	r3, [r0, #22]
 800c912:	e7f3      	b.n	800c8fc <ucdr_check_final_buffer_behavior_array+0x20>

0800c914 <ucdr_advance_buffer>:
 800c914:	b538      	push	{r3, r4, r5, lr}
 800c916:	4604      	mov	r4, r0
 800c918:	460d      	mov	r5, r1
 800c91a:	f7ff ff57 	bl	800c7cc <ucdr_check_buffer_available_for>
 800c91e:	b178      	cbz	r0, 800c940 <ucdr_advance_buffer+0x2c>
 800c920:	6923      	ldr	r3, [r4, #16]
 800c922:	68a2      	ldr	r2, [r4, #8]
 800c924:	442b      	add	r3, r5
 800c926:	6123      	str	r3, [r4, #16]
 800c928:	2301      	movs	r3, #1
 800c92a:	442a      	add	r2, r5
 800c92c:	7563      	strb	r3, [r4, #21]
 800c92e:	60a2      	str	r2, [r4, #8]
 800c930:	bd38      	pop	{r3, r4, r5, pc}
 800c932:	68a2      	ldr	r2, [r4, #8]
 800c934:	6923      	ldr	r3, [r4, #16]
 800c936:	4402      	add	r2, r0
 800c938:	4403      	add	r3, r0
 800c93a:	1a2d      	subs	r5, r5, r0
 800c93c:	60a2      	str	r2, [r4, #8]
 800c93e:	6123      	str	r3, [r4, #16]
 800c940:	4629      	mov	r1, r5
 800c942:	2201      	movs	r2, #1
 800c944:	4620      	mov	r0, r4
 800c946:	f7ff ffc9 	bl	800c8dc <ucdr_check_final_buffer_behavior_array>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	d1f1      	bne.n	800c932 <ucdr_advance_buffer+0x1e>
 800c94e:	2301      	movs	r3, #1
 800c950:	7563      	strb	r3, [r4, #21]
 800c952:	bd38      	pop	{r3, r4, r5, pc}

0800c954 <uxr_buffer_delete_entity>:
 800c954:	b510      	push	{r4, lr}
 800c956:	2300      	movs	r3, #0
 800c958:	b08e      	sub	sp, #56	; 0x38
 800c95a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c95e:	2303      	movs	r3, #3
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	2204      	movs	r2, #4
 800c964:	ab06      	add	r3, sp, #24
 800c966:	4604      	mov	r4, r0
 800c968:	9103      	str	r1, [sp, #12]
 800c96a:	f001 f953 	bl	800dc14 <uxr_prepare_stream_to_write_submessage>
 800c96e:	b918      	cbnz	r0, 800c978 <uxr_buffer_delete_entity+0x24>
 800c970:	4604      	mov	r4, r0
 800c972:	4620      	mov	r0, r4
 800c974:	b00e      	add	sp, #56	; 0x38
 800c976:	bd10      	pop	{r4, pc}
 800c978:	9902      	ldr	r1, [sp, #8]
 800c97a:	aa05      	add	r2, sp, #20
 800c97c:	4620      	mov	r0, r4
 800c97e:	f001 fa7f 	bl	800de80 <uxr_init_base_object_request>
 800c982:	a905      	add	r1, sp, #20
 800c984:	4604      	mov	r4, r0
 800c986:	a806      	add	r0, sp, #24
 800c988:	f002 fcd0 	bl	800f32c <uxr_serialize_DELETE_Payload>
 800c98c:	4620      	mov	r0, r4
 800c98e:	b00e      	add	sp, #56	; 0x38
 800c990:	bd10      	pop	{r4, pc}
 800c992:	bf00      	nop

0800c994 <uxr_common_create_entity>:
 800c994:	b510      	push	{r4, lr}
 800c996:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c99a:	b08c      	sub	sp, #48	; 0x30
 800c99c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c9a0:	f1bc 0f01 	cmp.w	ip, #1
 800c9a4:	bf0c      	ite	eq
 800c9a6:	f003 0201 	andeq.w	r2, r3, #1
 800c9aa:	2200      	movne	r2, #0
 800c9ac:	330e      	adds	r3, #14
 800c9ae:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800c9b2:	9101      	str	r1, [sp, #4]
 800c9b4:	441a      	add	r2, r3
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	9903      	ldr	r1, [sp, #12]
 800c9bc:	ab04      	add	r3, sp, #16
 800c9be:	b292      	uxth	r2, r2
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	f001 f927 	bl	800dc14 <uxr_prepare_stream_to_write_submessage>
 800c9c6:	b918      	cbnz	r0, 800c9d0 <uxr_common_create_entity+0x3c>
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	b00c      	add	sp, #48	; 0x30
 800c9ce:	bd10      	pop	{r4, pc}
 800c9d0:	9902      	ldr	r1, [sp, #8]
 800c9d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f001 fa53 	bl	800de80 <uxr_init_base_object_request>
 800c9da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c9dc:	4604      	mov	r4, r0
 800c9de:	a804      	add	r0, sp, #16
 800c9e0:	f002 fc00 	bl	800f1e4 <uxr_serialize_CREATE_Payload>
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	b00c      	add	sp, #48	; 0x30
 800c9e8:	bd10      	pop	{r4, pc}
 800c9ea:	bf00      	nop

0800c9ec <uxr_buffer_create_participant_bin>:
 800c9ec:	b570      	push	{r4, r5, r6, lr}
 800c9ee:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800c9f2:	ac11      	add	r4, sp, #68	; 0x44
 800c9f4:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800c9f8:	2303      	movs	r3, #3
 800c9fa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c9fe:	7223      	strb	r3, [r4, #8]
 800ca00:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800ca02:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800ca06:	2201      	movs	r2, #1
 800ca08:	2100      	movs	r1, #0
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	7122      	strb	r2, [r4, #4]
 800ca0e:	f88d 1014 	strb.w	r1, [sp, #20]
 800ca12:	b1cb      	cbz	r3, 800ca48 <uxr_buffer_create_participant_bin+0x5c>
 800ca14:	f88d 201c 	strb.w	r2, [sp, #28]
 800ca18:	9308      	str	r3, [sp, #32]
 800ca1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca1e:	a915      	add	r1, sp, #84	; 0x54
 800ca20:	a809      	add	r0, sp, #36	; 0x24
 800ca22:	f7ff ff27 	bl	800c874 <ucdr_init_buffer>
 800ca26:	a905      	add	r1, sp, #20
 800ca28:	a809      	add	r0, sp, #36	; 0x24
 800ca2a:	f001 ffbd 	bl	800e9a8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800ca2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca30:	9600      	str	r6, [sp, #0]
 800ca32:	9401      	str	r4, [sp, #4]
 800ca34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ca38:	60e3      	str	r3, [r4, #12]
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	f7ff ffa9 	bl	800c994 <uxr_common_create_entity>
 800ca42:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800ca46:	bd70      	pop	{r4, r5, r6, pc}
 800ca48:	f88d 301c 	strb.w	r3, [sp, #28]
 800ca4c:	e7e5      	b.n	800ca1a <uxr_buffer_create_participant_bin+0x2e>
 800ca4e:	bf00      	nop

0800ca50 <uxr_buffer_create_topic_bin>:
 800ca50:	b570      	push	{r4, r5, r6, lr}
 800ca52:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800ca56:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ca5a:	9105      	str	r1, [sp, #20]
 800ca5c:	4605      	mov	r5, r0
 800ca5e:	a997      	add	r1, sp, #604	; 0x25c
 800ca60:	4618      	mov	r0, r3
 800ca62:	2302      	movs	r3, #2
 800ca64:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800ca68:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800ca6c:	f000 f996 	bl	800cd9c <uxr_object_id_to_raw>
 800ca70:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800ca72:	9306      	str	r3, [sp, #24]
 800ca74:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800ca76:	930a      	str	r3, [sp, #40]	; 0x28
 800ca78:	2303      	movs	r3, #3
 800ca7a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800ca7e:	2301      	movs	r3, #1
 800ca80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ca88:	a917      	add	r1, sp, #92	; 0x5c
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	a80b      	add	r0, sp, #44	; 0x2c
 800ca8e:	f88d 301c 	strb.w	r3, [sp, #28]
 800ca92:	f7ff feef 	bl	800c874 <ucdr_init_buffer>
 800ca96:	a906      	add	r1, sp, #24
 800ca98:	a80b      	add	r0, sp, #44	; 0x2c
 800ca9a:	f001 ffa7 	bl	800e9ec <uxr_serialize_OBJK_Topic_Binary>
 800ca9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800caa0:	9316      	str	r3, [sp, #88]	; 0x58
 800caa2:	ac13      	add	r4, sp, #76	; 0x4c
 800caa4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800caa8:	9600      	str	r6, [sp, #0]
 800caaa:	9401      	str	r4, [sp, #4]
 800caac:	b29b      	uxth	r3, r3
 800caae:	4628      	mov	r0, r5
 800cab0:	f7ff ff70 	bl	800c994 <uxr_common_create_entity>
 800cab4:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800cab8:	bd70      	pop	{r4, r5, r6, pc}
 800caba:	bf00      	nop

0800cabc <uxr_buffer_create_publisher_bin>:
 800cabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cabe:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800cac2:	4605      	mov	r5, r0
 800cac4:	9105      	str	r1, [sp, #20]
 800cac6:	4618      	mov	r0, r3
 800cac8:	2603      	movs	r6, #3
 800caca:	a992      	add	r1, sp, #584	; 0x248
 800cacc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cad0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800cad4:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800cad8:	f000 f960 	bl	800cd9c <uxr_object_id_to_raw>
 800cadc:	2300      	movs	r3, #0
 800cade:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cae2:	a912      	add	r1, sp, #72	; 0x48
 800cae4:	a806      	add	r0, sp, #24
 800cae6:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800caea:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800caee:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800caf2:	f7ff febf 	bl	800c874 <ucdr_init_buffer>
 800caf6:	a993      	add	r1, sp, #588	; 0x24c
 800caf8:	a806      	add	r0, sp, #24
 800cafa:	f002 f82b 	bl	800eb54 <uxr_serialize_OBJK_Publisher_Binary>
 800cafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb00:	9311      	str	r3, [sp, #68]	; 0x44
 800cb02:	ac0e      	add	r4, sp, #56	; 0x38
 800cb04:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cb08:	9700      	str	r7, [sp, #0]
 800cb0a:	9401      	str	r4, [sp, #4]
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	4628      	mov	r0, r5
 800cb10:	f7ff ff40 	bl	800c994 <uxr_common_create_entity>
 800cb14:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800cb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb1a:	bf00      	nop

0800cb1c <uxr_buffer_create_subscriber_bin>:
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 800cb22:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cb26:	9105      	str	r1, [sp, #20]
 800cb28:	4605      	mov	r5, r0
 800cb2a:	a992      	add	r1, sp, #584	; 0x248
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	2304      	movs	r3, #4
 800cb30:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 800cb34:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800cb38:	f000 f930 	bl	800cd9c <uxr_object_id_to_raw>
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb42:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800cb46:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800cb4a:	a912      	add	r1, sp, #72	; 0x48
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	a806      	add	r0, sp, #24
 800cb50:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800cb54:	f7ff fe8e 	bl	800c874 <ucdr_init_buffer>
 800cb58:	a993      	add	r1, sp, #588	; 0x24c
 800cb5a:	a806      	add	r0, sp, #24
 800cb5c:	f002 f8aa 	bl	800ecb4 <uxr_serialize_OBJK_Subscriber_Binary>
 800cb60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb62:	9311      	str	r3, [sp, #68]	; 0x44
 800cb64:	ac0e      	add	r4, sp, #56	; 0x38
 800cb66:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cb6a:	9600      	str	r6, [sp, #0]
 800cb6c:	9401      	str	r4, [sp, #4]
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	4628      	mov	r0, r5
 800cb72:	f7ff ff0f 	bl	800c994 <uxr_common_create_entity>
 800cb76:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}

0800cb7c <uxr_buffer_create_datawriter_bin>:
 800cb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb80:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cb84:	ac1d      	add	r4, sp, #116	; 0x74
 800cb86:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cb8a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800cb8e:	9105      	str	r1, [sp, #20]
 800cb90:	4606      	mov	r6, r0
 800cb92:	a9a1      	add	r1, sp, #644	; 0x284
 800cb94:	4618      	mov	r0, r3
 800cb96:	2305      	movs	r3, #5
 800cb98:	7123      	strb	r3, [r4, #4]
 800cb9a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800cb9e:	2703      	movs	r7, #3
 800cba0:	f000 f8fc 	bl	800cd9c <uxr_object_id_to_raw>
 800cba4:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800cba6:	7227      	strb	r7, [r4, #8]
 800cba8:	a90e      	add	r1, sp, #56	; 0x38
 800cbaa:	f000 f8f7 	bl	800cd9c <uxr_object_id_to_raw>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800cbb4:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800cbb8:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800cbbc:	3d00      	subs	r5, #0
 800cbbe:	bf18      	it	ne
 800cbc0:	2501      	movne	r5, #1
 800cbc2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800cbc6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800cbca:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800cbce:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800cbd8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800cbdc:	bb8a      	cbnz	r2, 800cc42 <uxr_buffer_create_datawriter_bin+0xc6>
 800cbde:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800cbe2:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800cbe6:	f04f 0c13 	mov.w	ip, #19
 800cbea:	250b      	movs	r5, #11
 800cbec:	2221      	movs	r2, #33	; 0x21
 800cbee:	2111      	movs	r1, #17
 800cbf0:	2009      	movs	r0, #9
 800cbf2:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800cbf6:	b923      	cbnz	r3, 800cc02 <uxr_buffer_create_datawriter_bin+0x86>
 800cbf8:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800cbfc:	4672      	mov	r2, lr
 800cbfe:	4661      	mov	r1, ip
 800cc00:	4628      	mov	r0, r5
 800cc02:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d025      	beq.n	800cc56 <uxr_buffer_create_datawriter_bin+0xda>
 800cc0a:	2b03      	cmp	r3, #3
 800cc0c:	d029      	beq.n	800cc62 <uxr_buffer_create_datawriter_bin+0xe6>
 800cc0e:	b32b      	cbz	r3, 800cc5c <uxr_buffer_create_datawriter_bin+0xe0>
 800cc10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc14:	a921      	add	r1, sp, #132	; 0x84
 800cc16:	a806      	add	r0, sp, #24
 800cc18:	f7ff fe2c 	bl	800c874 <ucdr_init_buffer>
 800cc1c:	a90e      	add	r1, sp, #56	; 0x38
 800cc1e:	a806      	add	r0, sp, #24
 800cc20:	f002 f8fa 	bl	800ee18 <uxr_serialize_OBJK_DataWriter_Binary>
 800cc24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc26:	f8cd 8000 	str.w	r8, [sp]
 800cc2a:	9401      	str	r4, [sp, #4]
 800cc2c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cc30:	60e3      	str	r3, [r4, #12]
 800cc32:	4630      	mov	r0, r6
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	f7ff fead 	bl	800c994 <uxr_common_create_entity>
 800cc3a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc42:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800cc46:	f04f 0c12 	mov.w	ip, #18
 800cc4a:	250a      	movs	r5, #10
 800cc4c:	2220      	movs	r2, #32
 800cc4e:	2110      	movs	r1, #16
 800cc50:	2008      	movs	r0, #8
 800cc52:	2702      	movs	r7, #2
 800cc54:	e7cd      	b.n	800cbf2 <uxr_buffer_create_datawriter_bin+0x76>
 800cc56:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800cc5a:	e7d9      	b.n	800cc10 <uxr_buffer_create_datawriter_bin+0x94>
 800cc5c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800cc60:	e7d6      	b.n	800cc10 <uxr_buffer_create_datawriter_bin+0x94>
 800cc62:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800cc66:	e7d3      	b.n	800cc10 <uxr_buffer_create_datawriter_bin+0x94>

0800cc68 <uxr_buffer_create_datareader_bin>:
 800cc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc6c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800cc70:	ac1f      	add	r4, sp, #124	; 0x7c
 800cc72:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cc76:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800cc7a:	9105      	str	r1, [sp, #20]
 800cc7c:	4606      	mov	r6, r0
 800cc7e:	a9a3      	add	r1, sp, #652	; 0x28c
 800cc80:	4618      	mov	r0, r3
 800cc82:	2306      	movs	r3, #6
 800cc84:	7123      	strb	r3, [r4, #4]
 800cc86:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800cc8a:	2703      	movs	r7, #3
 800cc8c:	f000 f886 	bl	800cd9c <uxr_object_id_to_raw>
 800cc90:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800cc92:	7227      	strb	r7, [r4, #8]
 800cc94:	a90e      	add	r1, sp, #56	; 0x38
 800cc96:	f000 f881 	bl	800cd9c <uxr_object_id_to_raw>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800cca0:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 800cca4:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800cca8:	3d00      	subs	r5, #0
 800ccaa:	bf18      	it	ne
 800ccac:	2501      	movne	r5, #1
 800ccae:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800ccb2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800ccb6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800ccba:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800ccbe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800ccc8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800cccc:	bb8a      	cbnz	r2, 800cd32 <uxr_buffer_create_datareader_bin+0xca>
 800ccce:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ccd2:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800ccd6:	f04f 0c13 	mov.w	ip, #19
 800ccda:	250b      	movs	r5, #11
 800ccdc:	2221      	movs	r2, #33	; 0x21
 800ccde:	2111      	movs	r1, #17
 800cce0:	2009      	movs	r0, #9
 800cce2:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800cce6:	b923      	cbnz	r3, 800ccf2 <uxr_buffer_create_datareader_bin+0x8a>
 800cce8:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800ccec:	4672      	mov	r2, lr
 800ccee:	4661      	mov	r1, ip
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d025      	beq.n	800cd46 <uxr_buffer_create_datareader_bin+0xde>
 800ccfa:	2b03      	cmp	r3, #3
 800ccfc:	d029      	beq.n	800cd52 <uxr_buffer_create_datareader_bin+0xea>
 800ccfe:	b32b      	cbz	r3, 800cd4c <uxr_buffer_create_datareader_bin+0xe4>
 800cd00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd04:	a923      	add	r1, sp, #140	; 0x8c
 800cd06:	a806      	add	r0, sp, #24
 800cd08:	f7ff fdb4 	bl	800c874 <ucdr_init_buffer>
 800cd0c:	a90e      	add	r1, sp, #56	; 0x38
 800cd0e:	a806      	add	r0, sp, #24
 800cd10:	f002 f846 	bl	800eda0 <uxr_serialize_OBJK_DataReader_Binary>
 800cd14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd16:	f8cd 8000 	str.w	r8, [sp]
 800cd1a:	9401      	str	r4, [sp, #4]
 800cd1c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cd20:	60e3      	str	r3, [r4, #12]
 800cd22:	4630      	mov	r0, r6
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	f7ff fe35 	bl	800c994 <uxr_common_create_entity>
 800cd2a:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800cd2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd32:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800cd36:	f04f 0c12 	mov.w	ip, #18
 800cd3a:	250a      	movs	r5, #10
 800cd3c:	2220      	movs	r2, #32
 800cd3e:	2110      	movs	r1, #16
 800cd40:	2008      	movs	r0, #8
 800cd42:	2702      	movs	r7, #2
 800cd44:	e7cd      	b.n	800cce2 <uxr_buffer_create_datareader_bin+0x7a>
 800cd46:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800cd4a:	e7d9      	b.n	800cd00 <uxr_buffer_create_datareader_bin+0x98>
 800cd4c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800cd50:	e7d6      	b.n	800cd00 <uxr_buffer_create_datareader_bin+0x98>
 800cd52:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800cd56:	e7d3      	b.n	800cd00 <uxr_buffer_create_datareader_bin+0x98>

0800cd58 <uxr_object_id>:
 800cd58:	b082      	sub	sp, #8
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	f88d 1006 	strb.w	r1, [sp, #6]
 800cd60:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cd64:	f360 030f 	bfi	r3, r0, #0, #16
 800cd68:	f362 431f 	bfi	r3, r2, #16, #16
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	b002      	add	sp, #8
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop

0800cd74 <uxr_object_id_from_raw>:
 800cd74:	7843      	ldrb	r3, [r0, #1]
 800cd76:	7801      	ldrb	r1, [r0, #0]
 800cd78:	b082      	sub	sp, #8
 800cd7a:	f003 020f 	and.w	r2, r3, #15
 800cd7e:	f88d 2006 	strb.w	r2, [sp, #6]
 800cd82:	091b      	lsrs	r3, r3, #4
 800cd84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cd88:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	f363 000f 	bfi	r0, r3, #0, #16
 800cd92:	f362 401f 	bfi	r0, r2, #16, #16
 800cd96:	b002      	add	sp, #8
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop

0800cd9c <uxr_object_id_to_raw>:
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800cda2:	b082      	sub	sp, #8
 800cda4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800cda8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800cdac:	f881 c000 	strb.w	ip, [r1]
 800cdb0:	7048      	strb	r0, [r1, #1]
 800cdb2:	b002      	add	sp, #8
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop

0800cdb8 <on_get_fragmentation_info>:
 800cdb8:	b500      	push	{lr}
 800cdba:	b08b      	sub	sp, #44	; 0x2c
 800cdbc:	4601      	mov	r1, r0
 800cdbe:	2204      	movs	r2, #4
 800cdc0:	a802      	add	r0, sp, #8
 800cdc2:	f7ff fd57 	bl	800c874 <ucdr_init_buffer>
 800cdc6:	f10d 0305 	add.w	r3, sp, #5
 800cdca:	f10d 0206 	add.w	r2, sp, #6
 800cdce:	a901      	add	r1, sp, #4
 800cdd0:	a802      	add	r0, sp, #8
 800cdd2:	f001 f9d7 	bl	800e184 <uxr_read_submessage_header>
 800cdd6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cdda:	2b0d      	cmp	r3, #13
 800cddc:	d003      	beq.n	800cde6 <on_get_fragmentation_info+0x2e>
 800cdde:	2000      	movs	r0, #0
 800cde0:	b00b      	add	sp, #44	; 0x2c
 800cde2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cde6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cdea:	f013 0f02 	tst.w	r3, #2
 800cdee:	bf14      	ite	ne
 800cdf0:	2002      	movne	r0, #2
 800cdf2:	2001      	moveq	r0, #1
 800cdf4:	b00b      	add	sp, #44	; 0x2c
 800cdf6:	f85d fb04 	ldr.w	pc, [sp], #4
 800cdfa:	bf00      	nop

0800cdfc <read_submessage_get_info>:
 800cdfc:	b570      	push	{r4, r5, r6, lr}
 800cdfe:	2500      	movs	r5, #0
 800ce00:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800ce04:	4604      	mov	r4, r0
 800ce06:	f44f 7224 	mov.w	r2, #656	; 0x290
 800ce0a:	460e      	mov	r6, r1
 800ce0c:	a810      	add	r0, sp, #64	; 0x40
 800ce0e:	4629      	mov	r1, r5
 800ce10:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800ce14:	f009 fe5e 	bl	8016ad4 <memset>
 800ce18:	a903      	add	r1, sp, #12
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	f002 fa72 	bl	800f304 <uxr_deserialize_GET_INFO_Payload>
 800ce20:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ce24:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f001 f821 	bl	800de70 <uxr_session_header_offset>
 800ce2e:	462b      	mov	r3, r5
 800ce30:	9000      	str	r0, [sp, #0]
 800ce32:	220c      	movs	r2, #12
 800ce34:	a905      	add	r1, sp, #20
 800ce36:	a808      	add	r0, sp, #32
 800ce38:	f7ff fd0a 	bl	800c850 <ucdr_init_buffer_origin_offset>
 800ce3c:	a910      	add	r1, sp, #64	; 0x40
 800ce3e:	a808      	add	r0, sp, #32
 800ce40:	f002 fad2 	bl	800f3e8 <uxr_serialize_INFO_Payload>
 800ce44:	9b08      	ldr	r3, [sp, #32]
 800ce46:	462a      	mov	r2, r5
 800ce48:	4629      	mov	r1, r5
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f000 ffba 	bl	800ddc4 <uxr_stamp_session_header>
 800ce50:	a808      	add	r0, sp, #32
 800ce52:	f7ff fd3b 	bl	800c8cc <ucdr_buffer_length>
 800ce56:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ce58:	4602      	mov	r2, r0
 800ce5a:	a905      	add	r1, sp, #20
 800ce5c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ce60:	47a0      	blx	r4
 800ce62:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800ce66:	bd70      	pop	{r4, r5, r6, pc}

0800ce68 <write_submessage_acknack.isra.0>:
 800ce68:	b570      	push	{r4, r5, r6, lr}
 800ce6a:	b092      	sub	sp, #72	; 0x48
 800ce6c:	4605      	mov	r5, r0
 800ce6e:	460e      	mov	r6, r1
 800ce70:	4614      	mov	r4, r2
 800ce72:	f000 fffd 	bl	800de70 <uxr_session_header_offset>
 800ce76:	a905      	add	r1, sp, #20
 800ce78:	9000      	str	r0, [sp, #0]
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	a80a      	add	r0, sp, #40	; 0x28
 800ce7e:	2211      	movs	r2, #17
 800ce80:	f7ff fce6 	bl	800c850 <ucdr_init_buffer_origin_offset>
 800ce84:	2218      	movs	r2, #24
 800ce86:	fb02 5404 	mla	r4, r2, r4, r5
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	2205      	movs	r2, #5
 800ce8e:	3450      	adds	r4, #80	; 0x50
 800ce90:	210a      	movs	r1, #10
 800ce92:	a80a      	add	r0, sp, #40	; 0x28
 800ce94:	f001 f95c 	bl	800e150 <uxr_buffer_submessage_header>
 800ce98:	a903      	add	r1, sp, #12
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f007 fc4e 	bl	801473c <uxr_compute_acknack>
 800cea0:	ba40      	rev16	r0, r0
 800cea2:	f8ad 000e 	strh.w	r0, [sp, #14]
 800cea6:	a903      	add	r1, sp, #12
 800cea8:	a80a      	add	r0, sp, #40	; 0x28
 800ceaa:	f88d 6010 	strb.w	r6, [sp, #16]
 800ceae:	f002 fb0b 	bl	800f4c8 <uxr_serialize_ACKNACK_Payload>
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceb6:	4611      	mov	r1, r2
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f000 ff83 	bl	800ddc4 <uxr_stamp_session_header>
 800cebe:	a80a      	add	r0, sp, #40	; 0x28
 800cec0:	f7ff fd04 	bl	800c8cc <ucdr_buffer_length>
 800cec4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800cec6:	4602      	mov	r2, r0
 800cec8:	a905      	add	r1, sp, #20
 800ceca:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cece:	47a0      	blx	r4
 800ced0:	b012      	add	sp, #72	; 0x48
 800ced2:	bd70      	pop	{r4, r5, r6, pc}
 800ced4:	0000      	movs	r0, r0
	...

0800ced8 <uxr_init_session>:
 800ced8:	b510      	push	{r4, lr}
 800ceda:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800cf10 <uxr_init_session+0x38>
 800cede:	2300      	movs	r3, #0
 800cee0:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800cee4:	4604      	mov	r4, r0
 800cee6:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800ceea:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800ceee:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800cef2:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800cef6:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800cefa:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800cefe:	2181      	movs	r1, #129	; 0x81
 800cf00:	f000 fecc 	bl	800dc9c <uxr_init_session_info>
 800cf04:	f104 0008 	add.w	r0, r4, #8
 800cf08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf0c:	f001 b83c 	b.w	800df88 <uxr_init_stream_storage>
	...

0800cf18 <uxr_set_status_callback>:
 800cf18:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop

0800cf20 <uxr_set_topic_callback>:
 800cf20:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop

0800cf28 <uxr_set_request_callback>:
 800cf28:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop

0800cf30 <uxr_set_reply_callback>:
 800cf30:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop

0800cf38 <uxr_create_output_best_effort_stream>:
 800cf38:	b510      	push	{r4, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	e9cd 2100 	strd	r2, r1, [sp]
 800cf40:	4604      	mov	r4, r0
 800cf42:	f000 ff95 	bl	800de70 <uxr_session_header_offset>
 800cf46:	e9dd 2100 	ldrd	r2, r1, [sp]
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	f104 0008 	add.w	r0, r4, #8
 800cf50:	b004      	add	sp, #16
 800cf52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf56:	f001 b861 	b.w	800e01c <uxr_add_output_best_effort_buffer>
 800cf5a:	bf00      	nop

0800cf5c <uxr_create_output_reliable_stream>:
 800cf5c:	b510      	push	{r4, lr}
 800cf5e:	b088      	sub	sp, #32
 800cf60:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800cf64:	4604      	mov	r4, r0
 800cf66:	9303      	str	r3, [sp, #12]
 800cf68:	f000 ff82 	bl	800de70 <uxr_session_header_offset>
 800cf6c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800cf70:	9000      	str	r0, [sp, #0]
 800cf72:	9905      	ldr	r1, [sp, #20]
 800cf74:	f104 0008 	add.w	r0, r4, #8
 800cf78:	f001 f864 	bl	800e044 <uxr_add_output_reliable_buffer>
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	b2c3      	uxtb	r3, r0
 800cf80:	f363 0207 	bfi	r2, r3, #0, #8
 800cf84:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cf88:	f363 220f 	bfi	r2, r3, #8, #8
 800cf8c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cf90:	f363 4217 	bfi	r2, r3, #16, #8
 800cf94:	0e03      	lsrs	r3, r0, #24
 800cf96:	f363 621f 	bfi	r2, r3, #24, #8
 800cf9a:	4610      	mov	r0, r2
 800cf9c:	b008      	add	sp, #32
 800cf9e:	bd10      	pop	{r4, pc}

0800cfa0 <uxr_create_input_best_effort_stream>:
 800cfa0:	b082      	sub	sp, #8
 800cfa2:	3008      	adds	r0, #8
 800cfa4:	b002      	add	sp, #8
 800cfa6:	f001 b867 	b.w	800e078 <uxr_add_input_best_effort_buffer>
 800cfaa:	bf00      	nop

0800cfac <uxr_create_input_reliable_stream>:
 800cfac:	b510      	push	{r4, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	4c0b      	ldr	r4, [pc, #44]	; (800cfe0 <uxr_create_input_reliable_stream+0x34>)
 800cfb2:	9400      	str	r4, [sp, #0]
 800cfb4:	3008      	adds	r0, #8
 800cfb6:	f001 f875 	bl	800e0a4 <uxr_add_input_reliable_buffer>
 800cfba:	2200      	movs	r2, #0
 800cfbc:	b2c3      	uxtb	r3, r0
 800cfbe:	f363 0207 	bfi	r2, r3, #0, #8
 800cfc2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cfc6:	f363 220f 	bfi	r2, r3, #8, #8
 800cfca:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cfce:	f363 4217 	bfi	r2, r3, #16, #8
 800cfd2:	0e03      	lsrs	r3, r0, #24
 800cfd4:	f363 621f 	bfi	r2, r3, #24, #8
 800cfd8:	4610      	mov	r0, r2
 800cfda:	b004      	add	sp, #16
 800cfdc:	bd10      	pop	{r4, pc}
 800cfde:	bf00      	nop
 800cfe0:	0800cdb9 	.word	0x0800cdb9

0800cfe4 <uxr_epoch_nanos>:
 800cfe4:	b510      	push	{r4, lr}
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	f001 f912 	bl	800e210 <uxr_nanos>
 800cfec:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800cff0:	1ac0      	subs	r0, r0, r3
 800cff2:	eb61 0102 	sbc.w	r1, r1, r2
 800cff6:	bd10      	pop	{r4, pc}

0800cff8 <uxr_flash_output_streams>:
 800cff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cffc:	7e03      	ldrb	r3, [r0, #24]
 800cffe:	b084      	sub	sp, #16
 800d000:	4604      	mov	r4, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d035      	beq.n	800d072 <uxr_flash_output_streams+0x7a>
 800d006:	f04f 0900 	mov.w	r9, #0
 800d00a:	4648      	mov	r0, r9
 800d00c:	f10d 0802 	add.w	r8, sp, #2
 800d010:	af03      	add	r7, sp, #12
 800d012:	ae02      	add	r6, sp, #8
 800d014:	e006      	b.n	800d024 <uxr_flash_output_streams+0x2c>
 800d016:	7e23      	ldrb	r3, [r4, #24]
 800d018:	f109 0901 	add.w	r9, r9, #1
 800d01c:	fa5f f089 	uxtb.w	r0, r9
 800d020:	4283      	cmp	r3, r0
 800d022:	d926      	bls.n	800d072 <uxr_flash_output_streams+0x7a>
 800d024:	2201      	movs	r2, #1
 800d026:	4611      	mov	r1, r2
 800d028:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800d02c:	f000 ff58 	bl	800dee0 <uxr_stream_id>
 800d030:	3508      	adds	r5, #8
 800d032:	4684      	mov	ip, r0
 800d034:	4643      	mov	r3, r8
 800d036:	463a      	mov	r2, r7
 800d038:	4631      	mov	r1, r6
 800d03a:	4628      	mov	r0, r5
 800d03c:	f8cd c004 	str.w	ip, [sp, #4]
 800d040:	f007 fc02 	bl	8014848 <uxr_prepare_best_effort_buffer_to_send>
 800d044:	2800      	cmp	r0, #0
 800d046:	d0e6      	beq.n	800d016 <uxr_flash_output_streams+0x1e>
 800d048:	9b02      	ldr	r3, [sp, #8]
 800d04a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d04e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d052:	4620      	mov	r0, r4
 800d054:	f000 feb6 	bl	800ddc4 <uxr_stamp_session_header>
 800d058:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d05a:	9a03      	ldr	r2, [sp, #12]
 800d05c:	685d      	ldr	r5, [r3, #4]
 800d05e:	6818      	ldr	r0, [r3, #0]
 800d060:	9902      	ldr	r1, [sp, #8]
 800d062:	47a8      	blx	r5
 800d064:	f109 0901 	add.w	r9, r9, #1
 800d068:	7e23      	ldrb	r3, [r4, #24]
 800d06a:	fa5f f089 	uxtb.w	r0, r9
 800d06e:	4283      	cmp	r3, r0
 800d070:	d8d8      	bhi.n	800d024 <uxr_flash_output_streams+0x2c>
 800d072:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800d076:	b38b      	cbz	r3, 800d0dc <uxr_flash_output_streams+0xe4>
 800d078:	f04f 0900 	mov.w	r9, #0
 800d07c:	f10d 0802 	add.w	r8, sp, #2
 800d080:	af03      	add	r7, sp, #12
 800d082:	ae02      	add	r6, sp, #8
 800d084:	4648      	mov	r0, r9
 800d086:	2201      	movs	r2, #1
 800d088:	2102      	movs	r1, #2
 800d08a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800d08e:	f000 ff27 	bl	800dee0 <uxr_stream_id>
 800d092:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800d096:	3520      	adds	r5, #32
 800d098:	9001      	str	r0, [sp, #4]
 800d09a:	e00d      	b.n	800d0b8 <uxr_flash_output_streams+0xc0>
 800d09c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d0a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d0a4:	9b02      	ldr	r3, [sp, #8]
 800d0a6:	f000 fe8d 	bl	800ddc4 <uxr_stamp_session_header>
 800d0aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d0ac:	9a03      	ldr	r2, [sp, #12]
 800d0ae:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d0b2:	9902      	ldr	r1, [sp, #8]
 800d0b4:	6818      	ldr	r0, [r3, #0]
 800d0b6:	47d0      	blx	sl
 800d0b8:	4643      	mov	r3, r8
 800d0ba:	463a      	mov	r2, r7
 800d0bc:	4631      	mov	r1, r6
 800d0be:	4628      	mov	r0, r5
 800d0c0:	f007 fde0 	bl	8014c84 <uxr_prepare_next_reliable_buffer_to_send>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1e7      	bne.n	800d09c <uxr_flash_output_streams+0xa4>
 800d0cc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800d0d0:	f109 0901 	add.w	r9, r9, #1
 800d0d4:	fa5f f089 	uxtb.w	r0, r9
 800d0d8:	4283      	cmp	r3, r0
 800d0da:	d8d4      	bhi.n	800d086 <uxr_flash_output_streams+0x8e>
 800d0dc:	b004      	add	sp, #16
 800d0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e2:	bf00      	nop

0800d0e4 <read_submessage_info>:
 800d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	460d      	mov	r5, r1
 800d0ea:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800d0ee:	4669      	mov	r1, sp
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	f002 f814 	bl	800f120 <uxr_deserialize_BaseObjectReply>
 800d0f8:	a902      	add	r1, sp, #8
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d102:	f7fe facb 	bl	800b69c <ucdr_deserialize_bool>
 800d106:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d10a:	4004      	ands	r4, r0
 800d10c:	b2e4      	uxtb	r4, r4
 800d10e:	b95b      	cbnz	r3, 800d128 <read_submessage_info+0x44>
 800d110:	a987      	add	r1, sp, #540	; 0x21c
 800d112:	4628      	mov	r0, r5
 800d114:	f7fe fac2 	bl	800b69c <ucdr_deserialize_bool>
 800d118:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800d11c:	4606      	mov	r6, r0
 800d11e:	b94b      	cbnz	r3, 800d134 <read_submessage_info+0x50>
 800d120:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800d124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d128:	a903      	add	r1, sp, #12
 800d12a:	4628      	mov	r0, r5
 800d12c:	f001 fea0 	bl	800ee70 <uxr_deserialize_ObjectVariant>
 800d130:	4004      	ands	r4, r0
 800d132:	e7ed      	b.n	800d110 <read_submessage_info+0x2c>
 800d134:	a988      	add	r1, sp, #544	; 0x220
 800d136:	4628      	mov	r0, r5
 800d138:	f7fe fade 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800d13c:	4234      	tst	r4, r6
 800d13e:	d0ef      	beq.n	800d120 <read_submessage_info+0x3c>
 800d140:	2800      	cmp	r0, #0
 800d142:	d0ed      	beq.n	800d120 <read_submessage_info+0x3c>
 800d144:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800d148:	2b0d      	cmp	r3, #13
 800d14a:	d1e9      	bne.n	800d120 <read_submessage_info+0x3c>
 800d14c:	a98a      	add	r1, sp, #552	; 0x228
 800d14e:	4628      	mov	r0, r5
 800d150:	f7ff f878 	bl	800c244 <ucdr_deserialize_int16_t>
 800d154:	b140      	cbz	r0, 800d168 <read_submessage_info+0x84>
 800d156:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	dd07      	ble.n	800d16e <read_submessage_info+0x8a>
 800d15e:	f1b8 0f00 	cmp.w	r8, #0
 800d162:	bf14      	ite	ne
 800d164:	2001      	movne	r0, #1
 800d166:	2002      	moveq	r0, #2
 800d168:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800d16c:	e7d8      	b.n	800d120 <read_submessage_info+0x3c>
 800d16e:	2000      	movs	r0, #0
 800d170:	e7fa      	b.n	800d168 <read_submessage_info+0x84>
 800d172:	bf00      	nop

0800d174 <read_submessage_list>:
 800d174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d178:	b097      	sub	sp, #92	; 0x5c
 800d17a:	4ec1      	ldr	r6, [pc, #772]	; (800d480 <read_submessage_list+0x30c>)
 800d17c:	9209      	str	r2, [sp, #36]	; 0x24
 800d17e:	4604      	mov	r4, r0
 800d180:	460d      	mov	r5, r1
 800d182:	f04f 0801 	mov.w	r8, #1
 800d186:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800d18a:	aa0c      	add	r2, sp, #48	; 0x30
 800d18c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800d190:	4628      	mov	r0, r5
 800d192:	f000 fff7 	bl	800e184 <uxr_read_submessage_header>
 800d196:	2800      	cmp	r0, #0
 800d198:	f000 813e 	beq.w	800d418 <read_submessage_list+0x2a4>
 800d19c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800d1a0:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800d1a4:	3b02      	subs	r3, #2
 800d1a6:	2b0d      	cmp	r3, #13
 800d1a8:	d8ed      	bhi.n	800d186 <read_submessage_list+0x12>
 800d1aa:	a101      	add	r1, pc, #4	; (adr r1, 800d1b0 <read_submessage_list+0x3c>)
 800d1ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1b0:	0800d40f 	.word	0x0800d40f
 800d1b4:	0800d187 	.word	0x0800d187
 800d1b8:	0800d3ff 	.word	0x0800d3ff
 800d1bc:	0800d39d 	.word	0x0800d39d
 800d1c0:	0800d393 	.word	0x0800d393
 800d1c4:	0800d187 	.word	0x0800d187
 800d1c8:	0800d187 	.word	0x0800d187
 800d1cc:	0800d2f3 	.word	0x0800d2f3
 800d1d0:	0800d283 	.word	0x0800d283
 800d1d4:	0800d243 	.word	0x0800d243
 800d1d8:	0800d187 	.word	0x0800d187
 800d1dc:	0800d187 	.word	0x0800d187
 800d1e0:	0800d187 	.word	0x0800d187
 800d1e4:	0800d1e9 	.word	0x0800d1e9
 800d1e8:	a910      	add	r1, sp, #64	; 0x40
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	f002 f9bc 	bl	800f568 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d1f0:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800d1f4:	f1b9 0f00 	cmp.w	r9, #0
 800d1f8:	f000 8116 	beq.w	800d428 <read_submessage_list+0x2b4>
 800d1fc:	f001 f808 	bl	800e210 <uxr_nanos>
 800d200:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800d202:	4602      	mov	r2, r0
 800d204:	460b      	mov	r3, r1
 800d206:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d208:	2100      	movs	r1, #0
 800d20a:	468c      	mov	ip, r1
 800d20c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d210:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d214:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d216:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800d218:	468c      	mov	ip, r1
 800d21a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d21e:	46e2      	mov	sl, ip
 800d220:	46bc      	mov	ip, r7
 800d222:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800d226:	fbc0 7106 	smlal	r7, r1, r0, r6
 800d22a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800d22e:	e9cd 7100 	strd	r7, r1, [sp]
 800d232:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800d236:	9106      	str	r1, [sp, #24]
 800d238:	4620      	mov	r0, r4
 800d23a:	47c8      	blx	r9
 800d23c:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800d240:	e7a1      	b.n	800d186 <read_submessage_list+0x12>
 800d242:	a910      	add	r1, sp, #64	; 0x40
 800d244:	4628      	mov	r0, r5
 800d246:	f002 f97d 	bl	800f544 <uxr_deserialize_HEARTBEAT_Payload>
 800d24a:	2100      	movs	r1, #0
 800d24c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800d250:	f000 fe70 	bl	800df34 <uxr_stream_id_from_raw>
 800d254:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d258:	900f      	str	r0, [sp, #60]	; 0x3c
 800d25a:	4639      	mov	r1, r7
 800d25c:	f104 0008 	add.w	r0, r4, #8
 800d260:	f000 ff56 	bl	800e110 <uxr_get_input_reliable_stream>
 800d264:	2800      	cmp	r0, #0
 800d266:	d08e      	beq.n	800d186 <read_submessage_list+0x12>
 800d268:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800d26c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800d270:	f007 fa58 	bl	8014724 <uxr_process_heartbeat>
 800d274:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800d278:	463a      	mov	r2, r7
 800d27a:	4620      	mov	r0, r4
 800d27c:	f7ff fdf4 	bl	800ce68 <write_submessage_acknack.isra.0>
 800d280:	e781      	b.n	800d186 <read_submessage_list+0x12>
 800d282:	a910      	add	r1, sp, #64	; 0x40
 800d284:	4628      	mov	r0, r5
 800d286:	f002 f935 	bl	800f4f4 <uxr_deserialize_ACKNACK_Payload>
 800d28a:	2100      	movs	r1, #0
 800d28c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800d290:	f000 fe50 	bl	800df34 <uxr_stream_id_from_raw>
 800d294:	900d      	str	r0, [sp, #52]	; 0x34
 800d296:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d29a:	f104 0008 	add.w	r0, r4, #8
 800d29e:	f000 ff23 	bl	800e0e8 <uxr_get_output_reliable_stream>
 800d2a2:	4607      	mov	r7, r0
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	f43f af6e 	beq.w	800d186 <read_submessage_list+0x12>
 800d2aa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800d2ae:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800d2b2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800d2b6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d2ba:	b289      	uxth	r1, r1
 800d2bc:	f007 fd8c 	bl	8014dd8 <uxr_process_acknack>
 800d2c0:	4638      	mov	r0, r7
 800d2c2:	f007 fd49 	bl	8014d58 <uxr_begin_output_nack_buffer_it>
 800d2c6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800d2ca:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800d2ce:	e006      	b.n	800d2de <read_submessage_list+0x16a>
 800d2d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d2d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d2d4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d2d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d2da:	6818      	ldr	r0, [r3, #0]
 800d2dc:	47c8      	blx	r9
 800d2de:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800d2e2:	aa0f      	add	r2, sp, #60	; 0x3c
 800d2e4:	4651      	mov	r1, sl
 800d2e6:	4638      	mov	r0, r7
 800d2e8:	f007 fd38 	bl	8014d5c <uxr_next_reliable_nack_buffer_to_send>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d1ef      	bne.n	800d2d0 <read_submessage_list+0x15c>
 800d2f0:	e749      	b.n	800d186 <read_submessage_list+0x12>
 800d2f2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800d2f6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800d2fa:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800d2fe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800d302:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800d306:	4651      	mov	r1, sl
 800d308:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d30c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800d310:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800d314:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800d318:	4628      	mov	r0, r5
 800d31a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800d31e:	f001 fe49 	bl	800efb4 <uxr_deserialize_BaseObjectRequest>
 800d322:	4650      	mov	r0, sl
 800d324:	a90f      	add	r1, sp, #60	; 0x3c
 800d326:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800d32a:	f000 fdc7 	bl	800debc <uxr_parse_base_object_request>
 800d32e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800d332:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d334:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800d338:	9110      	str	r1, [sp, #64]	; 0x40
 800d33a:	3f04      	subs	r7, #4
 800d33c:	f009 090e 	and.w	r9, r9, #14
 800d340:	b2bf      	uxth	r7, r7
 800d342:	f1bb 0f00 	cmp.w	fp, #0
 800d346:	d006      	beq.n	800d356 <read_submessage_list+0x1e2>
 800d348:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	4652      	mov	r2, sl
 800d350:	2300      	movs	r3, #0
 800d352:	4620      	mov	r0, r4
 800d354:	47d8      	blx	fp
 800d356:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d358:	b16a      	cbz	r2, 800d376 <read_submessage_list+0x202>
 800d35a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d35c:	2100      	movs	r1, #0
 800d35e:	3802      	subs	r0, #2
 800d360:	e002      	b.n	800d368 <read_submessage_list+0x1f4>
 800d362:	3101      	adds	r1, #1
 800d364:	4291      	cmp	r1, r2
 800d366:	d006      	beq.n	800d376 <read_submessage_list+0x202>
 800d368:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d36c:	4553      	cmp	r3, sl
 800d36e:	d1f8      	bne.n	800d362 <read_submessage_list+0x1ee>
 800d370:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d372:	2200      	movs	r2, #0
 800d374:	545a      	strb	r2, [r3, r1]
 800d376:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800d37a:	9102      	str	r1, [sp, #8]
 800d37c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d37e:	9101      	str	r1, [sp, #4]
 800d380:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d382:	9100      	str	r1, [sp, #0]
 800d384:	464b      	mov	r3, r9
 800d386:	463a      	mov	r2, r7
 800d388:	4629      	mov	r1, r5
 800d38a:	4620      	mov	r0, r4
 800d38c:	f007 fde2 	bl	8014f54 <read_submessage_format>
 800d390:	e6f9      	b.n	800d186 <read_submessage_list+0x12>
 800d392:	4629      	mov	r1, r5
 800d394:	4620      	mov	r0, r4
 800d396:	f7ff fea5 	bl	800d0e4 <read_submessage_info>
 800d39a:	e6f4      	b.n	800d186 <read_submessage_list+0x12>
 800d39c:	2a00      	cmp	r2, #0
 800d39e:	d03e      	beq.n	800d41e <read_submessage_list+0x2aa>
 800d3a0:	a910      	add	r1, sp, #64	; 0x40
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	f002 f802 	bl	800f3ac <uxr_deserialize_STATUS_Payload>
 800d3a8:	a90e      	add	r1, sp, #56	; 0x38
 800d3aa:	aa0d      	add	r2, sp, #52	; 0x34
 800d3ac:	a810      	add	r0, sp, #64	; 0x40
 800d3ae:	f000 fd85 	bl	800debc <uxr_parse_base_object_request>
 800d3b2:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800d3b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d3b8:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800d3bc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800d3c0:	910f      	str	r1, [sp, #60]	; 0x3c
 800d3c2:	f1ba 0f00 	cmp.w	sl, #0
 800d3c6:	d006      	beq.n	800d3d6 <read_submessage_list+0x262>
 800d3c8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	463a      	mov	r2, r7
 800d3d0:	464b      	mov	r3, r9
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	47d0      	blx	sl
 800d3d6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d3d8:	2a00      	cmp	r2, #0
 800d3da:	f43f aed4 	beq.w	800d186 <read_submessage_list+0x12>
 800d3de:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	3802      	subs	r0, #2
 800d3e4:	e003      	b.n	800d3ee <read_submessage_list+0x27a>
 800d3e6:	3101      	adds	r1, #1
 800d3e8:	4291      	cmp	r1, r2
 800d3ea:	f43f aecc 	beq.w	800d186 <read_submessage_list+0x12>
 800d3ee:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d3f2:	42bb      	cmp	r3, r7
 800d3f4:	d1f7      	bne.n	800d3e6 <read_submessage_list+0x272>
 800d3f6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d3f8:	f803 9001 	strb.w	r9, [r3, r1]
 800d3fc:	e6c3      	b.n	800d186 <read_submessage_list+0x12>
 800d3fe:	2a00      	cmp	r2, #0
 800d400:	f47f aec1 	bne.w	800d186 <read_submessage_list+0x12>
 800d404:	4629      	mov	r1, r5
 800d406:	4620      	mov	r0, r4
 800d408:	f000 fc9e 	bl	800dd48 <uxr_read_create_session_status>
 800d40c:	e6bb      	b.n	800d186 <read_submessage_list+0x12>
 800d40e:	4629      	mov	r1, r5
 800d410:	4620      	mov	r0, r4
 800d412:	f7ff fcf3 	bl	800cdfc <read_submessage_get_info>
 800d416:	e6b6      	b.n	800d186 <read_submessage_list+0x12>
 800d418:	b017      	add	sp, #92	; 0x5c
 800d41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41e:	4629      	mov	r1, r5
 800d420:	4620      	mov	r0, r4
 800d422:	f000 fc9d 	bl	800dd60 <uxr_read_delete_session_status>
 800d426:	e6ae      	b.n	800d186 <read_submessage_list+0x12>
 800d428:	f000 fef2 	bl	800e210 <uxr_nanos>
 800d42c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d42e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d430:	464f      	mov	r7, r9
 800d432:	fbc3 2706 	smlal	r2, r7, r3, r6
 800d436:	1812      	adds	r2, r2, r0
 800d438:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d43a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d43c:	eb47 0101 	adc.w	r1, r7, r1
 800d440:	464f      	mov	r7, r9
 800d442:	fbc3 0706 	smlal	r0, r7, r3, r6
 800d446:	463b      	mov	r3, r7
 800d448:	4684      	mov	ip, r0
 800d44a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800d44e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800d452:	eb1c 0c00 	adds.w	ip, ip, r0
 800d456:	464f      	mov	r7, r9
 800d458:	eb43 0307 	adc.w	r3, r3, r7
 800d45c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800d460:	eb61 0303 	sbc.w	r3, r1, r3
 800d464:	0fda      	lsrs	r2, r3, #31
 800d466:	eb12 020c 	adds.w	r2, r2, ip
 800d46a:	f143 0300 	adc.w	r3, r3, #0
 800d46e:	0852      	lsrs	r2, r2, #1
 800d470:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d474:	105b      	asrs	r3, r3, #1
 800d476:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800d47a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800d47e:	e6dd      	b.n	800d23c <read_submessage_list+0xc8>
 800d480:	3b9aca00 	.word	0x3b9aca00

0800d484 <listen_message_reliably>:
 800d484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d488:	1e0b      	subs	r3, r1, #0
 800d48a:	b09d      	sub	sp, #116	; 0x74
 800d48c:	bfb8      	it	lt
 800d48e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800d492:	4680      	mov	r8, r0
 800d494:	9305      	str	r3, [sp, #20]
 800d496:	f000 fea1 	bl	800e1dc <uxr_millis>
 800d49a:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800d49e:	4681      	mov	r9, r0
 800d4a0:	2a00      	cmp	r2, #0
 800d4a2:	f000 80a1 	beq.w	800d5e8 <listen_message_reliably+0x164>
 800d4a6:	2600      	movs	r6, #0
 800d4a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d4ac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d4b0:	9303      	str	r3, [sp, #12]
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	460f      	mov	r7, r1
 800d4b6:	e00f      	b.n	800d4d8 <listen_message_reliably+0x54>
 800d4b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d4bc:	9903      	ldr	r1, [sp, #12]
 800d4be:	455a      	cmp	r2, fp
 800d4c0:	f106 0601 	add.w	r6, r6, #1
 800d4c4:	eb73 0101 	sbcs.w	r1, r3, r1
 800d4c8:	b2f0      	uxtb	r0, r6
 800d4ca:	da01      	bge.n	800d4d0 <listen_message_reliably+0x4c>
 800d4cc:	4693      	mov	fp, r2
 800d4ce:	9303      	str	r3, [sp, #12]
 800d4d0:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800d4d4:	4283      	cmp	r3, r0
 800d4d6:	d960      	bls.n	800d59a <listen_message_reliably+0x116>
 800d4d8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d4dc:	2102      	movs	r1, #2
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f000 fcfe 	bl	800dee0 <uxr_stream_id>
 800d4e4:	00e4      	lsls	r4, r4, #3
 800d4e6:	f104 0520 	add.w	r5, r4, #32
 800d4ea:	4445      	add	r5, r8
 800d4ec:	4601      	mov	r1, r0
 800d4ee:	463b      	mov	r3, r7
 800d4f0:	464a      	mov	r2, r9
 800d4f2:	4628      	mov	r0, r5
 800d4f4:	9109      	str	r1, [sp, #36]	; 0x24
 800d4f6:	f007 fc05 	bl	8014d04 <uxr_update_output_stream_heartbeat_timestamp>
 800d4fa:	eb08 0304 	add.w	r3, r8, r4
 800d4fe:	2800      	cmp	r0, #0
 800d500:	d0da      	beq.n	800d4b8 <listen_message_reliably+0x34>
 800d502:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d506:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800d50a:	9304      	str	r3, [sp, #16]
 800d50c:	4640      	mov	r0, r8
 800d50e:	f000 fcaf 	bl	800de70 <uxr_session_header_offset>
 800d512:	3501      	adds	r5, #1
 800d514:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800d518:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d51c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d520:	2300      	movs	r3, #0
 800d522:	2211      	movs	r2, #17
 800d524:	9000      	str	r0, [sp, #0]
 800d526:	a90c      	add	r1, sp, #48	; 0x30
 800d528:	4650      	mov	r0, sl
 800d52a:	f7ff f991 	bl	800c850 <ucdr_init_buffer_origin_offset>
 800d52e:	2300      	movs	r3, #0
 800d530:	2205      	movs	r2, #5
 800d532:	210b      	movs	r1, #11
 800d534:	4650      	mov	r0, sl
 800d536:	f000 fe0b 	bl	800e150 <uxr_buffer_submessage_header>
 800d53a:	8968      	ldrh	r0, [r5, #10]
 800d53c:	2101      	movs	r1, #1
 800d53e:	f007 fdd3 	bl	80150e8 <uxr_seq_num_add>
 800d542:	892b      	ldrh	r3, [r5, #8]
 800d544:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800d548:	4602      	mov	r2, r0
 800d54a:	9b04      	ldr	r3, [sp, #16]
 800d54c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800d550:	a90a      	add	r1, sp, #40	; 0x28
 800d552:	4650      	mov	r0, sl
 800d554:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800d558:	f001 ffe0 	bl	800f51c <uxr_serialize_HEARTBEAT_Payload>
 800d55c:	2200      	movs	r2, #0
 800d55e:	4611      	mov	r1, r2
 800d560:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d562:	4640      	mov	r0, r8
 800d564:	f000 fc2e 	bl	800ddc4 <uxr_stamp_session_header>
 800d568:	4650      	mov	r0, sl
 800d56a:	f7ff f9af 	bl	800c8cc <ucdr_buffer_length>
 800d56e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800d572:	4602      	mov	r2, r0
 800d574:	a90c      	add	r1, sp, #48	; 0x30
 800d576:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d57a:	4444      	add	r4, r8
 800d57c:	47a8      	blx	r5
 800d57e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800d582:	9903      	ldr	r1, [sp, #12]
 800d584:	455a      	cmp	r2, fp
 800d586:	f106 0601 	add.w	r6, r6, #1
 800d58a:	eb73 0101 	sbcs.w	r1, r3, r1
 800d58e:	b2f0      	uxtb	r0, r6
 800d590:	db9c      	blt.n	800d4cc <listen_message_reliably+0x48>
 800d592:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800d596:	4283      	cmp	r3, r0
 800d598:	d89e      	bhi.n	800d4d8 <listen_message_reliably+0x54>
 800d59a:	9a03      	ldr	r2, [sp, #12]
 800d59c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	bf08      	it	eq
 800d5a4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800d5a8:	d01e      	beq.n	800d5e8 <listen_message_reliably+0x164>
 800d5aa:	ebab 0309 	sub.w	r3, fp, r9
 800d5ae:	9905      	ldr	r1, [sp, #20]
 800d5b0:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	bf08      	it	eq
 800d5b8:	2301      	moveq	r3, #1
 800d5ba:	4299      	cmp	r1, r3
 800d5bc:	bfa8      	it	ge
 800d5be:	4619      	movge	r1, r3
 800d5c0:	6894      	ldr	r4, [r2, #8]
 800d5c2:	6810      	ldr	r0, [r2, #0]
 800d5c4:	4689      	mov	r9, r1
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	aa08      	add	r2, sp, #32
 800d5ca:	a907      	add	r1, sp, #28
 800d5cc:	47a0      	blx	r4
 800d5ce:	b968      	cbnz	r0, 800d5ec <listen_message_reliably+0x168>
 800d5d0:	9b05      	ldr	r3, [sp, #20]
 800d5d2:	eba3 0309 	sub.w	r3, r3, r9
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	9305      	str	r3, [sp, #20]
 800d5da:	f73f af5c 	bgt.w	800d496 <listen_message_reliably+0x12>
 800d5de:	4604      	mov	r4, r0
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	b01d      	add	sp, #116	; 0x74
 800d5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e8:	9b05      	ldr	r3, [sp, #20]
 800d5ea:	e7e0      	b.n	800d5ae <listen_message_reliably+0x12a>
 800d5ec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	a80c      	add	r0, sp, #48	; 0x30
 800d5f4:	f7ff f93e 	bl	800c874 <ucdr_init_buffer>
 800d5f8:	2500      	movs	r5, #0
 800d5fa:	f10d 031a 	add.w	r3, sp, #26
 800d5fe:	aa06      	add	r2, sp, #24
 800d600:	a90c      	add	r1, sp, #48	; 0x30
 800d602:	4640      	mov	r0, r8
 800d604:	f88d 5018 	strb.w	r5, [sp, #24]
 800d608:	f000 fbf0 	bl	800ddec <uxr_read_session_header>
 800d60c:	b918      	cbnz	r0, 800d616 <listen_message_reliably+0x192>
 800d60e:	4620      	mov	r0, r4
 800d610:	b01d      	add	sp, #116	; 0x74
 800d612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d616:	4629      	mov	r1, r5
 800d618:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d61c:	f000 fc8a 	bl	800df34 <uxr_stream_id_from_raw>
 800d620:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d624:	2d01      	cmp	r5, #1
 800d626:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800d62a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d62e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d632:	d04b      	beq.n	800d6cc <listen_message_reliably+0x248>
 800d634:	2d02      	cmp	r5, #2
 800d636:	d00f      	beq.n	800d658 <listen_message_reliably+0x1d4>
 800d638:	2d00      	cmp	r5, #0
 800d63a:	d1e8      	bne.n	800d60e <listen_message_reliably+0x18a>
 800d63c:	4629      	mov	r1, r5
 800d63e:	4628      	mov	r0, r5
 800d640:	f000 fc78 	bl	800df34 <uxr_stream_id_from_raw>
 800d644:	a90c      	add	r1, sp, #48	; 0x30
 800d646:	4602      	mov	r2, r0
 800d648:	4640      	mov	r0, r8
 800d64a:	920a      	str	r2, [sp, #40]	; 0x28
 800d64c:	f7ff fd92 	bl	800d174 <read_submessage_list>
 800d650:	4620      	mov	r0, r4
 800d652:	b01d      	add	sp, #116	; 0x74
 800d654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d658:	4631      	mov	r1, r6
 800d65a:	f108 0008 	add.w	r0, r8, #8
 800d65e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800d662:	f000 fd55 	bl	800e110 <uxr_get_input_reliable_stream>
 800d666:	4607      	mov	r7, r0
 800d668:	b338      	cbz	r0, 800d6ba <listen_message_reliably+0x236>
 800d66a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d66c:	9203      	str	r2, [sp, #12]
 800d66e:	a80c      	add	r0, sp, #48	; 0x30
 800d670:	f7ff f930 	bl	800c8d4 <ucdr_buffer_remaining>
 800d674:	4603      	mov	r3, r0
 800d676:	f10d 0019 	add.w	r0, sp, #25
 800d67a:	9000      	str	r0, [sp, #0]
 800d67c:	9a03      	ldr	r2, [sp, #12]
 800d67e:	4651      	mov	r1, sl
 800d680:	4638      	mov	r0, r7
 800d682:	f006 ff55 	bl	8014530 <uxr_receive_reliable_message>
 800d686:	b1c0      	cbz	r0, 800d6ba <listen_message_reliably+0x236>
 800d688:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d68c:	b393      	cbz	r3, 800d6f4 <listen_message_reliably+0x270>
 800d68e:	ad14      	add	r5, sp, #80	; 0x50
 800d690:	f04f 0a02 	mov.w	sl, #2
 800d694:	e00a      	b.n	800d6ac <listen_message_reliably+0x228>
 800d696:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800d69a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800d69e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800d6a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	f7ff fd64 	bl	800d174 <read_submessage_list>
 800d6ac:	2204      	movs	r2, #4
 800d6ae:	4629      	mov	r1, r5
 800d6b0:	4638      	mov	r0, r7
 800d6b2:	f006 ffbd 	bl	8014630 <uxr_next_input_reliable_buffer_available>
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	d1ed      	bne.n	800d696 <listen_message_reliably+0x212>
 800d6ba:	4640      	mov	r0, r8
 800d6bc:	4632      	mov	r2, r6
 800d6be:	4649      	mov	r1, r9
 800d6c0:	f7ff fbd2 	bl	800ce68 <write_submessage_acknack.isra.0>
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	b01d      	add	sp, #116	; 0x74
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	f108 0008 	add.w	r0, r8, #8
 800d6d2:	f000 fd13 	bl	800e0fc <uxr_get_input_best_effort_stream>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	d099      	beq.n	800d60e <listen_message_reliably+0x18a>
 800d6da:	4651      	mov	r1, sl
 800d6dc:	f006 fe94 	bl	8014408 <uxr_receive_best_effort_message>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d094      	beq.n	800d60e <listen_message_reliably+0x18a>
 800d6e4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800d6e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6ea:	a90c      	add	r1, sp, #48	; 0x30
 800d6ec:	4640      	mov	r0, r8
 800d6ee:	f7ff fd41 	bl	800d174 <read_submessage_list>
 800d6f2:	e78c      	b.n	800d60e <listen_message_reliably+0x18a>
 800d6f4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800d6f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6fa:	a90c      	add	r1, sp, #48	; 0x30
 800d6fc:	4640      	mov	r0, r8
 800d6fe:	f7ff fd39 	bl	800d174 <read_submessage_list>
 800d702:	e7c4      	b.n	800d68e <listen_message_reliably+0x20a>

0800d704 <uxr_run_session_timeout>:
 800d704:	b570      	push	{r4, r5, r6, lr}
 800d706:	4604      	mov	r4, r0
 800d708:	460d      	mov	r5, r1
 800d70a:	f000 fd67 	bl	800e1dc <uxr_millis>
 800d70e:	4606      	mov	r6, r0
 800d710:	4620      	mov	r0, r4
 800d712:	f7ff fc71 	bl	800cff8 <uxr_flash_output_streams>
 800d716:	4629      	mov	r1, r5
 800d718:	4620      	mov	r0, r4
 800d71a:	f7ff feb3 	bl	800d484 <listen_message_reliably>
 800d71e:	f000 fd5d 	bl	800e1dc <uxr_millis>
 800d722:	1b83      	subs	r3, r0, r6
 800d724:	1ae9      	subs	r1, r5, r3
 800d726:	2900      	cmp	r1, #0
 800d728:	dcf6      	bgt.n	800d718 <uxr_run_session_timeout+0x14>
 800d72a:	f104 0008 	add.w	r0, r4, #8
 800d72e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d732:	f000 bcf7 	b.w	800e124 <uxr_output_streams_confirmed>
 800d736:	bf00      	nop

0800d738 <uxr_run_session_until_data>:
 800d738:	b570      	push	{r4, r5, r6, lr}
 800d73a:	4604      	mov	r4, r0
 800d73c:	460d      	mov	r5, r1
 800d73e:	f000 fd4d 	bl	800e1dc <uxr_millis>
 800d742:	4606      	mov	r6, r0
 800d744:	4620      	mov	r0, r4
 800d746:	f7ff fc57 	bl	800cff8 <uxr_flash_output_streams>
 800d74a:	2300      	movs	r3, #0
 800d74c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800d750:	4629      	mov	r1, r5
 800d752:	e005      	b.n	800d760 <uxr_run_session_until_data+0x28>
 800d754:	f000 fd42 	bl	800e1dc <uxr_millis>
 800d758:	1b83      	subs	r3, r0, r6
 800d75a:	1ae9      	subs	r1, r5, r3
 800d75c:	2900      	cmp	r1, #0
 800d75e:	dd07      	ble.n	800d770 <uxr_run_session_until_data+0x38>
 800d760:	4620      	mov	r0, r4
 800d762:	f7ff fe8f 	bl	800d484 <listen_message_reliably>
 800d766:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d0f2      	beq.n	800d754 <uxr_run_session_until_data+0x1c>
 800d76e:	bd70      	pop	{r4, r5, r6, pc}
 800d770:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800d774:	bd70      	pop	{r4, r5, r6, pc}
 800d776:	bf00      	nop

0800d778 <uxr_run_session_until_confirm_delivery>:
 800d778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d77c:	4606      	mov	r6, r0
 800d77e:	460d      	mov	r5, r1
 800d780:	f000 fd2c 	bl	800e1dc <uxr_millis>
 800d784:	4607      	mov	r7, r0
 800d786:	4630      	mov	r0, r6
 800d788:	f7ff fc36 	bl	800cff8 <uxr_flash_output_streams>
 800d78c:	2d00      	cmp	r5, #0
 800d78e:	f106 0808 	add.w	r8, r6, #8
 800d792:	bfa8      	it	ge
 800d794:	462c      	movge	r4, r5
 800d796:	da07      	bge.n	800d7a8 <uxr_run_session_until_confirm_delivery+0x30>
 800d798:	e00e      	b.n	800d7b8 <uxr_run_session_until_confirm_delivery+0x40>
 800d79a:	f7ff fe73 	bl	800d484 <listen_message_reliably>
 800d79e:	f000 fd1d 	bl	800e1dc <uxr_millis>
 800d7a2:	1bc3      	subs	r3, r0, r7
 800d7a4:	1aec      	subs	r4, r5, r3
 800d7a6:	d407      	bmi.n	800d7b8 <uxr_run_session_until_confirm_delivery+0x40>
 800d7a8:	4640      	mov	r0, r8
 800d7aa:	f000 fcbb 	bl	800e124 <uxr_output_streams_confirmed>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	4621      	mov	r1, r4
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d0f0      	beq.n	800d79a <uxr_run_session_until_confirm_delivery+0x22>
 800d7b8:	4640      	mov	r0, r8
 800d7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7be:	f000 bcb1 	b.w	800e124 <uxr_output_streams_confirmed>
 800d7c2:	bf00      	nop

0800d7c4 <uxr_run_session_until_all_status>:
 800d7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7c8:	9c08      	ldr	r4, [sp, #32]
 800d7ca:	4606      	mov	r6, r0
 800d7cc:	460f      	mov	r7, r1
 800d7ce:	4691      	mov	r9, r2
 800d7d0:	461d      	mov	r5, r3
 800d7d2:	f7ff fc11 	bl	800cff8 <uxr_flash_output_streams>
 800d7d6:	b124      	cbz	r4, 800d7e2 <uxr_run_session_until_all_status+0x1e>
 800d7d8:	4622      	mov	r2, r4
 800d7da:	21ff      	movs	r1, #255	; 0xff
 800d7dc:	4628      	mov	r0, r5
 800d7de:	f009 f979 	bl	8016ad4 <memset>
 800d7e2:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800d7e6:	67f4      	str	r4, [r6, #124]	; 0x7c
 800d7e8:	f000 fcf8 	bl	800e1dc <uxr_millis>
 800d7ec:	3d01      	subs	r5, #1
 800d7ee:	f1a9 0902 	sub.w	r9, r9, #2
 800d7f2:	4680      	mov	r8, r0
 800d7f4:	4639      	mov	r1, r7
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	f7ff fe44 	bl	800d484 <listen_message_reliably>
 800d7fc:	f000 fcee 	bl	800e1dc <uxr_millis>
 800d800:	eba0 0008 	sub.w	r0, r0, r8
 800d804:	1a39      	subs	r1, r7, r0
 800d806:	b344      	cbz	r4, 800d85a <uxr_run_session_until_all_status+0x96>
 800d808:	4628      	mov	r0, r5
 800d80a:	46ac      	mov	ip, r5
 800d80c:	2301      	movs	r3, #1
 800d80e:	e002      	b.n	800d816 <uxr_run_session_until_all_status+0x52>
 800d810:	42a3      	cmp	r3, r4
 800d812:	d20d      	bcs.n	800d830 <uxr_run_session_until_all_status+0x6c>
 800d814:	3301      	adds	r3, #1
 800d816:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800d81a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800d81e:	d1f7      	bne.n	800d810 <uxr_run_session_until_all_status+0x4c>
 800d820:	42a3      	cmp	r3, r4
 800d822:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800d826:	d213      	bcs.n	800d850 <uxr_run_session_until_all_status+0x8c>
 800d828:	2a00      	cmp	r2, #0
 800d82a:	d0f3      	beq.n	800d814 <uxr_run_session_until_all_status+0x50>
 800d82c:	2900      	cmp	r1, #0
 800d82e:	dce2      	bgt.n	800d7f6 <uxr_run_session_until_all_status+0x32>
 800d830:	2300      	movs	r3, #0
 800d832:	67f3      	str	r3, [r6, #124]	; 0x7c
 800d834:	442c      	add	r4, r5
 800d836:	e001      	b.n	800d83c <uxr_run_session_until_all_status+0x78>
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d812      	bhi.n	800d862 <uxr_run_session_until_all_status+0x9e>
 800d83c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d840:	4284      	cmp	r4, r0
 800d842:	d1f9      	bne.n	800d838 <uxr_run_session_until_all_status+0x74>
 800d844:	2b01      	cmp	r3, #1
 800d846:	bf8c      	ite	hi
 800d848:	2000      	movhi	r0, #0
 800d84a:	2001      	movls	r0, #1
 800d84c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d850:	2900      	cmp	r1, #0
 800d852:	dded      	ble.n	800d830 <uxr_run_session_until_all_status+0x6c>
 800d854:	2a00      	cmp	r2, #0
 800d856:	d1ce      	bne.n	800d7f6 <uxr_run_session_until_all_status+0x32>
 800d858:	e7ea      	b.n	800d830 <uxr_run_session_until_all_status+0x6c>
 800d85a:	67f4      	str	r4, [r6, #124]	; 0x7c
 800d85c:	2001      	movs	r0, #1
 800d85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d862:	2000      	movs	r0, #0
 800d864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d868 <wait_session_status>:
 800d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86c:	4604      	mov	r4, r0
 800d86e:	b09d      	sub	sp, #116	; 0x74
 800d870:	20ff      	movs	r0, #255	; 0xff
 800d872:	7160      	strb	r0, [r4, #5]
 800d874:	9303      	str	r3, [sp, #12]
 800d876:	2b00      	cmp	r3, #0
 800d878:	f000 80b6 	beq.w	800d9e8 <wait_session_status+0x180>
 800d87c:	468a      	mov	sl, r1
 800d87e:	4691      	mov	r9, r2
 800d880:	f04f 0b00 	mov.w	fp, #0
 800d884:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d886:	464a      	mov	r2, r9
 800d888:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d88c:	4651      	mov	r1, sl
 800d88e:	47a8      	blx	r5
 800d890:	f000 fca4 	bl	800e1dc <uxr_millis>
 800d894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d898:	4605      	mov	r5, r0
 800d89a:	e009      	b.n	800d8b0 <wait_session_status+0x48>
 800d89c:	f000 fc9e 	bl	800e1dc <uxr_millis>
 800d8a0:	1b40      	subs	r0, r0, r5
 800d8a2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	dd40      	ble.n	800d92c <wait_session_status+0xc4>
 800d8aa:	7960      	ldrb	r0, [r4, #5]
 800d8ac:	28ff      	cmp	r0, #255	; 0xff
 800d8ae:	d145      	bne.n	800d93c <wait_session_status+0xd4>
 800d8b0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d8b2:	a908      	add	r1, sp, #32
 800d8b4:	6896      	ldr	r6, [r2, #8]
 800d8b6:	6810      	ldr	r0, [r2, #0]
 800d8b8:	aa09      	add	r2, sp, #36	; 0x24
 800d8ba:	47b0      	blx	r6
 800d8bc:	2800      	cmp	r0, #0
 800d8be:	d0ed      	beq.n	800d89c <wait_session_status+0x34>
 800d8c0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d8c4:	a80c      	add	r0, sp, #48	; 0x30
 800d8c6:	f7fe ffd5 	bl	800c874 <ucdr_init_buffer>
 800d8ca:	2600      	movs	r6, #0
 800d8cc:	f10d 031e 	add.w	r3, sp, #30
 800d8d0:	aa07      	add	r2, sp, #28
 800d8d2:	a90c      	add	r1, sp, #48	; 0x30
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	f88d 601c 	strb.w	r6, [sp, #28]
 800d8da:	f000 fa87 	bl	800ddec <uxr_read_session_header>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d0dc      	beq.n	800d89c <wait_session_status+0x34>
 800d8e2:	4631      	mov	r1, r6
 800d8e4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d8e8:	f000 fb24 	bl	800df34 <uxr_stream_id_from_raw>
 800d8ec:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d8f0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d8f4:	9302      	str	r3, [sp, #8]
 800d8f6:	2f01      	cmp	r7, #1
 800d8f8:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800d8fc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d900:	d05c      	beq.n	800d9bc <wait_session_status+0x154>
 800d902:	2f02      	cmp	r7, #2
 800d904:	d020      	beq.n	800d948 <wait_session_status+0xe0>
 800d906:	2f00      	cmp	r7, #0
 800d908:	d1c8      	bne.n	800d89c <wait_session_status+0x34>
 800d90a:	4639      	mov	r1, r7
 800d90c:	4638      	mov	r0, r7
 800d90e:	f000 fb11 	bl	800df34 <uxr_stream_id_from_raw>
 800d912:	a90c      	add	r1, sp, #48	; 0x30
 800d914:	4602      	mov	r2, r0
 800d916:	900b      	str	r0, [sp, #44]	; 0x2c
 800d918:	4620      	mov	r0, r4
 800d91a:	f7ff fc2b 	bl	800d174 <read_submessage_list>
 800d91e:	f000 fc5d 	bl	800e1dc <uxr_millis>
 800d922:	1b40      	subs	r0, r0, r5
 800d924:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800d928:	2b00      	cmp	r3, #0
 800d92a:	dcbe      	bgt.n	800d8aa <wait_session_status+0x42>
 800d92c:	9b03      	ldr	r3, [sp, #12]
 800d92e:	7960      	ldrb	r0, [r4, #5]
 800d930:	f10b 0b01 	add.w	fp, fp, #1
 800d934:	455b      	cmp	r3, fp
 800d936:	d001      	beq.n	800d93c <wait_session_status+0xd4>
 800d938:	28ff      	cmp	r0, #255	; 0xff
 800d93a:	d0a3      	beq.n	800d884 <wait_session_status+0x1c>
 800d93c:	38ff      	subs	r0, #255	; 0xff
 800d93e:	bf18      	it	ne
 800d940:	2001      	movne	r0, #1
 800d942:	b01d      	add	sp, #116	; 0x74
 800d944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d948:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d94c:	9304      	str	r3, [sp, #16]
 800d94e:	4631      	mov	r1, r6
 800d950:	f104 0008 	add.w	r0, r4, #8
 800d954:	f000 fbdc 	bl	800e110 <uxr_get_input_reliable_stream>
 800d958:	4680      	mov	r8, r0
 800d95a:	b348      	cbz	r0, 800d9b0 <wait_session_status+0x148>
 800d95c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d95e:	9205      	str	r2, [sp, #20]
 800d960:	a80c      	add	r0, sp, #48	; 0x30
 800d962:	f7fe ffb7 	bl	800c8d4 <ucdr_buffer_remaining>
 800d966:	4603      	mov	r3, r0
 800d968:	f10d 001d 	add.w	r0, sp, #29
 800d96c:	9000      	str	r0, [sp, #0]
 800d96e:	9a05      	ldr	r2, [sp, #20]
 800d970:	9902      	ldr	r1, [sp, #8]
 800d972:	4640      	mov	r0, r8
 800d974:	f006 fddc 	bl	8014530 <uxr_receive_reliable_message>
 800d978:	b1d0      	cbz	r0, 800d9b0 <wait_session_status+0x148>
 800d97a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d03a      	beq.n	800d9f8 <wait_session_status+0x190>
 800d982:	9f04      	ldr	r7, [sp, #16]
 800d984:	e00a      	b.n	800d99c <wait_session_status+0x134>
 800d986:	f04f 0302 	mov.w	r3, #2
 800d98a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800d98e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800d992:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800d996:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d998:	f7ff fbec 	bl	800d174 <read_submessage_list>
 800d99c:	a914      	add	r1, sp, #80	; 0x50
 800d99e:	2204      	movs	r2, #4
 800d9a0:	4640      	mov	r0, r8
 800d9a2:	f006 fe45 	bl	8014630 <uxr_next_input_reliable_buffer_available>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	a914      	add	r1, sp, #80	; 0x50
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d1ea      	bne.n	800d986 <wait_session_status+0x11e>
 800d9b0:	9904      	ldr	r1, [sp, #16]
 800d9b2:	4632      	mov	r2, r6
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f7ff fa57 	bl	800ce68 <write_submessage_acknack.isra.0>
 800d9ba:	e76f      	b.n	800d89c <wait_session_status+0x34>
 800d9bc:	4631      	mov	r1, r6
 800d9be:	f104 0008 	add.w	r0, r4, #8
 800d9c2:	f000 fb9b 	bl	800e0fc <uxr_get_input_best_effort_stream>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	f43f af68 	beq.w	800d89c <wait_session_status+0x34>
 800d9cc:	9902      	ldr	r1, [sp, #8]
 800d9ce:	f006 fd1b 	bl	8014408 <uxr_receive_best_effort_message>
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	f43f af62 	beq.w	800d89c <wait_session_status+0x34>
 800d9d8:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800d9dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9de:	a90c      	add	r1, sp, #48	; 0x30
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	f7ff fbc7 	bl	800d174 <read_submessage_list>
 800d9e6:	e759      	b.n	800d89c <wait_session_status+0x34>
 800d9e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d9ea:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d9ee:	47a0      	blx	r4
 800d9f0:	2001      	movs	r0, #1
 800d9f2:	b01d      	add	sp, #116	; 0x74
 800d9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f8:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800d9fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9fe:	a90c      	add	r1, sp, #48	; 0x30
 800da00:	4620      	mov	r0, r4
 800da02:	f7ff fbb7 	bl	800d174 <read_submessage_list>
 800da06:	e7bc      	b.n	800d982 <wait_session_status+0x11a>

0800da08 <uxr_delete_session_retries>:
 800da08:	b530      	push	{r4, r5, lr}
 800da0a:	b08f      	sub	sp, #60	; 0x3c
 800da0c:	4604      	mov	r4, r0
 800da0e:	460d      	mov	r5, r1
 800da10:	f000 fa2e 	bl	800de70 <uxr_session_header_offset>
 800da14:	2300      	movs	r3, #0
 800da16:	2210      	movs	r2, #16
 800da18:	9000      	str	r0, [sp, #0]
 800da1a:	a902      	add	r1, sp, #8
 800da1c:	a806      	add	r0, sp, #24
 800da1e:	f7fe ff17 	bl	800c850 <ucdr_init_buffer_origin_offset>
 800da22:	a906      	add	r1, sp, #24
 800da24:	4620      	mov	r0, r4
 800da26:	f000 f973 	bl	800dd10 <uxr_buffer_delete_session>
 800da2a:	2200      	movs	r2, #0
 800da2c:	4611      	mov	r1, r2
 800da2e:	9b06      	ldr	r3, [sp, #24]
 800da30:	4620      	mov	r0, r4
 800da32:	f000 f9c7 	bl	800ddc4 <uxr_stamp_session_header>
 800da36:	a806      	add	r0, sp, #24
 800da38:	f7fe ff48 	bl	800c8cc <ucdr_buffer_length>
 800da3c:	462b      	mov	r3, r5
 800da3e:	4602      	mov	r2, r0
 800da40:	a902      	add	r1, sp, #8
 800da42:	4620      	mov	r0, r4
 800da44:	f7ff ff10 	bl	800d868 <wait_session_status>
 800da48:	b118      	cbz	r0, 800da52 <uxr_delete_session_retries+0x4a>
 800da4a:	7960      	ldrb	r0, [r4, #5]
 800da4c:	fab0 f080 	clz	r0, r0
 800da50:	0940      	lsrs	r0, r0, #5
 800da52:	b00f      	add	sp, #60	; 0x3c
 800da54:	bd30      	pop	{r4, r5, pc}
 800da56:	bf00      	nop

0800da58 <uxr_create_session>:
 800da58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5c:	f100 0b08 	add.w	fp, r0, #8
 800da60:	b0ab      	sub	sp, #172	; 0xac
 800da62:	4604      	mov	r4, r0
 800da64:	4658      	mov	r0, fp
 800da66:	f000 fa99 	bl	800df9c <uxr_reset_stream_storage>
 800da6a:	4620      	mov	r0, r4
 800da6c:	f000 fa00 	bl	800de70 <uxr_session_header_offset>
 800da70:	2300      	movs	r3, #0
 800da72:	9000      	str	r0, [sp, #0]
 800da74:	221c      	movs	r2, #28
 800da76:	a90b      	add	r1, sp, #44	; 0x2c
 800da78:	a812      	add	r0, sp, #72	; 0x48
 800da7a:	f7fe fee9 	bl	800c850 <ucdr_init_buffer_origin_offset>
 800da7e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800da80:	8a1a      	ldrh	r2, [r3, #16]
 800da82:	3a04      	subs	r2, #4
 800da84:	b292      	uxth	r2, r2
 800da86:	a912      	add	r1, sp, #72	; 0x48
 800da88:	4620      	mov	r0, r4
 800da8a:	f000 f917 	bl	800dcbc <uxr_buffer_create_session>
 800da8e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800da90:	4620      	mov	r0, r4
 800da92:	f000 f983 	bl	800dd9c <uxr_stamp_create_session_header>
 800da96:	a812      	add	r0, sp, #72	; 0x48
 800da98:	f7fe ff18 	bl	800c8cc <ucdr_buffer_length>
 800da9c:	23ff      	movs	r3, #255	; 0xff
 800da9e:	7163      	strb	r3, [r4, #5]
 800daa0:	230a      	movs	r3, #10
 800daa2:	46da      	mov	sl, fp
 800daa4:	9303      	str	r3, [sp, #12]
 800daa6:	4683      	mov	fp, r0
 800daa8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800daaa:	465a      	mov	r2, fp
 800daac:	e9d3 0500 	ldrd	r0, r5, [r3]
 800dab0:	a90b      	add	r1, sp, #44	; 0x2c
 800dab2:	47a8      	blx	r5
 800dab4:	f000 fb92 	bl	800e1dc <uxr_millis>
 800dab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dabc:	4605      	mov	r5, r0
 800dabe:	e009      	b.n	800dad4 <uxr_create_session+0x7c>
 800dac0:	f000 fb8c 	bl	800e1dc <uxr_millis>
 800dac4:	1b40      	subs	r0, r0, r5
 800dac6:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800daca:	2b00      	cmp	r3, #0
 800dacc:	7962      	ldrb	r2, [r4, #5]
 800dace:	dd38      	ble.n	800db42 <uxr_create_session+0xea>
 800dad0:	2aff      	cmp	r2, #255	; 0xff
 800dad2:	d13c      	bne.n	800db4e <uxr_create_session+0xf6>
 800dad4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800dad6:	a907      	add	r1, sp, #28
 800dad8:	6896      	ldr	r6, [r2, #8]
 800dada:	6810      	ldr	r0, [r2, #0]
 800dadc:	aa08      	add	r2, sp, #32
 800dade:	47b0      	blx	r6
 800dae0:	2800      	cmp	r0, #0
 800dae2:	d0ed      	beq.n	800dac0 <uxr_create_session+0x68>
 800dae4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800dae8:	a81a      	add	r0, sp, #104	; 0x68
 800daea:	f7fe fec3 	bl	800c874 <ucdr_init_buffer>
 800daee:	2600      	movs	r6, #0
 800daf0:	f10d 031a 	add.w	r3, sp, #26
 800daf4:	aa06      	add	r2, sp, #24
 800daf6:	a91a      	add	r1, sp, #104	; 0x68
 800daf8:	4620      	mov	r0, r4
 800dafa:	f88d 6018 	strb.w	r6, [sp, #24]
 800dafe:	f000 f975 	bl	800ddec <uxr_read_session_header>
 800db02:	2800      	cmp	r0, #0
 800db04:	d0dc      	beq.n	800dac0 <uxr_create_session+0x68>
 800db06:	4631      	mov	r1, r6
 800db08:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800db0c:	f000 fa12 	bl	800df34 <uxr_stream_id_from_raw>
 800db10:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800db14:	2e01      	cmp	r6, #1
 800db16:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800db1a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800db1e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800db22:	d053      	beq.n	800dbcc <uxr_create_session+0x174>
 800db24:	2e02      	cmp	r6, #2
 800db26:	d018      	beq.n	800db5a <uxr_create_session+0x102>
 800db28:	2e00      	cmp	r6, #0
 800db2a:	d1c9      	bne.n	800dac0 <uxr_create_session+0x68>
 800db2c:	4631      	mov	r1, r6
 800db2e:	4630      	mov	r0, r6
 800db30:	f000 fa00 	bl	800df34 <uxr_stream_id_from_raw>
 800db34:	a91a      	add	r1, sp, #104	; 0x68
 800db36:	4602      	mov	r2, r0
 800db38:	900a      	str	r0, [sp, #40]	; 0x28
 800db3a:	4620      	mov	r0, r4
 800db3c:	f7ff fb1a 	bl	800d174 <read_submessage_list>
 800db40:	e7be      	b.n	800dac0 <uxr_create_session+0x68>
 800db42:	9b03      	ldr	r3, [sp, #12]
 800db44:	3b01      	subs	r3, #1
 800db46:	9303      	str	r3, [sp, #12]
 800db48:	d001      	beq.n	800db4e <uxr_create_session+0xf6>
 800db4a:	2aff      	cmp	r2, #255	; 0xff
 800db4c:	d0ac      	beq.n	800daa8 <uxr_create_session+0x50>
 800db4e:	2a00      	cmp	r2, #0
 800db50:	d051      	beq.n	800dbf6 <uxr_create_session+0x19e>
 800db52:	2000      	movs	r0, #0
 800db54:	b02b      	add	sp, #172	; 0xac
 800db56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800db5e:	9304      	str	r3, [sp, #16]
 800db60:	4639      	mov	r1, r7
 800db62:	4650      	mov	r0, sl
 800db64:	f000 fad4 	bl	800e110 <uxr_get_input_reliable_stream>
 800db68:	4680      	mov	r8, r0
 800db6a:	b348      	cbz	r0, 800dbc0 <uxr_create_session+0x168>
 800db6c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800db6e:	9205      	str	r2, [sp, #20]
 800db70:	a81a      	add	r0, sp, #104	; 0x68
 800db72:	f7fe feaf 	bl	800c8d4 <ucdr_buffer_remaining>
 800db76:	4603      	mov	r3, r0
 800db78:	f10d 0019 	add.w	r0, sp, #25
 800db7c:	9000      	str	r0, [sp, #0]
 800db7e:	9a05      	ldr	r2, [sp, #20]
 800db80:	4649      	mov	r1, r9
 800db82:	4640      	mov	r0, r8
 800db84:	f006 fcd4 	bl	8014530 <uxr_receive_reliable_message>
 800db88:	b1d0      	cbz	r0, 800dbc0 <uxr_create_session+0x168>
 800db8a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d038      	beq.n	800dc04 <uxr_create_session+0x1ac>
 800db92:	9e04      	ldr	r6, [sp, #16]
 800db94:	e00a      	b.n	800dbac <uxr_create_session+0x154>
 800db96:	f04f 0302 	mov.w	r3, #2
 800db9a:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800db9e:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800dba2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dba8:	f7ff fae4 	bl	800d174 <read_submessage_list>
 800dbac:	a922      	add	r1, sp, #136	; 0x88
 800dbae:	2204      	movs	r2, #4
 800dbb0:	4640      	mov	r0, r8
 800dbb2:	f006 fd3d 	bl	8014630 <uxr_next_input_reliable_buffer_available>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	a922      	add	r1, sp, #136	; 0x88
 800dbba:	4620      	mov	r0, r4
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1ea      	bne.n	800db96 <uxr_create_session+0x13e>
 800dbc0:	9904      	ldr	r1, [sp, #16]
 800dbc2:	463a      	mov	r2, r7
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f7ff f94f 	bl	800ce68 <write_submessage_acknack.isra.0>
 800dbca:	e779      	b.n	800dac0 <uxr_create_session+0x68>
 800dbcc:	4639      	mov	r1, r7
 800dbce:	4650      	mov	r0, sl
 800dbd0:	f000 fa94 	bl	800e0fc <uxr_get_input_best_effort_stream>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	f43f af73 	beq.w	800dac0 <uxr_create_session+0x68>
 800dbda:	4649      	mov	r1, r9
 800dbdc:	f006 fc14 	bl	8014408 <uxr_receive_best_effort_message>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	f43f af6d 	beq.w	800dac0 <uxr_create_session+0x68>
 800dbe6:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800dbea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbec:	a91a      	add	r1, sp, #104	; 0x68
 800dbee:	4620      	mov	r0, r4
 800dbf0:	f7ff fac0 	bl	800d174 <read_submessage_list>
 800dbf4:	e764      	b.n	800dac0 <uxr_create_session+0x68>
 800dbf6:	4650      	mov	r0, sl
 800dbf8:	f000 f9d0 	bl	800df9c <uxr_reset_stream_storage>
 800dbfc:	2001      	movs	r0, #1
 800dbfe:	b02b      	add	sp, #172	; 0xac
 800dc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc04:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800dc08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc0a:	a91a      	add	r1, sp, #104	; 0x68
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f7ff fab1 	bl	800d174 <read_submessage_list>
 800dc12:	e7be      	b.n	800db92 <uxr_create_session+0x13a>

0800dc14 <uxr_prepare_stream_to_write_submessage>:
 800dc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc18:	b082      	sub	sp, #8
 800dc1a:	4682      	mov	sl, r0
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	4615      	mov	r5, r2
 800dc20:	461e      	mov	r6, r3
 800dc22:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800dc26:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800dc2a:	9101      	str	r1, [sp, #4]
 800dc2c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800dc30:	f000 face 	bl	800e1d0 <uxr_submessage_padding>
 800dc34:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dc38:	f105 0904 	add.w	r9, r5, #4
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	4481      	add	r9, r0
 800dc40:	d01d      	beq.n	800dc7e <uxr_prepare_stream_to_write_submessage+0x6a>
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	d116      	bne.n	800dc74 <uxr_prepare_stream_to_write_submessage+0x60>
 800dc46:	4621      	mov	r1, r4
 800dc48:	f10a 0008 	add.w	r0, sl, #8
 800dc4c:	f000 fa4c 	bl	800e0e8 <uxr_get_output_reliable_stream>
 800dc50:	4604      	mov	r4, r0
 800dc52:	b158      	cbz	r0, 800dc6c <uxr_prepare_stream_to_write_submessage+0x58>
 800dc54:	4649      	mov	r1, r9
 800dc56:	4632      	mov	r2, r6
 800dc58:	f006 fea6 	bl	80149a8 <uxr_prepare_reliable_buffer_to_write>
 800dc5c:	4604      	mov	r4, r0
 800dc5e:	b12c      	cbz	r4, 800dc6c <uxr_prepare_stream_to_write_submessage+0x58>
 800dc60:	4643      	mov	r3, r8
 800dc62:	b2aa      	uxth	r2, r5
 800dc64:	4639      	mov	r1, r7
 800dc66:	4630      	mov	r0, r6
 800dc68:	f000 fa72 	bl	800e150 <uxr_buffer_submessage_header>
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	b002      	add	sp, #8
 800dc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc74:	2400      	movs	r4, #0
 800dc76:	4620      	mov	r0, r4
 800dc78:	b002      	add	sp, #8
 800dc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc7e:	4621      	mov	r1, r4
 800dc80:	f10a 0008 	add.w	r0, sl, #8
 800dc84:	f000 fa28 	bl	800e0d8 <uxr_get_output_best_effort_stream>
 800dc88:	4604      	mov	r4, r0
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	d0ee      	beq.n	800dc6c <uxr_prepare_stream_to_write_submessage+0x58>
 800dc8e:	4649      	mov	r1, r9
 800dc90:	4632      	mov	r2, r6
 800dc92:	f006 fdb9 	bl	8014808 <uxr_prepare_best_effort_buffer_to_write>
 800dc96:	4604      	mov	r4, r0
 800dc98:	e7e1      	b.n	800dc5e <uxr_prepare_stream_to_write_submessage+0x4a>
 800dc9a:	bf00      	nop

0800dc9c <uxr_init_session_info>:
 800dc9c:	0e13      	lsrs	r3, r2, #24
 800dc9e:	7043      	strb	r3, [r0, #1]
 800dca0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800dca4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800dca8:	7001      	strb	r1, [r0, #0]
 800dcaa:	70c3      	strb	r3, [r0, #3]
 800dcac:	2109      	movs	r1, #9
 800dcae:	23ff      	movs	r3, #255	; 0xff
 800dcb0:	f880 c002 	strb.w	ip, [r0, #2]
 800dcb4:	7102      	strb	r2, [r0, #4]
 800dcb6:	80c1      	strh	r1, [r0, #6]
 800dcb8:	7143      	strb	r3, [r0, #5]
 800dcba:	4770      	bx	lr

0800dcbc <uxr_buffer_create_session>:
 800dcbc:	b530      	push	{r4, r5, lr}
 800dcbe:	b089      	sub	sp, #36	; 0x24
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4d12      	ldr	r5, [pc, #72]	; (800dd0c <uxr_buffer_create_session+0x50>)
 800dcc4:	9307      	str	r3, [sp, #28]
 800dcc6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800dcca:	2201      	movs	r2, #1
 800dccc:	9301      	str	r3, [sp, #4]
 800dcce:	80c2      	strh	r2, [r0, #6]
 800dcd0:	f88d 2004 	strb.w	r2, [sp, #4]
 800dcd4:	682a      	ldr	r2, [r5, #0]
 800dcd6:	9200      	str	r2, [sp, #0]
 800dcd8:	88aa      	ldrh	r2, [r5, #4]
 800dcda:	f8ad 2006 	strh.w	r2, [sp, #6]
 800dcde:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800dce2:	9202      	str	r2, [sp, #8]
 800dce4:	460c      	mov	r4, r1
 800dce6:	7802      	ldrb	r2, [r0, #0]
 800dce8:	9303      	str	r3, [sp, #12]
 800dcea:	4619      	mov	r1, r3
 800dcec:	f88d 200c 	strb.w	r2, [sp, #12]
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	2210      	movs	r2, #16
 800dcf4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800dcf8:	9306      	str	r3, [sp, #24]
 800dcfa:	f000 fa29 	bl	800e150 <uxr_buffer_submessage_header>
 800dcfe:	4669      	mov	r1, sp
 800dd00:	4620      	mov	r0, r4
 800dd02:	f001 fa6d 	bl	800f1e0 <uxr_serialize_CREATE_CLIENT_Payload>
 800dd06:	b009      	add	sp, #36	; 0x24
 800dd08:	bd30      	pop	{r4, r5, pc}
 800dd0a:	bf00      	nop
 800dd0c:	08017ab8 	.word	0x08017ab8

0800dd10 <uxr_buffer_delete_session>:
 800dd10:	b510      	push	{r4, lr}
 800dd12:	4b0c      	ldr	r3, [pc, #48]	; (800dd44 <uxr_buffer_delete_session+0x34>)
 800dd14:	b082      	sub	sp, #8
 800dd16:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800dd1a:	f8ad c006 	strh.w	ip, [sp, #6]
 800dd1e:	460c      	mov	r4, r1
 800dd20:	2202      	movs	r2, #2
 800dd22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd26:	80c2      	strh	r2, [r0, #6]
 800dd28:	f8ad 3004 	strh.w	r3, [sp, #4]
 800dd2c:	2204      	movs	r2, #4
 800dd2e:	2300      	movs	r3, #0
 800dd30:	2103      	movs	r1, #3
 800dd32:	4620      	mov	r0, r4
 800dd34:	f000 fa0c 	bl	800e150 <uxr_buffer_submessage_header>
 800dd38:	a901      	add	r1, sp, #4
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f001 faf6 	bl	800f32c <uxr_serialize_DELETE_Payload>
 800dd40:	b002      	add	sp, #8
 800dd42:	bd10      	pop	{r4, pc}
 800dd44:	08017ab8 	.word	0x08017ab8

0800dd48 <uxr_read_create_session_status>:
 800dd48:	b510      	push	{r4, lr}
 800dd4a:	b088      	sub	sp, #32
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	4608      	mov	r0, r1
 800dd50:	a901      	add	r1, sp, #4
 800dd52:	f001 fafb 	bl	800f34c <uxr_deserialize_STATUS_AGENT_Payload>
 800dd56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dd5a:	7163      	strb	r3, [r4, #5]
 800dd5c:	b008      	add	sp, #32
 800dd5e:	bd10      	pop	{r4, pc}

0800dd60 <uxr_read_delete_session_status>:
 800dd60:	b510      	push	{r4, lr}
 800dd62:	4604      	mov	r4, r0
 800dd64:	b084      	sub	sp, #16
 800dd66:	4608      	mov	r0, r1
 800dd68:	a902      	add	r1, sp, #8
 800dd6a:	f001 fb1f 	bl	800f3ac <uxr_deserialize_STATUS_Payload>
 800dd6e:	88e3      	ldrh	r3, [r4, #6]
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d001      	beq.n	800dd78 <uxr_read_delete_session_status+0x18>
 800dd74:	b004      	add	sp, #16
 800dd76:	bd10      	pop	{r4, pc}
 800dd78:	f10d 000a 	add.w	r0, sp, #10
 800dd7c:	f7fe fffa 	bl	800cd74 <uxr_object_id_from_raw>
 800dd80:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800dd84:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800dd88:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	2b02      	cmp	r3, #2
 800dd90:	bf04      	itt	eq
 800dd92:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800dd96:	7163      	strbeq	r3, [r4, #5]
 800dd98:	b004      	add	sp, #16
 800dd9a:	bd10      	pop	{r4, pc}

0800dd9c <uxr_stamp_create_session_header>:
 800dd9c:	b510      	push	{r4, lr}
 800dd9e:	2208      	movs	r2, #8
 800dda0:	b08a      	sub	sp, #40	; 0x28
 800dda2:	4604      	mov	r4, r0
 800dda4:	eb0d 0002 	add.w	r0, sp, r2
 800dda8:	f7fe fd64 	bl	800c874 <ucdr_init_buffer>
 800ddac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddb0:	9400      	str	r4, [sp, #0]
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800ddba:	a802      	add	r0, sp, #8
 800ddbc:	f000 fbc2 	bl	800e544 <uxr_serialize_message_header>
 800ddc0:	b00a      	add	sp, #40	; 0x28
 800ddc2:	bd10      	pop	{r4, pc}

0800ddc4 <uxr_stamp_session_header>:
 800ddc4:	b530      	push	{r4, r5, lr}
 800ddc6:	b08d      	sub	sp, #52	; 0x34
 800ddc8:	4604      	mov	r4, r0
 800ddca:	460d      	mov	r5, r1
 800ddcc:	9203      	str	r2, [sp, #12]
 800ddce:	4619      	mov	r1, r3
 800ddd0:	a804      	add	r0, sp, #16
 800ddd2:	2208      	movs	r2, #8
 800ddd4:	f7fe fd4e 	bl	800c874 <ucdr_init_buffer>
 800ddd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dddc:	9b03      	ldr	r3, [sp, #12]
 800ddde:	9400      	str	r4, [sp, #0]
 800dde0:	462a      	mov	r2, r5
 800dde2:	a804      	add	r0, sp, #16
 800dde4:	f000 fbae 	bl	800e544 <uxr_serialize_message_header>
 800dde8:	b00d      	add	sp, #52	; 0x34
 800ddea:	bd30      	pop	{r4, r5, pc}

0800ddec <uxr_read_session_header>:
 800ddec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf0:	4607      	mov	r7, r0
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	4608      	mov	r0, r1
 800ddf6:	460c      	mov	r4, r1
 800ddf8:	4615      	mov	r5, r2
 800ddfa:	461e      	mov	r6, r3
 800ddfc:	f7fe fd6a 	bl	800c8d4 <ucdr_buffer_remaining>
 800de00:	2808      	cmp	r0, #8
 800de02:	d803      	bhi.n	800de0c <uxr_read_session_header+0x20>
 800de04:	2000      	movs	r0, #0
 800de06:	b004      	add	sp, #16
 800de08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de0c:	f10d 080c 	add.w	r8, sp, #12
 800de10:	4633      	mov	r3, r6
 800de12:	462a      	mov	r2, r5
 800de14:	f8cd 8000 	str.w	r8, [sp]
 800de18:	4620      	mov	r0, r4
 800de1a:	f10d 010b 	add.w	r1, sp, #11
 800de1e:	f000 fbaf 	bl	800e580 <uxr_deserialize_message_header>
 800de22:	783a      	ldrb	r2, [r7, #0]
 800de24:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800de28:	4293      	cmp	r3, r2
 800de2a:	d1eb      	bne.n	800de04 <uxr_read_session_header+0x18>
 800de2c:	061b      	lsls	r3, r3, #24
 800de2e:	d41c      	bmi.n	800de6a <uxr_read_session_header+0x7e>
 800de30:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800de34:	787b      	ldrb	r3, [r7, #1]
 800de36:	429a      	cmp	r2, r3
 800de38:	d003      	beq.n	800de42 <uxr_read_session_header+0x56>
 800de3a:	2001      	movs	r0, #1
 800de3c:	f080 0001 	eor.w	r0, r0, #1
 800de40:	e7e1      	b.n	800de06 <uxr_read_session_header+0x1a>
 800de42:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800de46:	78bb      	ldrb	r3, [r7, #2]
 800de48:	429a      	cmp	r2, r3
 800de4a:	f107 0102 	add.w	r1, r7, #2
 800de4e:	d1f4      	bne.n	800de3a <uxr_read_session_header+0x4e>
 800de50:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800de54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800de58:	429a      	cmp	r2, r3
 800de5a:	d1ee      	bne.n	800de3a <uxr_read_session_header+0x4e>
 800de5c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800de60:	784b      	ldrb	r3, [r1, #1]
 800de62:	429a      	cmp	r2, r3
 800de64:	d1e9      	bne.n	800de3a <uxr_read_session_header+0x4e>
 800de66:	2000      	movs	r0, #0
 800de68:	e7e8      	b.n	800de3c <uxr_read_session_header+0x50>
 800de6a:	2001      	movs	r0, #1
 800de6c:	e7cb      	b.n	800de06 <uxr_read_session_header+0x1a>
 800de6e:	bf00      	nop

0800de70 <uxr_session_header_offset>:
 800de70:	f990 3000 	ldrsb.w	r3, [r0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	bfac      	ite	ge
 800de78:	2008      	movge	r0, #8
 800de7a:	2004      	movlt	r0, #4
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop

0800de80 <uxr_init_base_object_request>:
 800de80:	b510      	push	{r4, lr}
 800de82:	88c3      	ldrh	r3, [r0, #6]
 800de84:	b082      	sub	sp, #8
 800de86:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800de8a:	9101      	str	r1, [sp, #4]
 800de8c:	f1a3 010a 	sub.w	r1, r3, #10
 800de90:	b289      	uxth	r1, r1
 800de92:	42a1      	cmp	r1, r4
 800de94:	d80e      	bhi.n	800deb4 <uxr_init_base_object_request+0x34>
 800de96:	3301      	adds	r3, #1
 800de98:	b29c      	uxth	r4, r3
 800de9a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	80c4      	strh	r4, [r0, #6]
 800dea2:	9801      	ldr	r0, [sp, #4]
 800dea4:	7011      	strb	r1, [r2, #0]
 800dea6:	7053      	strb	r3, [r2, #1]
 800dea8:	1c91      	adds	r1, r2, #2
 800deaa:	f7fe ff77 	bl	800cd9c <uxr_object_id_to_raw>
 800deae:	4620      	mov	r0, r4
 800deb0:	b002      	add	sp, #8
 800deb2:	bd10      	pop	{r4, pc}
 800deb4:	230a      	movs	r3, #10
 800deb6:	2100      	movs	r1, #0
 800deb8:	461c      	mov	r4, r3
 800deba:	e7f1      	b.n	800dea0 <uxr_init_base_object_request+0x20>

0800debc <uxr_parse_base_object_request>:
 800debc:	b570      	push	{r4, r5, r6, lr}
 800debe:	4604      	mov	r4, r0
 800dec0:	3002      	adds	r0, #2
 800dec2:	460d      	mov	r5, r1
 800dec4:	4616      	mov	r6, r2
 800dec6:	f7fe ff55 	bl	800cd74 <uxr_object_id_from_raw>
 800deca:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800dece:	8028      	strh	r0, [r5, #0]
 800ded0:	806b      	strh	r3, [r5, #2]
 800ded2:	7822      	ldrb	r2, [r4, #0]
 800ded4:	7863      	ldrb	r3, [r4, #1]
 800ded6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800deda:	8033      	strh	r3, [r6, #0]
 800dedc:	bd70      	pop	{r4, r5, r6, pc}
 800dede:	bf00      	nop

0800dee0 <uxr_stream_id>:
 800dee0:	2901      	cmp	r1, #1
 800dee2:	b082      	sub	sp, #8
 800dee4:	d01d      	beq.n	800df22 <uxr_stream_id+0x42>
 800dee6:	2902      	cmp	r1, #2
 800dee8:	f04f 0c00 	mov.w	ip, #0
 800deec:	d01e      	beq.n	800df2c <uxr_stream_id+0x4c>
 800deee:	2300      	movs	r3, #0
 800def0:	f36c 0307 	bfi	r3, ip, #0, #8
 800def4:	f360 230f 	bfi	r3, r0, #8, #8
 800def8:	f361 4317 	bfi	r3, r1, #16, #8
 800defc:	f362 631f 	bfi	r3, r2, #24, #8
 800df00:	b2da      	uxtb	r2, r3
 800df02:	2000      	movs	r0, #0
 800df04:	f362 0007 	bfi	r0, r2, #0, #8
 800df08:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800df0c:	f362 200f 	bfi	r0, r2, #8, #8
 800df10:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800df14:	f362 4017 	bfi	r0, r2, #16, #8
 800df18:	0e1b      	lsrs	r3, r3, #24
 800df1a:	f363 601f 	bfi	r0, r3, #24, #8
 800df1e:	b002      	add	sp, #8
 800df20:	4770      	bx	lr
 800df22:	f100 0c01 	add.w	ip, r0, #1
 800df26:	fa5f fc8c 	uxtb.w	ip, ip
 800df2a:	e7e0      	b.n	800deee <uxr_stream_id+0xe>
 800df2c:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800df30:	e7dd      	b.n	800deee <uxr_stream_id+0xe>
 800df32:	bf00      	nop

0800df34 <uxr_stream_id_from_raw>:
 800df34:	b082      	sub	sp, #8
 800df36:	b130      	cbz	r0, 800df46 <uxr_stream_id_from_raw+0x12>
 800df38:	0603      	lsls	r3, r0, #24
 800df3a:	d420      	bmi.n	800df7e <uxr_stream_id_from_raw+0x4a>
 800df3c:	1e42      	subs	r2, r0, #1
 800df3e:	b2d2      	uxtb	r2, r2
 800df40:	f04f 0c01 	mov.w	ip, #1
 800df44:	e001      	b.n	800df4a <uxr_stream_id_from_raw+0x16>
 800df46:	4684      	mov	ip, r0
 800df48:	4602      	mov	r2, r0
 800df4a:	2300      	movs	r3, #0
 800df4c:	f360 0307 	bfi	r3, r0, #0, #8
 800df50:	f362 230f 	bfi	r3, r2, #8, #8
 800df54:	f36c 4317 	bfi	r3, ip, #16, #8
 800df58:	f361 631f 	bfi	r3, r1, #24, #8
 800df5c:	b2da      	uxtb	r2, r3
 800df5e:	2000      	movs	r0, #0
 800df60:	f362 0007 	bfi	r0, r2, #0, #8
 800df64:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800df68:	f362 200f 	bfi	r0, r2, #8, #8
 800df6c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800df70:	f362 4017 	bfi	r0, r2, #16, #8
 800df74:	0e1b      	lsrs	r3, r3, #24
 800df76:	f363 601f 	bfi	r0, r3, #24, #8
 800df7a:	b002      	add	sp, #8
 800df7c:	4770      	bx	lr
 800df7e:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800df82:	f04f 0c02 	mov.w	ip, #2
 800df86:	e7e0      	b.n	800df4a <uxr_stream_id_from_raw+0x16>

0800df88 <uxr_init_stream_storage>:
 800df88:	2300      	movs	r3, #0
 800df8a:	7403      	strb	r3, [r0, #16]
 800df8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800df90:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800df94:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop

0800df9c <uxr_reset_stream_storage>:
 800df9c:	b570      	push	{r4, r5, r6, lr}
 800df9e:	7c03      	ldrb	r3, [r0, #16]
 800dfa0:	4604      	mov	r4, r0
 800dfa2:	b153      	cbz	r3, 800dfba <uxr_reset_stream_storage+0x1e>
 800dfa4:	4606      	mov	r6, r0
 800dfa6:	2500      	movs	r5, #0
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	f006 fc27 	bl	80147fc <uxr_reset_output_best_effort_stream>
 800dfae:	7c23      	ldrb	r3, [r4, #16]
 800dfb0:	3501      	adds	r5, #1
 800dfb2:	42ab      	cmp	r3, r5
 800dfb4:	f106 0610 	add.w	r6, r6, #16
 800dfb8:	d8f6      	bhi.n	800dfa8 <uxr_reset_stream_storage+0xc>
 800dfba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dfbe:	b163      	cbz	r3, 800dfda <uxr_reset_stream_storage+0x3e>
 800dfc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dfc4:	2500      	movs	r5, #0
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	f006 fa1a 	bl	8014400 <uxr_reset_input_best_effort_stream>
 800dfcc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dfd0:	3501      	adds	r5, #1
 800dfd2:	42ab      	cmp	r3, r5
 800dfd4:	f106 0602 	add.w	r6, r6, #2
 800dfd8:	d8f5      	bhi.n	800dfc6 <uxr_reset_stream_storage+0x2a>
 800dfda:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dfde:	b163      	cbz	r3, 800dffa <uxr_reset_stream_storage+0x5e>
 800dfe0:	f104 0618 	add.w	r6, r4, #24
 800dfe4:	2500      	movs	r5, #0
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f006 fcb4 	bl	8014954 <uxr_reset_output_reliable_stream>
 800dfec:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dff0:	3501      	adds	r5, #1
 800dff2:	42ab      	cmp	r3, r5
 800dff4:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800dff8:	d8f5      	bhi.n	800dfe6 <uxr_reset_stream_storage+0x4a>
 800dffa:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800dffe:	b163      	cbz	r3, 800e01a <uxr_reset_stream_storage+0x7e>
 800e000:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800e004:	2500      	movs	r5, #0
 800e006:	4630      	mov	r0, r6
 800e008:	f006 fa6e 	bl	80144e8 <uxr_reset_input_reliable_stream>
 800e00c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800e010:	3501      	adds	r5, #1
 800e012:	42ab      	cmp	r3, r5
 800e014:	f106 0618 	add.w	r6, r6, #24
 800e018:	d8f5      	bhi.n	800e006 <uxr_reset_stream_storage+0x6a>
 800e01a:	bd70      	pop	{r4, r5, r6, pc}

0800e01c <uxr_add_output_best_effort_buffer>:
 800e01c:	b510      	push	{r4, lr}
 800e01e:	7c04      	ldrb	r4, [r0, #16]
 800e020:	f104 0c01 	add.w	ip, r4, #1
 800e024:	b082      	sub	sp, #8
 800e026:	f880 c010 	strb.w	ip, [r0, #16]
 800e02a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800e02e:	f006 fbdb 	bl	80147e8 <uxr_init_output_best_effort_stream>
 800e032:	2201      	movs	r2, #1
 800e034:	4611      	mov	r1, r2
 800e036:	4620      	mov	r0, r4
 800e038:	b002      	add	sp, #8
 800e03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e03e:	f7ff bf4f 	b.w	800dee0 <uxr_stream_id>
 800e042:	bf00      	nop

0800e044 <uxr_add_output_reliable_buffer>:
 800e044:	b510      	push	{r4, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	4684      	mov	ip, r0
 800e04a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e04e:	9000      	str	r0, [sp, #0]
 800e050:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800e054:	2028      	movs	r0, #40	; 0x28
 800e056:	fb00 c004 	mla	r0, r0, r4, ip
 800e05a:	f104 0e01 	add.w	lr, r4, #1
 800e05e:	3018      	adds	r0, #24
 800e060:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800e064:	f006 fc3e 	bl	80148e4 <uxr_init_output_reliable_stream>
 800e068:	2201      	movs	r2, #1
 800e06a:	2102      	movs	r1, #2
 800e06c:	4620      	mov	r0, r4
 800e06e:	b004      	add	sp, #16
 800e070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e074:	f7ff bf34 	b.w	800dee0 <uxr_stream_id>

0800e078 <uxr_add_input_best_effort_buffer>:
 800e078:	b510      	push	{r4, lr}
 800e07a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800e07e:	4603      	mov	r3, r0
 800e080:	1c62      	adds	r2, r4, #1
 800e082:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800e086:	b082      	sub	sp, #8
 800e088:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800e08c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e090:	f006 f9b2 	bl	80143f8 <uxr_init_input_best_effort_stream>
 800e094:	2200      	movs	r2, #0
 800e096:	2101      	movs	r1, #1
 800e098:	4620      	mov	r0, r4
 800e09a:	b002      	add	sp, #8
 800e09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0a0:	f7ff bf1e 	b.w	800dee0 <uxr_stream_id>

0800e0a4 <uxr_add_input_reliable_buffer>:
 800e0a4:	b510      	push	{r4, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	4684      	mov	ip, r0
 800e0aa:	9806      	ldr	r0, [sp, #24]
 800e0ac:	9000      	str	r0, [sp, #0]
 800e0ae:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800e0b2:	2018      	movs	r0, #24
 800e0b4:	fb00 c004 	mla	r0, r0, r4, ip
 800e0b8:	f104 0e01 	add.w	lr, r4, #1
 800e0bc:	3048      	adds	r0, #72	; 0x48
 800e0be:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800e0c2:	f006 f9e5 	bl	8014490 <uxr_init_input_reliable_stream>
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	2102      	movs	r1, #2
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	b004      	add	sp, #16
 800e0ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0d2:	f7ff bf05 	b.w	800dee0 <uxr_stream_id>
 800e0d6:	bf00      	nop

0800e0d8 <uxr_get_output_best_effort_stream>:
 800e0d8:	7c03      	ldrb	r3, [r0, #16]
 800e0da:	428b      	cmp	r3, r1
 800e0dc:	bf8c      	ite	hi
 800e0de:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800e0e2:	2000      	movls	r0, #0
 800e0e4:	4770      	bx	lr
 800e0e6:	bf00      	nop

0800e0e8 <uxr_get_output_reliable_stream>:
 800e0e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e0ec:	428b      	cmp	r3, r1
 800e0ee:	bf83      	ittte	hi
 800e0f0:	2328      	movhi	r3, #40	; 0x28
 800e0f2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e0f6:	3018      	addhi	r0, #24
 800e0f8:	2000      	movls	r0, #0
 800e0fa:	4770      	bx	lr

0800e0fc <uxr_get_input_best_effort_stream>:
 800e0fc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800e100:	428b      	cmp	r3, r1
 800e102:	bf86      	itte	hi
 800e104:	3121      	addhi	r1, #33	; 0x21
 800e106:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800e10a:	2000      	movls	r0, #0
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop

0800e110 <uxr_get_input_reliable_stream>:
 800e110:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800e114:	428b      	cmp	r3, r1
 800e116:	bf83      	ittte	hi
 800e118:	2318      	movhi	r3, #24
 800e11a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e11e:	3048      	addhi	r0, #72	; 0x48
 800e120:	2000      	movls	r0, #0
 800e122:	4770      	bx	lr

0800e124 <uxr_output_streams_confirmed>:
 800e124:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e128:	b183      	cbz	r3, 800e14c <uxr_output_streams_confirmed+0x28>
 800e12a:	b570      	push	{r4, r5, r6, lr}
 800e12c:	4606      	mov	r6, r0
 800e12e:	f100 0518 	add.w	r5, r0, #24
 800e132:	2400      	movs	r4, #0
 800e134:	e001      	b.n	800e13a <uxr_output_streams_confirmed+0x16>
 800e136:	3528      	adds	r5, #40	; 0x28
 800e138:	b138      	cbz	r0, 800e14a <uxr_output_streams_confirmed+0x26>
 800e13a:	4628      	mov	r0, r5
 800e13c:	f006 fe7a 	bl	8014e34 <uxr_is_output_up_to_date>
 800e140:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800e144:	3401      	adds	r4, #1
 800e146:	42a3      	cmp	r3, r4
 800e148:	d8f5      	bhi.n	800e136 <uxr_output_streams_confirmed+0x12>
 800e14a:	bd70      	pop	{r4, r5, r6, pc}
 800e14c:	2001      	movs	r0, #1
 800e14e:	4770      	bx	lr

0800e150 <uxr_buffer_submessage_header>:
 800e150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e152:	4604      	mov	r4, r0
 800e154:	460e      	mov	r6, r1
 800e156:	2104      	movs	r1, #4
 800e158:	4615      	mov	r5, r2
 800e15a:	461f      	mov	r7, r3
 800e15c:	f7fe fba4 	bl	800c8a8 <ucdr_align_to>
 800e160:	2301      	movs	r3, #1
 800e162:	ea47 0203 	orr.w	r2, r7, r3
 800e166:	4631      	mov	r1, r6
 800e168:	7523      	strb	r3, [r4, #20]
 800e16a:	4620      	mov	r0, r4
 800e16c:	462b      	mov	r3, r5
 800e16e:	f000 fa27 	bl	800e5c0 <uxr_serialize_submessage_header>
 800e172:	4620      	mov	r0, r4
 800e174:	f7fe fbae 	bl	800c8d4 <ucdr_buffer_remaining>
 800e178:	42a8      	cmp	r0, r5
 800e17a:	bf34      	ite	cc
 800e17c:	2000      	movcc	r0, #0
 800e17e:	2001      	movcs	r0, #1
 800e180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e182:	bf00      	nop

0800e184 <uxr_read_submessage_header>:
 800e184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e188:	4604      	mov	r4, r0
 800e18a:	460d      	mov	r5, r1
 800e18c:	2104      	movs	r1, #4
 800e18e:	4616      	mov	r6, r2
 800e190:	4698      	mov	r8, r3
 800e192:	f7fe fb89 	bl	800c8a8 <ucdr_align_to>
 800e196:	4620      	mov	r0, r4
 800e198:	f7fe fb9c 	bl	800c8d4 <ucdr_buffer_remaining>
 800e19c:	2803      	cmp	r0, #3
 800e19e:	bf8c      	ite	hi
 800e1a0:	2701      	movhi	r7, #1
 800e1a2:	2700      	movls	r7, #0
 800e1a4:	d802      	bhi.n	800e1ac <uxr_read_submessage_header+0x28>
 800e1a6:	4638      	mov	r0, r7
 800e1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ac:	4633      	mov	r3, r6
 800e1ae:	4642      	mov	r2, r8
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	4629      	mov	r1, r5
 800e1b4:	f000 fa18 	bl	800e5e8 <uxr_deserialize_submessage_header>
 800e1b8:	f898 3000 	ldrb.w	r3, [r8]
 800e1bc:	f003 0201 	and.w	r2, r3, #1
 800e1c0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e1c4:	f888 3000 	strb.w	r3, [r8]
 800e1c8:	7522      	strb	r2, [r4, #20]
 800e1ca:	4638      	mov	r0, r7
 800e1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e1d0 <uxr_submessage_padding>:
 800e1d0:	f010 0003 	ands.w	r0, r0, #3
 800e1d4:	bf18      	it	ne
 800e1d6:	f1c0 0004 	rsbne	r0, r0, #4
 800e1da:	4770      	bx	lr

0800e1dc <uxr_millis>:
 800e1dc:	b510      	push	{r4, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	4669      	mov	r1, sp
 800e1e2:	2001      	movs	r0, #1
 800e1e4:	f7f3 fd08 	bl	8001bf8 <clock_gettime>
 800e1e8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e1ec:	4906      	ldr	r1, [pc, #24]	; (800e208 <uxr_millis+0x2c>)
 800e1ee:	fba0 0301 	umull	r0, r3, r0, r1
 800e1f2:	1900      	adds	r0, r0, r4
 800e1f4:	fb01 3102 	mla	r1, r1, r2, r3
 800e1f8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e1fc:	4a03      	ldr	r2, [pc, #12]	; (800e20c <uxr_millis+0x30>)
 800e1fe:	2300      	movs	r3, #0
 800e200:	f7f2 fc74 	bl	8000aec <__aeabi_ldivmod>
 800e204:	b004      	add	sp, #16
 800e206:	bd10      	pop	{r4, pc}
 800e208:	3b9aca00 	.word	0x3b9aca00
 800e20c:	000f4240 	.word	0x000f4240

0800e210 <uxr_nanos>:
 800e210:	b510      	push	{r4, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	4669      	mov	r1, sp
 800e216:	2001      	movs	r0, #1
 800e218:	f7f3 fcee 	bl	8001bf8 <clock_gettime>
 800e21c:	4a06      	ldr	r2, [pc, #24]	; (800e238 <uxr_nanos+0x28>)
 800e21e:	9800      	ldr	r0, [sp, #0]
 800e220:	9902      	ldr	r1, [sp, #8]
 800e222:	9c01      	ldr	r4, [sp, #4]
 800e224:	fba0 0302 	umull	r0, r3, r0, r2
 800e228:	1840      	adds	r0, r0, r1
 800e22a:	fb02 3304 	mla	r3, r2, r4, r3
 800e22e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e232:	b004      	add	sp, #16
 800e234:	bd10      	pop	{r4, pc}
 800e236:	bf00      	nop
 800e238:	3b9aca00 	.word	0x3b9aca00

0800e23c <on_full_output_buffer_fragmented>:
 800e23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e240:	460c      	mov	r4, r1
 800e242:	b08a      	sub	sp, #40	; 0x28
 800e244:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800e248:	4606      	mov	r6, r0
 800e24a:	f104 0008 	add.w	r0, r4, #8
 800e24e:	f7ff ff4b 	bl	800e0e8 <uxr_get_output_reliable_stream>
 800e252:	4605      	mov	r5, r0
 800e254:	f006 fdf8 	bl	8014e48 <get_available_free_slots>
 800e258:	b968      	cbnz	r0, 800e276 <on_full_output_buffer_fragmented+0x3a>
 800e25a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800e25e:	4620      	mov	r0, r4
 800e260:	4798      	blx	r3
 800e262:	b918      	cbnz	r0, 800e26c <on_full_output_buffer_fragmented+0x30>
 800e264:	2001      	movs	r0, #1
 800e266:	b00a      	add	sp, #40	; 0x28
 800e268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e26c:	4628      	mov	r0, r5
 800e26e:	f006 fdeb 	bl	8014e48 <get_available_free_slots>
 800e272:	2800      	cmp	r0, #0
 800e274:	d0f6      	beq.n	800e264 <on_full_output_buffer_fragmented+0x28>
 800e276:	8929      	ldrh	r1, [r5, #8]
 800e278:	89eb      	ldrh	r3, [r5, #14]
 800e27a:	7b28      	ldrb	r0, [r5, #12]
 800e27c:	686a      	ldr	r2, [r5, #4]
 800e27e:	fbb2 f8f1 	udiv	r8, r2, r1
 800e282:	fbb3 f2f1 	udiv	r2, r3, r1
 800e286:	fb01 3112 	mls	r1, r1, r2, r3
 800e28a:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800e28e:	b289      	uxth	r1, r1
 800e290:	fb08 f101 	mul.w	r1, r8, r1
 800e294:	30fc      	adds	r0, #252	; 0xfc
 800e296:	f1a8 0804 	sub.w	r8, r8, #4
 800e29a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800e29e:	4440      	add	r0, r8
 800e2a0:	b287      	uxth	r7, r0
 800e2a2:	1bdb      	subs	r3, r3, r7
 800e2a4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800e2a8:	682b      	ldr	r3, [r5, #0]
 800e2aa:	3104      	adds	r1, #4
 800e2ac:	4419      	add	r1, r3
 800e2ae:	4642      	mov	r2, r8
 800e2b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	a802      	add	r0, sp, #8
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f7fe fac9 	bl	800c850 <ucdr_init_buffer_origin_offset>
 800e2be:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800e2c2:	f102 0308 	add.w	r3, r2, #8
 800e2c6:	4543      	cmp	r3, r8
 800e2c8:	d928      	bls.n	800e31c <on_full_output_buffer_fragmented+0xe0>
 800e2ca:	463a      	mov	r2, r7
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	210d      	movs	r1, #13
 800e2d0:	a802      	add	r0, sp, #8
 800e2d2:	f7ff ff3d 	bl	800e150 <uxr_buffer_submessage_header>
 800e2d6:	8929      	ldrh	r1, [r5, #8]
 800e2d8:	89eb      	ldrh	r3, [r5, #14]
 800e2da:	fbb3 f2f1 	udiv	r2, r3, r1
 800e2de:	fb01 3312 	mls	r3, r1, r2, r3
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	686a      	ldr	r2, [r5, #4]
 800e2e6:	fbb2 f2f1 	udiv	r2, r2, r1
 800e2ea:	fb02 f303 	mul.w	r3, r2, r3
 800e2ee:	682a      	ldr	r2, [r5, #0]
 800e2f0:	f842 8003 	str.w	r8, [r2, r3]
 800e2f4:	89e8      	ldrh	r0, [r5, #14]
 800e2f6:	2101      	movs	r1, #1
 800e2f8:	f006 fef6 	bl	80150e8 <uxr_seq_num_add>
 800e2fc:	9904      	ldr	r1, [sp, #16]
 800e2fe:	9a03      	ldr	r2, [sp, #12]
 800e300:	81e8      	strh	r0, [r5, #14]
 800e302:	1a52      	subs	r2, r2, r1
 800e304:	4630      	mov	r0, r6
 800e306:	f7fe fab5 	bl	800c874 <ucdr_init_buffer>
 800e30a:	4630      	mov	r0, r6
 800e30c:	490f      	ldr	r1, [pc, #60]	; (800e34c <on_full_output_buffer_fragmented+0x110>)
 800e30e:	4622      	mov	r2, r4
 800e310:	f7fe fa84 	bl	800c81c <ucdr_set_on_full_buffer_callback>
 800e314:	2000      	movs	r0, #0
 800e316:	b00a      	add	sp, #40	; 0x28
 800e318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e31c:	b292      	uxth	r2, r2
 800e31e:	2302      	movs	r3, #2
 800e320:	210d      	movs	r1, #13
 800e322:	a802      	add	r0, sp, #8
 800e324:	f7ff ff14 	bl	800e150 <uxr_buffer_submessage_header>
 800e328:	8928      	ldrh	r0, [r5, #8]
 800e32a:	89eb      	ldrh	r3, [r5, #14]
 800e32c:	fbb3 f1f0 	udiv	r1, r3, r0
 800e330:	fb00 3311 	mls	r3, r0, r1, r3
 800e334:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800e338:	6869      	ldr	r1, [r5, #4]
 800e33a:	fbb1 f1f0 	udiv	r1, r1, r0
 800e33e:	b29b      	uxth	r3, r3
 800e340:	fb01 f303 	mul.w	r3, r1, r3
 800e344:	6829      	ldr	r1, [r5, #0]
 800e346:	3208      	adds	r2, #8
 800e348:	50ca      	str	r2, [r1, r3]
 800e34a:	e7d3      	b.n	800e2f4 <on_full_output_buffer_fragmented+0xb8>
 800e34c:	0800e23d 	.word	0x0800e23d

0800e350 <uxr_prepare_output_stream>:
 800e350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e352:	b087      	sub	sp, #28
 800e354:	2707      	movs	r7, #7
 800e356:	9202      	str	r2, [sp, #8]
 800e358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e35a:	9103      	str	r1, [sp, #12]
 800e35c:	2500      	movs	r5, #0
 800e35e:	3204      	adds	r2, #4
 800e360:	e9cd 7500 	strd	r7, r5, [sp]
 800e364:	461c      	mov	r4, r3
 800e366:	4606      	mov	r6, r0
 800e368:	f7ff fc54 	bl	800dc14 <uxr_prepare_stream_to_write_submessage>
 800e36c:	f080 0201 	eor.w	r2, r0, #1
 800e370:	b2d2      	uxtb	r2, r2
 800e372:	75a2      	strb	r2, [r4, #22]
 800e374:	b112      	cbz	r2, 800e37c <uxr_prepare_output_stream+0x2c>
 800e376:	4628      	mov	r0, r5
 800e378:	b007      	add	sp, #28
 800e37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e37c:	aa05      	add	r2, sp, #20
 800e37e:	9902      	ldr	r1, [sp, #8]
 800e380:	4630      	mov	r0, r6
 800e382:	f7ff fd7d 	bl	800de80 <uxr_init_base_object_request>
 800e386:	a905      	add	r1, sp, #20
 800e388:	4605      	mov	r5, r0
 800e38a:	4620      	mov	r0, r4
 800e38c:	f001 f88c 	bl	800f4a8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e390:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800e394:	69a6      	ldr	r6, [r4, #24]
 800e396:	69e7      	ldr	r7, [r4, #28]
 800e398:	1a52      	subs	r2, r2, r1
 800e39a:	4620      	mov	r0, r4
 800e39c:	f7fe fa6a 	bl	800c874 <ucdr_init_buffer>
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	463a      	mov	r2, r7
 800e3a4:	4631      	mov	r1, r6
 800e3a6:	f7fe fa39 	bl	800c81c <ucdr_set_on_full_buffer_callback>
 800e3aa:	4628      	mov	r0, r5
 800e3ac:	b007      	add	sp, #28
 800e3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e3b0 <uxr_prepare_output_stream_fragmented>:
 800e3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b4:	b091      	sub	sp, #68	; 0x44
 800e3b6:	4605      	mov	r5, r0
 800e3b8:	9105      	str	r1, [sp, #20]
 800e3ba:	3008      	adds	r0, #8
 800e3bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e3c0:	461e      	mov	r6, r3
 800e3c2:	9204      	str	r2, [sp, #16]
 800e3c4:	f7ff fe90 	bl	800e0e8 <uxr_get_output_reliable_stream>
 800e3c8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	f000 8091 	beq.w	800e4f4 <uxr_prepare_output_stream_fragmented+0x144>
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	f000 808d 	beq.w	800e4f4 <uxr_prepare_output_stream_fragmented+0x144>
 800e3da:	f006 fd35 	bl	8014e48 <get_available_free_slots>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	f000 8083 	beq.w	800e4ea <uxr_prepare_output_stream_fragmented+0x13a>
 800e3e4:	8922      	ldrh	r2, [r4, #8]
 800e3e6:	89e7      	ldrh	r7, [r4, #14]
 800e3e8:	fbb7 f9f2 	udiv	r9, r7, r2
 800e3ec:	fb02 7919 	mls	r9, r2, r9, r7
 800e3f0:	fa1f f989 	uxth.w	r9, r9
 800e3f4:	6863      	ldr	r3, [r4, #4]
 800e3f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e3fa:	6823      	ldr	r3, [r4, #0]
 800e3fc:	9203      	str	r2, [sp, #12]
 800e3fe:	fb02 f909 	mul.w	r9, r2, r9
 800e402:	f109 0904 	add.w	r9, r9, #4
 800e406:	4499      	add	r9, r3
 800e408:	7b23      	ldrb	r3, [r4, #12]
 800e40a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e40e:	4543      	cmp	r3, r8
 800e410:	f1a2 0b04 	sub.w	fp, r2, #4
 800e414:	d37a      	bcc.n	800e50c <uxr_prepare_output_stream_fragmented+0x15c>
 800e416:	f1ab 0a04 	sub.w	sl, fp, #4
 800e41a:	ebaa 0a03 	sub.w	sl, sl, r3
 800e41e:	465a      	mov	r2, fp
 800e420:	2300      	movs	r3, #0
 800e422:	4649      	mov	r1, r9
 800e424:	a808      	add	r0, sp, #32
 800e426:	f8cd 8000 	str.w	r8, [sp]
 800e42a:	f7fe fa11 	bl	800c850 <ucdr_init_buffer_origin_offset>
 800e42e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e430:	fa1f fa8a 	uxth.w	sl, sl
 800e434:	4652      	mov	r2, sl
 800e436:	f103 0a08 	add.w	sl, r3, #8
 800e43a:	45da      	cmp	sl, fp
 800e43c:	bf34      	ite	cc
 800e43e:	2302      	movcc	r3, #2
 800e440:	2300      	movcs	r3, #0
 800e442:	210d      	movs	r1, #13
 800e444:	a808      	add	r0, sp, #32
 800e446:	f7ff fe83 	bl	800e150 <uxr_buffer_submessage_header>
 800e44a:	8921      	ldrh	r1, [r4, #8]
 800e44c:	fbb7 f2f1 	udiv	r2, r7, r1
 800e450:	fb01 7212 	mls	r2, r1, r2, r7
 800e454:	b292      	uxth	r2, r2
 800e456:	6863      	ldr	r3, [r4, #4]
 800e458:	fbb3 f3f1 	udiv	r3, r3, r1
 800e45c:	fb02 f303 	mul.w	r3, r2, r3
 800e460:	6822      	ldr	r2, [r4, #0]
 800e462:	4638      	mov	r0, r7
 800e464:	f842 b003 	str.w	fp, [r2, r3]
 800e468:	2101      	movs	r1, #1
 800e46a:	f006 fe3d 	bl	80150e8 <uxr_seq_num_add>
 800e46e:	9b03      	ldr	r3, [sp, #12]
 800e470:	f108 0104 	add.w	r1, r8, #4
 800e474:	f1a3 0208 	sub.w	r2, r3, #8
 800e478:	eba2 0208 	sub.w	r2, r2, r8
 800e47c:	4449      	add	r1, r9
 800e47e:	4607      	mov	r7, r0
 800e480:	4630      	mov	r0, r6
 800e482:	f7fe f9f7 	bl	800c874 <ucdr_init_buffer>
 800e486:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e488:	81e7      	strh	r7, [r4, #14]
 800e48a:	1d1a      	adds	r2, r3, #4
 800e48c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e490:	bf28      	it	cs
 800e492:	2200      	movcs	r2, #0
 800e494:	2300      	movs	r3, #0
 800e496:	b292      	uxth	r2, r2
 800e498:	2107      	movs	r1, #7
 800e49a:	4630      	mov	r0, r6
 800e49c:	f7ff fe58 	bl	800e150 <uxr_buffer_submessage_header>
 800e4a0:	9904      	ldr	r1, [sp, #16]
 800e4a2:	aa07      	add	r2, sp, #28
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	f7ff fceb 	bl	800de80 <uxr_init_base_object_request>
 800e4aa:	4604      	mov	r4, r0
 800e4ac:	b318      	cbz	r0, 800e4f6 <uxr_prepare_output_stream_fragmented+0x146>
 800e4ae:	a907      	add	r1, sp, #28
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f000 fff9 	bl	800f4a8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e4b6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	1a52      	subs	r2, r2, r1
 800e4be:	f7fe f9d9 	bl	800c874 <ucdr_init_buffer>
 800e4c2:	9b05      	ldr	r3, [sp, #20]
 800e4c4:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800e4c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e4ca:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800e4ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e4d0:	491b      	ldr	r1, [pc, #108]	; (800e540 <uxr_prepare_output_stream_fragmented+0x190>)
 800e4d2:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800e4dc:	462a      	mov	r2, r5
 800e4de:	f7fe f99d 	bl	800c81c <ucdr_set_on_full_buffer_callback>
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	b011      	add	sp, #68	; 0x44
 800e4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e4ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	4798      	blx	r3
 800e4f2:	b920      	cbnz	r0, 800e4fe <uxr_prepare_output_stream_fragmented+0x14e>
 800e4f4:	2400      	movs	r4, #0
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	b011      	add	sp, #68	; 0x44
 800e4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4fe:	4620      	mov	r0, r4
 800e500:	f006 fca2 	bl	8014e48 <get_available_free_slots>
 800e504:	2800      	cmp	r0, #0
 800e506:	f47f af6d 	bne.w	800e3e4 <uxr_prepare_output_stream_fragmented+0x34>
 800e50a:	e7f3      	b.n	800e4f4 <uxr_prepare_output_stream_fragmented+0x144>
 800e50c:	4638      	mov	r0, r7
 800e50e:	2101      	movs	r1, #1
 800e510:	f006 fdea 	bl	80150e8 <uxr_seq_num_add>
 800e514:	8921      	ldrh	r1, [r4, #8]
 800e516:	fbb0 f2f1 	udiv	r2, r0, r1
 800e51a:	fb01 0912 	mls	r9, r1, r2, r0
 800e51e:	fa1f f289 	uxth.w	r2, r9
 800e522:	6863      	ldr	r3, [r4, #4]
 800e524:	fbb3 f9f1 	udiv	r9, r3, r1
 800e528:	6823      	ldr	r3, [r4, #0]
 800e52a:	fb02 f909 	mul.w	r9, r2, r9
 800e52e:	f109 0904 	add.w	r9, r9, #4
 800e532:	4499      	add	r9, r3
 800e534:	4607      	mov	r7, r0
 800e536:	7b23      	ldrb	r3, [r4, #12]
 800e538:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e53c:	e76b      	b.n	800e416 <uxr_prepare_output_stream_fragmented+0x66>
 800e53e:	bf00      	nop
 800e540:	0800e23d 	.word	0x0800e23d

0800e544 <uxr_serialize_message_header>:
 800e544:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e546:	b083      	sub	sp, #12
 800e548:	4616      	mov	r6, r2
 800e54a:	4604      	mov	r4, r0
 800e54c:	9301      	str	r3, [sp, #4]
 800e54e:	460d      	mov	r5, r1
 800e550:	9f08      	ldr	r7, [sp, #32]
 800e552:	f7fd f8bb 	bl	800b6cc <ucdr_serialize_uint8_t>
 800e556:	4631      	mov	r1, r6
 800e558:	4620      	mov	r0, r4
 800e55a:	f7fd f8b7 	bl	800b6cc <ucdr_serialize_uint8_t>
 800e55e:	9a01      	ldr	r2, [sp, #4]
 800e560:	2101      	movs	r1, #1
 800e562:	4620      	mov	r0, r4
 800e564:	f7fd f95e 	bl	800b824 <ucdr_serialize_endian_uint16_t>
 800e568:	062b      	lsls	r3, r5, #24
 800e56a:	d501      	bpl.n	800e570 <uxr_serialize_message_header+0x2c>
 800e56c:	b003      	add	sp, #12
 800e56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e570:	2204      	movs	r2, #4
 800e572:	4639      	mov	r1, r7
 800e574:	4620      	mov	r0, r4
 800e576:	b003      	add	sp, #12
 800e578:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e57c:	f005 bd42 	b.w	8014004 <ucdr_serialize_array_uint8_t>

0800e580 <uxr_deserialize_message_header>:
 800e580:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e582:	b083      	sub	sp, #12
 800e584:	4616      	mov	r6, r2
 800e586:	4604      	mov	r4, r0
 800e588:	9301      	str	r3, [sp, #4]
 800e58a:	460d      	mov	r5, r1
 800e58c:	9f08      	ldr	r7, [sp, #32]
 800e58e:	f7fd f8b3 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800e592:	4631      	mov	r1, r6
 800e594:	4620      	mov	r0, r4
 800e596:	f7fd f8af 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800e59a:	9a01      	ldr	r2, [sp, #4]
 800e59c:	2101      	movs	r1, #1
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f7fd fa34 	bl	800ba0c <ucdr_deserialize_endian_uint16_t>
 800e5a4:	f995 3000 	ldrsb.w	r3, [r5]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	da01      	bge.n	800e5b0 <uxr_deserialize_message_header+0x30>
 800e5ac:	b003      	add	sp, #12
 800e5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5b0:	2204      	movs	r2, #4
 800e5b2:	4639      	mov	r1, r7
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	b003      	add	sp, #12
 800e5b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e5bc:	f005 bd86 	b.w	80140cc <ucdr_deserialize_array_uint8_t>

0800e5c0 <uxr_serialize_submessage_header>:
 800e5c0:	b530      	push	{r4, r5, lr}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	4615      	mov	r5, r2
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	9301      	str	r3, [sp, #4]
 800e5ca:	f7fd f87f 	bl	800b6cc <ucdr_serialize_uint8_t>
 800e5ce:	4629      	mov	r1, r5
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f7fd f87b 	bl	800b6cc <ucdr_serialize_uint8_t>
 800e5d6:	9a01      	ldr	r2, [sp, #4]
 800e5d8:	2101      	movs	r1, #1
 800e5da:	4620      	mov	r0, r4
 800e5dc:	b003      	add	sp, #12
 800e5de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5e2:	f7fd b91f 	b.w	800b824 <ucdr_serialize_endian_uint16_t>
 800e5e6:	bf00      	nop

0800e5e8 <uxr_deserialize_submessage_header>:
 800e5e8:	b530      	push	{r4, r5, lr}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	4615      	mov	r5, r2
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	9301      	str	r3, [sp, #4]
 800e5f2:	f7fd f881 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	f7fd f87d 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800e5fe:	9a01      	ldr	r2, [sp, #4]
 800e600:	2101      	movs	r1, #1
 800e602:	4620      	mov	r0, r4
 800e604:	b003      	add	sp, #12
 800e606:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e60a:	f7fd b9ff 	b.w	800ba0c <ucdr_deserialize_endian_uint16_t>
 800e60e:	bf00      	nop

0800e610 <uxr_serialize_CLIENT_Representation>:
 800e610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e614:	2204      	movs	r2, #4
 800e616:	460e      	mov	r6, r1
 800e618:	4605      	mov	r5, r0
 800e61a:	f005 fcf3 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800e61e:	2202      	movs	r2, #2
 800e620:	4607      	mov	r7, r0
 800e622:	1d31      	adds	r1, r6, #4
 800e624:	4628      	mov	r0, r5
 800e626:	f005 fced 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800e62a:	4038      	ands	r0, r7
 800e62c:	2202      	movs	r2, #2
 800e62e:	1db1      	adds	r1, r6, #6
 800e630:	b2c7      	uxtb	r7, r0
 800e632:	4628      	mov	r0, r5
 800e634:	f005 fce6 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800e638:	2204      	movs	r2, #4
 800e63a:	4007      	ands	r7, r0
 800e63c:	f106 0108 	add.w	r1, r6, #8
 800e640:	4628      	mov	r0, r5
 800e642:	f005 fcdf 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800e646:	7b31      	ldrb	r1, [r6, #12]
 800e648:	4007      	ands	r7, r0
 800e64a:	4628      	mov	r0, r5
 800e64c:	f7fd f83e 	bl	800b6cc <ucdr_serialize_uint8_t>
 800e650:	7b71      	ldrb	r1, [r6, #13]
 800e652:	4007      	ands	r7, r0
 800e654:	4628      	mov	r0, r5
 800e656:	f7fd f80b 	bl	800b670 <ucdr_serialize_bool>
 800e65a:	7b73      	ldrb	r3, [r6, #13]
 800e65c:	ea07 0800 	and.w	r8, r7, r0
 800e660:	b93b      	cbnz	r3, 800e672 <uxr_serialize_CLIENT_Representation+0x62>
 800e662:	8bb1      	ldrh	r1, [r6, #28]
 800e664:	4628      	mov	r0, r5
 800e666:	f7fd f85d 	bl	800b724 <ucdr_serialize_uint16_t>
 800e66a:	ea08 0000 	and.w	r0, r8, r0
 800e66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e672:	6931      	ldr	r1, [r6, #16]
 800e674:	4628      	mov	r0, r5
 800e676:	f7fd fa3f 	bl	800baf8 <ucdr_serialize_uint32_t>
 800e67a:	6933      	ldr	r3, [r6, #16]
 800e67c:	b1e3      	cbz	r3, 800e6b8 <uxr_serialize_CLIENT_Representation+0xa8>
 800e67e:	b1c0      	cbz	r0, 800e6b2 <uxr_serialize_CLIENT_Representation+0xa2>
 800e680:	4637      	mov	r7, r6
 800e682:	f04f 0900 	mov.w	r9, #0
 800e686:	e001      	b.n	800e68c <uxr_serialize_CLIENT_Representation+0x7c>
 800e688:	3708      	adds	r7, #8
 800e68a:	b194      	cbz	r4, 800e6b2 <uxr_serialize_CLIENT_Representation+0xa2>
 800e68c:	6979      	ldr	r1, [r7, #20]
 800e68e:	4628      	mov	r0, r5
 800e690:	f005 fdd8 	bl	8014244 <ucdr_serialize_string>
 800e694:	69b9      	ldr	r1, [r7, #24]
 800e696:	4604      	mov	r4, r0
 800e698:	4628      	mov	r0, r5
 800e69a:	f005 fdd3 	bl	8014244 <ucdr_serialize_string>
 800e69e:	6933      	ldr	r3, [r6, #16]
 800e6a0:	f109 0901 	add.w	r9, r9, #1
 800e6a4:	4004      	ands	r4, r0
 800e6a6:	4599      	cmp	r9, r3
 800e6a8:	b2e4      	uxtb	r4, r4
 800e6aa:	d3ed      	bcc.n	800e688 <uxr_serialize_CLIENT_Representation+0x78>
 800e6ac:	ea08 0804 	and.w	r8, r8, r4
 800e6b0:	e7d7      	b.n	800e662 <uxr_serialize_CLIENT_Representation+0x52>
 800e6b2:	f04f 0800 	mov.w	r8, #0
 800e6b6:	e7d4      	b.n	800e662 <uxr_serialize_CLIENT_Representation+0x52>
 800e6b8:	ea08 0800 	and.w	r8, r8, r0
 800e6bc:	e7d1      	b.n	800e662 <uxr_serialize_CLIENT_Representation+0x52>
 800e6be:	bf00      	nop

0800e6c0 <uxr_deserialize_CLIENT_Representation>:
 800e6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6c4:	2204      	movs	r2, #4
 800e6c6:	460c      	mov	r4, r1
 800e6c8:	4605      	mov	r5, r0
 800e6ca:	f005 fcff 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800e6ce:	2202      	movs	r2, #2
 800e6d0:	4607      	mov	r7, r0
 800e6d2:	1d21      	adds	r1, r4, #4
 800e6d4:	4628      	mov	r0, r5
 800e6d6:	f005 fcf9 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800e6da:	4038      	ands	r0, r7
 800e6dc:	2202      	movs	r2, #2
 800e6de:	1da1      	adds	r1, r4, #6
 800e6e0:	b2c6      	uxtb	r6, r0
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	f005 fcf2 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800e6e8:	2204      	movs	r2, #4
 800e6ea:	4006      	ands	r6, r0
 800e6ec:	f104 0108 	add.w	r1, r4, #8
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	f005 fceb 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800e6f6:	f104 010c 	add.w	r1, r4, #12
 800e6fa:	4006      	ands	r6, r0
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	f7fc fffb 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800e702:	f104 010d 	add.w	r1, r4, #13
 800e706:	ea06 0700 	and.w	r7, r6, r0
 800e70a:	4628      	mov	r0, r5
 800e70c:	f7fc ffc6 	bl	800b69c <ucdr_deserialize_bool>
 800e710:	7b63      	ldrb	r3, [r4, #13]
 800e712:	4007      	ands	r7, r0
 800e714:	b93b      	cbnz	r3, 800e726 <uxr_deserialize_CLIENT_Representation+0x66>
 800e716:	f104 011c 	add.w	r1, r4, #28
 800e71a:	4628      	mov	r0, r5
 800e71c:	f7fd f902 	bl	800b924 <ucdr_deserialize_uint16_t>
 800e720:	4038      	ands	r0, r7
 800e722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e726:	f104 0110 	add.w	r1, r4, #16
 800e72a:	4628      	mov	r0, r5
 800e72c:	f7fd fb14 	bl	800bd58 <ucdr_deserialize_uint32_t>
 800e730:	6923      	ldr	r3, [r4, #16]
 800e732:	2b01      	cmp	r3, #1
 800e734:	d903      	bls.n	800e73e <uxr_deserialize_CLIENT_Representation+0x7e>
 800e736:	2301      	movs	r3, #1
 800e738:	75ab      	strb	r3, [r5, #22]
 800e73a:	2700      	movs	r7, #0
 800e73c:	e7eb      	b.n	800e716 <uxr_deserialize_CLIENT_Representation+0x56>
 800e73e:	b30b      	cbz	r3, 800e784 <uxr_deserialize_CLIENT_Representation+0xc4>
 800e740:	2800      	cmp	r0, #0
 800e742:	d0fa      	beq.n	800e73a <uxr_deserialize_CLIENT_Representation+0x7a>
 800e744:	46a0      	mov	r8, r4
 800e746:	f04f 0900 	mov.w	r9, #0
 800e74a:	e001      	b.n	800e750 <uxr_deserialize_CLIENT_Representation+0x90>
 800e74c:	2e00      	cmp	r6, #0
 800e74e:	d0f4      	beq.n	800e73a <uxr_deserialize_CLIENT_Representation+0x7a>
 800e750:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e754:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e758:	4628      	mov	r0, r5
 800e75a:	f005 fd83 	bl	8014264 <ucdr_deserialize_string>
 800e75e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e762:	4606      	mov	r6, r0
 800e764:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800e768:	4628      	mov	r0, r5
 800e76a:	f005 fd7b 	bl	8014264 <ucdr_deserialize_string>
 800e76e:	6923      	ldr	r3, [r4, #16]
 800e770:	f109 0901 	add.w	r9, r9, #1
 800e774:	4006      	ands	r6, r0
 800e776:	4599      	cmp	r9, r3
 800e778:	f108 0808 	add.w	r8, r8, #8
 800e77c:	b2f6      	uxtb	r6, r6
 800e77e:	d3e5      	bcc.n	800e74c <uxr_deserialize_CLIENT_Representation+0x8c>
 800e780:	4037      	ands	r7, r6
 800e782:	e7c8      	b.n	800e716 <uxr_deserialize_CLIENT_Representation+0x56>
 800e784:	4007      	ands	r7, r0
 800e786:	e7c6      	b.n	800e716 <uxr_deserialize_CLIENT_Representation+0x56>

0800e788 <uxr_serialize_AGENT_Representation>:
 800e788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e78c:	2204      	movs	r2, #4
 800e78e:	460f      	mov	r7, r1
 800e790:	4605      	mov	r5, r0
 800e792:	f005 fc37 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800e796:	2202      	movs	r2, #2
 800e798:	4604      	mov	r4, r0
 800e79a:	1d39      	adds	r1, r7, #4
 800e79c:	4628      	mov	r0, r5
 800e79e:	f005 fc31 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800e7a2:	4020      	ands	r0, r4
 800e7a4:	2202      	movs	r2, #2
 800e7a6:	1db9      	adds	r1, r7, #6
 800e7a8:	b2c4      	uxtb	r4, r0
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	f005 fc2a 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800e7b0:	7a39      	ldrb	r1, [r7, #8]
 800e7b2:	4004      	ands	r4, r0
 800e7b4:	4628      	mov	r0, r5
 800e7b6:	f7fc ff5b 	bl	800b670 <ucdr_serialize_bool>
 800e7ba:	7a3b      	ldrb	r3, [r7, #8]
 800e7bc:	ea00 0804 	and.w	r8, r0, r4
 800e7c0:	b913      	cbnz	r3, 800e7c8 <uxr_serialize_AGENT_Representation+0x40>
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7c8:	68f9      	ldr	r1, [r7, #12]
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	f7fd f994 	bl	800baf8 <ucdr_serialize_uint32_t>
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	b303      	cbz	r3, 800e816 <uxr_serialize_AGENT_Representation+0x8e>
 800e7d4:	b1d0      	cbz	r0, 800e80c <uxr_serialize_AGENT_Representation+0x84>
 800e7d6:	463e      	mov	r6, r7
 800e7d8:	f04f 0900 	mov.w	r9, #0
 800e7dc:	e001      	b.n	800e7e2 <uxr_serialize_AGENT_Representation+0x5a>
 800e7de:	3608      	adds	r6, #8
 800e7e0:	b1a4      	cbz	r4, 800e80c <uxr_serialize_AGENT_Representation+0x84>
 800e7e2:	6931      	ldr	r1, [r6, #16]
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	f005 fd2d 	bl	8014244 <ucdr_serialize_string>
 800e7ea:	6971      	ldr	r1, [r6, #20]
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	f005 fd28 	bl	8014244 <ucdr_serialize_string>
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f109 0901 	add.w	r9, r9, #1
 800e7fa:	4004      	ands	r4, r0
 800e7fc:	4599      	cmp	r9, r3
 800e7fe:	b2e4      	uxtb	r4, r4
 800e800:	d3ed      	bcc.n	800e7de <uxr_serialize_AGENT_Representation+0x56>
 800e802:	ea08 0804 	and.w	r8, r8, r4
 800e806:	4640      	mov	r0, r8
 800e808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e80c:	f04f 0800 	mov.w	r8, #0
 800e810:	4640      	mov	r0, r8
 800e812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e816:	ea08 0800 	and.w	r8, r8, r0
 800e81a:	e7d2      	b.n	800e7c2 <uxr_serialize_AGENT_Representation+0x3a>

0800e81c <uxr_serialize_DATAWRITER_Representation>:
 800e81c:	b570      	push	{r4, r5, r6, lr}
 800e81e:	460d      	mov	r5, r1
 800e820:	7809      	ldrb	r1, [r1, #0]
 800e822:	4606      	mov	r6, r0
 800e824:	f7fc ff52 	bl	800b6cc <ucdr_serialize_uint8_t>
 800e828:	4604      	mov	r4, r0
 800e82a:	b130      	cbz	r0, 800e83a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e82c:	782b      	ldrb	r3, [r5, #0]
 800e82e:	2b02      	cmp	r3, #2
 800e830:	d00c      	beq.n	800e84c <uxr_serialize_DATAWRITER_Representation+0x30>
 800e832:	2b03      	cmp	r3, #3
 800e834:	d010      	beq.n	800e858 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800e836:	2b01      	cmp	r3, #1
 800e838:	d008      	beq.n	800e84c <uxr_serialize_DATAWRITER_Representation+0x30>
 800e83a:	2202      	movs	r2, #2
 800e83c:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800e840:	4630      	mov	r0, r6
 800e842:	f005 fbdf 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800e846:	4020      	ands	r0, r4
 800e848:	b2c0      	uxtb	r0, r0
 800e84a:	bd70      	pop	{r4, r5, r6, pc}
 800e84c:	6869      	ldr	r1, [r5, #4]
 800e84e:	4630      	mov	r0, r6
 800e850:	f005 fcf8 	bl	8014244 <ucdr_serialize_string>
 800e854:	4604      	mov	r4, r0
 800e856:	e7f0      	b.n	800e83a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e858:	4629      	mov	r1, r5
 800e85a:	4630      	mov	r0, r6
 800e85c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e860:	3104      	adds	r1, #4
 800e862:	f005 fcc3 	bl	80141ec <ucdr_serialize_sequence_uint8_t>
 800e866:	4604      	mov	r4, r0
 800e868:	e7e7      	b.n	800e83a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e86a:	bf00      	nop

0800e86c <uxr_serialize_ObjectVariant.part.0>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	780b      	ldrb	r3, [r1, #0]
 800e870:	3b01      	subs	r3, #1
 800e872:	460c      	mov	r4, r1
 800e874:	4605      	mov	r5, r0
 800e876:	2b0d      	cmp	r3, #13
 800e878:	d854      	bhi.n	800e924 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e87a:	e8df f003 	tbb	[pc, r3]
 800e87e:	0730      	.short	0x0730
 800e880:	07071b1b 	.word	0x07071b1b
 800e884:	0c530707 	.word	0x0c530707
 800e888:	494e0c0c 	.word	0x494e0c0c
 800e88c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e890:	3104      	adds	r1, #4
 800e892:	f7ff bfc3 	b.w	800e81c <uxr_serialize_DATAWRITER_Representation>
 800e896:	7909      	ldrb	r1, [r1, #4]
 800e898:	f7fc ff18 	bl	800b6cc <ucdr_serialize_uint8_t>
 800e89c:	b1e8      	cbz	r0, 800e8da <uxr_serialize_ObjectVariant.part.0+0x6e>
 800e89e:	7923      	ldrb	r3, [r4, #4]
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d001      	beq.n	800e8a8 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d13d      	bne.n	800e924 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e8a8:	68a1      	ldr	r1, [r4, #8]
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8b0:	f005 bcc8 	b.w	8014244 <ucdr_serialize_string>
 800e8b4:	7909      	ldrb	r1, [r1, #4]
 800e8b6:	f7fc ff09 	bl	800b6cc <ucdr_serialize_uint8_t>
 800e8ba:	4606      	mov	r6, r0
 800e8bc:	b120      	cbz	r0, 800e8c8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e8be:	7923      	ldrb	r3, [r4, #4]
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	d039      	beq.n	800e938 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800e8c4:	2b03      	cmp	r3, #3
 800e8c6:	d02f      	beq.n	800e928 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800e8c8:	2202      	movs	r2, #2
 800e8ca:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	f005 fb98 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800e8d4:	4030      	ands	r0, r6
 800e8d6:	b2c0      	uxtb	r0, r0
 800e8d8:	bd70      	pop	{r4, r5, r6, pc}
 800e8da:	2000      	movs	r0, #0
 800e8dc:	bd70      	pop	{r4, r5, r6, pc}
 800e8de:	7909      	ldrb	r1, [r1, #4]
 800e8e0:	f7fc fef4 	bl	800b6cc <ucdr_serialize_uint8_t>
 800e8e4:	4606      	mov	r6, r0
 800e8e6:	b158      	cbz	r0, 800e900 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e8e8:	7923      	ldrb	r3, [r4, #4]
 800e8ea:	2b02      	cmp	r3, #2
 800e8ec:	d003      	beq.n	800e8f6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800e8ee:	2b03      	cmp	r3, #3
 800e8f0:	d028      	beq.n	800e944 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d104      	bne.n	800e900 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e8f6:	68a1      	ldr	r1, [r4, #8]
 800e8f8:	4628      	mov	r0, r5
 800e8fa:	f005 fca3 	bl	8014244 <ucdr_serialize_string>
 800e8fe:	4606      	mov	r6, r0
 800e900:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800e904:	4628      	mov	r0, r5
 800e906:	f7fd fc1d 	bl	800c144 <ucdr_serialize_int16_t>
 800e90a:	4030      	ands	r0, r6
 800e90c:	b2c0      	uxtb	r0, r0
 800e90e:	bd70      	pop	{r4, r5, r6, pc}
 800e910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e914:	3104      	adds	r1, #4
 800e916:	f7ff be7b 	b.w	800e610 <uxr_serialize_CLIENT_Representation>
 800e91a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e91e:	3104      	adds	r1, #4
 800e920:	f7ff bf32 	b.w	800e788 <uxr_serialize_AGENT_Representation>
 800e924:	2001      	movs	r0, #1
 800e926:	bd70      	pop	{r4, r5, r6, pc}
 800e928:	68a2      	ldr	r2, [r4, #8]
 800e92a:	f104 010c 	add.w	r1, r4, #12
 800e92e:	4628      	mov	r0, r5
 800e930:	f005 fc5c 	bl	80141ec <ucdr_serialize_sequence_uint8_t>
 800e934:	4606      	mov	r6, r0
 800e936:	e7c7      	b.n	800e8c8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e938:	68a1      	ldr	r1, [r4, #8]
 800e93a:	4628      	mov	r0, r5
 800e93c:	f005 fc82 	bl	8014244 <ucdr_serialize_string>
 800e940:	4606      	mov	r6, r0
 800e942:	e7c1      	b.n	800e8c8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e944:	68a2      	ldr	r2, [r4, #8]
 800e946:	f104 010c 	add.w	r1, r4, #12
 800e94a:	4628      	mov	r0, r5
 800e94c:	f005 fc4e 	bl	80141ec <ucdr_serialize_sequence_uint8_t>
 800e950:	4606      	mov	r6, r0
 800e952:	e7d5      	b.n	800e900 <uxr_serialize_ObjectVariant.part.0+0x94>

0800e954 <uxr_deserialize_DATAWRITER_Representation>:
 800e954:	b570      	push	{r4, r5, r6, lr}
 800e956:	4606      	mov	r6, r0
 800e958:	460d      	mov	r5, r1
 800e95a:	f7fc fecd 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800e95e:	4604      	mov	r4, r0
 800e960:	b130      	cbz	r0, 800e970 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e962:	782b      	ldrb	r3, [r5, #0]
 800e964:	2b02      	cmp	r3, #2
 800e966:	d00c      	beq.n	800e982 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e968:	2b03      	cmp	r3, #3
 800e96a:	d012      	beq.n	800e992 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d008      	beq.n	800e982 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e970:	2202      	movs	r2, #2
 800e972:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800e976:	4630      	mov	r0, r6
 800e978:	f005 fba8 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800e97c:	4020      	ands	r0, r4
 800e97e:	b2c0      	uxtb	r0, r0
 800e980:	bd70      	pop	{r4, r5, r6, pc}
 800e982:	6869      	ldr	r1, [r5, #4]
 800e984:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e988:	4630      	mov	r0, r6
 800e98a:	f005 fc6b 	bl	8014264 <ucdr_deserialize_string>
 800e98e:	4604      	mov	r4, r0
 800e990:	e7ee      	b.n	800e970 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e992:	1d2b      	adds	r3, r5, #4
 800e994:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e998:	f105 0108 	add.w	r1, r5, #8
 800e99c:	4630      	mov	r0, r6
 800e99e:	f005 fc37 	bl	8014210 <ucdr_deserialize_sequence_uint8_t>
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	e7e4      	b.n	800e970 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e9a6:	bf00      	nop

0800e9a8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800e9a8:	b570      	push	{r4, r5, r6, lr}
 800e9aa:	460d      	mov	r5, r1
 800e9ac:	7809      	ldrb	r1, [r1, #0]
 800e9ae:	4606      	mov	r6, r0
 800e9b0:	f7fc fe5e 	bl	800b670 <ucdr_serialize_bool>
 800e9b4:	782b      	ldrb	r3, [r5, #0]
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	b94b      	cbnz	r3, 800e9ce <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800e9ba:	7a29      	ldrb	r1, [r5, #8]
 800e9bc:	4630      	mov	r0, r6
 800e9be:	f7fc fe57 	bl	800b670 <ucdr_serialize_bool>
 800e9c2:	7a2b      	ldrb	r3, [r5, #8]
 800e9c4:	4004      	ands	r4, r0
 800e9c6:	b2e4      	uxtb	r4, r4
 800e9c8:	b943      	cbnz	r3, 800e9dc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	bd70      	pop	{r4, r5, r6, pc}
 800e9ce:	6869      	ldr	r1, [r5, #4]
 800e9d0:	4630      	mov	r0, r6
 800e9d2:	f005 fc37 	bl	8014244 <ucdr_serialize_string>
 800e9d6:	4004      	ands	r4, r0
 800e9d8:	b2e4      	uxtb	r4, r4
 800e9da:	e7ee      	b.n	800e9ba <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800e9dc:	68e9      	ldr	r1, [r5, #12]
 800e9de:	4630      	mov	r0, r6
 800e9e0:	f005 fc30 	bl	8014244 <ucdr_serialize_string>
 800e9e4:	4004      	ands	r4, r0
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	bd70      	pop	{r4, r5, r6, pc}
 800e9ea:	bf00      	nop

0800e9ec <uxr_serialize_OBJK_Topic_Binary>:
 800e9ec:	b570      	push	{r4, r5, r6, lr}
 800e9ee:	460d      	mov	r5, r1
 800e9f0:	6809      	ldr	r1, [r1, #0]
 800e9f2:	4606      	mov	r6, r0
 800e9f4:	f005 fc26 	bl	8014244 <ucdr_serialize_string>
 800e9f8:	7929      	ldrb	r1, [r5, #4]
 800e9fa:	4604      	mov	r4, r0
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	f7fc fe37 	bl	800b670 <ucdr_serialize_bool>
 800ea02:	792b      	ldrb	r3, [r5, #4]
 800ea04:	4004      	ands	r4, r0
 800ea06:	b2e4      	uxtb	r4, r4
 800ea08:	b943      	cbnz	r3, 800ea1c <uxr_serialize_OBJK_Topic_Binary+0x30>
 800ea0a:	7b29      	ldrb	r1, [r5, #12]
 800ea0c:	4630      	mov	r0, r6
 800ea0e:	f7fc fe2f 	bl	800b670 <ucdr_serialize_bool>
 800ea12:	7b2b      	ldrb	r3, [r5, #12]
 800ea14:	4004      	ands	r4, r0
 800ea16:	b93b      	cbnz	r3, 800ea28 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800ea18:	4620      	mov	r0, r4
 800ea1a:	bd70      	pop	{r4, r5, r6, pc}
 800ea1c:	68a9      	ldr	r1, [r5, #8]
 800ea1e:	4630      	mov	r0, r6
 800ea20:	f005 fc10 	bl	8014244 <ucdr_serialize_string>
 800ea24:	4004      	ands	r4, r0
 800ea26:	e7f0      	b.n	800ea0a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800ea28:	6929      	ldr	r1, [r5, #16]
 800ea2a:	4630      	mov	r0, r6
 800ea2c:	f005 fc0a 	bl	8014244 <ucdr_serialize_string>
 800ea30:	4004      	ands	r4, r0
 800ea32:	b2e4      	uxtb	r4, r4
 800ea34:	4620      	mov	r0, r4
 800ea36:	bd70      	pop	{r4, r5, r6, pc}

0800ea38 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800ea38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea3c:	460c      	mov	r4, r1
 800ea3e:	7809      	ldrb	r1, [r1, #0]
 800ea40:	4606      	mov	r6, r0
 800ea42:	f7fc fe15 	bl	800b670 <ucdr_serialize_bool>
 800ea46:	7823      	ldrb	r3, [r4, #0]
 800ea48:	4605      	mov	r5, r0
 800ea4a:	b96b      	cbnz	r3, 800ea68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800ea4c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800ea50:	4630      	mov	r0, r6
 800ea52:	f7fc fe0d 	bl	800b670 <ucdr_serialize_bool>
 800ea56:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ea5a:	4005      	ands	r5, r0
 800ea5c:	b2ed      	uxtb	r5, r5
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d169      	bne.n	800eb36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800ea62:	4628      	mov	r0, r5
 800ea64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea68:	6861      	ldr	r1, [r4, #4]
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	f7fd f844 	bl	800baf8 <ucdr_serialize_uint32_t>
 800ea70:	6863      	ldr	r3, [r4, #4]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d06b      	beq.n	800eb4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d067      	beq.n	800eb4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ea7a:	68a1      	ldr	r1, [r4, #8]
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	f005 fbe1 	bl	8014244 <ucdr_serialize_string>
 800ea82:	6863      	ldr	r3, [r4, #4]
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d953      	bls.n	800eb30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	d05e      	beq.n	800eb4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ea8c:	68e1      	ldr	r1, [r4, #12]
 800ea8e:	4630      	mov	r0, r6
 800ea90:	f005 fbd8 	bl	8014244 <ucdr_serialize_string>
 800ea94:	6863      	ldr	r3, [r4, #4]
 800ea96:	2b02      	cmp	r3, #2
 800ea98:	d94a      	bls.n	800eb30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	d055      	beq.n	800eb4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ea9e:	6921      	ldr	r1, [r4, #16]
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	f005 fbcf 	bl	8014244 <ucdr_serialize_string>
 800eaa6:	6863      	ldr	r3, [r4, #4]
 800eaa8:	2b03      	cmp	r3, #3
 800eaaa:	d941      	bls.n	800eb30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d04c      	beq.n	800eb4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eab0:	6961      	ldr	r1, [r4, #20]
 800eab2:	4630      	mov	r0, r6
 800eab4:	f005 fbc6 	bl	8014244 <ucdr_serialize_string>
 800eab8:	6863      	ldr	r3, [r4, #4]
 800eaba:	2b04      	cmp	r3, #4
 800eabc:	d938      	bls.n	800eb30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eabe:	2800      	cmp	r0, #0
 800eac0:	d043      	beq.n	800eb4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eac2:	69a1      	ldr	r1, [r4, #24]
 800eac4:	4630      	mov	r0, r6
 800eac6:	f005 fbbd 	bl	8014244 <ucdr_serialize_string>
 800eaca:	6863      	ldr	r3, [r4, #4]
 800eacc:	2b05      	cmp	r3, #5
 800eace:	d92f      	bls.n	800eb30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ead0:	2800      	cmp	r0, #0
 800ead2:	d03a      	beq.n	800eb4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ead4:	69e1      	ldr	r1, [r4, #28]
 800ead6:	4630      	mov	r0, r6
 800ead8:	f005 fbb4 	bl	8014244 <ucdr_serialize_string>
 800eadc:	6863      	ldr	r3, [r4, #4]
 800eade:	2b06      	cmp	r3, #6
 800eae0:	d926      	bls.n	800eb30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eae2:	b390      	cbz	r0, 800eb4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eae4:	6a21      	ldr	r1, [r4, #32]
 800eae6:	4630      	mov	r0, r6
 800eae8:	f005 fbac 	bl	8014244 <ucdr_serialize_string>
 800eaec:	6863      	ldr	r3, [r4, #4]
 800eaee:	2b07      	cmp	r3, #7
 800eaf0:	d91e      	bls.n	800eb30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eaf2:	b350      	cbz	r0, 800eb4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eaf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	f005 fba4 	bl	8014244 <ucdr_serialize_string>
 800eafc:	6863      	ldr	r3, [r4, #4]
 800eafe:	2b08      	cmp	r3, #8
 800eb00:	d916      	bls.n	800eb30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eb02:	b310      	cbz	r0, 800eb4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eb04:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800eb06:	4630      	mov	r0, r6
 800eb08:	f005 fb9c 	bl	8014244 <ucdr_serialize_string>
 800eb0c:	6863      	ldr	r3, [r4, #4]
 800eb0e:	2b09      	cmp	r3, #9
 800eb10:	d90e      	bls.n	800eb30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eb12:	b1d0      	cbz	r0, 800eb4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eb14:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800eb18:	2709      	movs	r7, #9
 800eb1a:	e000      	b.n	800eb1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800eb1c:	b1a8      	cbz	r0, 800eb4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eb1e:	f858 1b04 	ldr.w	r1, [r8], #4
 800eb22:	4630      	mov	r0, r6
 800eb24:	f005 fb8e 	bl	8014244 <ucdr_serialize_string>
 800eb28:	6862      	ldr	r2, [r4, #4]
 800eb2a:	3701      	adds	r7, #1
 800eb2c:	4297      	cmp	r7, r2
 800eb2e:	d3f5      	bcc.n	800eb1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800eb30:	4005      	ands	r5, r0
 800eb32:	b2ed      	uxtb	r5, r5
 800eb34:	e78a      	b.n	800ea4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800eb36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800eb38:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800eb3c:	4630      	mov	r0, r6
 800eb3e:	f005 fb55 	bl	80141ec <ucdr_serialize_sequence_uint8_t>
 800eb42:	4005      	ands	r5, r0
 800eb44:	4628      	mov	r0, r5
 800eb46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb4a:	2500      	movs	r5, #0
 800eb4c:	e77e      	b.n	800ea4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800eb4e:	4028      	ands	r0, r5
 800eb50:	b2c5      	uxtb	r5, r0
 800eb52:	e77b      	b.n	800ea4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800eb54 <uxr_serialize_OBJK_Publisher_Binary>:
 800eb54:	b570      	push	{r4, r5, r6, lr}
 800eb56:	460d      	mov	r5, r1
 800eb58:	7809      	ldrb	r1, [r1, #0]
 800eb5a:	4606      	mov	r6, r0
 800eb5c:	f7fc fd88 	bl	800b670 <ucdr_serialize_bool>
 800eb60:	782b      	ldrb	r3, [r5, #0]
 800eb62:	4604      	mov	r4, r0
 800eb64:	b94b      	cbnz	r3, 800eb7a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800eb66:	7a29      	ldrb	r1, [r5, #8]
 800eb68:	4630      	mov	r0, r6
 800eb6a:	f7fc fd81 	bl	800b670 <ucdr_serialize_bool>
 800eb6e:	7a2b      	ldrb	r3, [r5, #8]
 800eb70:	4004      	ands	r4, r0
 800eb72:	b2e4      	uxtb	r4, r4
 800eb74:	b943      	cbnz	r3, 800eb88 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800eb76:	4620      	mov	r0, r4
 800eb78:	bd70      	pop	{r4, r5, r6, pc}
 800eb7a:	6869      	ldr	r1, [r5, #4]
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	f005 fb61 	bl	8014244 <ucdr_serialize_string>
 800eb82:	4004      	ands	r4, r0
 800eb84:	b2e4      	uxtb	r4, r4
 800eb86:	e7ee      	b.n	800eb66 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800eb88:	f105 010c 	add.w	r1, r5, #12
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	f7ff ff53 	bl	800ea38 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800eb92:	4004      	ands	r4, r0
 800eb94:	4620      	mov	r0, r4
 800eb96:	bd70      	pop	{r4, r5, r6, pc}

0800eb98 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800eb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb9c:	460c      	mov	r4, r1
 800eb9e:	7809      	ldrb	r1, [r1, #0]
 800eba0:	4606      	mov	r6, r0
 800eba2:	f7fc fd65 	bl	800b670 <ucdr_serialize_bool>
 800eba6:	7823      	ldrb	r3, [r4, #0]
 800eba8:	4605      	mov	r5, r0
 800ebaa:	b96b      	cbnz	r3, 800ebc8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800ebac:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	f7fc fd5d 	bl	800b670 <ucdr_serialize_bool>
 800ebb6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ebba:	4005      	ands	r5, r0
 800ebbc:	b2ed      	uxtb	r5, r5
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d169      	bne.n	800ec96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc8:	6861      	ldr	r1, [r4, #4]
 800ebca:	4630      	mov	r0, r6
 800ebcc:	f7fc ff94 	bl	800baf8 <ucdr_serialize_uint32_t>
 800ebd0:	6863      	ldr	r3, [r4, #4]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d06b      	beq.n	800ecae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	d067      	beq.n	800ecaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ebda:	68a1      	ldr	r1, [r4, #8]
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f005 fb31 	bl	8014244 <ucdr_serialize_string>
 800ebe2:	6863      	ldr	r3, [r4, #4]
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d953      	bls.n	800ec90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	d05e      	beq.n	800ecaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ebec:	68e1      	ldr	r1, [r4, #12]
 800ebee:	4630      	mov	r0, r6
 800ebf0:	f005 fb28 	bl	8014244 <ucdr_serialize_string>
 800ebf4:	6863      	ldr	r3, [r4, #4]
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	d94a      	bls.n	800ec90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d055      	beq.n	800ecaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ebfe:	6921      	ldr	r1, [r4, #16]
 800ec00:	4630      	mov	r0, r6
 800ec02:	f005 fb1f 	bl	8014244 <ucdr_serialize_string>
 800ec06:	6863      	ldr	r3, [r4, #4]
 800ec08:	2b03      	cmp	r3, #3
 800ec0a:	d941      	bls.n	800ec90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	d04c      	beq.n	800ecaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ec10:	6961      	ldr	r1, [r4, #20]
 800ec12:	4630      	mov	r0, r6
 800ec14:	f005 fb16 	bl	8014244 <ucdr_serialize_string>
 800ec18:	6863      	ldr	r3, [r4, #4]
 800ec1a:	2b04      	cmp	r3, #4
 800ec1c:	d938      	bls.n	800ec90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	d043      	beq.n	800ecaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ec22:	69a1      	ldr	r1, [r4, #24]
 800ec24:	4630      	mov	r0, r6
 800ec26:	f005 fb0d 	bl	8014244 <ucdr_serialize_string>
 800ec2a:	6863      	ldr	r3, [r4, #4]
 800ec2c:	2b05      	cmp	r3, #5
 800ec2e:	d92f      	bls.n	800ec90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ec30:	2800      	cmp	r0, #0
 800ec32:	d03a      	beq.n	800ecaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ec34:	69e1      	ldr	r1, [r4, #28]
 800ec36:	4630      	mov	r0, r6
 800ec38:	f005 fb04 	bl	8014244 <ucdr_serialize_string>
 800ec3c:	6863      	ldr	r3, [r4, #4]
 800ec3e:	2b06      	cmp	r3, #6
 800ec40:	d926      	bls.n	800ec90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ec42:	b390      	cbz	r0, 800ecaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ec44:	6a21      	ldr	r1, [r4, #32]
 800ec46:	4630      	mov	r0, r6
 800ec48:	f005 fafc 	bl	8014244 <ucdr_serialize_string>
 800ec4c:	6863      	ldr	r3, [r4, #4]
 800ec4e:	2b07      	cmp	r3, #7
 800ec50:	d91e      	bls.n	800ec90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ec52:	b350      	cbz	r0, 800ecaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ec54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ec56:	4630      	mov	r0, r6
 800ec58:	f005 faf4 	bl	8014244 <ucdr_serialize_string>
 800ec5c:	6863      	ldr	r3, [r4, #4]
 800ec5e:	2b08      	cmp	r3, #8
 800ec60:	d916      	bls.n	800ec90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ec62:	b310      	cbz	r0, 800ecaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ec64:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ec66:	4630      	mov	r0, r6
 800ec68:	f005 faec 	bl	8014244 <ucdr_serialize_string>
 800ec6c:	6863      	ldr	r3, [r4, #4]
 800ec6e:	2b09      	cmp	r3, #9
 800ec70:	d90e      	bls.n	800ec90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ec72:	b1d0      	cbz	r0, 800ecaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ec74:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800ec78:	2709      	movs	r7, #9
 800ec7a:	e000      	b.n	800ec7e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800ec7c:	b1a8      	cbz	r0, 800ecaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ec7e:	f858 1b04 	ldr.w	r1, [r8], #4
 800ec82:	4630      	mov	r0, r6
 800ec84:	f005 fade 	bl	8014244 <ucdr_serialize_string>
 800ec88:	6862      	ldr	r2, [r4, #4]
 800ec8a:	3701      	adds	r7, #1
 800ec8c:	4297      	cmp	r7, r2
 800ec8e:	d3f5      	bcc.n	800ec7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800ec90:	4005      	ands	r5, r0
 800ec92:	b2ed      	uxtb	r5, r5
 800ec94:	e78a      	b.n	800ebac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800ec96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ec98:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800ec9c:	4630      	mov	r0, r6
 800ec9e:	f005 faa5 	bl	80141ec <ucdr_serialize_sequence_uint8_t>
 800eca2:	4005      	ands	r5, r0
 800eca4:	4628      	mov	r0, r5
 800eca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecaa:	2500      	movs	r5, #0
 800ecac:	e77e      	b.n	800ebac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800ecae:	4028      	ands	r0, r5
 800ecb0:	b2c5      	uxtb	r5, r0
 800ecb2:	e77b      	b.n	800ebac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800ecb4 <uxr_serialize_OBJK_Subscriber_Binary>:
 800ecb4:	b570      	push	{r4, r5, r6, lr}
 800ecb6:	460d      	mov	r5, r1
 800ecb8:	7809      	ldrb	r1, [r1, #0]
 800ecba:	4606      	mov	r6, r0
 800ecbc:	f7fc fcd8 	bl	800b670 <ucdr_serialize_bool>
 800ecc0:	782b      	ldrb	r3, [r5, #0]
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	b94b      	cbnz	r3, 800ecda <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800ecc6:	7a29      	ldrb	r1, [r5, #8]
 800ecc8:	4630      	mov	r0, r6
 800ecca:	f7fc fcd1 	bl	800b670 <ucdr_serialize_bool>
 800ecce:	7a2b      	ldrb	r3, [r5, #8]
 800ecd0:	4004      	ands	r4, r0
 800ecd2:	b2e4      	uxtb	r4, r4
 800ecd4:	b943      	cbnz	r3, 800ece8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	bd70      	pop	{r4, r5, r6, pc}
 800ecda:	6869      	ldr	r1, [r5, #4]
 800ecdc:	4630      	mov	r0, r6
 800ecde:	f005 fab1 	bl	8014244 <ucdr_serialize_string>
 800ece2:	4004      	ands	r4, r0
 800ece4:	b2e4      	uxtb	r4, r4
 800ece6:	e7ee      	b.n	800ecc6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800ece8:	f105 010c 	add.w	r1, r5, #12
 800ecec:	4630      	mov	r0, r6
 800ecee:	f7ff ff53 	bl	800eb98 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800ecf2:	4004      	ands	r4, r0
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	bd70      	pop	{r4, r5, r6, pc}

0800ecf8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800ecf8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800ecfc:	4688      	mov	r8, r1
 800ecfe:	8809      	ldrh	r1, [r1, #0]
 800ed00:	4681      	mov	r9, r0
 800ed02:	f7fc fd0f 	bl	800b724 <ucdr_serialize_uint16_t>
 800ed06:	f898 1002 	ldrb.w	r1, [r8, #2]
 800ed0a:	4606      	mov	r6, r0
 800ed0c:	4648      	mov	r0, r9
 800ed0e:	f7fc fcaf 	bl	800b670 <ucdr_serialize_bool>
 800ed12:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ed16:	4006      	ands	r6, r0
 800ed18:	b2f5      	uxtb	r5, r6
 800ed1a:	b9eb      	cbnz	r3, 800ed58 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800ed1c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800ed20:	4648      	mov	r0, r9
 800ed22:	f7fc fca5 	bl	800b670 <ucdr_serialize_bool>
 800ed26:	f898 3006 	ldrb.w	r3, [r8, #6]
 800ed2a:	4005      	ands	r5, r0
 800ed2c:	bb7b      	cbnz	r3, 800ed8e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800ed2e:	f898 100c 	ldrb.w	r1, [r8, #12]
 800ed32:	4648      	mov	r0, r9
 800ed34:	f7fc fc9c 	bl	800b670 <ucdr_serialize_bool>
 800ed38:	f898 300c 	ldrb.w	r3, [r8, #12]
 800ed3c:	4005      	ands	r5, r0
 800ed3e:	b9f3      	cbnz	r3, 800ed7e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800ed40:	f898 1014 	ldrb.w	r1, [r8, #20]
 800ed44:	4648      	mov	r0, r9
 800ed46:	f7fc fc93 	bl	800b670 <ucdr_serialize_bool>
 800ed4a:	f898 3014 	ldrb.w	r3, [r8, #20]
 800ed4e:	4005      	ands	r5, r0
 800ed50:	b94b      	cbnz	r3, 800ed66 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800ed52:	4628      	mov	r0, r5
 800ed54:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800ed58:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800ed5c:	4648      	mov	r0, r9
 800ed5e:	f7fc fce1 	bl	800b724 <ucdr_serialize_uint16_t>
 800ed62:	4005      	ands	r5, r0
 800ed64:	e7da      	b.n	800ed1c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800ed66:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800ed6a:	f108 011c 	add.w	r1, r8, #28
 800ed6e:	4648      	mov	r0, r9
 800ed70:	f005 fa3c 	bl	80141ec <ucdr_serialize_sequence_uint8_t>
 800ed74:	4028      	ands	r0, r5
 800ed76:	b2c5      	uxtb	r5, r0
 800ed78:	4628      	mov	r0, r5
 800ed7a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800ed7e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ed82:	4648      	mov	r0, r9
 800ed84:	f7fc feb8 	bl	800baf8 <ucdr_serialize_uint32_t>
 800ed88:	4028      	ands	r0, r5
 800ed8a:	b2c5      	uxtb	r5, r0
 800ed8c:	e7d8      	b.n	800ed40 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800ed8e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800ed92:	4648      	mov	r0, r9
 800ed94:	f7fc feb0 	bl	800baf8 <ucdr_serialize_uint32_t>
 800ed98:	4028      	ands	r0, r5
 800ed9a:	b2c5      	uxtb	r5, r0
 800ed9c:	e7c7      	b.n	800ed2e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800ed9e:	bf00      	nop

0800eda0 <uxr_serialize_OBJK_DataReader_Binary>:
 800eda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda2:	2202      	movs	r2, #2
 800eda4:	460c      	mov	r4, r1
 800eda6:	4606      	mov	r6, r0
 800eda8:	f005 f92c 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800edac:	78a1      	ldrb	r1, [r4, #2]
 800edae:	4605      	mov	r5, r0
 800edb0:	4630      	mov	r0, r6
 800edb2:	f7fc fc5d 	bl	800b670 <ucdr_serialize_bool>
 800edb6:	78a3      	ldrb	r3, [r4, #2]
 800edb8:	4005      	ands	r5, r0
 800edba:	b2ed      	uxtb	r5, r5
 800edbc:	b90b      	cbnz	r3, 800edc2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800edbe:	4628      	mov	r0, r5
 800edc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edc2:	f104 0108 	add.w	r1, r4, #8
 800edc6:	4630      	mov	r0, r6
 800edc8:	f7ff ff96 	bl	800ecf8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800edcc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800edd0:	4607      	mov	r7, r0
 800edd2:	4630      	mov	r0, r6
 800edd4:	f7fc fc4c 	bl	800b670 <ucdr_serialize_bool>
 800edd8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800eddc:	4038      	ands	r0, r7
 800edde:	b2c7      	uxtb	r7, r0
 800ede0:	b95b      	cbnz	r3, 800edfa <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800ede2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800ede6:	4630      	mov	r0, r6
 800ede8:	f7fc fc42 	bl	800b670 <ucdr_serialize_bool>
 800edec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800edf0:	4007      	ands	r7, r0
 800edf2:	b94b      	cbnz	r3, 800ee08 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800edf4:	403d      	ands	r5, r7
 800edf6:	4628      	mov	r0, r5
 800edf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edfa:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800edfe:	4630      	mov	r0, r6
 800ee00:	f7fd f8d0 	bl	800bfa4 <ucdr_serialize_uint64_t>
 800ee04:	4007      	ands	r7, r0
 800ee06:	e7ec      	b.n	800ede2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800ee08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	f005 fa1a 	bl	8014244 <ucdr_serialize_string>
 800ee10:	4007      	ands	r7, r0
 800ee12:	b2ff      	uxtb	r7, r7
 800ee14:	e7ee      	b.n	800edf4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800ee16:	bf00      	nop

0800ee18 <uxr_serialize_OBJK_DataWriter_Binary>:
 800ee18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	460d      	mov	r5, r1
 800ee1e:	4606      	mov	r6, r0
 800ee20:	f005 f8f0 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800ee24:	78a9      	ldrb	r1, [r5, #2]
 800ee26:	4604      	mov	r4, r0
 800ee28:	4630      	mov	r0, r6
 800ee2a:	f7fc fc21 	bl	800b670 <ucdr_serialize_bool>
 800ee2e:	78ab      	ldrb	r3, [r5, #2]
 800ee30:	4004      	ands	r4, r0
 800ee32:	b2e4      	uxtb	r4, r4
 800ee34:	b90b      	cbnz	r3, 800ee3a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800ee36:	4620      	mov	r0, r4
 800ee38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee3a:	f105 0108 	add.w	r1, r5, #8
 800ee3e:	4630      	mov	r0, r6
 800ee40:	f7ff ff5a 	bl	800ecf8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ee44:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800ee48:	4607      	mov	r7, r0
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	f7fc fc10 	bl	800b670 <ucdr_serialize_bool>
 800ee50:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800ee54:	4038      	ands	r0, r7
 800ee56:	b2c7      	uxtb	r7, r0
 800ee58:	b913      	cbnz	r3, 800ee60 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800ee5a:	403c      	ands	r4, r7
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee60:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800ee64:	4630      	mov	r0, r6
 800ee66:	f7fd f89d 	bl	800bfa4 <ucdr_serialize_uint64_t>
 800ee6a:	4007      	ands	r7, r0
 800ee6c:	e7f5      	b.n	800ee5a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800ee6e:	bf00      	nop

0800ee70 <uxr_deserialize_ObjectVariant>:
 800ee70:	b570      	push	{r4, r5, r6, lr}
 800ee72:	4605      	mov	r5, r0
 800ee74:	460e      	mov	r6, r1
 800ee76:	f7fc fc3f 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800ee7a:	b168      	cbz	r0, 800ee98 <uxr_deserialize_ObjectVariant+0x28>
 800ee7c:	7833      	ldrb	r3, [r6, #0]
 800ee7e:	3b01      	subs	r3, #1
 800ee80:	4604      	mov	r4, r0
 800ee82:	2b0d      	cmp	r3, #13
 800ee84:	d809      	bhi.n	800ee9a <uxr_deserialize_ObjectVariant+0x2a>
 800ee86:	e8df f003 	tbb	[pc, r3]
 800ee8a:	0a41      	.short	0x0a41
 800ee8c:	0a0a2323 	.word	0x0a0a2323
 800ee90:	10080a0a 	.word	0x10080a0a
 800ee94:	565c1010 	.word	0x565c1010
 800ee98:	2400      	movs	r4, #0
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	bd70      	pop	{r4, r5, r6, pc}
 800ee9e:	1d31      	adds	r1, r6, #4
 800eea0:	4628      	mov	r0, r5
 800eea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eea6:	f7ff bd55 	b.w	800e954 <uxr_deserialize_DATAWRITER_Representation>
 800eeaa:	1d31      	adds	r1, r6, #4
 800eeac:	4628      	mov	r0, r5
 800eeae:	f7fc fc23 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	d0f0      	beq.n	800ee98 <uxr_deserialize_ObjectVariant+0x28>
 800eeb6:	7933      	ldrb	r3, [r6, #4]
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d001      	beq.n	800eec0 <uxr_deserialize_ObjectVariant+0x50>
 800eebc:	2b02      	cmp	r3, #2
 800eebe:	d1ec      	bne.n	800ee9a <uxr_deserialize_ObjectVariant+0x2a>
 800eec0:	68b1      	ldr	r1, [r6, #8]
 800eec2:	4628      	mov	r0, r5
 800eec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eecc:	f005 b9ca 	b.w	8014264 <ucdr_deserialize_string>
 800eed0:	1d31      	adds	r1, r6, #4
 800eed2:	4628      	mov	r0, r5
 800eed4:	f7fc fc10 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800eed8:	4604      	mov	r4, r0
 800eeda:	b170      	cbz	r0, 800eefa <uxr_deserialize_ObjectVariant+0x8a>
 800eedc:	7933      	ldrb	r3, [r6, #4]
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d04c      	beq.n	800ef7c <uxr_deserialize_ObjectVariant+0x10c>
 800eee2:	2b03      	cmp	r3, #3
 800eee4:	d109      	bne.n	800eefa <uxr_deserialize_ObjectVariant+0x8a>
 800eee6:	f106 0308 	add.w	r3, r6, #8
 800eeea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eeee:	f106 010c 	add.w	r1, r6, #12
 800eef2:	4628      	mov	r0, r5
 800eef4:	f005 f98c 	bl	8014210 <ucdr_deserialize_sequence_uint8_t>
 800eef8:	4604      	mov	r4, r0
 800eefa:	2202      	movs	r2, #2
 800eefc:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800ef00:	4628      	mov	r0, r5
 800ef02:	f005 f8e3 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800ef06:	4020      	ands	r0, r4
 800ef08:	b2c4      	uxtb	r4, r0
 800ef0a:	e7c6      	b.n	800ee9a <uxr_deserialize_ObjectVariant+0x2a>
 800ef0c:	1d31      	adds	r1, r6, #4
 800ef0e:	4628      	mov	r0, r5
 800ef10:	f7fc fbf2 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800ef14:	4604      	mov	r4, r0
 800ef16:	b130      	cbz	r0, 800ef26 <uxr_deserialize_ObjectVariant+0xb6>
 800ef18:	7933      	ldrb	r3, [r6, #4]
 800ef1a:	2b02      	cmp	r3, #2
 800ef1c:	d036      	beq.n	800ef8c <uxr_deserialize_ObjectVariant+0x11c>
 800ef1e:	2b03      	cmp	r3, #3
 800ef20:	d03c      	beq.n	800ef9c <uxr_deserialize_ObjectVariant+0x12c>
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d032      	beq.n	800ef8c <uxr_deserialize_ObjectVariant+0x11c>
 800ef26:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	f7fd f98a 	bl	800c244 <ucdr_deserialize_int16_t>
 800ef30:	4020      	ands	r0, r4
 800ef32:	b2c4      	uxtb	r4, r0
 800ef34:	e7b1      	b.n	800ee9a <uxr_deserialize_ObjectVariant+0x2a>
 800ef36:	1d31      	adds	r1, r6, #4
 800ef38:	4628      	mov	r0, r5
 800ef3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef3e:	f7ff bbbf 	b.w	800e6c0 <uxr_deserialize_CLIENT_Representation>
 800ef42:	2204      	movs	r2, #4
 800ef44:	18b1      	adds	r1, r6, r2
 800ef46:	4628      	mov	r0, r5
 800ef48:	f005 f8c0 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800ef4c:	2202      	movs	r2, #2
 800ef4e:	f106 0108 	add.w	r1, r6, #8
 800ef52:	4604      	mov	r4, r0
 800ef54:	4628      	mov	r0, r5
 800ef56:	f005 f8b9 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800ef5a:	2202      	movs	r2, #2
 800ef5c:	4004      	ands	r4, r0
 800ef5e:	f106 010a 	add.w	r1, r6, #10
 800ef62:	4628      	mov	r0, r5
 800ef64:	f005 f8b2 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800ef68:	b2e4      	uxtb	r4, r4
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	f106 010c 	add.w	r1, r6, #12
 800ef70:	4628      	mov	r0, r5
 800ef72:	401c      	ands	r4, r3
 800ef74:	f7fc fb92 	bl	800b69c <ucdr_deserialize_bool>
 800ef78:	4004      	ands	r4, r0
 800ef7a:	e78e      	b.n	800ee9a <uxr_deserialize_ObjectVariant+0x2a>
 800ef7c:	68b1      	ldr	r1, [r6, #8]
 800ef7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef82:	4628      	mov	r0, r5
 800ef84:	f005 f96e 	bl	8014264 <ucdr_deserialize_string>
 800ef88:	4604      	mov	r4, r0
 800ef8a:	e7b6      	b.n	800eefa <uxr_deserialize_ObjectVariant+0x8a>
 800ef8c:	68b1      	ldr	r1, [r6, #8]
 800ef8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef92:	4628      	mov	r0, r5
 800ef94:	f005 f966 	bl	8014264 <ucdr_deserialize_string>
 800ef98:	4604      	mov	r4, r0
 800ef9a:	e7c4      	b.n	800ef26 <uxr_deserialize_ObjectVariant+0xb6>
 800ef9c:	f106 0308 	add.w	r3, r6, #8
 800efa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efa4:	f106 010c 	add.w	r1, r6, #12
 800efa8:	4628      	mov	r0, r5
 800efaa:	f005 f931 	bl	8014210 <ucdr_deserialize_sequence_uint8_t>
 800efae:	4604      	mov	r4, r0
 800efb0:	e7b9      	b.n	800ef26 <uxr_deserialize_ObjectVariant+0xb6>
 800efb2:	bf00      	nop

0800efb4 <uxr_deserialize_BaseObjectRequest>:
 800efb4:	b570      	push	{r4, r5, r6, lr}
 800efb6:	2202      	movs	r2, #2
 800efb8:	4605      	mov	r5, r0
 800efba:	460e      	mov	r6, r1
 800efbc:	f005 f886 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800efc0:	2202      	movs	r2, #2
 800efc2:	4604      	mov	r4, r0
 800efc4:	18b1      	adds	r1, r6, r2
 800efc6:	4628      	mov	r0, r5
 800efc8:	f005 f880 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800efcc:	4020      	ands	r0, r4
 800efce:	b2c0      	uxtb	r0, r0
 800efd0:	bd70      	pop	{r4, r5, r6, pc}
 800efd2:	bf00      	nop

0800efd4 <uxr_serialize_ActivityInfoVariant>:
 800efd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efd8:	460d      	mov	r5, r1
 800efda:	7809      	ldrb	r1, [r1, #0]
 800efdc:	4607      	mov	r7, r0
 800efde:	f7fc fb75 	bl	800b6cc <ucdr_serialize_uint8_t>
 800efe2:	4681      	mov	r9, r0
 800efe4:	b138      	cbz	r0, 800eff6 <uxr_serialize_ActivityInfoVariant+0x22>
 800efe6:	782b      	ldrb	r3, [r5, #0]
 800efe8:	2b06      	cmp	r3, #6
 800efea:	f000 8082 	beq.w	800f0f2 <uxr_serialize_ActivityInfoVariant+0x11e>
 800efee:	2b0d      	cmp	r3, #13
 800eff0:	d016      	beq.n	800f020 <uxr_serialize_ActivityInfoVariant+0x4c>
 800eff2:	2b05      	cmp	r3, #5
 800eff4:	d002      	beq.n	800effc <uxr_serialize_ActivityInfoVariant+0x28>
 800eff6:	4648      	mov	r0, r9
 800eff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800effc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f000:	4638      	mov	r0, r7
 800f002:	f7fd f89f 	bl	800c144 <ucdr_serialize_int16_t>
 800f006:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f00a:	4681      	mov	r9, r0
 800f00c:	4638      	mov	r0, r7
 800f00e:	f7fc ffc9 	bl	800bfa4 <ucdr_serialize_uint64_t>
 800f012:	ea09 0000 	and.w	r0, r9, r0
 800f016:	fa5f f980 	uxtb.w	r9, r0
 800f01a:	4648      	mov	r0, r9
 800f01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f020:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f024:	4638      	mov	r0, r7
 800f026:	f7fd f88d 	bl	800c144 <ucdr_serialize_int16_t>
 800f02a:	68e9      	ldr	r1, [r5, #12]
 800f02c:	4681      	mov	r9, r0
 800f02e:	4638      	mov	r0, r7
 800f030:	f7fc fd62 	bl	800baf8 <ucdr_serialize_uint32_t>
 800f034:	68eb      	ldr	r3, [r5, #12]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d0eb      	beq.n	800f012 <uxr_serialize_ActivityInfoVariant+0x3e>
 800f03a:	b320      	cbz	r0, 800f086 <uxr_serialize_ActivityInfoVariant+0xb2>
 800f03c:	f105 080c 	add.w	r8, r5, #12
 800f040:	2600      	movs	r6, #0
 800f042:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800f046:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800f04a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800f04e:	4638      	mov	r0, r7
 800f050:	f7fc fb3c 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f054:	2800      	cmp	r0, #0
 800f056:	d053      	beq.n	800f100 <uxr_serialize_ActivityInfoVariant+0x12c>
 800f058:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800f05c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800f060:	0074      	lsls	r4, r6, #1
 800f062:	00c9      	lsls	r1, r1, #3
 800f064:	2b03      	cmp	r3, #3
 800f066:	d854      	bhi.n	800f112 <uxr_serialize_ActivityInfoVariant+0x13e>
 800f068:	e8df f003 	tbb	[pc, r3]
 800f06c:	02102132 	.word	0x02102132
 800f070:	4441      	add	r1, r8
 800f072:	4638      	mov	r0, r7
 800f074:	6889      	ldr	r1, [r1, #8]
 800f076:	f005 f8e5 	bl	8014244 <ucdr_serialize_string>
 800f07a:	68ea      	ldr	r2, [r5, #12]
 800f07c:	3601      	adds	r6, #1
 800f07e:	4296      	cmp	r6, r2
 800f080:	d242      	bcs.n	800f108 <uxr_serialize_ActivityInfoVariant+0x134>
 800f082:	2800      	cmp	r0, #0
 800f084:	d1dd      	bne.n	800f042 <uxr_serialize_ActivityInfoVariant+0x6e>
 800f086:	f04f 0900 	mov.w	r9, #0
 800f08a:	e7b4      	b.n	800eff6 <uxr_serialize_ActivityInfoVariant+0x22>
 800f08c:	3108      	adds	r1, #8
 800f08e:	4441      	add	r1, r8
 800f090:	2210      	movs	r2, #16
 800f092:	4638      	mov	r0, r7
 800f094:	f004 ffb6 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f098:	4434      	add	r4, r6
 800f09a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f09e:	4604      	mov	r4, r0
 800f0a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	f7fc fd28 	bl	800baf8 <ucdr_serialize_uint32_t>
 800f0a8:	4020      	ands	r0, r4
 800f0aa:	b2c0      	uxtb	r0, r0
 800f0ac:	e7e5      	b.n	800f07a <uxr_serialize_ActivityInfoVariant+0xa6>
 800f0ae:	3108      	adds	r1, #8
 800f0b0:	4441      	add	r1, r8
 800f0b2:	2204      	movs	r2, #4
 800f0b4:	4638      	mov	r0, r7
 800f0b6:	f004 ffa5 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f0ba:	4434      	add	r4, r6
 800f0bc:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f0c0:	4604      	mov	r4, r0
 800f0c2:	8b19      	ldrh	r1, [r3, #24]
 800f0c4:	4638      	mov	r0, r7
 800f0c6:	f7fc fb2d 	bl	800b724 <ucdr_serialize_uint16_t>
 800f0ca:	4020      	ands	r0, r4
 800f0cc:	b2c0      	uxtb	r0, r0
 800f0ce:	e7d4      	b.n	800f07a <uxr_serialize_ActivityInfoVariant+0xa6>
 800f0d0:	3108      	adds	r1, #8
 800f0d2:	4441      	add	r1, r8
 800f0d4:	2202      	movs	r2, #2
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	f004 ff94 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f0dc:	4434      	add	r4, r6
 800f0de:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	7d99      	ldrb	r1, [r3, #22]
 800f0e6:	4638      	mov	r0, r7
 800f0e8:	f7fc faf0 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f0ec:	4020      	ands	r0, r4
 800f0ee:	b2c0      	uxtb	r0, r0
 800f0f0:	e7c3      	b.n	800f07a <uxr_serialize_ActivityInfoVariant+0xa6>
 800f0f2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f0f6:	4638      	mov	r0, r7
 800f0f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0fc:	f7fd b822 	b.w	800c144 <ucdr_serialize_int16_t>
 800f100:	68ea      	ldr	r2, [r5, #12]
 800f102:	3601      	adds	r6, #1
 800f104:	42b2      	cmp	r2, r6
 800f106:	d8be      	bhi.n	800f086 <uxr_serialize_ActivityInfoVariant+0xb2>
 800f108:	ea09 0900 	and.w	r9, r9, r0
 800f10c:	fa5f f989 	uxtb.w	r9, r9
 800f110:	e771      	b.n	800eff6 <uxr_serialize_ActivityInfoVariant+0x22>
 800f112:	68eb      	ldr	r3, [r5, #12]
 800f114:	3601      	adds	r6, #1
 800f116:	429e      	cmp	r6, r3
 800f118:	f10a 0a18 	add.w	sl, sl, #24
 800f11c:	d395      	bcc.n	800f04a <uxr_serialize_ActivityInfoVariant+0x76>
 800f11e:	e76a      	b.n	800eff6 <uxr_serialize_ActivityInfoVariant+0x22>

0800f120 <uxr_deserialize_BaseObjectReply>:
 800f120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f124:	2202      	movs	r2, #2
 800f126:	4606      	mov	r6, r0
 800f128:	460f      	mov	r7, r1
 800f12a:	f004 ffcf 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800f12e:	2202      	movs	r2, #2
 800f130:	18b9      	adds	r1, r7, r2
 800f132:	4605      	mov	r5, r0
 800f134:	4630      	mov	r0, r6
 800f136:	f004 ffc9 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800f13a:	1d39      	adds	r1, r7, #4
 800f13c:	4680      	mov	r8, r0
 800f13e:	4630      	mov	r0, r6
 800f140:	f7fc fada 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800f144:	1d79      	adds	r1, r7, #5
 800f146:	4604      	mov	r4, r0
 800f148:	4630      	mov	r0, r6
 800f14a:	f7fc fad5 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800f14e:	ea05 0508 	and.w	r5, r5, r8
 800f152:	402c      	ands	r4, r5
 800f154:	4020      	ands	r0, r4
 800f156:	b2c0      	uxtb	r0, r0
 800f158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f15c <uxr_serialize_ReadSpecification>:
 800f15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f160:	460e      	mov	r6, r1
 800f162:	7809      	ldrb	r1, [r1, #0]
 800f164:	4607      	mov	r7, r0
 800f166:	f7fc fab1 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f16a:	7871      	ldrb	r1, [r6, #1]
 800f16c:	4604      	mov	r4, r0
 800f16e:	4638      	mov	r0, r7
 800f170:	f7fc faac 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f174:	78b1      	ldrb	r1, [r6, #2]
 800f176:	4004      	ands	r4, r0
 800f178:	4638      	mov	r0, r7
 800f17a:	f7fc fa79 	bl	800b670 <ucdr_serialize_bool>
 800f17e:	78b3      	ldrb	r3, [r6, #2]
 800f180:	b2e4      	uxtb	r4, r4
 800f182:	4004      	ands	r4, r0
 800f184:	b94b      	cbnz	r3, 800f19a <uxr_serialize_ReadSpecification+0x3e>
 800f186:	7a31      	ldrb	r1, [r6, #8]
 800f188:	4638      	mov	r0, r7
 800f18a:	f7fc fa71 	bl	800b670 <ucdr_serialize_bool>
 800f18e:	7a33      	ldrb	r3, [r6, #8]
 800f190:	4004      	ands	r4, r0
 800f192:	b943      	cbnz	r3, 800f1a6 <uxr_serialize_ReadSpecification+0x4a>
 800f194:	4620      	mov	r0, r4
 800f196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f19a:	6871      	ldr	r1, [r6, #4]
 800f19c:	4638      	mov	r0, r7
 800f19e:	f005 f851 	bl	8014244 <ucdr_serialize_string>
 800f1a2:	4004      	ands	r4, r0
 800f1a4:	e7ef      	b.n	800f186 <uxr_serialize_ReadSpecification+0x2a>
 800f1a6:	8971      	ldrh	r1, [r6, #10]
 800f1a8:	4638      	mov	r0, r7
 800f1aa:	f7fc fabb 	bl	800b724 <ucdr_serialize_uint16_t>
 800f1ae:	89b1      	ldrh	r1, [r6, #12]
 800f1b0:	4605      	mov	r5, r0
 800f1b2:	4638      	mov	r0, r7
 800f1b4:	f7fc fab6 	bl	800b724 <ucdr_serialize_uint16_t>
 800f1b8:	89f1      	ldrh	r1, [r6, #14]
 800f1ba:	4005      	ands	r5, r0
 800f1bc:	4638      	mov	r0, r7
 800f1be:	f7fc fab1 	bl	800b724 <ucdr_serialize_uint16_t>
 800f1c2:	8a31      	ldrh	r1, [r6, #16]
 800f1c4:	4680      	mov	r8, r0
 800f1c6:	4638      	mov	r0, r7
 800f1c8:	f7fc faac 	bl	800b724 <ucdr_serialize_uint16_t>
 800f1cc:	b2ed      	uxtb	r5, r5
 800f1ce:	4025      	ands	r5, r4
 800f1d0:	ea08 0505 	and.w	r5, r8, r5
 800f1d4:	ea00 0405 	and.w	r4, r0, r5
 800f1d8:	4620      	mov	r0, r4
 800f1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1de:	bf00      	nop

0800f1e0 <uxr_serialize_CREATE_CLIENT_Payload>:
 800f1e0:	f7ff ba16 	b.w	800e610 <uxr_serialize_CLIENT_Representation>

0800f1e4 <uxr_serialize_CREATE_Payload>:
 800f1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e6:	2202      	movs	r2, #2
 800f1e8:	4607      	mov	r7, r0
 800f1ea:	460e      	mov	r6, r1
 800f1ec:	f004 ff0a 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f1f0:	2202      	movs	r2, #2
 800f1f2:	18b1      	adds	r1, r6, r2
 800f1f4:	4605      	mov	r5, r0
 800f1f6:	4638      	mov	r0, r7
 800f1f8:	f004 ff04 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f1fc:	7931      	ldrb	r1, [r6, #4]
 800f1fe:	4604      	mov	r4, r0
 800f200:	4638      	mov	r0, r7
 800f202:	f7fc fa63 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f206:	b170      	cbz	r0, 800f226 <uxr_serialize_CREATE_Payload+0x42>
 800f208:	7933      	ldrb	r3, [r6, #4]
 800f20a:	402c      	ands	r4, r5
 800f20c:	3b01      	subs	r3, #1
 800f20e:	b2e4      	uxtb	r4, r4
 800f210:	2b0d      	cmp	r3, #13
 800f212:	d809      	bhi.n	800f228 <uxr_serialize_CREATE_Payload+0x44>
 800f214:	e8df f003 	tbb	[pc, r3]
 800f218:	23230a4c 	.word	0x23230a4c
 800f21c:	0a0a0a0a 	.word	0x0a0a0a0a
 800f220:	12121208 	.word	0x12121208
 800f224:	3e45      	.short	0x3e45
 800f226:	2400      	movs	r4, #0
 800f228:	4620      	mov	r0, r4
 800f22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f22c:	f106 0108 	add.w	r1, r6, #8
 800f230:	4638      	mov	r0, r7
 800f232:	f7ff faf3 	bl	800e81c <uxr_serialize_DATAWRITER_Representation>
 800f236:	4004      	ands	r4, r0
 800f238:	4620      	mov	r0, r4
 800f23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f23c:	7a31      	ldrb	r1, [r6, #8]
 800f23e:	4638      	mov	r0, r7
 800f240:	f7fc fa44 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f244:	2800      	cmp	r0, #0
 800f246:	d0ee      	beq.n	800f226 <uxr_serialize_CREATE_Payload+0x42>
 800f248:	7a33      	ldrb	r3, [r6, #8]
 800f24a:	2b01      	cmp	r3, #1
 800f24c:	d001      	beq.n	800f252 <uxr_serialize_CREATE_Payload+0x6e>
 800f24e:	2b02      	cmp	r3, #2
 800f250:	d1ea      	bne.n	800f228 <uxr_serialize_CREATE_Payload+0x44>
 800f252:	68f1      	ldr	r1, [r6, #12]
 800f254:	4638      	mov	r0, r7
 800f256:	f004 fff5 	bl	8014244 <ucdr_serialize_string>
 800f25a:	4004      	ands	r4, r0
 800f25c:	e7e4      	b.n	800f228 <uxr_serialize_CREATE_Payload+0x44>
 800f25e:	7a31      	ldrb	r1, [r6, #8]
 800f260:	4638      	mov	r0, r7
 800f262:	f7fc fa33 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f266:	4605      	mov	r5, r0
 800f268:	b158      	cbz	r0, 800f282 <uxr_serialize_CREATE_Payload+0x9e>
 800f26a:	7a33      	ldrb	r3, [r6, #8]
 800f26c:	2b02      	cmp	r3, #2
 800f26e:	d034      	beq.n	800f2da <uxr_serialize_CREATE_Payload+0xf6>
 800f270:	2b03      	cmp	r3, #3
 800f272:	d106      	bne.n	800f282 <uxr_serialize_CREATE_Payload+0x9e>
 800f274:	68f2      	ldr	r2, [r6, #12]
 800f276:	f106 0110 	add.w	r1, r6, #16
 800f27a:	4638      	mov	r0, r7
 800f27c:	f004 ffb6 	bl	80141ec <ucdr_serialize_sequence_uint8_t>
 800f280:	4605      	mov	r5, r0
 800f282:	2202      	movs	r2, #2
 800f284:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800f288:	4638      	mov	r0, r7
 800f28a:	f004 febb 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f28e:	4028      	ands	r0, r5
 800f290:	4004      	ands	r4, r0
 800f292:	e7c9      	b.n	800f228 <uxr_serialize_CREATE_Payload+0x44>
 800f294:	f106 0108 	add.w	r1, r6, #8
 800f298:	4638      	mov	r0, r7
 800f29a:	f7ff f9b9 	bl	800e610 <uxr_serialize_CLIENT_Representation>
 800f29e:	4004      	ands	r4, r0
 800f2a0:	e7c2      	b.n	800f228 <uxr_serialize_CREATE_Payload+0x44>
 800f2a2:	f106 0108 	add.w	r1, r6, #8
 800f2a6:	4638      	mov	r0, r7
 800f2a8:	f7ff fa6e 	bl	800e788 <uxr_serialize_AGENT_Representation>
 800f2ac:	4004      	ands	r4, r0
 800f2ae:	e7bb      	b.n	800f228 <uxr_serialize_CREATE_Payload+0x44>
 800f2b0:	7a31      	ldrb	r1, [r6, #8]
 800f2b2:	4638      	mov	r0, r7
 800f2b4:	f7fc fa0a 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f2b8:	4605      	mov	r5, r0
 800f2ba:	b130      	cbz	r0, 800f2ca <uxr_serialize_CREATE_Payload+0xe6>
 800f2bc:	7a33      	ldrb	r3, [r6, #8]
 800f2be:	2b02      	cmp	r3, #2
 800f2c0:	d011      	beq.n	800f2e6 <uxr_serialize_CREATE_Payload+0x102>
 800f2c2:	2b03      	cmp	r3, #3
 800f2c4:	d015      	beq.n	800f2f2 <uxr_serialize_CREATE_Payload+0x10e>
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d00d      	beq.n	800f2e6 <uxr_serialize_CREATE_Payload+0x102>
 800f2ca:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800f2ce:	4638      	mov	r0, r7
 800f2d0:	f7fc ff38 	bl	800c144 <ucdr_serialize_int16_t>
 800f2d4:	4028      	ands	r0, r5
 800f2d6:	4004      	ands	r4, r0
 800f2d8:	e7a6      	b.n	800f228 <uxr_serialize_CREATE_Payload+0x44>
 800f2da:	68f1      	ldr	r1, [r6, #12]
 800f2dc:	4638      	mov	r0, r7
 800f2de:	f004 ffb1 	bl	8014244 <ucdr_serialize_string>
 800f2e2:	4605      	mov	r5, r0
 800f2e4:	e7cd      	b.n	800f282 <uxr_serialize_CREATE_Payload+0x9e>
 800f2e6:	68f1      	ldr	r1, [r6, #12]
 800f2e8:	4638      	mov	r0, r7
 800f2ea:	f004 ffab 	bl	8014244 <ucdr_serialize_string>
 800f2ee:	4605      	mov	r5, r0
 800f2f0:	e7eb      	b.n	800f2ca <uxr_serialize_CREATE_Payload+0xe6>
 800f2f2:	68f2      	ldr	r2, [r6, #12]
 800f2f4:	f106 0110 	add.w	r1, r6, #16
 800f2f8:	4638      	mov	r0, r7
 800f2fa:	f004 ff77 	bl	80141ec <ucdr_serialize_sequence_uint8_t>
 800f2fe:	4605      	mov	r5, r0
 800f300:	e7e3      	b.n	800f2ca <uxr_serialize_CREATE_Payload+0xe6>
 800f302:	bf00      	nop

0800f304 <uxr_deserialize_GET_INFO_Payload>:
 800f304:	b570      	push	{r4, r5, r6, lr}
 800f306:	2202      	movs	r2, #2
 800f308:	4605      	mov	r5, r0
 800f30a:	460e      	mov	r6, r1
 800f30c:	f004 fede 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800f310:	2202      	movs	r2, #2
 800f312:	18b1      	adds	r1, r6, r2
 800f314:	4604      	mov	r4, r0
 800f316:	4628      	mov	r0, r5
 800f318:	f004 fed8 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800f31c:	1d31      	adds	r1, r6, #4
 800f31e:	4004      	ands	r4, r0
 800f320:	4628      	mov	r0, r5
 800f322:	f7fc fd19 	bl	800bd58 <ucdr_deserialize_uint32_t>
 800f326:	b2e4      	uxtb	r4, r4
 800f328:	4020      	ands	r0, r4
 800f32a:	bd70      	pop	{r4, r5, r6, pc}

0800f32c <uxr_serialize_DELETE_Payload>:
 800f32c:	b570      	push	{r4, r5, r6, lr}
 800f32e:	2202      	movs	r2, #2
 800f330:	4605      	mov	r5, r0
 800f332:	460e      	mov	r6, r1
 800f334:	f004 fe66 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f338:	2202      	movs	r2, #2
 800f33a:	4604      	mov	r4, r0
 800f33c:	18b1      	adds	r1, r6, r2
 800f33e:	4628      	mov	r0, r5
 800f340:	f004 fe60 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f344:	4020      	ands	r0, r4
 800f346:	b2c0      	uxtb	r0, r0
 800f348:	bd70      	pop	{r4, r5, r6, pc}
 800f34a:	bf00      	nop

0800f34c <uxr_deserialize_STATUS_AGENT_Payload>:
 800f34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f350:	4605      	mov	r5, r0
 800f352:	460e      	mov	r6, r1
 800f354:	f7fc f9d0 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800f358:	1c71      	adds	r1, r6, #1
 800f35a:	4604      	mov	r4, r0
 800f35c:	4628      	mov	r0, r5
 800f35e:	f7fc f9cb 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800f362:	2204      	movs	r2, #4
 800f364:	18b1      	adds	r1, r6, r2
 800f366:	4680      	mov	r8, r0
 800f368:	4628      	mov	r0, r5
 800f36a:	f004 feaf 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800f36e:	f106 0108 	add.w	r1, r6, #8
 800f372:	4607      	mov	r7, r0
 800f374:	2202      	movs	r2, #2
 800f376:	4628      	mov	r0, r5
 800f378:	f004 fea8 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800f37c:	ea04 0308 	and.w	r3, r4, r8
 800f380:	b2db      	uxtb	r3, r3
 800f382:	ea03 0407 	and.w	r4, r3, r7
 800f386:	2202      	movs	r2, #2
 800f388:	4607      	mov	r7, r0
 800f38a:	f106 010a 	add.w	r1, r6, #10
 800f38e:	4628      	mov	r0, r5
 800f390:	f004 fe9c 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800f394:	f106 010c 	add.w	r1, r6, #12
 800f398:	4603      	mov	r3, r0
 800f39a:	4628      	mov	r0, r5
 800f39c:	461d      	mov	r5, r3
 800f39e:	f7fc f97d 	bl	800b69c <ucdr_deserialize_bool>
 800f3a2:	403c      	ands	r4, r7
 800f3a4:	4025      	ands	r5, r4
 800f3a6:	4028      	ands	r0, r5
 800f3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f3ac <uxr_deserialize_STATUS_Payload>:
 800f3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b0:	2202      	movs	r2, #2
 800f3b2:	4606      	mov	r6, r0
 800f3b4:	460f      	mov	r7, r1
 800f3b6:	f004 fe89 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800f3ba:	2202      	movs	r2, #2
 800f3bc:	18b9      	adds	r1, r7, r2
 800f3be:	4605      	mov	r5, r0
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	f004 fe83 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800f3c6:	1d39      	adds	r1, r7, #4
 800f3c8:	4680      	mov	r8, r0
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	f7fc f994 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800f3d0:	1d79      	adds	r1, r7, #5
 800f3d2:	4604      	mov	r4, r0
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	f7fc f98f 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800f3da:	ea05 0508 	and.w	r5, r5, r8
 800f3de:	402c      	ands	r4, r5
 800f3e0:	4020      	ands	r0, r4
 800f3e2:	b2c0      	uxtb	r0, r0
 800f3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f3e8 <uxr_serialize_INFO_Payload>:
 800f3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ec:	2202      	movs	r2, #2
 800f3ee:	460c      	mov	r4, r1
 800f3f0:	4605      	mov	r5, r0
 800f3f2:	f004 fe07 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f3f6:	2202      	movs	r2, #2
 800f3f8:	18a1      	adds	r1, r4, r2
 800f3fa:	4680      	mov	r8, r0
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	f004 fe01 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f402:	7921      	ldrb	r1, [r4, #4]
 800f404:	4607      	mov	r7, r0
 800f406:	4628      	mov	r0, r5
 800f408:	f7fc f960 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f40c:	7961      	ldrb	r1, [r4, #5]
 800f40e:	4606      	mov	r6, r0
 800f410:	4628      	mov	r0, r5
 800f412:	f7fc f95b 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f416:	ea08 0807 	and.w	r8, r8, r7
 800f41a:	ea06 0608 	and.w	r6, r6, r8
 800f41e:	4006      	ands	r6, r0
 800f420:	7a21      	ldrb	r1, [r4, #8]
 800f422:	4628      	mov	r0, r5
 800f424:	f7fc f924 	bl	800b670 <ucdr_serialize_bool>
 800f428:	7a23      	ldrb	r3, [r4, #8]
 800f42a:	b2f7      	uxtb	r7, r6
 800f42c:	4606      	mov	r6, r0
 800f42e:	b96b      	cbnz	r3, 800f44c <uxr_serialize_INFO_Payload+0x64>
 800f430:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800f434:	4628      	mov	r0, r5
 800f436:	f7fc f91b 	bl	800b670 <ucdr_serialize_bool>
 800f43a:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800f43e:	4030      	ands	r0, r6
 800f440:	b2c6      	uxtb	r6, r0
 800f442:	b983      	cbnz	r3, 800f466 <uxr_serialize_INFO_Payload+0x7e>
 800f444:	ea06 0007 	and.w	r0, r6, r7
 800f448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f44c:	7b21      	ldrb	r1, [r4, #12]
 800f44e:	4628      	mov	r0, r5
 800f450:	f7fc f93c 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f454:	b188      	cbz	r0, 800f47a <uxr_serialize_INFO_Payload+0x92>
 800f456:	f104 010c 	add.w	r1, r4, #12
 800f45a:	4628      	mov	r0, r5
 800f45c:	f7ff fa06 	bl	800e86c <uxr_serialize_ObjectVariant.part.0>
 800f460:	4030      	ands	r0, r6
 800f462:	b2c6      	uxtb	r6, r0
 800f464:	e7e4      	b.n	800f430 <uxr_serialize_INFO_Payload+0x48>
 800f466:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800f46a:	4628      	mov	r0, r5
 800f46c:	f7ff fdb2 	bl	800efd4 <uxr_serialize_ActivityInfoVariant>
 800f470:	4006      	ands	r6, r0
 800f472:	ea06 0007 	and.w	r0, r6, r7
 800f476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f47a:	4606      	mov	r6, r0
 800f47c:	e7d8      	b.n	800f430 <uxr_serialize_INFO_Payload+0x48>
 800f47e:	bf00      	nop

0800f480 <uxr_serialize_READ_DATA_Payload>:
 800f480:	b570      	push	{r4, r5, r6, lr}
 800f482:	2202      	movs	r2, #2
 800f484:	4605      	mov	r5, r0
 800f486:	460e      	mov	r6, r1
 800f488:	f004 fdbc 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f48c:	2202      	movs	r2, #2
 800f48e:	18b1      	adds	r1, r6, r2
 800f490:	4604      	mov	r4, r0
 800f492:	4628      	mov	r0, r5
 800f494:	f004 fdb6 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f498:	1d31      	adds	r1, r6, #4
 800f49a:	4004      	ands	r4, r0
 800f49c:	4628      	mov	r0, r5
 800f49e:	f7ff fe5d 	bl	800f15c <uxr_serialize_ReadSpecification>
 800f4a2:	b2e4      	uxtb	r4, r4
 800f4a4:	4020      	ands	r0, r4
 800f4a6:	bd70      	pop	{r4, r5, r6, pc}

0800f4a8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f4a8:	b570      	push	{r4, r5, r6, lr}
 800f4aa:	2202      	movs	r2, #2
 800f4ac:	4605      	mov	r5, r0
 800f4ae:	460e      	mov	r6, r1
 800f4b0:	f004 fda8 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f4b4:	2202      	movs	r2, #2
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	18b1      	adds	r1, r6, r2
 800f4ba:	4628      	mov	r0, r5
 800f4bc:	f004 fda2 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f4c0:	4020      	ands	r0, r4
 800f4c2:	b2c0      	uxtb	r0, r0
 800f4c4:	bd70      	pop	{r4, r5, r6, pc}
 800f4c6:	bf00      	nop

0800f4c8 <uxr_serialize_ACKNACK_Payload>:
 800f4c8:	b570      	push	{r4, r5, r6, lr}
 800f4ca:	460c      	mov	r4, r1
 800f4cc:	460e      	mov	r6, r1
 800f4ce:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f4d2:	4605      	mov	r5, r0
 800f4d4:	f7fc f926 	bl	800b724 <ucdr_serialize_uint16_t>
 800f4d8:	2202      	movs	r2, #2
 800f4da:	4621      	mov	r1, r4
 800f4dc:	4604      	mov	r4, r0
 800f4de:	4628      	mov	r0, r5
 800f4e0:	f004 fd90 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f4e4:	7931      	ldrb	r1, [r6, #4]
 800f4e6:	4004      	ands	r4, r0
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	f7fc f8ef 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f4ee:	b2e4      	uxtb	r4, r4
 800f4f0:	4020      	ands	r0, r4
 800f4f2:	bd70      	pop	{r4, r5, r6, pc}

0800f4f4 <uxr_deserialize_ACKNACK_Payload>:
 800f4f4:	b570      	push	{r4, r5, r6, lr}
 800f4f6:	4605      	mov	r5, r0
 800f4f8:	460e      	mov	r6, r1
 800f4fa:	f7fc fa13 	bl	800b924 <ucdr_deserialize_uint16_t>
 800f4fe:	2202      	movs	r2, #2
 800f500:	18b1      	adds	r1, r6, r2
 800f502:	4604      	mov	r4, r0
 800f504:	4628      	mov	r0, r5
 800f506:	f004 fde1 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800f50a:	1d31      	adds	r1, r6, #4
 800f50c:	4004      	ands	r4, r0
 800f50e:	4628      	mov	r0, r5
 800f510:	f7fc f8f2 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800f514:	b2e4      	uxtb	r4, r4
 800f516:	4020      	ands	r0, r4
 800f518:	bd70      	pop	{r4, r5, r6, pc}
 800f51a:	bf00      	nop

0800f51c <uxr_serialize_HEARTBEAT_Payload>:
 800f51c:	b570      	push	{r4, r5, r6, lr}
 800f51e:	460d      	mov	r5, r1
 800f520:	8809      	ldrh	r1, [r1, #0]
 800f522:	4606      	mov	r6, r0
 800f524:	f7fc f8fe 	bl	800b724 <ucdr_serialize_uint16_t>
 800f528:	8869      	ldrh	r1, [r5, #2]
 800f52a:	4604      	mov	r4, r0
 800f52c:	4630      	mov	r0, r6
 800f52e:	f7fc f8f9 	bl	800b724 <ucdr_serialize_uint16_t>
 800f532:	7929      	ldrb	r1, [r5, #4]
 800f534:	4004      	ands	r4, r0
 800f536:	4630      	mov	r0, r6
 800f538:	f7fc f8c8 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f53c:	b2e4      	uxtb	r4, r4
 800f53e:	4020      	ands	r0, r4
 800f540:	bd70      	pop	{r4, r5, r6, pc}
 800f542:	bf00      	nop

0800f544 <uxr_deserialize_HEARTBEAT_Payload>:
 800f544:	b570      	push	{r4, r5, r6, lr}
 800f546:	4605      	mov	r5, r0
 800f548:	460e      	mov	r6, r1
 800f54a:	f7fc f9eb 	bl	800b924 <ucdr_deserialize_uint16_t>
 800f54e:	1cb1      	adds	r1, r6, #2
 800f550:	4604      	mov	r4, r0
 800f552:	4628      	mov	r0, r5
 800f554:	f7fc f9e6 	bl	800b924 <ucdr_deserialize_uint16_t>
 800f558:	1d31      	adds	r1, r6, #4
 800f55a:	4004      	ands	r4, r0
 800f55c:	4628      	mov	r0, r5
 800f55e:	f7fc f8cb 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800f562:	b2e4      	uxtb	r4, r4
 800f564:	4020      	ands	r0, r4
 800f566:	bd70      	pop	{r4, r5, r6, pc}

0800f568 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f56c:	4605      	mov	r5, r0
 800f56e:	460e      	mov	r6, r1
 800f570:	f7fc ff74 	bl	800c45c <ucdr_deserialize_int32_t>
 800f574:	1d31      	adds	r1, r6, #4
 800f576:	4607      	mov	r7, r0
 800f578:	4628      	mov	r0, r5
 800f57a:	f7fc fbed 	bl	800bd58 <ucdr_deserialize_uint32_t>
 800f57e:	f106 0108 	add.w	r1, r6, #8
 800f582:	4680      	mov	r8, r0
 800f584:	4628      	mov	r0, r5
 800f586:	f7fc ff69 	bl	800c45c <ucdr_deserialize_int32_t>
 800f58a:	f106 010c 	add.w	r1, r6, #12
 800f58e:	4604      	mov	r4, r0
 800f590:	4628      	mov	r0, r5
 800f592:	f7fc fbe1 	bl	800bd58 <ucdr_deserialize_uint32_t>
 800f596:	ea07 0708 	and.w	r7, r7, r8
 800f59a:	403c      	ands	r4, r7
 800f59c:	f106 0110 	add.w	r1, r6, #16
 800f5a0:	4004      	ands	r4, r0
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	f7fc ff5a 	bl	800c45c <ucdr_deserialize_int32_t>
 800f5a8:	f106 0114 	add.w	r1, r6, #20
 800f5ac:	4607      	mov	r7, r0
 800f5ae:	4628      	mov	r0, r5
 800f5b0:	f7fc fbd2 	bl	800bd58 <ucdr_deserialize_uint32_t>
 800f5b4:	b2e4      	uxtb	r4, r4
 800f5b6:	403c      	ands	r4, r7
 800f5b8:	4020      	ands	r0, r4
 800f5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5be:	bf00      	nop

0800f5c0 <uxr_serialize_SampleIdentity>:
 800f5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c4:	220c      	movs	r2, #12
 800f5c6:	4604      	mov	r4, r0
 800f5c8:	460d      	mov	r5, r1
 800f5ca:	f004 fd1b 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f5ce:	2203      	movs	r2, #3
 800f5d0:	f105 010c 	add.w	r1, r5, #12
 800f5d4:	4607      	mov	r7, r0
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	f004 fd14 	bl	8014004 <ucdr_serialize_array_uint8_t>
 800f5dc:	7be9      	ldrb	r1, [r5, #15]
 800f5de:	4680      	mov	r8, r0
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	f7fc f873 	bl	800b6cc <ucdr_serialize_uint8_t>
 800f5e6:	6929      	ldr	r1, [r5, #16]
 800f5e8:	4606      	mov	r6, r0
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	f7fc fe9e 	bl	800c32c <ucdr_serialize_int32_t>
 800f5f0:	6969      	ldr	r1, [r5, #20]
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	ea07 0708 	and.w	r7, r7, r8
 800f5fa:	461c      	mov	r4, r3
 800f5fc:	f7fc fa7c 	bl	800baf8 <ucdr_serialize_uint32_t>
 800f600:	403e      	ands	r6, r7
 800f602:	4034      	ands	r4, r6
 800f604:	4020      	ands	r0, r4
 800f606:	b2c0      	uxtb	r0, r0
 800f608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f60c <uxr_deserialize_SampleIdentity>:
 800f60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f610:	220c      	movs	r2, #12
 800f612:	4604      	mov	r4, r0
 800f614:	460d      	mov	r5, r1
 800f616:	f004 fd59 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800f61a:	2203      	movs	r2, #3
 800f61c:	f105 010c 	add.w	r1, r5, #12
 800f620:	4607      	mov	r7, r0
 800f622:	4620      	mov	r0, r4
 800f624:	f004 fd52 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 800f628:	f105 010f 	add.w	r1, r5, #15
 800f62c:	4680      	mov	r8, r0
 800f62e:	4620      	mov	r0, r4
 800f630:	f7fc f862 	bl	800b6f8 <ucdr_deserialize_uint8_t>
 800f634:	f105 0110 	add.w	r1, r5, #16
 800f638:	4606      	mov	r6, r0
 800f63a:	4620      	mov	r0, r4
 800f63c:	f7fc ff0e 	bl	800c45c <ucdr_deserialize_int32_t>
 800f640:	f105 0114 	add.w	r1, r5, #20
 800f644:	4603      	mov	r3, r0
 800f646:	4620      	mov	r0, r4
 800f648:	ea07 0708 	and.w	r7, r7, r8
 800f64c:	461c      	mov	r4, r3
 800f64e:	f7fc fb83 	bl	800bd58 <ucdr_deserialize_uint32_t>
 800f652:	403e      	ands	r6, r7
 800f654:	4034      	ands	r4, r6
 800f656:	4020      	ands	r0, r4
 800f658:	b2c0      	uxtb	r0, r0
 800f65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f65e:	bf00      	nop

0800f660 <rcl_client_get_rmw_handle>:
 800f660:	b118      	cbz	r0, 800f66a <rcl_client_get_rmw_handle+0xa>
 800f662:	6800      	ldr	r0, [r0, #0]
 800f664:	b108      	cbz	r0, 800f66a <rcl_client_get_rmw_handle+0xa>
 800f666:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f66a:	4770      	bx	lr

0800f66c <rcl_send_request>:
 800f66c:	b570      	push	{r4, r5, r6, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	b1e8      	cbz	r0, 800f6ae <rcl_send_request+0x42>
 800f672:	4604      	mov	r4, r0
 800f674:	6800      	ldr	r0, [r0, #0]
 800f676:	b1d0      	cbz	r0, 800f6ae <rcl_send_request+0x42>
 800f678:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800f67c:	b1bb      	cbz	r3, 800f6ae <rcl_send_request+0x42>
 800f67e:	460e      	mov	r6, r1
 800f680:	b1d1      	cbz	r1, 800f6b8 <rcl_send_request+0x4c>
 800f682:	4615      	mov	r5, r2
 800f684:	b1c2      	cbz	r2, 800f6b8 <rcl_send_request+0x4c>
 800f686:	2105      	movs	r1, #5
 800f688:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800f68c:	f002 fd70 	bl	8012170 <__atomic_load_8>
 800f690:	6823      	ldr	r3, [r4, #0]
 800f692:	e9c5 0100 	strd	r0, r1, [r5]
 800f696:	462a      	mov	r2, r5
 800f698:	4631      	mov	r1, r6
 800f69a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800f69e:	f003 ff1b 	bl	80134d8 <rmw_send_request>
 800f6a2:	4606      	mov	r6, r0
 800f6a4:	b160      	cbz	r0, 800f6c0 <rcl_send_request+0x54>
 800f6a6:	2601      	movs	r6, #1
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	b002      	add	sp, #8
 800f6ac:	bd70      	pop	{r4, r5, r6, pc}
 800f6ae:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	b002      	add	sp, #8
 800f6b6:	bd70      	pop	{r4, r5, r6, pc}
 800f6b8:	260b      	movs	r6, #11
 800f6ba:	4630      	mov	r0, r6
 800f6bc:	b002      	add	sp, #8
 800f6be:	bd70      	pop	{r4, r5, r6, pc}
 800f6c0:	6820      	ldr	r0, [r4, #0]
 800f6c2:	2105      	movs	r1, #5
 800f6c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f6c8:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800f6cc:	9100      	str	r1, [sp, #0]
 800f6ce:	f002 fdbb 	bl	8012248 <__atomic_exchange_8>
 800f6d2:	4630      	mov	r0, r6
 800f6d4:	b002      	add	sp, #8
 800f6d6:	bd70      	pop	{r4, r5, r6, pc}

0800f6d8 <rcl_take_response>:
 800f6d8:	b570      	push	{r4, r5, r6, lr}
 800f6da:	468e      	mov	lr, r1
 800f6dc:	460c      	mov	r4, r1
 800f6de:	4616      	mov	r6, r2
 800f6e0:	4605      	mov	r5, r0
 800f6e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f6e6:	b08c      	sub	sp, #48	; 0x30
 800f6e8:	f10d 0c18 	add.w	ip, sp, #24
 800f6ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f6f0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f6f4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f6f8:	b35d      	cbz	r5, 800f752 <rcl_take_response+0x7a>
 800f6fa:	682b      	ldr	r3, [r5, #0]
 800f6fc:	b34b      	cbz	r3, 800f752 <rcl_take_response+0x7a>
 800f6fe:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800f702:	b330      	cbz	r0, 800f752 <rcl_take_response+0x7a>
 800f704:	b346      	cbz	r6, 800f758 <rcl_take_response+0x80>
 800f706:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f760 <rcl_take_response+0x88>
 800f70a:	2300      	movs	r3, #0
 800f70c:	f88d 3007 	strb.w	r3, [sp, #7]
 800f710:	4632      	mov	r2, r6
 800f712:	f10d 0307 	add.w	r3, sp, #7
 800f716:	a902      	add	r1, sp, #8
 800f718:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f71c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f720:	f003 ffe2 	bl	80136e8 <rmw_take_response>
 800f724:	4605      	mov	r5, r0
 800f726:	b9c8      	cbnz	r0, 800f75c <rcl_take_response+0x84>
 800f728:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f72c:	f240 13f5 	movw	r3, #501	; 0x1f5
 800f730:	2a00      	cmp	r2, #0
 800f732:	bf08      	it	eq
 800f734:	461d      	moveq	r5, r3
 800f736:	f10d 0e18 	add.w	lr, sp, #24
 800f73a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f73e:	46a4      	mov	ip, r4
 800f740:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f744:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f748:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f74c:	4628      	mov	r0, r5
 800f74e:	b00c      	add	sp, #48	; 0x30
 800f750:	bd70      	pop	{r4, r5, r6, pc}
 800f752:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800f756:	e7ee      	b.n	800f736 <rcl_take_response+0x5e>
 800f758:	250b      	movs	r5, #11
 800f75a:	e7ec      	b.n	800f736 <rcl_take_response+0x5e>
 800f75c:	2501      	movs	r5, #1
 800f75e:	e7ea      	b.n	800f736 <rcl_take_response+0x5e>
	...

0800f768 <rcl_client_is_valid>:
 800f768:	b130      	cbz	r0, 800f778 <rcl_client_is_valid+0x10>
 800f76a:	6800      	ldr	r0, [r0, #0]
 800f76c:	b120      	cbz	r0, 800f778 <rcl_client_is_valid+0x10>
 800f76e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f772:	3800      	subs	r0, #0
 800f774:	bf18      	it	ne
 800f776:	2001      	movne	r0, #1
 800f778:	4770      	bx	lr
 800f77a:	bf00      	nop

0800f77c <rcl_convert_rmw_ret_to_rcl_ret>:
 800f77c:	280b      	cmp	r0, #11
 800f77e:	dc0d      	bgt.n	800f79c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f780:	2800      	cmp	r0, #0
 800f782:	db09      	blt.n	800f798 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f784:	280b      	cmp	r0, #11
 800f786:	d807      	bhi.n	800f798 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f788:	e8df f000 	tbb	[pc, r0]
 800f78c:	07060607 	.word	0x07060607
 800f790:	06060606 	.word	0x06060606
 800f794:	07070606 	.word	0x07070606
 800f798:	2001      	movs	r0, #1
 800f79a:	4770      	bx	lr
 800f79c:	28cb      	cmp	r0, #203	; 0xcb
 800f79e:	bf18      	it	ne
 800f7a0:	2001      	movne	r0, #1
 800f7a2:	4770      	bx	lr

0800f7a4 <rcl_get_zero_initialized_context>:
 800f7a4:	4a03      	ldr	r2, [pc, #12]	; (800f7b4 <rcl_get_zero_initialized_context+0x10>)
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f7ac:	e883 0003 	stmia.w	r3, {r0, r1}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	4770      	bx	lr
 800f7b4:	08017f44 	.word	0x08017f44

0800f7b8 <rcl_context_is_valid>:
 800f7b8:	b118      	cbz	r0, 800f7c2 <rcl_context_is_valid+0xa>
 800f7ba:	6840      	ldr	r0, [r0, #4]
 800f7bc:	3800      	subs	r0, #0
 800f7be:	bf18      	it	ne
 800f7c0:	2001      	movne	r0, #1
 800f7c2:	4770      	bx	lr

0800f7c4 <__cleanup_context>:
 800f7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7c8:	4606      	mov	r6, r0
 800f7ca:	6800      	ldr	r0, [r0, #0]
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	6073      	str	r3, [r6, #4]
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d049      	beq.n	800f868 <__cleanup_context+0xa4>
 800f7d4:	6947      	ldr	r7, [r0, #20]
 800f7d6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f7da:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f7de:	b137      	cbz	r7, 800f7ee <__cleanup_context+0x2a>
 800f7e0:	3014      	adds	r0, #20
 800f7e2:	f000 f9bb 	bl	800fb5c <rcl_init_options_fini>
 800f7e6:	4607      	mov	r7, r0
 800f7e8:	2800      	cmp	r0, #0
 800f7ea:	d144      	bne.n	800f876 <__cleanup_context+0xb2>
 800f7ec:	6830      	ldr	r0, [r6, #0]
 800f7ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f7f0:	b143      	cbz	r3, 800f804 <__cleanup_context+0x40>
 800f7f2:	3028      	adds	r0, #40	; 0x28
 800f7f4:	f003 fcb8 	bl	8013168 <rmw_context_fini>
 800f7f8:	b118      	cbz	r0, 800f802 <__cleanup_context+0x3e>
 800f7fa:	2f00      	cmp	r7, #0
 800f7fc:	d03e      	beq.n	800f87c <__cleanup_context+0xb8>
 800f7fe:	f7fb f8eb 	bl	800a9d8 <rcutils_reset_error>
 800f802:	6830      	ldr	r0, [r6, #0]
 800f804:	6a03      	ldr	r3, [r0, #32]
 800f806:	b1db      	cbz	r3, 800f840 <__cleanup_context+0x7c>
 800f808:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f80c:	2a01      	cmp	r2, #1
 800f80e:	f17c 0100 	sbcs.w	r1, ip, #0
 800f812:	db11      	blt.n	800f838 <__cleanup_context+0x74>
 800f814:	2400      	movs	r4, #0
 800f816:	4625      	mov	r5, r4
 800f818:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f81c:	4649      	mov	r1, r9
 800f81e:	b1b8      	cbz	r0, 800f850 <__cleanup_context+0x8c>
 800f820:	47c0      	blx	r8
 800f822:	6833      	ldr	r3, [r6, #0]
 800f824:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f828:	3401      	adds	r4, #1
 800f82a:	f145 0500 	adc.w	r5, r5, #0
 800f82e:	4294      	cmp	r4, r2
 800f830:	eb75 010c 	sbcs.w	r1, r5, ip
 800f834:	6a1b      	ldr	r3, [r3, #32]
 800f836:	dbef      	blt.n	800f818 <__cleanup_context+0x54>
 800f838:	4618      	mov	r0, r3
 800f83a:	4649      	mov	r1, r9
 800f83c:	47c0      	blx	r8
 800f83e:	6830      	ldr	r0, [r6, #0]
 800f840:	4649      	mov	r1, r9
 800f842:	47c0      	blx	r8
 800f844:	2300      	movs	r3, #0
 800f846:	e9c6 3300 	strd	r3, r3, [r6]
 800f84a:	4638      	mov	r0, r7
 800f84c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f850:	3401      	adds	r4, #1
 800f852:	f145 0500 	adc.w	r5, r5, #0
 800f856:	4294      	cmp	r4, r2
 800f858:	eb75 010c 	sbcs.w	r1, r5, ip
 800f85c:	dbdc      	blt.n	800f818 <__cleanup_context+0x54>
 800f85e:	4618      	mov	r0, r3
 800f860:	4649      	mov	r1, r9
 800f862:	47c0      	blx	r8
 800f864:	6830      	ldr	r0, [r6, #0]
 800f866:	e7eb      	b.n	800f840 <__cleanup_context+0x7c>
 800f868:	4607      	mov	r7, r0
 800f86a:	2300      	movs	r3, #0
 800f86c:	e9c6 3300 	strd	r3, r3, [r6]
 800f870:	4638      	mov	r0, r7
 800f872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f876:	f7fb f8af 	bl	800a9d8 <rcutils_reset_error>
 800f87a:	e7b7      	b.n	800f7ec <__cleanup_context+0x28>
 800f87c:	f7ff ff7e 	bl	800f77c <rcl_convert_rmw_ret_to_rcl_ret>
 800f880:	4607      	mov	r7, r0
 800f882:	e7bc      	b.n	800f7fe <__cleanup_context+0x3a>

0800f884 <rcl_init>:
 800f884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f888:	1e05      	subs	r5, r0, #0
 800f88a:	b09e      	sub	sp, #120	; 0x78
 800f88c:	460e      	mov	r6, r1
 800f88e:	4690      	mov	r8, r2
 800f890:	461f      	mov	r7, r3
 800f892:	f340 809c 	ble.w	800f9ce <rcl_init+0x14a>
 800f896:	2900      	cmp	r1, #0
 800f898:	f000 809c 	beq.w	800f9d4 <rcl_init+0x150>
 800f89c:	f1a1 0e04 	sub.w	lr, r1, #4
 800f8a0:	f04f 0c00 	mov.w	ip, #0
 800f8a4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800f8a8:	f10c 0c01 	add.w	ip, ip, #1
 800f8ac:	2c00      	cmp	r4, #0
 800f8ae:	f000 8091 	beq.w	800f9d4 <rcl_init+0x150>
 800f8b2:	4565      	cmp	r5, ip
 800f8b4:	d1f6      	bne.n	800f8a4 <rcl_init+0x20>
 800f8b6:	f1b8 0f00 	cmp.w	r8, #0
 800f8ba:	f000 808b 	beq.w	800f9d4 <rcl_init+0x150>
 800f8be:	f8d8 4000 	ldr.w	r4, [r8]
 800f8c2:	2c00      	cmp	r4, #0
 800f8c4:	f000 8086 	beq.w	800f9d4 <rcl_init+0x150>
 800f8c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8ca:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800f8ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8d2:	6823      	ldr	r3, [r4, #0]
 800f8d4:	f8cc 3000 	str.w	r3, [ip]
 800f8d8:	a819      	add	r0, sp, #100	; 0x64
 800f8da:	f7fb f859 	bl	800a990 <rcutils_allocator_is_valid>
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	d078      	beq.n	800f9d4 <rcl_init+0x150>
 800f8e2:	2f00      	cmp	r7, #0
 800f8e4:	d076      	beq.n	800f9d4 <rcl_init+0x150>
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d178      	bne.n	800f9de <rcl_init+0x15a>
 800f8ec:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800f8f0:	2178      	movs	r1, #120	; 0x78
 800f8f2:	2001      	movs	r0, #1
 800f8f4:	4798      	blx	r3
 800f8f6:	4604      	mov	r4, r0
 800f8f8:	6038      	str	r0, [r7, #0]
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	f000 80b6 	beq.w	800fa6c <rcl_init+0x1e8>
 800f900:	a802      	add	r0, sp, #8
 800f902:	f002 ff85 	bl	8012810 <rmw_get_zero_initialized_context>
 800f906:	a902      	add	r1, sp, #8
 800f908:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f90c:	2250      	movs	r2, #80	; 0x50
 800f90e:	ac19      	add	r4, sp, #100	; 0x64
 800f910:	f007 f9a9 	bl	8016c66 <memcpy>
 800f914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f916:	f8d7 e000 	ldr.w	lr, [r7]
 800f91a:	46f4      	mov	ip, lr
 800f91c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f920:	6823      	ldr	r3, [r4, #0]
 800f922:	f8cc 3000 	str.w	r3, [ip]
 800f926:	f10e 0114 	add.w	r1, lr, #20
 800f92a:	4640      	mov	r0, r8
 800f92c:	f000 f940 	bl	800fbb0 <rcl_init_options_copy>
 800f930:	4604      	mov	r4, r0
 800f932:	2800      	cmp	r0, #0
 800f934:	d144      	bne.n	800f9c0 <rcl_init+0x13c>
 800f936:	f8d7 9000 	ldr.w	r9, [r7]
 800f93a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f93e:	f8c9 0020 	str.w	r0, [r9, #32]
 800f942:	f8c9 5018 	str.w	r5, [r9, #24]
 800f946:	f8c9 801c 	str.w	r8, [r9, #28]
 800f94a:	2d00      	cmp	r5, #0
 800f94c:	d04e      	beq.n	800f9ec <rcl_init+0x168>
 800f94e:	2e00      	cmp	r6, #0
 800f950:	d04c      	beq.n	800f9ec <rcl_init+0x168>
 800f952:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800f956:	2104      	movs	r1, #4
 800f958:	4628      	mov	r0, r5
 800f95a:	4798      	blx	r3
 800f95c:	f8c9 0020 	str.w	r0, [r9, #32]
 800f960:	f8d7 9000 	ldr.w	r9, [r7]
 800f964:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f968:	46ca      	mov	sl, r9
 800f96a:	b343      	cbz	r3, 800f9be <rcl_init+0x13a>
 800f96c:	2d01      	cmp	r5, #1
 800f96e:	f178 0300 	sbcs.w	r3, r8, #0
 800f972:	db3b      	blt.n	800f9ec <rcl_init+0x168>
 800f974:	2400      	movs	r4, #0
 800f976:	3e04      	subs	r6, #4
 800f978:	46a1      	mov	r9, r4
 800f97a:	e00b      	b.n	800f994 <rcl_init+0x110>
 800f97c:	6831      	ldr	r1, [r6, #0]
 800f97e:	f007 f972 	bl	8016c66 <memcpy>
 800f982:	3401      	adds	r4, #1
 800f984:	f149 0900 	adc.w	r9, r9, #0
 800f988:	45c8      	cmp	r8, r9
 800f98a:	bf08      	it	eq
 800f98c:	42a5      	cmpeq	r5, r4
 800f98e:	d02b      	beq.n	800f9e8 <rcl_init+0x164>
 800f990:	f8d7 a000 	ldr.w	sl, [r7]
 800f994:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f998:	f7f0 fc2c 	bl	80001f4 <strlen>
 800f99c:	1c42      	adds	r2, r0, #1
 800f99e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f9a0:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f9a2:	f8da a020 	ldr.w	sl, [sl, #32]
 800f9a6:	9201      	str	r2, [sp, #4]
 800f9a8:	4610      	mov	r0, r2
 800f9aa:	4798      	blx	r3
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800f9b2:	6a1b      	ldr	r3, [r3, #32]
 800f9b4:	9a01      	ldr	r2, [sp, #4]
 800f9b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f9ba:	2800      	cmp	r0, #0
 800f9bc:	d1de      	bne.n	800f97c <rcl_init+0xf8>
 800f9be:	240a      	movs	r4, #10
 800f9c0:	4638      	mov	r0, r7
 800f9c2:	f7ff feff 	bl	800f7c4 <__cleanup_context>
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	b01e      	add	sp, #120	; 0x78
 800f9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9ce:	2900      	cmp	r1, #0
 800f9d0:	f43f af71 	beq.w	800f8b6 <rcl_init+0x32>
 800f9d4:	240b      	movs	r4, #11
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	b01e      	add	sp, #120	; 0x78
 800f9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9de:	2464      	movs	r4, #100	; 0x64
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	b01e      	add	sp, #120	; 0x78
 800f9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9e8:	f8d7 9000 	ldr.w	r9, [r7]
 800f9ec:	4926      	ldr	r1, [pc, #152]	; (800fa88 <rcl_init+0x204>)
 800f9ee:	680b      	ldr	r3, [r1, #0]
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	d036      	beq.n	800fa62 <rcl_init+0x1de>
 800f9f4:	600b      	str	r3, [r1, #0]
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	2400      	movs	r4, #0
 800f9fa:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f9fe:	607b      	str	r3, [r7, #4]
 800fa00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fa02:	3301      	adds	r3, #1
 800fa04:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800fa08:	d034      	beq.n	800fa74 <rcl_init+0x1f0>
 800fa0a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800fa0e:	b93b      	cbnz	r3, 800fa20 <rcl_init+0x19c>
 800fa10:	3030      	adds	r0, #48	; 0x30
 800fa12:	f000 f939 	bl	800fc88 <rcl_get_localhost_only>
 800fa16:	4604      	mov	r4, r0
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	d1d1      	bne.n	800f9c0 <rcl_init+0x13c>
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	6958      	ldr	r0, [r3, #20]
 800fa20:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800fa22:	aa18      	add	r2, sp, #96	; 0x60
 800fa24:	a917      	add	r1, sp, #92	; 0x5c
 800fa26:	f001 f841 	bl	8010aac <rcl_validate_enclave_name>
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d1c7      	bne.n	800f9c0 <rcl_init+0x13c>
 800fa30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa32:	b9eb      	cbnz	r3, 800fa70 <rcl_init+0x1ec>
 800fa34:	6839      	ldr	r1, [r7, #0]
 800fa36:	694b      	ldr	r3, [r1, #20]
 800fa38:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fa3a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800fa3e:	f000 fc3d 	bl	80102bc <rcl_get_security_options_from_environment>
 800fa42:	4604      	mov	r4, r0
 800fa44:	2800      	cmp	r0, #0
 800fa46:	d1bb      	bne.n	800f9c0 <rcl_init+0x13c>
 800fa48:	6839      	ldr	r1, [r7, #0]
 800fa4a:	6948      	ldr	r0, [r1, #20]
 800fa4c:	3128      	adds	r1, #40	; 0x28
 800fa4e:	3018      	adds	r0, #24
 800fa50:	f003 fa54 	bl	8012efc <rmw_init>
 800fa54:	4604      	mov	r4, r0
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d0bd      	beq.n	800f9d6 <rcl_init+0x152>
 800fa5a:	f7ff fe8f 	bl	800f77c <rcl_convert_rmw_ret_to_rcl_ret>
 800fa5e:	4604      	mov	r4, r0
 800fa60:	e7ae      	b.n	800f9c0 <rcl_init+0x13c>
 800fa62:	2201      	movs	r2, #1
 800fa64:	461c      	mov	r4, r3
 800fa66:	600a      	str	r2, [r1, #0]
 800fa68:	4613      	mov	r3, r2
 800fa6a:	e7c6      	b.n	800f9fa <rcl_init+0x176>
 800fa6c:	240a      	movs	r4, #10
 800fa6e:	e7b2      	b.n	800f9d6 <rcl_init+0x152>
 800fa70:	2401      	movs	r4, #1
 800fa72:	e7a5      	b.n	800f9c0 <rcl_init+0x13c>
 800fa74:	3024      	adds	r0, #36	; 0x24
 800fa76:	f005 ffe9 	bl	8015a4c <rcl_get_default_domain_id>
 800fa7a:	4604      	mov	r4, r0
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d19f      	bne.n	800f9c0 <rcl_init+0x13c>
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	6958      	ldr	r0, [r3, #20]
 800fa84:	e7c1      	b.n	800fa0a <rcl_init+0x186>
 800fa86:	bf00      	nop
 800fa88:	2000dae4 	.word	0x2000dae4

0800fa8c <rcl_get_zero_initialized_init_options>:
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	4770      	bx	lr

0800fa90 <rcl_init_options_init>:
 800fa90:	b084      	sub	sp, #16
 800fa92:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa94:	b097      	sub	sp, #92	; 0x5c
 800fa96:	ae1d      	add	r6, sp, #116	; 0x74
 800fa98:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	d058      	beq.n	800fb52 <rcl_init_options_init+0xc2>
 800faa0:	6803      	ldr	r3, [r0, #0]
 800faa2:	4605      	mov	r5, r0
 800faa4:	b133      	cbz	r3, 800fab4 <rcl_init_options_init+0x24>
 800faa6:	2464      	movs	r4, #100	; 0x64
 800faa8:	4620      	mov	r0, r4
 800faaa:	b017      	add	sp, #92	; 0x5c
 800faac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fab0:	b004      	add	sp, #16
 800fab2:	4770      	bx	lr
 800fab4:	4630      	mov	r0, r6
 800fab6:	f7fa ff6b 	bl	800a990 <rcutils_allocator_is_valid>
 800faba:	2800      	cmp	r0, #0
 800fabc:	d049      	beq.n	800fb52 <rcl_init_options_init+0xc2>
 800fabe:	46b4      	mov	ip, r6
 800fac0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fac4:	ac11      	add	r4, sp, #68	; 0x44
 800fac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fac8:	f8dc 3000 	ldr.w	r3, [ip]
 800facc:	6023      	str	r3, [r4, #0]
 800face:	9921      	ldr	r1, [sp, #132]	; 0x84
 800fad0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fad2:	2050      	movs	r0, #80	; 0x50
 800fad4:	4798      	blx	r3
 800fad6:	4604      	mov	r4, r0
 800fad8:	6028      	str	r0, [r5, #0]
 800fada:	2800      	cmp	r0, #0
 800fadc:	d03b      	beq.n	800fb56 <rcl_init_options_init+0xc6>
 800fade:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800fae2:	4686      	mov	lr, r0
 800fae4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fae8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800faec:	f8dc 3000 	ldr.w	r3, [ip]
 800faf0:	f8ce 3000 	str.w	r3, [lr]
 800faf4:	a802      	add	r0, sp, #8
 800faf6:	f002 fe9b 	bl	8012830 <rmw_get_zero_initialized_init_options>
 800fafa:	f10d 0e08 	add.w	lr, sp, #8
 800fafe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb02:	f104 0c18 	add.w	ip, r4, #24
 800fb06:	682f      	ldr	r7, [r5, #0]
 800fb08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb1c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fb20:	ac20      	add	r4, sp, #128	; 0x80
 800fb22:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fb26:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fb2a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fb2e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800fb32:	f107 0018 	add.w	r0, r7, #24
 800fb36:	f003 f8e9 	bl	8012d0c <rmw_init_options_init>
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	2800      	cmp	r0, #0
 800fb3e:	d0b3      	beq.n	800faa8 <rcl_init_options_init+0x18>
 800fb40:	9921      	ldr	r1, [sp, #132]	; 0x84
 800fb42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fb44:	6828      	ldr	r0, [r5, #0]
 800fb46:	4798      	blx	r3
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f7ff fe17 	bl	800f77c <rcl_convert_rmw_ret_to_rcl_ret>
 800fb4e:	4604      	mov	r4, r0
 800fb50:	e7aa      	b.n	800faa8 <rcl_init_options_init+0x18>
 800fb52:	240b      	movs	r4, #11
 800fb54:	e7a8      	b.n	800faa8 <rcl_init_options_init+0x18>
 800fb56:	240a      	movs	r4, #10
 800fb58:	e7a6      	b.n	800faa8 <rcl_init_options_init+0x18>
 800fb5a:	bf00      	nop

0800fb5c <rcl_init_options_fini>:
 800fb5c:	b530      	push	{r4, r5, lr}
 800fb5e:	b087      	sub	sp, #28
 800fb60:	b1f0      	cbz	r0, 800fba0 <rcl_init_options_fini+0x44>
 800fb62:	6803      	ldr	r3, [r0, #0]
 800fb64:	4604      	mov	r4, r0
 800fb66:	b1db      	cbz	r3, 800fba0 <rcl_init_options_fini+0x44>
 800fb68:	469c      	mov	ip, r3
 800fb6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb6e:	f10d 0e04 	add.w	lr, sp, #4
 800fb72:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fb76:	f8dc 3000 	ldr.w	r3, [ip]
 800fb7a:	f8ce 3000 	str.w	r3, [lr]
 800fb7e:	a801      	add	r0, sp, #4
 800fb80:	f7fa ff06 	bl	800a990 <rcutils_allocator_is_valid>
 800fb84:	b160      	cbz	r0, 800fba0 <rcl_init_options_fini+0x44>
 800fb86:	6820      	ldr	r0, [r4, #0]
 800fb88:	3018      	adds	r0, #24
 800fb8a:	f003 f96f 	bl	8012e6c <rmw_init_options_fini>
 800fb8e:	4605      	mov	r5, r0
 800fb90:	b950      	cbnz	r0, 800fba8 <rcl_init_options_fini+0x4c>
 800fb92:	6820      	ldr	r0, [r4, #0]
 800fb94:	9b02      	ldr	r3, [sp, #8]
 800fb96:	9905      	ldr	r1, [sp, #20]
 800fb98:	4798      	blx	r3
 800fb9a:	4628      	mov	r0, r5
 800fb9c:	b007      	add	sp, #28
 800fb9e:	bd30      	pop	{r4, r5, pc}
 800fba0:	250b      	movs	r5, #11
 800fba2:	4628      	mov	r0, r5
 800fba4:	b007      	add	sp, #28
 800fba6:	bd30      	pop	{r4, r5, pc}
 800fba8:	f7ff fde8 	bl	800f77c <rcl_convert_rmw_ret_to_rcl_ret>
 800fbac:	4605      	mov	r5, r0
 800fbae:	e7f8      	b.n	800fba2 <rcl_init_options_fini+0x46>

0800fbb0 <rcl_init_options_copy>:
 800fbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb4:	b094      	sub	sp, #80	; 0x50
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d058      	beq.n	800fc6c <rcl_init_options_copy+0xbc>
 800fbba:	4604      	mov	r4, r0
 800fbbc:	6800      	ldr	r0, [r0, #0]
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d054      	beq.n	800fc6c <rcl_init_options_copy+0xbc>
 800fbc2:	460e      	mov	r6, r1
 800fbc4:	f7fa fee4 	bl	800a990 <rcutils_allocator_is_valid>
 800fbc8:	2800      	cmp	r0, #0
 800fbca:	d04f      	beq.n	800fc6c <rcl_init_options_copy+0xbc>
 800fbcc:	2e00      	cmp	r6, #0
 800fbce:	d04d      	beq.n	800fc6c <rcl_init_options_copy+0xbc>
 800fbd0:	6833      	ldr	r3, [r6, #0]
 800fbd2:	b123      	cbz	r3, 800fbde <rcl_init_options_copy+0x2e>
 800fbd4:	2464      	movs	r4, #100	; 0x64
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	b014      	add	sp, #80	; 0x50
 800fbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbde:	6827      	ldr	r7, [r4, #0]
 800fbe0:	46bc      	mov	ip, r7
 800fbe2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fbe6:	ad0f      	add	r5, sp, #60	; 0x3c
 800fbe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fbea:	f8dc 3000 	ldr.w	r3, [ip]
 800fbee:	f8d7 8000 	ldr.w	r8, [r7]
 800fbf2:	602b      	str	r3, [r5, #0]
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	2050      	movs	r0, #80	; 0x50
 800fbf8:	47c0      	blx	r8
 800fbfa:	4605      	mov	r5, r0
 800fbfc:	6030      	str	r0, [r6, #0]
 800fbfe:	b3d0      	cbz	r0, 800fc76 <rcl_init_options_copy+0xc6>
 800fc00:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800fc04:	4686      	mov	lr, r0
 800fc06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fc0e:	f8dc 3000 	ldr.w	r3, [ip]
 800fc12:	f8ce 3000 	str.w	r3, [lr]
 800fc16:	4668      	mov	r0, sp
 800fc18:	f002 fe0a 	bl	8012830 <rmw_get_zero_initialized_init_options>
 800fc1c:	46ee      	mov	lr, sp
 800fc1e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fc22:	f105 0c18 	add.w	ip, r5, #24
 800fc26:	6824      	ldr	r4, [r4, #0]
 800fc28:	6835      	ldr	r5, [r6, #0]
 800fc2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fc32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fc3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc3e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fc42:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fc46:	f104 0018 	add.w	r0, r4, #24
 800fc4a:	f105 0118 	add.w	r1, r5, #24
 800fc4e:	f003 f8c5 	bl	8012ddc <rmw_init_options_copy>
 800fc52:	4604      	mov	r4, r0
 800fc54:	2800      	cmp	r0, #0
 800fc56:	d0be      	beq.n	800fbd6 <rcl_init_options_copy+0x26>
 800fc58:	f7fa fea8 	bl	800a9ac <rcutils_get_error_string>
 800fc5c:	f7fa febc 	bl	800a9d8 <rcutils_reset_error>
 800fc60:	4630      	mov	r0, r6
 800fc62:	f7ff ff7b 	bl	800fb5c <rcl_init_options_fini>
 800fc66:	b140      	cbz	r0, 800fc7a <rcl_init_options_copy+0xca>
 800fc68:	4604      	mov	r4, r0
 800fc6a:	e7b4      	b.n	800fbd6 <rcl_init_options_copy+0x26>
 800fc6c:	240b      	movs	r4, #11
 800fc6e:	4620      	mov	r0, r4
 800fc70:	b014      	add	sp, #80	; 0x50
 800fc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc76:	240a      	movs	r4, #10
 800fc78:	e7ad      	b.n	800fbd6 <rcl_init_options_copy+0x26>
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	b014      	add	sp, #80	; 0x50
 800fc7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc82:	f7ff bd7b 	b.w	800f77c <rcl_convert_rmw_ret_to_rcl_ret>
 800fc86:	bf00      	nop

0800fc88 <rcl_get_localhost_only>:
 800fc88:	b510      	push	{r4, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	9301      	str	r3, [sp, #4]
 800fc90:	b1b8      	cbz	r0, 800fcc2 <rcl_get_localhost_only+0x3a>
 800fc92:	4604      	mov	r4, r0
 800fc94:	a901      	add	r1, sp, #4
 800fc96:	480c      	ldr	r0, [pc, #48]	; (800fcc8 <rcl_get_localhost_only+0x40>)
 800fc98:	f002 fb0e 	bl	80122b8 <rcutils_get_env>
 800fc9c:	b110      	cbz	r0, 800fca4 <rcl_get_localhost_only+0x1c>
 800fc9e:	2001      	movs	r0, #1
 800fca0:	b002      	add	sp, #8
 800fca2:	bd10      	pop	{r4, pc}
 800fca4:	9b01      	ldr	r3, [sp, #4]
 800fca6:	b113      	cbz	r3, 800fcae <rcl_get_localhost_only+0x26>
 800fca8:	781a      	ldrb	r2, [r3, #0]
 800fcaa:	2a31      	cmp	r2, #49	; 0x31
 800fcac:	d004      	beq.n	800fcb8 <rcl_get_localhost_only+0x30>
 800fcae:	2302      	movs	r3, #2
 800fcb0:	2000      	movs	r0, #0
 800fcb2:	7023      	strb	r3, [r4, #0]
 800fcb4:	b002      	add	sp, #8
 800fcb6:	bd10      	pop	{r4, pc}
 800fcb8:	785b      	ldrb	r3, [r3, #1]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d1f7      	bne.n	800fcae <rcl_get_localhost_only+0x26>
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	e7f6      	b.n	800fcb0 <rcl_get_localhost_only+0x28>
 800fcc2:	200b      	movs	r0, #11
 800fcc4:	b002      	add	sp, #8
 800fcc6:	bd10      	pop	{r4, pc}
 800fcc8:	08017f4c 	.word	0x08017f4c

0800fccc <rcl_get_zero_initialized_node>:
 800fccc:	4a03      	ldr	r2, [pc, #12]	; (800fcdc <rcl_get_zero_initialized_node+0x10>)
 800fcce:	4603      	mov	r3, r0
 800fcd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fcd4:	e883 0003 	stmia.w	r3, {r0, r1}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	4770      	bx	lr
 800fcdc:	08017f74 	.word	0x08017f74

0800fce0 <rcl_node_init>:
 800fce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce4:	b0a9      	sub	sp, #164	; 0xa4
 800fce6:	4604      	mov	r4, r0
 800fce8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800fcec:	a823      	add	r0, sp, #140	; 0x8c
 800fcee:	460e      	mov	r6, r1
 800fcf0:	4615      	mov	r5, r2
 800fcf2:	461f      	mov	r7, r3
 800fcf4:	f006 f8d2 	bl	8015e9c <rcl_guard_condition_get_default_options>
 800fcf8:	f1b8 0f00 	cmp.w	r8, #0
 800fcfc:	f000 80e6 	beq.w	800fecc <rcl_node_init+0x1ec>
 800fd00:	4640      	mov	r0, r8
 800fd02:	f7fa fe45 	bl	800a990 <rcutils_allocator_is_valid>
 800fd06:	2800      	cmp	r0, #0
 800fd08:	f000 80e0 	beq.w	800fecc <rcl_node_init+0x1ec>
 800fd0c:	2e00      	cmp	r6, #0
 800fd0e:	f000 80dd 	beq.w	800fecc <rcl_node_init+0x1ec>
 800fd12:	2d00      	cmp	r5, #0
 800fd14:	f000 80da 	beq.w	800fecc <rcl_node_init+0x1ec>
 800fd18:	2c00      	cmp	r4, #0
 800fd1a:	f000 80d7 	beq.w	800fecc <rcl_node_init+0x1ec>
 800fd1e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fd22:	f1b9 0f00 	cmp.w	r9, #0
 800fd26:	f040 80fd 	bne.w	800ff24 <rcl_node_init+0x244>
 800fd2a:	2f00      	cmp	r7, #0
 800fd2c:	f000 80ce 	beq.w	800fecc <rcl_node_init+0x1ec>
 800fd30:	4638      	mov	r0, r7
 800fd32:	f7ff fd41 	bl	800f7b8 <rcl_context_is_valid>
 800fd36:	4682      	mov	sl, r0
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	f000 80cd 	beq.w	800fed8 <rcl_node_init+0x1f8>
 800fd3e:	464a      	mov	r2, r9
 800fd40:	a922      	add	r1, sp, #136	; 0x88
 800fd42:	4630      	mov	r0, r6
 800fd44:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800fd48:	f002 ff14 	bl	8012b74 <rmw_validate_node_name>
 800fd4c:	4681      	mov	r9, r0
 800fd4e:	2800      	cmp	r0, #0
 800fd50:	f040 80be 	bne.w	800fed0 <rcl_node_init+0x1f0>
 800fd54:	9822      	ldr	r0, [sp, #136]	; 0x88
 800fd56:	2800      	cmp	r0, #0
 800fd58:	f040 80f0 	bne.w	800ff3c <rcl_node_init+0x25c>
 800fd5c:	4628      	mov	r0, r5
 800fd5e:	f7f0 fa49 	bl	80001f4 <strlen>
 800fd62:	2800      	cmp	r0, #0
 800fd64:	f040 80bb 	bne.w	800fede <rcl_node_init+0x1fe>
 800fd68:	4d7c      	ldr	r5, [pc, #496]	; (800ff5c <rcl_node_init+0x27c>)
 800fd6a:	a922      	add	r1, sp, #136	; 0x88
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	4628      	mov	r0, r5
 800fd70:	f002 fee2 	bl	8012b38 <rmw_validate_namespace>
 800fd74:	4681      	mov	r9, r0
 800fd76:	2800      	cmp	r0, #0
 800fd78:	f040 80aa 	bne.w	800fed0 <rcl_node_init+0x1f0>
 800fd7c:	4682      	mov	sl, r0
 800fd7e:	9822      	ldr	r0, [sp, #136]	; 0x88
 800fd80:	2800      	cmp	r0, #0
 800fd82:	f040 80e0 	bne.w	800ff46 <rcl_node_init+0x266>
 800fd86:	f8d8 3000 	ldr.w	r3, [r8]
 800fd8a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fd8e:	2078      	movs	r0, #120	; 0x78
 800fd90:	4798      	blx	r3
 800fd92:	4681      	mov	r9, r0
 800fd94:	6060      	str	r0, [r4, #4]
 800fd96:	2800      	cmp	r0, #0
 800fd98:	f000 80ca 	beq.w	800ff30 <rcl_node_init+0x250>
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	2300      	movs	r3, #0
 800fda0:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 800fda4:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 800fda8:	a808      	add	r0, sp, #32
 800fdaa:	f000 f907 	bl	800ffbc <rcl_node_get_default_options>
 800fdae:	a908      	add	r1, sp, #32
 800fdb0:	4648      	mov	r0, r9
 800fdb2:	2268      	movs	r2, #104	; 0x68
 800fdb4:	f006 ff57 	bl	8016c66 <memcpy>
 800fdb8:	6861      	ldr	r1, [r4, #4]
 800fdba:	6027      	str	r7, [r4, #0]
 800fdbc:	4640      	mov	r0, r8
 800fdbe:	f000 f90b 	bl	800ffd8 <rcl_node_options_copy>
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	d158      	bne.n	800fe78 <rcl_node_init+0x198>
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	f7f0 fa14 	bl	80001f4 <strlen>
 800fdcc:	4428      	add	r0, r5
 800fdce:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800fdd2:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800fdd6:	2b2f      	cmp	r3, #47	; 0x2f
 800fdd8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fddc:	9300      	str	r3, [sp, #0]
 800fdde:	bf0c      	ite	eq
 800fde0:	4b5f      	ldreq	r3, [pc, #380]	; (800ff60 <rcl_node_init+0x280>)
 800fde2:	4b60      	ldrne	r3, [pc, #384]	; (800ff64 <rcl_node_init+0x284>)
 800fde4:	9302      	str	r3, [sp, #8]
 800fde6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fdea:	9301      	str	r3, [sp, #4]
 800fdec:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800fdf0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fdf4:	f002 fa88 	bl	8012308 <rcutils_format_string_limit>
 800fdf8:	6823      	ldr	r3, [r4, #0]
 800fdfa:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800fdfe:	6818      	ldr	r0, [r3, #0]
 800fe00:	4631      	mov	r1, r6
 800fe02:	3028      	adds	r0, #40	; 0x28
 800fe04:	462a      	mov	r2, r5
 800fe06:	6866      	ldr	r6, [r4, #4]
 800fe08:	f003 facc 	bl	80133a4 <rmw_create_node>
 800fe0c:	6863      	ldr	r3, [r4, #4]
 800fe0e:	66b0      	str	r0, [r6, #104]	; 0x68
 800fe10:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800fe12:	2800      	cmp	r0, #0
 800fe14:	d032      	beq.n	800fe7c <rcl_node_init+0x19c>
 800fe16:	f003 fb59 	bl	80134cc <rmw_node_get_graph_guard_condition>
 800fe1a:	4681      	mov	r9, r0
 800fe1c:	b360      	cbz	r0, 800fe78 <rcl_node_init+0x198>
 800fe1e:	f8d8 3000 	ldr.w	r3, [r8]
 800fe22:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fe26:	6866      	ldr	r6, [r4, #4]
 800fe28:	2008      	movs	r0, #8
 800fe2a:	4798      	blx	r3
 800fe2c:	6863      	ldr	r3, [r4, #4]
 800fe2e:	66f0      	str	r0, [r6, #108]	; 0x6c
 800fe30:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800fe34:	f1bb 0f00 	cmp.w	fp, #0
 800fe38:	d020      	beq.n	800fe7c <rcl_node_init+0x19c>
 800fe3a:	a806      	add	r0, sp, #24
 800fe3c:	f005 ff9e 	bl	8015d7c <rcl_get_zero_initialized_guard_condition>
 800fe40:	a806      	add	r0, sp, #24
 800fe42:	c803      	ldmia	r0, {r0, r1}
 800fe44:	6863      	ldr	r3, [r4, #4]
 800fe46:	46c4      	mov	ip, r8
 800fe48:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800fe4c:	e88b 0003 	stmia.w	fp, {r0, r1}
 800fe50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe54:	ae23      	add	r6, sp, #140	; 0x8c
 800fe56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fe58:	f8dc 3000 	ldr.w	r3, [ip]
 800fe5c:	6033      	str	r3, [r6, #0]
 800fe5e:	ab28      	add	r3, sp, #160	; 0xa0
 800fe60:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800fe64:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fe68:	4649      	mov	r1, r9
 800fe6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fe6c:	463a      	mov	r2, r7
 800fe6e:	4670      	mov	r0, lr
 800fe70:	f005 ff8e 	bl	8015d90 <rcl_guard_condition_init_from_rmw>
 800fe74:	4681      	mov	r9, r0
 800fe76:	b328      	cbz	r0, 800fec4 <rcl_node_init+0x1e4>
 800fe78:	6863      	ldr	r3, [r4, #4]
 800fe7a:	b1f3      	cbz	r3, 800feba <rcl_node_init+0x1da>
 800fe7c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800fe7e:	b128      	cbz	r0, 800fe8c <rcl_node_init+0x1ac>
 800fe80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe84:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fe88:	4798      	blx	r3
 800fe8a:	6863      	ldr	r3, [r4, #4]
 800fe8c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800fe8e:	b110      	cbz	r0, 800fe96 <rcl_node_init+0x1b6>
 800fe90:	f003 faa0 	bl	80133d4 <rmw_destroy_node>
 800fe94:	6863      	ldr	r3, [r4, #4]
 800fe96:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800fe98:	b148      	cbz	r0, 800feae <rcl_node_init+0x1ce>
 800fe9a:	f005 ffd9 	bl	8015e50 <rcl_guard_condition_fini>
 800fe9e:	6863      	ldr	r3, [r4, #4]
 800fea0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fea4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800fea6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800feaa:	4798      	blx	r3
 800feac:	6863      	ldr	r3, [r4, #4]
 800feae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800feb2:	4618      	mov	r0, r3
 800feb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800feb8:	4798      	blx	r3
 800feba:	2300      	movs	r3, #0
 800febc:	e9c4 3300 	strd	r3, r3, [r4]
 800fec0:	f04f 0901 	mov.w	r9, #1
 800fec4:	f1ba 0f00 	cmp.w	sl, #0
 800fec8:	d125      	bne.n	800ff16 <rcl_node_init+0x236>
 800feca:	e001      	b.n	800fed0 <rcl_node_init+0x1f0>
 800fecc:	f04f 090b 	mov.w	r9, #11
 800fed0:	4648      	mov	r0, r9
 800fed2:	b029      	add	sp, #164	; 0xa4
 800fed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fed8:	f04f 0965 	mov.w	r9, #101	; 0x65
 800fedc:	e7f8      	b.n	800fed0 <rcl_node_init+0x1f0>
 800fede:	782b      	ldrb	r3, [r5, #0]
 800fee0:	2b2f      	cmp	r3, #47	; 0x2f
 800fee2:	f43f af42 	beq.w	800fd6a <rcl_node_init+0x8a>
 800fee6:	9503      	str	r5, [sp, #12]
 800fee8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	4b1e      	ldr	r3, [pc, #120]	; (800ff68 <rcl_node_init+0x288>)
 800fef0:	9302      	str	r3, [sp, #8]
 800fef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fef6:	9301      	str	r3, [sp, #4]
 800fef8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800fefc:	f002 fa04 	bl	8012308 <rcutils_format_string_limit>
 800ff00:	4605      	mov	r5, r0
 800ff02:	b340      	cbz	r0, 800ff56 <rcl_node_init+0x276>
 800ff04:	2200      	movs	r2, #0
 800ff06:	a922      	add	r1, sp, #136	; 0x88
 800ff08:	9222      	str	r2, [sp, #136]	; 0x88
 800ff0a:	f002 fe15 	bl	8012b38 <rmw_validate_namespace>
 800ff0e:	4681      	mov	r9, r0
 800ff10:	2800      	cmp	r0, #0
 800ff12:	f43f af34 	beq.w	800fd7e <rcl_node_init+0x9e>
 800ff16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff1a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ff1e:	4628      	mov	r0, r5
 800ff20:	4798      	blx	r3
 800ff22:	e7d5      	b.n	800fed0 <rcl_node_init+0x1f0>
 800ff24:	f04f 0964 	mov.w	r9, #100	; 0x64
 800ff28:	4648      	mov	r0, r9
 800ff2a:	b029      	add	sp, #164	; 0xa4
 800ff2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff30:	f04f 090a 	mov.w	r9, #10
 800ff34:	f1ba 0f00 	cmp.w	sl, #0
 800ff38:	d1ed      	bne.n	800ff16 <rcl_node_init+0x236>
 800ff3a:	e7c9      	b.n	800fed0 <rcl_node_init+0x1f0>
 800ff3c:	f002 fe6c 	bl	8012c18 <rmw_node_name_validation_result_string>
 800ff40:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800ff44:	e7c4      	b.n	800fed0 <rcl_node_init+0x1f0>
 800ff46:	f002 fe09 	bl	8012b5c <rmw_namespace_validation_result_string>
 800ff4a:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800ff4e:	f1ba 0f00 	cmp.w	sl, #0
 800ff52:	d1e0      	bne.n	800ff16 <rcl_node_init+0x236>
 800ff54:	e7bc      	b.n	800fed0 <rcl_node_init+0x1f0>
 800ff56:	f04f 090a 	mov.w	r9, #10
 800ff5a:	e7b9      	b.n	800fed0 <rcl_node_init+0x1f0>
 800ff5c:	08017f64 	.word	0x08017f64
 800ff60:	08017cf0 	.word	0x08017cf0
 800ff64:	08017f6c 	.word	0x08017f6c
 800ff68:	08017f68 	.word	0x08017f68

0800ff6c <rcl_node_is_valid>:
 800ff6c:	b130      	cbz	r0, 800ff7c <rcl_node_is_valid+0x10>
 800ff6e:	6843      	ldr	r3, [r0, #4]
 800ff70:	b123      	cbz	r3, 800ff7c <rcl_node_is_valid+0x10>
 800ff72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ff74:	b113      	cbz	r3, 800ff7c <rcl_node_is_valid+0x10>
 800ff76:	6800      	ldr	r0, [r0, #0]
 800ff78:	f7ff bc1e 	b.w	800f7b8 <rcl_context_is_valid>
 800ff7c:	2000      	movs	r0, #0
 800ff7e:	4770      	bx	lr

0800ff80 <rcl_node_get_name>:
 800ff80:	b120      	cbz	r0, 800ff8c <rcl_node_get_name+0xc>
 800ff82:	6840      	ldr	r0, [r0, #4]
 800ff84:	b110      	cbz	r0, 800ff8c <rcl_node_get_name+0xc>
 800ff86:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800ff88:	b100      	cbz	r0, 800ff8c <rcl_node_get_name+0xc>
 800ff8a:	6880      	ldr	r0, [r0, #8]
 800ff8c:	4770      	bx	lr
 800ff8e:	bf00      	nop

0800ff90 <rcl_node_get_namespace>:
 800ff90:	b120      	cbz	r0, 800ff9c <rcl_node_get_namespace+0xc>
 800ff92:	6840      	ldr	r0, [r0, #4]
 800ff94:	b110      	cbz	r0, 800ff9c <rcl_node_get_namespace+0xc>
 800ff96:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800ff98:	b100      	cbz	r0, 800ff9c <rcl_node_get_namespace+0xc>
 800ff9a:	68c0      	ldr	r0, [r0, #12]
 800ff9c:	4770      	bx	lr
 800ff9e:	bf00      	nop

0800ffa0 <rcl_node_get_options>:
 800ffa0:	b128      	cbz	r0, 800ffae <rcl_node_get_options+0xe>
 800ffa2:	6840      	ldr	r0, [r0, #4]
 800ffa4:	b118      	cbz	r0, 800ffae <rcl_node_get_options+0xe>
 800ffa6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	bf08      	it	eq
 800ffac:	2000      	moveq	r0, #0
 800ffae:	4770      	bx	lr

0800ffb0 <rcl_node_get_rmw_handle>:
 800ffb0:	b110      	cbz	r0, 800ffb8 <rcl_node_get_rmw_handle+0x8>
 800ffb2:	6840      	ldr	r0, [r0, #4]
 800ffb4:	b100      	cbz	r0, 800ffb8 <rcl_node_get_rmw_handle+0x8>
 800ffb6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop

0800ffbc <rcl_node_get_default_options>:
 800ffbc:	b510      	push	{r4, lr}
 800ffbe:	2268      	movs	r2, #104	; 0x68
 800ffc0:	4604      	mov	r4, r0
 800ffc2:	2100      	movs	r1, #0
 800ffc4:	f006 fd86 	bl	8016ad4 <memset>
 800ffc8:	4620      	mov	r0, r4
 800ffca:	f7fa fcd3 	bl	800a974 <rcutils_get_default_allocator>
 800ffce:	2301      	movs	r3, #1
 800ffd0:	7523      	strb	r3, [r4, #20]
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	bd10      	pop	{r4, pc}
 800ffd6:	bf00      	nop

0800ffd8 <rcl_node_options_copy>:
 800ffd8:	b1d0      	cbz	r0, 8010010 <rcl_node_options_copy+0x38>
 800ffda:	b570      	push	{r4, r5, r6, lr}
 800ffdc:	460c      	mov	r4, r1
 800ffde:	b1a9      	cbz	r1, 801000c <rcl_node_options_copy+0x34>
 800ffe0:	4288      	cmp	r0, r1
 800ffe2:	4684      	mov	ip, r0
 800ffe4:	d012      	beq.n	801000c <rcl_node_options_copy+0x34>
 800ffe6:	4605      	mov	r5, r0
 800ffe8:	8a86      	ldrh	r6, [r0, #20]
 800ffea:	468e      	mov	lr, r1
 800ffec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fff2:	682b      	ldr	r3, [r5, #0]
 800fff4:	f8ce 3000 	str.w	r3, [lr]
 800fff8:	f10c 0118 	add.w	r1, ip, #24
 800fffc:	2250      	movs	r2, #80	; 0x50
 800fffe:	82a6      	strh	r6, [r4, #20]
 8010000:	f104 0018 	add.w	r0, r4, #24
 8010004:	f006 fe2f 	bl	8016c66 <memcpy>
 8010008:	2000      	movs	r0, #0
 801000a:	bd70      	pop	{r4, r5, r6, pc}
 801000c:	200b      	movs	r0, #11
 801000e:	bd70      	pop	{r4, r5, r6, pc}
 8010010:	200b      	movs	r0, #11
 8010012:	4770      	bx	lr

08010014 <rcl_node_resolve_name>:
 8010014:	b082      	sub	sp, #8
 8010016:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801001a:	b091      	sub	sp, #68	; 0x44
 801001c:	ac1a      	add	r4, sp, #104	; 0x68
 801001e:	e884 000c 	stmia.w	r4, {r2, r3}
 8010022:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8010026:	2800      	cmp	r0, #0
 8010028:	d03b      	beq.n	80100a2 <rcl_node_resolve_name+0x8e>
 801002a:	460c      	mov	r4, r1
 801002c:	4605      	mov	r5, r0
 801002e:	f7ff ffb7 	bl	800ffa0 <rcl_node_get_options>
 8010032:	2800      	cmp	r0, #0
 8010034:	d037      	beq.n	80100a6 <rcl_node_resolve_name+0x92>
 8010036:	4628      	mov	r0, r5
 8010038:	f7ff ffa2 	bl	800ff80 <rcl_node_get_name>
 801003c:	4606      	mov	r6, r0
 801003e:	4628      	mov	r0, r5
 8010040:	f7ff ffa6 	bl	800ff90 <rcl_node_get_namespace>
 8010044:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8010048:	4681      	mov	r9, r0
 801004a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801004e:	ad0b      	add	r5, sp, #44	; 0x2c
 8010050:	46ac      	mov	ip, r5
 8010052:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010056:	f8de 3000 	ldr.w	r3, [lr]
 801005a:	f8cc 3000 	str.w	r3, [ip]
 801005e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010060:	b1fb      	cbz	r3, 80100a2 <rcl_node_resolve_name+0x8e>
 8010062:	468a      	mov	sl, r1
 8010064:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8010068:	f002 faa6 	bl	80125b8 <rcutils_get_zero_initialized_string_map>
 801006c:	ab10      	add	r3, sp, #64	; 0x40
 801006e:	9008      	str	r0, [sp, #32]
 8010070:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010074:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010078:	2100      	movs	r1, #0
 801007a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801007e:	a808      	add	r0, sp, #32
 8010080:	f002 fb12 	bl	80126a8 <rcutils_string_map_init>
 8010084:	4607      	mov	r7, r0
 8010086:	b180      	cbz	r0, 80100aa <rcl_node_resolve_name+0x96>
 8010088:	f7fa fc90 	bl	800a9ac <rcutils_get_error_string>
 801008c:	f7fa fca4 	bl	800a9d8 <rcutils_reset_error>
 8010090:	2f0a      	cmp	r7, #10
 8010092:	bf18      	it	ne
 8010094:	2701      	movne	r7, #1
 8010096:	4638      	mov	r0, r7
 8010098:	b011      	add	sp, #68	; 0x44
 801009a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801009e:	b002      	add	sp, #8
 80100a0:	4770      	bx	lr
 80100a2:	270b      	movs	r7, #11
 80100a4:	e7f7      	b.n	8010096 <rcl_node_resolve_name+0x82>
 80100a6:	2701      	movs	r7, #1
 80100a8:	e7f5      	b.n	8010096 <rcl_node_resolve_name+0x82>
 80100aa:	9009      	str	r0, [sp, #36]	; 0x24
 80100ac:	9007      	str	r0, [sp, #28]
 80100ae:	a808      	add	r0, sp, #32
 80100b0:	f005 fe5e 	bl	8015d70 <rcl_get_default_topic_name_substitutions>
 80100b4:	4607      	mov	r7, r0
 80100b6:	b1a8      	cbz	r0, 80100e4 <rcl_node_resolve_name+0xd0>
 80100b8:	280a      	cmp	r0, #10
 80100ba:	9c07      	ldr	r4, [sp, #28]
 80100bc:	d000      	beq.n	80100c0 <rcl_node_resolve_name+0xac>
 80100be:	2701      	movs	r7, #1
 80100c0:	a808      	add	r0, sp, #32
 80100c2:	f002 fb31 	bl	8012728 <rcutils_string_map_fini>
 80100c6:	2800      	cmp	r0, #0
 80100c8:	d13d      	bne.n	8010146 <rcl_node_resolve_name+0x132>
 80100ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100cc:	4659      	mov	r1, fp
 80100ce:	47d0      	blx	sl
 80100d0:	4659      	mov	r1, fp
 80100d2:	4620      	mov	r0, r4
 80100d4:	47d0      	blx	sl
 80100d6:	f1b8 0f00 	cmp.w	r8, #0
 80100da:	d0dc      	beq.n	8010096 <rcl_node_resolve_name+0x82>
 80100dc:	2f67      	cmp	r7, #103	; 0x67
 80100de:	bf08      	it	eq
 80100e0:	2768      	moveq	r7, #104	; 0x68
 80100e2:	e7d8      	b.n	8010096 <rcl_node_resolve_name+0x82>
 80100e4:	ab09      	add	r3, sp, #36	; 0x24
 80100e6:	9305      	str	r3, [sp, #20]
 80100e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80100ea:	46ec      	mov	ip, sp
 80100ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100f0:	682b      	ldr	r3, [r5, #0]
 80100f2:	f8cc 3000 	str.w	r3, [ip]
 80100f6:	464a      	mov	r2, r9
 80100f8:	4631      	mov	r1, r6
 80100fa:	4620      	mov	r0, r4
 80100fc:	ab08      	add	r3, sp, #32
 80100fe:	f005 fcd9 	bl	8015ab4 <rcl_expand_topic_name>
 8010102:	4607      	mov	r7, r0
 8010104:	b9b8      	cbnz	r0, 8010136 <rcl_node_resolve_name+0x122>
 8010106:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010108:	9009      	str	r0, [sp, #36]	; 0x24
 801010a:	4602      	mov	r2, r0
 801010c:	a90a      	add	r1, sp, #40	; 0x28
 801010e:	4620      	mov	r0, r4
 8010110:	f002 fc4e 	bl	80129b0 <rmw_validate_full_topic_name>
 8010114:	b988      	cbnz	r0, 801013a <rcl_node_resolve_name+0x126>
 8010116:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010118:	b9d5      	cbnz	r5, 8010150 <rcl_node_resolve_name+0x13c>
 801011a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801011c:	a808      	add	r0, sp, #32
 801011e:	601c      	str	r4, [r3, #0]
 8010120:	f002 fb02 	bl	8012728 <rcutils_string_map_fini>
 8010124:	4607      	mov	r7, r0
 8010126:	b1a8      	cbz	r0, 8010154 <rcl_node_resolve_name+0x140>
 8010128:	f7fa fc40 	bl	800a9ac <rcutils_get_error_string>
 801012c:	462c      	mov	r4, r5
 801012e:	f7fa fc53 	bl	800a9d8 <rcutils_reset_error>
 8010132:	2701      	movs	r7, #1
 8010134:	e7c9      	b.n	80100ca <rcl_node_resolve_name+0xb6>
 8010136:	9c07      	ldr	r4, [sp, #28]
 8010138:	e7c2      	b.n	80100c0 <rcl_node_resolve_name+0xac>
 801013a:	f7fa fc37 	bl	800a9ac <rcutils_get_error_string>
 801013e:	2701      	movs	r7, #1
 8010140:	f7fa fc4a 	bl	800a9d8 <rcutils_reset_error>
 8010144:	e7bc      	b.n	80100c0 <rcl_node_resolve_name+0xac>
 8010146:	f7fa fc31 	bl	800a9ac <rcutils_get_error_string>
 801014a:	f7fa fc45 	bl	800a9d8 <rcutils_reset_error>
 801014e:	e7bc      	b.n	80100ca <rcl_node_resolve_name+0xb6>
 8010150:	2767      	movs	r7, #103	; 0x67
 8010152:	e7b5      	b.n	80100c0 <rcl_node_resolve_name+0xac>
 8010154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010156:	4659      	mov	r1, fp
 8010158:	47d0      	blx	sl
 801015a:	4659      	mov	r1, fp
 801015c:	4638      	mov	r0, r7
 801015e:	47d0      	blx	sl
 8010160:	e799      	b.n	8010096 <rcl_node_resolve_name+0x82>
 8010162:	bf00      	nop

08010164 <exact_match_lookup>:
 8010164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010166:	f102 0708 	add.w	r7, r2, #8
 801016a:	460b      	mov	r3, r1
 801016c:	4614      	mov	r4, r2
 801016e:	4606      	mov	r6, r0
 8010170:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010174:	b085      	sub	sp, #20
 8010176:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801017a:	4618      	mov	r0, r3
 801017c:	4919      	ldr	r1, [pc, #100]	; (80101e4 <exact_match_lookup+0x80>)
 801017e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010182:	f002 f8b3 	bl	80122ec <rcutils_join_path>
 8010186:	7833      	ldrb	r3, [r6, #0]
 8010188:	2b2f      	cmp	r3, #47	; 0x2f
 801018a:	4605      	mov	r5, r0
 801018c:	d023      	beq.n	80101d6 <exact_match_lookup+0x72>
 801018e:	f104 030c 	add.w	r3, r4, #12
 8010192:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010196:	e88d 0003 	stmia.w	sp, {r0, r1}
 801019a:	1c70      	adds	r0, r6, #1
 801019c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80101a0:	f002 f8aa 	bl	80122f8 <rcutils_to_native_path>
 80101a4:	4606      	mov	r6, r0
 80101a6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80101aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80101ae:	4631      	mov	r1, r6
 80101b0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80101b4:	4628      	mov	r0, r5
 80101b6:	f002 f899 	bl	80122ec <rcutils_join_path>
 80101ba:	6862      	ldr	r2, [r4, #4]
 80101bc:	6921      	ldr	r1, [r4, #16]
 80101be:	4603      	mov	r3, r0
 80101c0:	4630      	mov	r0, r6
 80101c2:	461e      	mov	r6, r3
 80101c4:	4790      	blx	r2
 80101c6:	4628      	mov	r0, r5
 80101c8:	6863      	ldr	r3, [r4, #4]
 80101ca:	6921      	ldr	r1, [r4, #16]
 80101cc:	4798      	blx	r3
 80101ce:	4635      	mov	r5, r6
 80101d0:	4628      	mov	r0, r5
 80101d2:	b005      	add	sp, #20
 80101d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101d6:	7873      	ldrb	r3, [r6, #1]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d1d8      	bne.n	801018e <exact_match_lookup+0x2a>
 80101dc:	4628      	mov	r0, r5
 80101de:	b005      	add	sp, #20
 80101e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101e2:	bf00      	nop
 80101e4:	08017fb8 	.word	0x08017fb8

080101e8 <rcl_get_secure_root>:
 80101e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101ec:	b085      	sub	sp, #20
 80101ee:	b168      	cbz	r0, 801020c <rcl_get_secure_root+0x24>
 80101f0:	4607      	mov	r7, r0
 80101f2:	4608      	mov	r0, r1
 80101f4:	460c      	mov	r4, r1
 80101f6:	f7fa fbcb 	bl	800a990 <rcutils_allocator_is_valid>
 80101fa:	b138      	cbz	r0, 801020c <rcl_get_secure_root+0x24>
 80101fc:	2300      	movs	r3, #0
 80101fe:	482d      	ldr	r0, [pc, #180]	; (80102b4 <rcl_get_secure_root+0xcc>)
 8010200:	9303      	str	r3, [sp, #12]
 8010202:	a903      	add	r1, sp, #12
 8010204:	f002 f858 	bl	80122b8 <rcutils_get_env>
 8010208:	4605      	mov	r5, r0
 801020a:	b120      	cbz	r0, 8010216 <rcl_get_secure_root+0x2e>
 801020c:	2500      	movs	r5, #0
 801020e:	4628      	mov	r0, r5
 8010210:	b005      	add	sp, #20
 8010212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010216:	9b03      	ldr	r3, [sp, #12]
 8010218:	781a      	ldrb	r2, [r3, #0]
 801021a:	2a00      	cmp	r2, #0
 801021c:	d0f6      	beq.n	801020c <rcl_get_secure_root+0x24>
 801021e:	f104 090c 	add.w	r9, r4, #12
 8010222:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010226:	e88d 0003 	stmia.w	sp, {r0, r1}
 801022a:	4618      	mov	r0, r3
 801022c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010230:	f002 f984 	bl	801253c <rcutils_strdup>
 8010234:	4680      	mov	r8, r0
 8010236:	2800      	cmp	r0, #0
 8010238:	d0e8      	beq.n	801020c <rcl_get_secure_root+0x24>
 801023a:	481f      	ldr	r0, [pc, #124]	; (80102b8 <rcl_get_secure_root+0xd0>)
 801023c:	9503      	str	r5, [sp, #12]
 801023e:	a903      	add	r1, sp, #12
 8010240:	f002 f83a 	bl	80122b8 <rcutils_get_env>
 8010244:	b160      	cbz	r0, 8010260 <rcl_get_secure_root+0x78>
 8010246:	2600      	movs	r6, #0
 8010248:	6863      	ldr	r3, [r4, #4]
 801024a:	6921      	ldr	r1, [r4, #16]
 801024c:	4630      	mov	r0, r6
 801024e:	4798      	blx	r3
 8010250:	4640      	mov	r0, r8
 8010252:	6863      	ldr	r3, [r4, #4]
 8010254:	6921      	ldr	r1, [r4, #16]
 8010256:	4798      	blx	r3
 8010258:	4628      	mov	r0, r5
 801025a:	b005      	add	sp, #20
 801025c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010260:	9b03      	ldr	r3, [sp, #12]
 8010262:	781e      	ldrb	r6, [r3, #0]
 8010264:	b1f6      	cbz	r6, 80102a4 <rcl_get_secure_root+0xbc>
 8010266:	e899 0003 	ldmia.w	r9, {r0, r1}
 801026a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801026e:	4618      	mov	r0, r3
 8010270:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010274:	f002 f962 	bl	801253c <rcutils_strdup>
 8010278:	4606      	mov	r6, r0
 801027a:	2800      	cmp	r0, #0
 801027c:	d0e3      	beq.n	8010246 <rcl_get_secure_root+0x5e>
 801027e:	4622      	mov	r2, r4
 8010280:	4641      	mov	r1, r8
 8010282:	f7ff ff6f 	bl	8010164 <exact_match_lookup>
 8010286:	4605      	mov	r5, r0
 8010288:	2d00      	cmp	r5, #0
 801028a:	d0dd      	beq.n	8010248 <rcl_get_secure_root+0x60>
 801028c:	4628      	mov	r0, r5
 801028e:	f002 f82b 	bl	80122e8 <rcutils_is_directory>
 8010292:	4603      	mov	r3, r0
 8010294:	2800      	cmp	r0, #0
 8010296:	d1d7      	bne.n	8010248 <rcl_get_secure_root+0x60>
 8010298:	4628      	mov	r0, r5
 801029a:	6921      	ldr	r1, [r4, #16]
 801029c:	461d      	mov	r5, r3
 801029e:	6863      	ldr	r3, [r4, #4]
 80102a0:	4798      	blx	r3
 80102a2:	e7d1      	b.n	8010248 <rcl_get_secure_root+0x60>
 80102a4:	4622      	mov	r2, r4
 80102a6:	4638      	mov	r0, r7
 80102a8:	4641      	mov	r1, r8
 80102aa:	f7ff ff5b 	bl	8010164 <exact_match_lookup>
 80102ae:	4605      	mov	r5, r0
 80102b0:	e7ea      	b.n	8010288 <rcl_get_secure_root+0xa0>
 80102b2:	bf00      	nop
 80102b4:	08017fc4 	.word	0x08017fc4
 80102b8:	08017fdc 	.word	0x08017fdc

080102bc <rcl_get_security_options_from_environment>:
 80102bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102c0:	b082      	sub	sp, #8
 80102c2:	2300      	movs	r3, #0
 80102c4:	4606      	mov	r6, r0
 80102c6:	460f      	mov	r7, r1
 80102c8:	4820      	ldr	r0, [pc, #128]	; (801034c <rcl_get_security_options_from_environment+0x90>)
 80102ca:	9301      	str	r3, [sp, #4]
 80102cc:	a901      	add	r1, sp, #4
 80102ce:	4690      	mov	r8, r2
 80102d0:	f001 fff2 	bl	80122b8 <rcutils_get_env>
 80102d4:	b120      	cbz	r0, 80102e0 <rcl_get_security_options_from_environment+0x24>
 80102d6:	2501      	movs	r5, #1
 80102d8:	4628      	mov	r0, r5
 80102da:	b002      	add	sp, #8
 80102dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102e0:	491b      	ldr	r1, [pc, #108]	; (8010350 <rcl_get_security_options_from_environment+0x94>)
 80102e2:	4604      	mov	r4, r0
 80102e4:	9801      	ldr	r0, [sp, #4]
 80102e6:	f7ef ff7b 	bl	80001e0 <strcmp>
 80102ea:	4605      	mov	r5, r0
 80102ec:	b9e8      	cbnz	r0, 801032a <rcl_get_security_options_from_environment+0x6e>
 80102ee:	9001      	str	r0, [sp, #4]
 80102f0:	f1b8 0f00 	cmp.w	r8, #0
 80102f4:	d020      	beq.n	8010338 <rcl_get_security_options_from_environment+0x7c>
 80102f6:	4817      	ldr	r0, [pc, #92]	; (8010354 <rcl_get_security_options_from_environment+0x98>)
 80102f8:	a901      	add	r1, sp, #4
 80102fa:	f001 ffdd 	bl	80122b8 <rcutils_get_env>
 80102fe:	2800      	cmp	r0, #0
 8010300:	d1e9      	bne.n	80102d6 <rcl_get_security_options_from_environment+0x1a>
 8010302:	4915      	ldr	r1, [pc, #84]	; (8010358 <rcl_get_security_options_from_environment+0x9c>)
 8010304:	9801      	ldr	r0, [sp, #4]
 8010306:	f7ef ff6b 	bl	80001e0 <strcmp>
 801030a:	fab0 f080 	clz	r0, r0
 801030e:	0940      	lsrs	r0, r0, #5
 8010310:	f888 0000 	strb.w	r0, [r8]
 8010314:	4639      	mov	r1, r7
 8010316:	4630      	mov	r0, r6
 8010318:	f7ff ff66 	bl	80101e8 <rcl_get_secure_root>
 801031c:	b170      	cbz	r0, 801033c <rcl_get_security_options_from_environment+0x80>
 801031e:	f8c8 0004 	str.w	r0, [r8, #4]
 8010322:	4628      	mov	r0, r5
 8010324:	b002      	add	sp, #8
 8010326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801032a:	4625      	mov	r5, r4
 801032c:	4628      	mov	r0, r5
 801032e:	f888 4000 	strb.w	r4, [r8]
 8010332:	b002      	add	sp, #8
 8010334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010338:	250b      	movs	r5, #11
 801033a:	e7cd      	b.n	80102d8 <rcl_get_security_options_from_environment+0x1c>
 801033c:	f898 5000 	ldrb.w	r5, [r8]
 8010340:	f1a5 0501 	sub.w	r5, r5, #1
 8010344:	fab5 f585 	clz	r5, r5
 8010348:	096d      	lsrs	r5, r5, #5
 801034a:	e7c5      	b.n	80102d8 <rcl_get_security_options_from_environment+0x1c>
 801034c:	08017f7c 	.word	0x08017f7c
 8010350:	08017f90 	.word	0x08017f90
 8010354:	08017f98 	.word	0x08017f98
 8010358:	08017fb0 	.word	0x08017fb0

0801035c <rcl_service_get_rmw_handle>:
 801035c:	b118      	cbz	r0, 8010366 <rcl_service_get_rmw_handle+0xa>
 801035e:	6800      	ldr	r0, [r0, #0]
 8010360:	b108      	cbz	r0, 8010366 <rcl_service_get_rmw_handle+0xa>
 8010362:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010366:	4770      	bx	lr

08010368 <rcl_take_request>:
 8010368:	b570      	push	{r4, r5, r6, lr}
 801036a:	468e      	mov	lr, r1
 801036c:	460c      	mov	r4, r1
 801036e:	4616      	mov	r6, r2
 8010370:	4605      	mov	r5, r0
 8010372:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010376:	b08c      	sub	sp, #48	; 0x30
 8010378:	f10d 0c18 	add.w	ip, sp, #24
 801037c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010380:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010384:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010388:	b30d      	cbz	r5, 80103ce <rcl_take_request+0x66>
 801038a:	682b      	ldr	r3, [r5, #0]
 801038c:	b1fb      	cbz	r3, 80103ce <rcl_take_request+0x66>
 801038e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8010392:	b1e0      	cbz	r0, 80103ce <rcl_take_request+0x66>
 8010394:	b336      	cbz	r6, 80103e4 <rcl_take_request+0x7c>
 8010396:	2300      	movs	r3, #0
 8010398:	f88d 3007 	strb.w	r3, [sp, #7]
 801039c:	4632      	mov	r2, r6
 801039e:	f10d 0307 	add.w	r3, sp, #7
 80103a2:	a902      	add	r1, sp, #8
 80103a4:	f003 f8e6 	bl	8013574 <rmw_take_request>
 80103a8:	4605      	mov	r5, r0
 80103aa:	b198      	cbz	r0, 80103d4 <rcl_take_request+0x6c>
 80103ac:	280a      	cmp	r0, #10
 80103ae:	bf18      	it	ne
 80103b0:	2501      	movne	r5, #1
 80103b2:	f10d 0e18 	add.w	lr, sp, #24
 80103b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80103ba:	46a4      	mov	ip, r4
 80103bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80103c0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80103c4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80103c8:	4628      	mov	r0, r5
 80103ca:	b00c      	add	sp, #48	; 0x30
 80103cc:	bd70      	pop	{r4, r5, r6, pc}
 80103ce:	f44f 7516 	mov.w	r5, #600	; 0x258
 80103d2:	e7ee      	b.n	80103b2 <rcl_take_request+0x4a>
 80103d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80103d8:	f240 2359 	movw	r3, #601	; 0x259
 80103dc:	2a00      	cmp	r2, #0
 80103de:	bf08      	it	eq
 80103e0:	461d      	moveq	r5, r3
 80103e2:	e7e6      	b.n	80103b2 <rcl_take_request+0x4a>
 80103e4:	250b      	movs	r5, #11
 80103e6:	e7e4      	b.n	80103b2 <rcl_take_request+0x4a>

080103e8 <rcl_send_response>:
 80103e8:	b170      	cbz	r0, 8010408 <rcl_send_response+0x20>
 80103ea:	6800      	ldr	r0, [r0, #0]
 80103ec:	b160      	cbz	r0, 8010408 <rcl_send_response+0x20>
 80103ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80103f2:	b148      	cbz	r0, 8010408 <rcl_send_response+0x20>
 80103f4:	b159      	cbz	r1, 801040e <rcl_send_response+0x26>
 80103f6:	b510      	push	{r4, lr}
 80103f8:	b15a      	cbz	r2, 8010412 <rcl_send_response+0x2a>
 80103fa:	f003 f919 	bl	8013630 <rmw_send_response>
 80103fe:	b110      	cbz	r0, 8010406 <rcl_send_response+0x1e>
 8010400:	2802      	cmp	r0, #2
 8010402:	bf18      	it	ne
 8010404:	2001      	movne	r0, #1
 8010406:	bd10      	pop	{r4, pc}
 8010408:	f44f 7016 	mov.w	r0, #600	; 0x258
 801040c:	4770      	bx	lr
 801040e:	200b      	movs	r0, #11
 8010410:	4770      	bx	lr
 8010412:	200b      	movs	r0, #11
 8010414:	bd10      	pop	{r4, pc}
 8010416:	bf00      	nop

08010418 <rcl_service_is_valid>:
 8010418:	b130      	cbz	r0, 8010428 <rcl_service_is_valid+0x10>
 801041a:	6800      	ldr	r0, [r0, #0]
 801041c:	b120      	cbz	r0, 8010428 <rcl_service_is_valid+0x10>
 801041e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010422:	3800      	subs	r0, #0
 8010424:	bf18      	it	ne
 8010426:	2001      	movne	r0, #1
 8010428:	4770      	bx	lr
 801042a:	bf00      	nop

0801042c <rcl_get_zero_initialized_subscription>:
 801042c:	4b01      	ldr	r3, [pc, #4]	; (8010434 <rcl_get_zero_initialized_subscription+0x8>)
 801042e:	6818      	ldr	r0, [r3, #0]
 8010430:	4770      	bx	lr
 8010432:	bf00      	nop
 8010434:	08017ffc 	.word	0x08017ffc

08010438 <rcl_subscription_init>:
 8010438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801043c:	b089      	sub	sp, #36	; 0x24
 801043e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8010440:	b1d6      	cbz	r6, 8010478 <rcl_subscription_init+0x40>
 8010442:	f106 0950 	add.w	r9, r6, #80	; 0x50
 8010446:	4604      	mov	r4, r0
 8010448:	4648      	mov	r0, r9
 801044a:	460d      	mov	r5, r1
 801044c:	4690      	mov	r8, r2
 801044e:	461f      	mov	r7, r3
 8010450:	f7fa fa9e 	bl	800a990 <rcutils_allocator_is_valid>
 8010454:	b180      	cbz	r0, 8010478 <rcl_subscription_init+0x40>
 8010456:	b17c      	cbz	r4, 8010478 <rcl_subscription_init+0x40>
 8010458:	4628      	mov	r0, r5
 801045a:	f7ff fd87 	bl	800ff6c <rcl_node_is_valid>
 801045e:	2800      	cmp	r0, #0
 8010460:	d054      	beq.n	801050c <rcl_subscription_init+0xd4>
 8010462:	f1b8 0f00 	cmp.w	r8, #0
 8010466:	d007      	beq.n	8010478 <rcl_subscription_init+0x40>
 8010468:	b137      	cbz	r7, 8010478 <rcl_subscription_init+0x40>
 801046a:	6823      	ldr	r3, [r4, #0]
 801046c:	b14b      	cbz	r3, 8010482 <rcl_subscription_init+0x4a>
 801046e:	2764      	movs	r7, #100	; 0x64
 8010470:	4638      	mov	r0, r7
 8010472:	b009      	add	sp, #36	; 0x24
 8010474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010478:	270b      	movs	r7, #11
 801047a:	4638      	mov	r0, r7
 801047c:	b009      	add	sp, #36	; 0x24
 801047e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010482:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010486:	aa07      	add	r2, sp, #28
 8010488:	9205      	str	r2, [sp, #20]
 801048a:	9307      	str	r3, [sp, #28]
 801048c:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8010490:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010494:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010498:	4639      	mov	r1, r7
 801049a:	e899 000c 	ldmia.w	r9, {r2, r3}
 801049e:	4628      	mov	r0, r5
 80104a0:	f7ff fdb8 	bl	8010014 <rcl_node_resolve_name>
 80104a4:	4607      	mov	r7, r0
 80104a6:	2800      	cmp	r0, #0
 80104a8:	d15f      	bne.n	801056a <rcl_subscription_init+0x132>
 80104aa:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 80104ae:	21c8      	movs	r1, #200	; 0xc8
 80104b0:	2001      	movs	r0, #1
 80104b2:	4798      	blx	r3
 80104b4:	6020      	str	r0, [r4, #0]
 80104b6:	2800      	cmp	r0, #0
 80104b8:	d05d      	beq.n	8010576 <rcl_subscription_init+0x13e>
 80104ba:	4628      	mov	r0, r5
 80104bc:	f7ff fd78 	bl	800ffb0 <rcl_node_get_rmw_handle>
 80104c0:	f106 0364 	add.w	r3, r6, #100	; 0x64
 80104c4:	9300      	str	r3, [sp, #0]
 80104c6:	9a07      	ldr	r2, [sp, #28]
 80104c8:	6827      	ldr	r7, [r4, #0]
 80104ca:	4641      	mov	r1, r8
 80104cc:	4633      	mov	r3, r6
 80104ce:	f003 f999 	bl	8013804 <rmw_create_subscription>
 80104d2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80104d6:	6827      	ldr	r7, [r4, #0]
 80104d8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80104dc:	b348      	cbz	r0, 8010532 <rcl_subscription_init+0xfa>
 80104de:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80104e2:	f003 fa71 	bl	80139c8 <rmw_subscription_get_actual_qos>
 80104e6:	4607      	mov	r7, r0
 80104e8:	b9a8      	cbnz	r0, 8010516 <rcl_subscription_init+0xde>
 80104ea:	6820      	ldr	r0, [r4, #0]
 80104ec:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 80104f0:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 80104f4:	2270      	movs	r2, #112	; 0x70
 80104f6:	4631      	mov	r1, r6
 80104f8:	f006 fbb5 	bl	8016c66 <memcpy>
 80104fc:	9807      	ldr	r0, [sp, #28]
 80104fe:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8010500:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8010502:	4798      	blx	r3
 8010504:	4638      	mov	r0, r7
 8010506:	b009      	add	sp, #36	; 0x24
 8010508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801050c:	27c8      	movs	r7, #200	; 0xc8
 801050e:	4638      	mov	r0, r7
 8010510:	b009      	add	sp, #36	; 0x24
 8010512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010516:	6827      	ldr	r7, [r4, #0]
 8010518:	b32f      	cbz	r7, 8010566 <rcl_subscription_init+0x12e>
 801051a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801051e:	b14b      	cbz	r3, 8010534 <rcl_subscription_init+0xfc>
 8010520:	4628      	mov	r0, r5
 8010522:	f7ff fd45 	bl	800ffb0 <rcl_node_get_rmw_handle>
 8010526:	6823      	ldr	r3, [r4, #0]
 8010528:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 801052c:	f003 fa5c 	bl	80139e8 <rmw_destroy_subscription>
 8010530:	6827      	ldr	r7, [r4, #0]
 8010532:	b197      	cbz	r7, 801055a <rcl_subscription_init+0x122>
 8010534:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8010538:	4628      	mov	r0, r5
 801053a:	f7fa fa29 	bl	800a990 <rcutils_allocator_is_valid>
 801053e:	b158      	cbz	r0, 8010558 <rcl_subscription_init+0x120>
 8010540:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010542:	b148      	cbz	r0, 8010558 <rcl_subscription_init+0x120>
 8010544:	4629      	mov	r1, r5
 8010546:	f002 f987 	bl	8012858 <rmw_subscription_content_filter_options_fini>
 801054a:	4605      	mov	r5, r0
 801054c:	b9b8      	cbnz	r0, 801057e <rcl_subscription_init+0x146>
 801054e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010550:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010552:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010554:	4798      	blx	r3
 8010556:	66fd      	str	r5, [r7, #108]	; 0x6c
 8010558:	6827      	ldr	r7, [r4, #0]
 801055a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 801055c:	6e31      	ldr	r1, [r6, #96]	; 0x60
 801055e:	4638      	mov	r0, r7
 8010560:	4798      	blx	r3
 8010562:	2300      	movs	r3, #0
 8010564:	6023      	str	r3, [r4, #0]
 8010566:	2701      	movs	r7, #1
 8010568:	e7c8      	b.n	80104fc <rcl_subscription_init+0xc4>
 801056a:	2867      	cmp	r0, #103	; 0x67
 801056c:	d0c6      	beq.n	80104fc <rcl_subscription_init+0xc4>
 801056e:	2869      	cmp	r0, #105	; 0x69
 8010570:	d003      	beq.n	801057a <rcl_subscription_init+0x142>
 8010572:	280a      	cmp	r0, #10
 8010574:	d1f7      	bne.n	8010566 <rcl_subscription_init+0x12e>
 8010576:	270a      	movs	r7, #10
 8010578:	e7c0      	b.n	80104fc <rcl_subscription_init+0xc4>
 801057a:	2767      	movs	r7, #103	; 0x67
 801057c:	e7be      	b.n	80104fc <rcl_subscription_init+0xc4>
 801057e:	f7ff f8fd 	bl	800f77c <rcl_convert_rmw_ret_to_rcl_ret>
 8010582:	6827      	ldr	r7, [r4, #0]
 8010584:	e7e9      	b.n	801055a <rcl_subscription_init+0x122>
 8010586:	bf00      	nop

08010588 <rcl_subscription_get_default_options>:
 8010588:	b570      	push	{r4, r5, r6, lr}
 801058a:	4d14      	ldr	r5, [pc, #80]	; (80105dc <rcl_subscription_get_default_options+0x54>)
 801058c:	4914      	ldr	r1, [pc, #80]	; (80105e0 <rcl_subscription_get_default_options+0x58>)
 801058e:	b08a      	sub	sp, #40	; 0x28
 8010590:	4604      	mov	r4, r0
 8010592:	2250      	movs	r2, #80	; 0x50
 8010594:	4628      	mov	r0, r5
 8010596:	f006 fb66 	bl	8016c66 <memcpy>
 801059a:	a804      	add	r0, sp, #16
 801059c:	f7fa f9ea 	bl	800a974 <rcutils_get_default_allocator>
 80105a0:	f10d 0c10 	add.w	ip, sp, #16
 80105a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80105a8:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80105ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80105b0:	466e      	mov	r6, sp
 80105b2:	f8dc 3000 	ldr.w	r3, [ip]
 80105b6:	f8ce 3000 	str.w	r3, [lr]
 80105ba:	4630      	mov	r0, r6
 80105bc:	f002 f966 	bl	801288c <rmw_get_default_subscription_options>
 80105c0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80105c4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80105c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80105cc:	2270      	movs	r2, #112	; 0x70
 80105ce:	4629      	mov	r1, r5
 80105d0:	4620      	mov	r0, r4
 80105d2:	f006 fb48 	bl	8016c66 <memcpy>
 80105d6:	4620      	mov	r0, r4
 80105d8:	b00a      	add	sp, #40	; 0x28
 80105da:	bd70      	pop	{r4, r5, r6, pc}
 80105dc:	2000dae8 	.word	0x2000dae8
 80105e0:	08018000 	.word	0x08018000

080105e4 <rcl_take>:
 80105e4:	2800      	cmp	r0, #0
 80105e6:	d04a      	beq.n	801067e <rcl_take+0x9a>
 80105e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ec:	4604      	mov	r4, r0
 80105ee:	6800      	ldr	r0, [r0, #0]
 80105f0:	b0a4      	sub	sp, #144	; 0x90
 80105f2:	2800      	cmp	r0, #0
 80105f4:	d03b      	beq.n	801066e <rcl_take+0x8a>
 80105f6:	461f      	mov	r7, r3
 80105f8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d036      	beq.n	801066e <rcl_take+0x8a>
 8010600:	460e      	mov	r6, r1
 8010602:	2900      	cmp	r1, #0
 8010604:	d039      	beq.n	801067a <rcl_take+0x96>
 8010606:	4615      	mov	r5, r2
 8010608:	2a00      	cmp	r2, #0
 801060a:	d03c      	beq.n	8010686 <rcl_take+0xa2>
 801060c:	a802      	add	r0, sp, #8
 801060e:	f002 f9c7 	bl	80129a0 <rmw_get_zero_initialized_message_info>
 8010612:	f10d 0c08 	add.w	ip, sp, #8
 8010616:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801061a:	46ae      	mov	lr, r5
 801061c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010620:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010624:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010628:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801062c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010630:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010634:	f04f 0800 	mov.w	r8, #0
 8010638:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801063c:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8010640:	6822      	ldr	r2, [r4, #0]
 8010642:	462b      	mov	r3, r5
 8010644:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 8010648:	9700      	str	r7, [sp, #0]
 801064a:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 801064e:	4631      	mov	r1, r6
 8010650:	f003 fa2a 	bl	8013aa8 <rmw_take_with_info>
 8010654:	4603      	mov	r3, r0
 8010656:	b9c0      	cbnz	r0, 801068a <rcl_take+0xa6>
 8010658:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 801065c:	f240 1291 	movw	r2, #401	; 0x191
 8010660:	2900      	cmp	r1, #0
 8010662:	bf08      	it	eq
 8010664:	4613      	moveq	r3, r2
 8010666:	4618      	mov	r0, r3
 8010668:	b024      	add	sp, #144	; 0x90
 801066a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801066e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8010672:	4618      	mov	r0, r3
 8010674:	b024      	add	sp, #144	; 0x90
 8010676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801067a:	230b      	movs	r3, #11
 801067c:	e7f3      	b.n	8010666 <rcl_take+0x82>
 801067e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8010682:	4618      	mov	r0, r3
 8010684:	4770      	bx	lr
 8010686:	ad14      	add	r5, sp, #80	; 0x50
 8010688:	e7c0      	b.n	801060c <rcl_take+0x28>
 801068a:	f7ff f877 	bl	800f77c <rcl_convert_rmw_ret_to_rcl_ret>
 801068e:	4603      	mov	r3, r0
 8010690:	e7e9      	b.n	8010666 <rcl_take+0x82>
 8010692:	bf00      	nop

08010694 <rcl_subscription_get_rmw_handle>:
 8010694:	b118      	cbz	r0, 801069e <rcl_subscription_get_rmw_handle+0xa>
 8010696:	6800      	ldr	r0, [r0, #0]
 8010698:	b108      	cbz	r0, 801069e <rcl_subscription_get_rmw_handle+0xa>
 801069a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 801069e:	4770      	bx	lr

080106a0 <rcl_subscription_is_valid>:
 80106a0:	b130      	cbz	r0, 80106b0 <rcl_subscription_is_valid+0x10>
 80106a2:	6800      	ldr	r0, [r0, #0]
 80106a4:	b120      	cbz	r0, 80106b0 <rcl_subscription_is_valid+0x10>
 80106a6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80106aa:	3800      	subs	r0, #0
 80106ac:	bf18      	it	ne
 80106ae:	2001      	movne	r0, #1
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop

080106b4 <rcl_get_system_time>:
 80106b4:	4608      	mov	r0, r1
 80106b6:	f7fa b9ab 	b.w	800aa10 <rcutils_system_time_now>
 80106ba:	bf00      	nop

080106bc <rcl_get_steady_time>:
 80106bc:	4608      	mov	r0, r1
 80106be:	f7fa b9cf 	b.w	800aa60 <rcutils_steady_time_now>
 80106c2:	bf00      	nop

080106c4 <rcl_get_ros_time>:
 80106c4:	7a03      	ldrb	r3, [r0, #8]
 80106c6:	b510      	push	{r4, lr}
 80106c8:	460c      	mov	r4, r1
 80106ca:	b133      	cbz	r3, 80106da <rcl_get_ros_time+0x16>
 80106cc:	2105      	movs	r1, #5
 80106ce:	f001 fd4f 	bl	8012170 <__atomic_load_8>
 80106d2:	e9c4 0100 	strd	r0, r1, [r4]
 80106d6:	2000      	movs	r0, #0
 80106d8:	bd10      	pop	{r4, pc}
 80106da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106de:	4608      	mov	r0, r1
 80106e0:	f7fa b996 	b.w	800aa10 <rcutils_system_time_now>

080106e4 <rcl_clock_init>:
 80106e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e6:	4605      	mov	r5, r0
 80106e8:	4610      	mov	r0, r2
 80106ea:	4614      	mov	r4, r2
 80106ec:	460e      	mov	r6, r1
 80106ee:	f7fa f94f 	bl	800a990 <rcutils_allocator_is_valid>
 80106f2:	b128      	cbz	r0, 8010700 <rcl_clock_init+0x1c>
 80106f4:	2d03      	cmp	r5, #3
 80106f6:	d803      	bhi.n	8010700 <rcl_clock_init+0x1c>
 80106f8:	e8df f005 	tbb	[pc, r5]
 80106fc:	06532e1d 	.word	0x06532e1d
 8010700:	f04f 0c0b 	mov.w	ip, #11
 8010704:	4660      	mov	r0, ip
 8010706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010708:	2e00      	cmp	r6, #0
 801070a:	d0f9      	beq.n	8010700 <rcl_clock_init+0x1c>
 801070c:	2c00      	cmp	r4, #0
 801070e:	d0f7      	beq.n	8010700 <rcl_clock_init+0x1c>
 8010710:	2300      	movs	r3, #0
 8010712:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010716:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 80107cc <rcl_clock_init+0xe8>
 801071a:	6133      	str	r3, [r6, #16]
 801071c:	f106 0514 	add.w	r5, r6, #20
 8010720:	469c      	mov	ip, r3
 8010722:	2703      	movs	r7, #3
 8010724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010728:	6823      	ldr	r3, [r4, #0]
 801072a:	602b      	str	r3, [r5, #0]
 801072c:	7037      	strb	r7, [r6, #0]
 801072e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010732:	4660      	mov	r0, ip
 8010734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010736:	2e00      	cmp	r6, #0
 8010738:	d0e2      	beq.n	8010700 <rcl_clock_init+0x1c>
 801073a:	2300      	movs	r3, #0
 801073c:	7033      	strb	r3, [r6, #0]
 801073e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010742:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010746:	469c      	mov	ip, r3
 8010748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801074a:	f106 0514 	add.w	r5, r6, #20
 801074e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010750:	6823      	ldr	r3, [r4, #0]
 8010752:	602b      	str	r3, [r5, #0]
 8010754:	4660      	mov	r0, ip
 8010756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010758:	2e00      	cmp	r6, #0
 801075a:	d0d1      	beq.n	8010700 <rcl_clock_init+0x1c>
 801075c:	2c00      	cmp	r4, #0
 801075e:	d0cf      	beq.n	8010700 <rcl_clock_init+0x1c>
 8010760:	2700      	movs	r7, #0
 8010762:	7037      	strb	r7, [r6, #0]
 8010764:	46a4      	mov	ip, r4
 8010766:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801076a:	f106 0514 	add.w	r5, r6, #20
 801076e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010772:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010778:	f8dc 3000 	ldr.w	r3, [ip]
 801077c:	602b      	str	r3, [r5, #0]
 801077e:	6921      	ldr	r1, [r4, #16]
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	2010      	movs	r0, #16
 8010784:	4798      	blx	r3
 8010786:	6130      	str	r0, [r6, #16]
 8010788:	b1d0      	cbz	r0, 80107c0 <rcl_clock_init+0xdc>
 801078a:	2200      	movs	r2, #0
 801078c:	2300      	movs	r3, #0
 801078e:	e9c0 2300 	strd	r2, r3, [r0]
 8010792:	2301      	movs	r3, #1
 8010794:	7207      	strb	r7, [r0, #8]
 8010796:	4a0c      	ldr	r2, [pc, #48]	; (80107c8 <rcl_clock_init+0xe4>)
 8010798:	7033      	strb	r3, [r6, #0]
 801079a:	46bc      	mov	ip, r7
 801079c:	60f2      	str	r2, [r6, #12]
 801079e:	4660      	mov	r0, ip
 80107a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107a2:	2e00      	cmp	r6, #0
 80107a4:	d0ac      	beq.n	8010700 <rcl_clock_init+0x1c>
 80107a6:	2c00      	cmp	r4, #0
 80107a8:	d0aa      	beq.n	8010700 <rcl_clock_init+0x1c>
 80107aa:	2300      	movs	r3, #0
 80107ac:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80107b0:	f8df e01c 	ldr.w	lr, [pc, #28]	; 80107d0 <rcl_clock_init+0xec>
 80107b4:	6133      	str	r3, [r6, #16]
 80107b6:	f106 0514 	add.w	r5, r6, #20
 80107ba:	469c      	mov	ip, r3
 80107bc:	2702      	movs	r7, #2
 80107be:	e7b1      	b.n	8010724 <rcl_clock_init+0x40>
 80107c0:	f04f 0c0a 	mov.w	ip, #10
 80107c4:	e79e      	b.n	8010704 <rcl_clock_init+0x20>
 80107c6:	bf00      	nop
 80107c8:	080106c5 	.word	0x080106c5
 80107cc:	080106bd 	.word	0x080106bd
 80107d0:	080106b5 	.word	0x080106b5

080107d4 <rcl_clock_get_now>:
 80107d4:	b140      	cbz	r0, 80107e8 <rcl_clock_get_now+0x14>
 80107d6:	b139      	cbz	r1, 80107e8 <rcl_clock_get_now+0x14>
 80107d8:	7803      	ldrb	r3, [r0, #0]
 80107da:	b11b      	cbz	r3, 80107e4 <rcl_clock_get_now+0x10>
 80107dc:	68c3      	ldr	r3, [r0, #12]
 80107de:	b10b      	cbz	r3, 80107e4 <rcl_clock_get_now+0x10>
 80107e0:	6900      	ldr	r0, [r0, #16]
 80107e2:	4718      	bx	r3
 80107e4:	2001      	movs	r0, #1
 80107e6:	4770      	bx	lr
 80107e8:	200b      	movs	r0, #11
 80107ea:	4770      	bx	lr

080107ec <rcl_timer_call>:
 80107ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f0:	b087      	sub	sp, #28
 80107f2:	2800      	cmp	r0, #0
 80107f4:	d06d      	beq.n	80108d2 <rcl_timer_call+0xe6>
 80107f6:	6803      	ldr	r3, [r0, #0]
 80107f8:	4604      	mov	r4, r0
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d063      	beq.n	80108c6 <rcl_timer_call+0xda>
 80107fe:	f3bf 8f5b 	dmb	ish
 8010802:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010806:	f3bf 8f5b 	dmb	ish
 801080a:	2b00      	cmp	r3, #0
 801080c:	d150      	bne.n	80108b0 <rcl_timer_call+0xc4>
 801080e:	6803      	ldr	r3, [r0, #0]
 8010810:	a904      	add	r1, sp, #16
 8010812:	6818      	ldr	r0, [r3, #0]
 8010814:	f7ff ffde 	bl	80107d4 <rcl_clock_get_now>
 8010818:	4605      	mov	r5, r0
 801081a:	2800      	cmp	r0, #0
 801081c:	d14a      	bne.n	80108b4 <rcl_timer_call+0xc8>
 801081e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010822:	2b00      	cmp	r3, #0
 8010824:	db4a      	blt.n	80108bc <rcl_timer_call+0xd0>
 8010826:	6820      	ldr	r0, [r4, #0]
 8010828:	f04f 0a05 	mov.w	sl, #5
 801082c:	f8cd a000 	str.w	sl, [sp]
 8010830:	3020      	adds	r0, #32
 8010832:	f001 fd09 	bl	8012248 <__atomic_exchange_8>
 8010836:	6823      	ldr	r3, [r4, #0]
 8010838:	f3bf 8f5b 	dmb	ish
 801083c:	4680      	mov	r8, r0
 801083e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8010842:	f3bf 8f5b 	dmb	ish
 8010846:	6820      	ldr	r0, [r4, #0]
 8010848:	4689      	mov	r9, r1
 801084a:	3028      	adds	r0, #40	; 0x28
 801084c:	4651      	mov	r1, sl
 801084e:	f001 fc8f 	bl	8012170 <__atomic_load_8>
 8010852:	4606      	mov	r6, r0
 8010854:	6820      	ldr	r0, [r4, #0]
 8010856:	460f      	mov	r7, r1
 8010858:	3018      	adds	r0, #24
 801085a:	4651      	mov	r1, sl
 801085c:	f001 fc88 	bl	8012170 <__atomic_load_8>
 8010860:	1836      	adds	r6, r6, r0
 8010862:	4602      	mov	r2, r0
 8010864:	4682      	mov	sl, r0
 8010866:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801086a:	eb47 0701 	adc.w	r7, r7, r1
 801086e:	4286      	cmp	r6, r0
 8010870:	460b      	mov	r3, r1
 8010872:	eb77 010c 	sbcs.w	r1, r7, ip
 8010876:	da04      	bge.n	8010882 <rcl_timer_call+0x96>
 8010878:	ea53 0102 	orrs.w	r1, r3, r2
 801087c:	d12e      	bne.n	80108dc <rcl_timer_call+0xf0>
 801087e:	4606      	mov	r6, r0
 8010880:	4667      	mov	r7, ip
 8010882:	6820      	ldr	r0, [r4, #0]
 8010884:	2105      	movs	r1, #5
 8010886:	4632      	mov	r2, r6
 8010888:	463b      	mov	r3, r7
 801088a:	3028      	adds	r0, #40	; 0x28
 801088c:	9100      	str	r1, [sp, #0]
 801088e:	f001 fca5 	bl	80121dc <__atomic_store_8>
 8010892:	f1bb 0f00 	cmp.w	fp, #0
 8010896:	d00d      	beq.n	80108b4 <rcl_timer_call+0xc8>
 8010898:	9a04      	ldr	r2, [sp, #16]
 801089a:	9b05      	ldr	r3, [sp, #20]
 801089c:	ebb2 0208 	subs.w	r2, r2, r8
 80108a0:	4620      	mov	r0, r4
 80108a2:	eb63 0309 	sbc.w	r3, r3, r9
 80108a6:	47d8      	blx	fp
 80108a8:	4628      	mov	r0, r5
 80108aa:	b007      	add	sp, #28
 80108ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b0:	f240 3521 	movw	r5, #801	; 0x321
 80108b4:	4628      	mov	r0, r5
 80108b6:	b007      	add	sp, #28
 80108b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108bc:	2501      	movs	r5, #1
 80108be:	4628      	mov	r0, r5
 80108c0:	b007      	add	sp, #28
 80108c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108c6:	f44f 7548 	mov.w	r5, #800	; 0x320
 80108ca:	4628      	mov	r0, r5
 80108cc:	b007      	add	sp, #28
 80108ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108d2:	250b      	movs	r5, #11
 80108d4:	4628      	mov	r0, r5
 80108d6:	b007      	add	sp, #28
 80108d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108dc:	1b80      	subs	r0, r0, r6
 80108de:	eb6c 0107 	sbc.w	r1, ip, r7
 80108e2:	3801      	subs	r0, #1
 80108e4:	f161 0100 	sbc.w	r1, r1, #0
 80108e8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80108ec:	f7f0 f8fe 	bl	8000aec <__aeabi_ldivmod>
 80108f0:	9b02      	ldr	r3, [sp, #8]
 80108f2:	3001      	adds	r0, #1
 80108f4:	f141 0100 	adc.w	r1, r1, #0
 80108f8:	fb00 f303 	mul.w	r3, r0, r3
 80108fc:	fb01 330a 	mla	r3, r1, sl, r3
 8010900:	fba0 0a0a 	umull	r0, sl, r0, sl
 8010904:	1986      	adds	r6, r0, r6
 8010906:	4453      	add	r3, sl
 8010908:	eb43 0707 	adc.w	r7, r3, r7
 801090c:	e7b9      	b.n	8010882 <rcl_timer_call+0x96>
 801090e:	bf00      	nop

08010910 <rcl_timer_is_ready>:
 8010910:	b570      	push	{r4, r5, r6, lr}
 8010912:	b082      	sub	sp, #8
 8010914:	b378      	cbz	r0, 8010976 <rcl_timer_is_ready+0x66>
 8010916:	6803      	ldr	r3, [r0, #0]
 8010918:	4604      	mov	r4, r0
 801091a:	b383      	cbz	r3, 801097e <rcl_timer_is_ready+0x6e>
 801091c:	460d      	mov	r5, r1
 801091e:	b351      	cbz	r1, 8010976 <rcl_timer_is_ready+0x66>
 8010920:	f3bf 8f5b 	dmb	ish
 8010924:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010928:	f3bf 8f5b 	dmb	ish
 801092c:	b953      	cbnz	r3, 8010944 <rcl_timer_is_ready+0x34>
 801092e:	6803      	ldr	r3, [r0, #0]
 8010930:	4669      	mov	r1, sp
 8010932:	6818      	ldr	r0, [r3, #0]
 8010934:	f7ff ff4e 	bl	80107d4 <rcl_clock_get_now>
 8010938:	4606      	mov	r6, r0
 801093a:	b140      	cbz	r0, 801094e <rcl_timer_is_ready+0x3e>
 801093c:	f240 3321 	movw	r3, #801	; 0x321
 8010940:	4298      	cmp	r0, r3
 8010942:	d101      	bne.n	8010948 <rcl_timer_is_ready+0x38>
 8010944:	2600      	movs	r6, #0
 8010946:	702e      	strb	r6, [r5, #0]
 8010948:	4630      	mov	r0, r6
 801094a:	b002      	add	sp, #8
 801094c:	bd70      	pop	{r4, r5, r6, pc}
 801094e:	6820      	ldr	r0, [r4, #0]
 8010950:	2105      	movs	r1, #5
 8010952:	3028      	adds	r0, #40	; 0x28
 8010954:	f001 fc0c 	bl	8012170 <__atomic_load_8>
 8010958:	9b00      	ldr	r3, [sp, #0]
 801095a:	1ac0      	subs	r0, r0, r3
 801095c:	9b01      	ldr	r3, [sp, #4]
 801095e:	eb61 0103 	sbc.w	r1, r1, r3
 8010962:	2801      	cmp	r0, #1
 8010964:	f171 0300 	sbcs.w	r3, r1, #0
 8010968:	bfb4      	ite	lt
 801096a:	2301      	movlt	r3, #1
 801096c:	2300      	movge	r3, #0
 801096e:	4630      	mov	r0, r6
 8010970:	702b      	strb	r3, [r5, #0]
 8010972:	b002      	add	sp, #8
 8010974:	bd70      	pop	{r4, r5, r6, pc}
 8010976:	260b      	movs	r6, #11
 8010978:	4630      	mov	r0, r6
 801097a:	b002      	add	sp, #8
 801097c:	bd70      	pop	{r4, r5, r6, pc}
 801097e:	f44f 7648 	mov.w	r6, #800	; 0x320
 8010982:	e7e1      	b.n	8010948 <rcl_timer_is_ready+0x38>

08010984 <rcl_timer_get_time_until_next_call>:
 8010984:	b570      	push	{r4, r5, r6, lr}
 8010986:	b082      	sub	sp, #8
 8010988:	b330      	cbz	r0, 80109d8 <rcl_timer_get_time_until_next_call+0x54>
 801098a:	6803      	ldr	r3, [r0, #0]
 801098c:	4604      	mov	r4, r0
 801098e:	b33b      	cbz	r3, 80109e0 <rcl_timer_get_time_until_next_call+0x5c>
 8010990:	460d      	mov	r5, r1
 8010992:	b309      	cbz	r1, 80109d8 <rcl_timer_get_time_until_next_call+0x54>
 8010994:	f3bf 8f5b 	dmb	ish
 8010998:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801099c:	f3bf 8f5b 	dmb	ish
 80109a0:	b9ab      	cbnz	r3, 80109ce <rcl_timer_get_time_until_next_call+0x4a>
 80109a2:	6803      	ldr	r3, [r0, #0]
 80109a4:	4669      	mov	r1, sp
 80109a6:	6818      	ldr	r0, [r3, #0]
 80109a8:	f7ff ff14 	bl	80107d4 <rcl_clock_get_now>
 80109ac:	4606      	mov	r6, r0
 80109ae:	b958      	cbnz	r0, 80109c8 <rcl_timer_get_time_until_next_call+0x44>
 80109b0:	6820      	ldr	r0, [r4, #0]
 80109b2:	2105      	movs	r1, #5
 80109b4:	3028      	adds	r0, #40	; 0x28
 80109b6:	f001 fbdb 	bl	8012170 <__atomic_load_8>
 80109ba:	9b00      	ldr	r3, [sp, #0]
 80109bc:	1ac0      	subs	r0, r0, r3
 80109be:	9b01      	ldr	r3, [sp, #4]
 80109c0:	6028      	str	r0, [r5, #0]
 80109c2:	eb61 0103 	sbc.w	r1, r1, r3
 80109c6:	6069      	str	r1, [r5, #4]
 80109c8:	4630      	mov	r0, r6
 80109ca:	b002      	add	sp, #8
 80109cc:	bd70      	pop	{r4, r5, r6, pc}
 80109ce:	f240 3621 	movw	r6, #801	; 0x321
 80109d2:	4630      	mov	r0, r6
 80109d4:	b002      	add	sp, #8
 80109d6:	bd70      	pop	{r4, r5, r6, pc}
 80109d8:	260b      	movs	r6, #11
 80109da:	4630      	mov	r0, r6
 80109dc:	b002      	add	sp, #8
 80109de:	bd70      	pop	{r4, r5, r6, pc}
 80109e0:	f44f 7648 	mov.w	r6, #800	; 0x320
 80109e4:	e7f0      	b.n	80109c8 <rcl_timer_get_time_until_next_call+0x44>
 80109e6:	bf00      	nop

080109e8 <rcl_timer_get_guard_condition>:
 80109e8:	b130      	cbz	r0, 80109f8 <rcl_timer_get_guard_condition+0x10>
 80109ea:	6800      	ldr	r0, [r0, #0]
 80109ec:	b120      	cbz	r0, 80109f8 <rcl_timer_get_guard_condition+0x10>
 80109ee:	68c3      	ldr	r3, [r0, #12]
 80109f0:	b10b      	cbz	r3, 80109f6 <rcl_timer_get_guard_condition+0xe>
 80109f2:	3008      	adds	r0, #8
 80109f4:	4770      	bx	lr
 80109f6:	4618      	mov	r0, r3
 80109f8:	4770      	bx	lr
 80109fa:	bf00      	nop

080109fc <rcl_validate_enclave_name_with_size>:
 80109fc:	b378      	cbz	r0, 8010a5e <rcl_validate_enclave_name_with_size+0x62>
 80109fe:	b570      	push	{r4, r5, r6, lr}
 8010a00:	4615      	mov	r5, r2
 8010a02:	b0c2      	sub	sp, #264	; 0x108
 8010a04:	b302      	cbz	r2, 8010a48 <rcl_validate_enclave_name_with_size+0x4c>
 8010a06:	461e      	mov	r6, r3
 8010a08:	466a      	mov	r2, sp
 8010a0a:	ab01      	add	r3, sp, #4
 8010a0c:	460c      	mov	r4, r1
 8010a0e:	f002 f845 	bl	8012a9c <rmw_validate_namespace_with_size>
 8010a12:	4684      	mov	ip, r0
 8010a14:	b9e8      	cbnz	r0, 8010a52 <rcl_validate_enclave_name_with_size+0x56>
 8010a16:	9b00      	ldr	r3, [sp, #0]
 8010a18:	b923      	cbnz	r3, 8010a24 <rcl_validate_enclave_name_with_size+0x28>
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	602b      	str	r3, [r5, #0]
 8010a1e:	4660      	mov	r0, ip
 8010a20:	b042      	add	sp, #264	; 0x108
 8010a22:	bd70      	pop	{r4, r5, r6, pc}
 8010a24:	2b07      	cmp	r3, #7
 8010a26:	d007      	beq.n	8010a38 <rcl_validate_enclave_name_with_size+0x3c>
 8010a28:	1e5a      	subs	r2, r3, #1
 8010a2a:	2a05      	cmp	r2, #5
 8010a2c:	d833      	bhi.n	8010a96 <rcl_validate_enclave_name_with_size+0x9a>
 8010a2e:	e8df f002 	tbb	[pc, r2]
 8010a32:	2c2f      	.short	0x2c2f
 8010a34:	1a232629 	.word	0x1a232629
 8010a38:	2cff      	cmp	r4, #255	; 0xff
 8010a3a:	d9ee      	bls.n	8010a1a <rcl_validate_enclave_name_with_size+0x1e>
 8010a3c:	602b      	str	r3, [r5, #0]
 8010a3e:	2e00      	cmp	r6, #0
 8010a40:	d0ed      	beq.n	8010a1e <rcl_validate_enclave_name_with_size+0x22>
 8010a42:	23fe      	movs	r3, #254	; 0xfe
 8010a44:	6033      	str	r3, [r6, #0]
 8010a46:	e7ea      	b.n	8010a1e <rcl_validate_enclave_name_with_size+0x22>
 8010a48:	f04f 0c0b 	mov.w	ip, #11
 8010a4c:	4660      	mov	r0, ip
 8010a4e:	b042      	add	sp, #264	; 0x108
 8010a50:	bd70      	pop	{r4, r5, r6, pc}
 8010a52:	f7fe fe93 	bl	800f77c <rcl_convert_rmw_ret_to_rcl_ret>
 8010a56:	4684      	mov	ip, r0
 8010a58:	4660      	mov	r0, ip
 8010a5a:	b042      	add	sp, #264	; 0x108
 8010a5c:	bd70      	pop	{r4, r5, r6, pc}
 8010a5e:	f04f 0c0b 	mov.w	ip, #11
 8010a62:	4660      	mov	r0, ip
 8010a64:	4770      	bx	lr
 8010a66:	2306      	movs	r3, #6
 8010a68:	602b      	str	r3, [r5, #0]
 8010a6a:	2e00      	cmp	r6, #0
 8010a6c:	d0d7      	beq.n	8010a1e <rcl_validate_enclave_name_with_size+0x22>
 8010a6e:	9b01      	ldr	r3, [sp, #4]
 8010a70:	6033      	str	r3, [r6, #0]
 8010a72:	4660      	mov	r0, ip
 8010a74:	b042      	add	sp, #264	; 0x108
 8010a76:	bd70      	pop	{r4, r5, r6, pc}
 8010a78:	2305      	movs	r3, #5
 8010a7a:	602b      	str	r3, [r5, #0]
 8010a7c:	e7f5      	b.n	8010a6a <rcl_validate_enclave_name_with_size+0x6e>
 8010a7e:	2304      	movs	r3, #4
 8010a80:	602b      	str	r3, [r5, #0]
 8010a82:	e7f2      	b.n	8010a6a <rcl_validate_enclave_name_with_size+0x6e>
 8010a84:	2303      	movs	r3, #3
 8010a86:	602b      	str	r3, [r5, #0]
 8010a88:	e7ef      	b.n	8010a6a <rcl_validate_enclave_name_with_size+0x6e>
 8010a8a:	2302      	movs	r3, #2
 8010a8c:	602b      	str	r3, [r5, #0]
 8010a8e:	e7ec      	b.n	8010a6a <rcl_validate_enclave_name_with_size+0x6e>
 8010a90:	2301      	movs	r3, #1
 8010a92:	602b      	str	r3, [r5, #0]
 8010a94:	e7e9      	b.n	8010a6a <rcl_validate_enclave_name_with_size+0x6e>
 8010a96:	4a04      	ldr	r2, [pc, #16]	; (8010aa8 <rcl_validate_enclave_name_with_size+0xac>)
 8010a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010a9c:	a802      	add	r0, sp, #8
 8010a9e:	f001 fd21 	bl	80124e4 <rcutils_snprintf>
 8010aa2:	f04f 0c01 	mov.w	ip, #1
 8010aa6:	e7ba      	b.n	8010a1e <rcl_validate_enclave_name_with_size+0x22>
 8010aa8:	08018050 	.word	0x08018050

08010aac <rcl_validate_enclave_name>:
 8010aac:	b168      	cbz	r0, 8010aca <rcl_validate_enclave_name+0x1e>
 8010aae:	b570      	push	{r4, r5, r6, lr}
 8010ab0:	460d      	mov	r5, r1
 8010ab2:	4616      	mov	r6, r2
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	f7ef fb9d 	bl	80001f4 <strlen>
 8010aba:	4633      	mov	r3, r6
 8010abc:	4601      	mov	r1, r0
 8010abe:	462a      	mov	r2, r5
 8010ac0:	4620      	mov	r0, r4
 8010ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ac6:	f7ff bf99 	b.w	80109fc <rcl_validate_enclave_name_with_size>
 8010aca:	200b      	movs	r0, #11
 8010acc:	4770      	bx	lr
 8010ace:	bf00      	nop

08010ad0 <rcl_get_zero_initialized_wait_set>:
 8010ad0:	b510      	push	{r4, lr}
 8010ad2:	4c08      	ldr	r4, [pc, #32]	; (8010af4 <rcl_get_zero_initialized_wait_set+0x24>)
 8010ad4:	4686      	mov	lr, r0
 8010ad6:	4684      	mov	ip, r0
 8010ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ada:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ae0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ae6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010aea:	6823      	ldr	r3, [r4, #0]
 8010aec:	f8cc 3000 	str.w	r3, [ip]
 8010af0:	4670      	mov	r0, lr
 8010af2:	bd10      	pop	{r4, pc}
 8010af4:	080180b0 	.word	0x080180b0

08010af8 <rcl_wait_set_is_valid>:
 8010af8:	b118      	cbz	r0, 8010b02 <rcl_wait_set_is_valid+0xa>
 8010afa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8010afc:	3800      	subs	r0, #0
 8010afe:	bf18      	it	ne
 8010b00:	2001      	movne	r0, #1
 8010b02:	4770      	bx	lr

08010b04 <rcl_wait_set_fini>:
 8010b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b08:	b082      	sub	sp, #8
 8010b0a:	2800      	cmp	r0, #0
 8010b0c:	f000 8095 	beq.w	8010c3a <rcl_wait_set_fini+0x136>
 8010b10:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8010b12:	4604      	mov	r4, r0
 8010b14:	2e00      	cmp	r6, #0
 8010b16:	f000 808c 	beq.w	8010c32 <rcl_wait_set_fini+0x12e>
 8010b1a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8010b1c:	f003 f9b2 	bl	8013e84 <rmw_destroy_wait_set>
 8010b20:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010b22:	1e06      	subs	r6, r0, #0
 8010b24:	bf18      	it	ne
 8010b26:	f44f 7661 	movne.w	r6, #900	; 0x384
 8010b2a:	2d00      	cmp	r5, #0
 8010b2c:	f000 8081 	beq.w	8010c32 <rcl_wait_set_fini+0x12e>
 8010b30:	6820      	ldr	r0, [r4, #0]
 8010b32:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8010b36:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010b38:	2700      	movs	r7, #0
 8010b3a:	6067      	str	r7, [r4, #4]
 8010b3c:	602f      	str	r7, [r5, #0]
 8010b3e:	b120      	cbz	r0, 8010b4a <rcl_wait_set_fini+0x46>
 8010b40:	9101      	str	r1, [sp, #4]
 8010b42:	47c0      	blx	r8
 8010b44:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010b46:	9901      	ldr	r1, [sp, #4]
 8010b48:	6027      	str	r7, [r4, #0]
 8010b4a:	68a8      	ldr	r0, [r5, #8]
 8010b4c:	b120      	cbz	r0, 8010b58 <rcl_wait_set_fini+0x54>
 8010b4e:	47c0      	blx	r8
 8010b50:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010b52:	2300      	movs	r3, #0
 8010b54:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010b58:	68a0      	ldr	r0, [r4, #8]
 8010b5a:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010b5c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010b5e:	f04f 0800 	mov.w	r8, #0
 8010b62:	f8c4 800c 	str.w	r8, [r4, #12]
 8010b66:	f8c5 800c 	str.w	r8, [r5, #12]
 8010b6a:	b128      	cbz	r0, 8010b78 <rcl_wait_set_fini+0x74>
 8010b6c:	47b8      	blx	r7
 8010b6e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010b70:	f8c4 8008 	str.w	r8, [r4, #8]
 8010b74:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010b76:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010b78:	6968      	ldr	r0, [r5, #20]
 8010b7a:	f04f 0800 	mov.w	r8, #0
 8010b7e:	f8c5 8010 	str.w	r8, [r5, #16]
 8010b82:	b128      	cbz	r0, 8010b90 <rcl_wait_set_fini+0x8c>
 8010b84:	47b8      	blx	r7
 8010b86:	f8c5 8014 	str.w	r8, [r5, #20]
 8010b8a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010b8c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010b8e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010b90:	6920      	ldr	r0, [r4, #16]
 8010b92:	f04f 0800 	mov.w	r8, #0
 8010b96:	f8c4 8014 	str.w	r8, [r4, #20]
 8010b9a:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8010b9e:	b128      	cbz	r0, 8010bac <rcl_wait_set_fini+0xa8>
 8010ba0:	47b8      	blx	r7
 8010ba2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010ba4:	f8c4 8010 	str.w	r8, [r4, #16]
 8010ba8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010baa:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010bac:	69a0      	ldr	r0, [r4, #24]
 8010bae:	f04f 0800 	mov.w	r8, #0
 8010bb2:	f8c4 801c 	str.w	r8, [r4, #28]
 8010bb6:	f8c5 8018 	str.w	r8, [r5, #24]
 8010bba:	b128      	cbz	r0, 8010bc8 <rcl_wait_set_fini+0xc4>
 8010bbc:	9101      	str	r1, [sp, #4]
 8010bbe:	47b8      	blx	r7
 8010bc0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010bc2:	9901      	ldr	r1, [sp, #4]
 8010bc4:	f8c4 8018 	str.w	r8, [r4, #24]
 8010bc8:	6a28      	ldr	r0, [r5, #32]
 8010bca:	b120      	cbz	r0, 8010bd6 <rcl_wait_set_fini+0xd2>
 8010bcc:	47b8      	blx	r7
 8010bce:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8010bd6:	6a20      	ldr	r0, [r4, #32]
 8010bd8:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8010bdc:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010bde:	2700      	movs	r7, #0
 8010be0:	6267      	str	r7, [r4, #36]	; 0x24
 8010be2:	626f      	str	r7, [r5, #36]	; 0x24
 8010be4:	b120      	cbz	r0, 8010bf0 <rcl_wait_set_fini+0xec>
 8010be6:	9101      	str	r1, [sp, #4]
 8010be8:	47c0      	blx	r8
 8010bea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010bec:	9901      	ldr	r1, [sp, #4]
 8010bee:	6227      	str	r7, [r4, #32]
 8010bf0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8010bf2:	b120      	cbz	r0, 8010bfe <rcl_wait_set_fini+0xfa>
 8010bf4:	47c0      	blx	r8
 8010bf6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8010bfe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010c00:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8010c04:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010c06:	2700      	movs	r7, #0
 8010c08:	62e7      	str	r7, [r4, #44]	; 0x2c
 8010c0a:	632f      	str	r7, [r5, #48]	; 0x30
 8010c0c:	b120      	cbz	r0, 8010c18 <rcl_wait_set_fini+0x114>
 8010c0e:	9101      	str	r1, [sp, #4]
 8010c10:	47c0      	blx	r8
 8010c12:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010c14:	9901      	ldr	r1, [sp, #4]
 8010c16:	62a7      	str	r7, [r4, #40]	; 0x28
 8010c18:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8010c1a:	b120      	cbz	r0, 8010c26 <rcl_wait_set_fini+0x122>
 8010c1c:	47c0      	blx	r8
 8010c1e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010c20:	2300      	movs	r3, #0
 8010c22:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8010c26:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8010c28:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	4798      	blx	r3
 8010c2e:	2300      	movs	r3, #0
 8010c30:	6323      	str	r3, [r4, #48]	; 0x30
 8010c32:	4630      	mov	r0, r6
 8010c34:	b002      	add	sp, #8
 8010c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c3a:	260b      	movs	r6, #11
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	b002      	add	sp, #8
 8010c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010c44 <rcl_wait_set_add_subscription>:
 8010c44:	b318      	cbz	r0, 8010c8e <rcl_wait_set_add_subscription+0x4a>
 8010c46:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010c48:	b570      	push	{r4, r5, r6, lr}
 8010c4a:	4604      	mov	r4, r0
 8010c4c:	b30b      	cbz	r3, 8010c92 <rcl_wait_set_add_subscription+0x4e>
 8010c4e:	b319      	cbz	r1, 8010c98 <rcl_wait_set_add_subscription+0x54>
 8010c50:	681d      	ldr	r5, [r3, #0]
 8010c52:	6840      	ldr	r0, [r0, #4]
 8010c54:	4285      	cmp	r5, r0
 8010c56:	d217      	bcs.n	8010c88 <rcl_wait_set_add_subscription+0x44>
 8010c58:	6820      	ldr	r0, [r4, #0]
 8010c5a:	1c6e      	adds	r6, r5, #1
 8010c5c:	601e      	str	r6, [r3, #0]
 8010c5e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010c62:	b102      	cbz	r2, 8010c66 <rcl_wait_set_add_subscription+0x22>
 8010c64:	6015      	str	r5, [r2, #0]
 8010c66:	4608      	mov	r0, r1
 8010c68:	f7ff fd14 	bl	8010694 <rcl_subscription_get_rmw_handle>
 8010c6c:	b150      	cbz	r0, 8010c84 <rcl_wait_set_add_subscription+0x40>
 8010c6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010c70:	6842      	ldr	r2, [r0, #4]
 8010c72:	689b      	ldr	r3, [r3, #8]
 8010c74:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010c78:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010c7a:	6853      	ldr	r3, [r2, #4]
 8010c7c:	3301      	adds	r3, #1
 8010c7e:	2000      	movs	r0, #0
 8010c80:	6053      	str	r3, [r2, #4]
 8010c82:	bd70      	pop	{r4, r5, r6, pc}
 8010c84:	2001      	movs	r0, #1
 8010c86:	bd70      	pop	{r4, r5, r6, pc}
 8010c88:	f240 3086 	movw	r0, #902	; 0x386
 8010c8c:	bd70      	pop	{r4, r5, r6, pc}
 8010c8e:	200b      	movs	r0, #11
 8010c90:	4770      	bx	lr
 8010c92:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010c96:	bd70      	pop	{r4, r5, r6, pc}
 8010c98:	200b      	movs	r0, #11
 8010c9a:	bd70      	pop	{r4, r5, r6, pc}

08010c9c <rcl_wait_set_clear>:
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	d073      	beq.n	8010d88 <rcl_wait_set_clear+0xec>
 8010ca0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010ca2:	b510      	push	{r4, lr}
 8010ca4:	4604      	mov	r4, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d070      	beq.n	8010d8c <rcl_wait_set_clear+0xf0>
 8010caa:	6800      	ldr	r0, [r0, #0]
 8010cac:	b138      	cbz	r0, 8010cbe <rcl_wait_set_clear+0x22>
 8010cae:	6862      	ldr	r2, [r4, #4]
 8010cb0:	2100      	movs	r1, #0
 8010cb2:	0092      	lsls	r2, r2, #2
 8010cb4:	f005 ff0e 	bl	8016ad4 <memset>
 8010cb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010cba:	2200      	movs	r2, #0
 8010cbc:	601a      	str	r2, [r3, #0]
 8010cbe:	68a0      	ldr	r0, [r4, #8]
 8010cc0:	b138      	cbz	r0, 8010cd2 <rcl_wait_set_clear+0x36>
 8010cc2:	68e2      	ldr	r2, [r4, #12]
 8010cc4:	2100      	movs	r1, #0
 8010cc6:	0092      	lsls	r2, r2, #2
 8010cc8:	f005 ff04 	bl	8016ad4 <memset>
 8010ccc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010cce:	2200      	movs	r2, #0
 8010cd0:	60da      	str	r2, [r3, #12]
 8010cd2:	69a0      	ldr	r0, [r4, #24]
 8010cd4:	b138      	cbz	r0, 8010ce6 <rcl_wait_set_clear+0x4a>
 8010cd6:	69e2      	ldr	r2, [r4, #28]
 8010cd8:	2100      	movs	r1, #0
 8010cda:	0092      	lsls	r2, r2, #2
 8010cdc:	f005 fefa 	bl	8016ad4 <memset>
 8010ce0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	619a      	str	r2, [r3, #24]
 8010ce6:	6a20      	ldr	r0, [r4, #32]
 8010ce8:	b138      	cbz	r0, 8010cfa <rcl_wait_set_clear+0x5e>
 8010cea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010cec:	2100      	movs	r1, #0
 8010cee:	0092      	lsls	r2, r2, #2
 8010cf0:	f005 fef0 	bl	8016ad4 <memset>
 8010cf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	625a      	str	r2, [r3, #36]	; 0x24
 8010cfa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010cfc:	b138      	cbz	r0, 8010d0e <rcl_wait_set_clear+0x72>
 8010cfe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010d00:	2100      	movs	r1, #0
 8010d02:	0092      	lsls	r2, r2, #2
 8010d04:	f005 fee6 	bl	8016ad4 <memset>
 8010d08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8010d0e:	6920      	ldr	r0, [r4, #16]
 8010d10:	b138      	cbz	r0, 8010d22 <rcl_wait_set_clear+0x86>
 8010d12:	6962      	ldr	r2, [r4, #20]
 8010d14:	2100      	movs	r1, #0
 8010d16:	0092      	lsls	r2, r2, #2
 8010d18:	f005 fedc 	bl	8016ad4 <memset>
 8010d1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d1e:	2200      	movs	r2, #0
 8010d20:	641a      	str	r2, [r3, #64]	; 0x40
 8010d22:	6898      	ldr	r0, [r3, #8]
 8010d24:	b138      	cbz	r0, 8010d36 <rcl_wait_set_clear+0x9a>
 8010d26:	685a      	ldr	r2, [r3, #4]
 8010d28:	2100      	movs	r1, #0
 8010d2a:	0092      	lsls	r2, r2, #2
 8010d2c:	f005 fed2 	bl	8016ad4 <memset>
 8010d30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d32:	2200      	movs	r2, #0
 8010d34:	605a      	str	r2, [r3, #4]
 8010d36:	6958      	ldr	r0, [r3, #20]
 8010d38:	b138      	cbz	r0, 8010d4a <rcl_wait_set_clear+0xae>
 8010d3a:	691a      	ldr	r2, [r3, #16]
 8010d3c:	2100      	movs	r1, #0
 8010d3e:	0092      	lsls	r2, r2, #2
 8010d40:	f005 fec8 	bl	8016ad4 <memset>
 8010d44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d46:	2200      	movs	r2, #0
 8010d48:	611a      	str	r2, [r3, #16]
 8010d4a:	6a18      	ldr	r0, [r3, #32]
 8010d4c:	b138      	cbz	r0, 8010d5e <rcl_wait_set_clear+0xc2>
 8010d4e:	69da      	ldr	r2, [r3, #28]
 8010d50:	2100      	movs	r1, #0
 8010d52:	0092      	lsls	r2, r2, #2
 8010d54:	f005 febe 	bl	8016ad4 <memset>
 8010d58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	61da      	str	r2, [r3, #28]
 8010d5e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010d60:	b138      	cbz	r0, 8010d72 <rcl_wait_set_clear+0xd6>
 8010d62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d64:	2100      	movs	r1, #0
 8010d66:	0092      	lsls	r2, r2, #2
 8010d68:	f005 feb4 	bl	8016ad4 <memset>
 8010d6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d6e:	2200      	movs	r2, #0
 8010d70:	629a      	str	r2, [r3, #40]	; 0x28
 8010d72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010d74:	b138      	cbz	r0, 8010d86 <rcl_wait_set_clear+0xea>
 8010d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d78:	2100      	movs	r1, #0
 8010d7a:	0092      	lsls	r2, r2, #2
 8010d7c:	f005 feaa 	bl	8016ad4 <memset>
 8010d80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d82:	2000      	movs	r0, #0
 8010d84:	6358      	str	r0, [r3, #52]	; 0x34
 8010d86:	bd10      	pop	{r4, pc}
 8010d88:	200b      	movs	r0, #11
 8010d8a:	4770      	bx	lr
 8010d8c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010d90:	bd10      	pop	{r4, pc}
 8010d92:	bf00      	nop

08010d94 <rcl_wait_set_resize>:
 8010d94:	2800      	cmp	r0, #0
 8010d96:	f000 8185 	beq.w	80110a4 <rcl_wait_set_resize+0x310>
 8010d9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d9e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8010da0:	b083      	sub	sp, #12
 8010da2:	4605      	mov	r5, r0
 8010da4:	2c00      	cmp	r4, #0
 8010da6:	f000 817f 	beq.w	80110a8 <rcl_wait_set_resize+0x314>
 8010daa:	f04f 0900 	mov.w	r9, #0
 8010dae:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010db2:	461f      	mov	r7, r3
 8010db4:	4688      	mov	r8, r1
 8010db6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 8010dba:	4616      	mov	r6, r2
 8010dbc:	f8c0 9004 	str.w	r9, [r0, #4]
 8010dc0:	f8c4 9000 	str.w	r9, [r4]
 8010dc4:	2900      	cmp	r1, #0
 8010dc6:	f000 80bd 	beq.w	8010f44 <rcl_wait_set_resize+0x1b0>
 8010dca:	008c      	lsls	r4, r1, #2
 8010dcc:	6800      	ldr	r0, [r0, #0]
 8010dce:	9301      	str	r3, [sp, #4]
 8010dd0:	4652      	mov	r2, sl
 8010dd2:	4621      	mov	r1, r4
 8010dd4:	4798      	blx	r3
 8010dd6:	9b01      	ldr	r3, [sp, #4]
 8010dd8:	6028      	str	r0, [r5, #0]
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	f000 80cb 	beq.w	8010f76 <rcl_wait_set_resize+0x1e2>
 8010de0:	4622      	mov	r2, r4
 8010de2:	4649      	mov	r1, r9
 8010de4:	9301      	str	r3, [sp, #4]
 8010de6:	f005 fe75 	bl	8016ad4 <memset>
 8010dea:	f8c5 8004 	str.w	r8, [r5, #4]
 8010dee:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8010df2:	9b01      	ldr	r3, [sp, #4]
 8010df4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8010df8:	f8c8 9004 	str.w	r9, [r8, #4]
 8010dfc:	4652      	mov	r2, sl
 8010dfe:	4621      	mov	r1, r4
 8010e00:	4798      	blx	r3
 8010e02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010e04:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e08:	689b      	ldr	r3, [r3, #8]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	f000 80ac 	beq.w	8010f68 <rcl_wait_set_resize+0x1d4>
 8010e10:	4622      	mov	r2, r4
 8010e12:	4649      	mov	r1, r9
 8010e14:	4618      	mov	r0, r3
 8010e16:	f005 fe5d 	bl	8016ad4 <memset>
 8010e1a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010e1c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010e20:	f04f 0800 	mov.w	r8, #0
 8010e24:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8010e28:	f8c5 800c 	str.w	r8, [r5, #12]
 8010e2c:	f8c4 800c 	str.w	r8, [r4, #12]
 8010e30:	2e00      	cmp	r6, #0
 8010e32:	f040 80a4 	bne.w	8010f7e <rcl_wait_set_resize+0x1ea>
 8010e36:	68a8      	ldr	r0, [r5, #8]
 8010e38:	b128      	cbz	r0, 8010e46 <rcl_wait_set_resize+0xb2>
 8010e3a:	4649      	mov	r1, r9
 8010e3c:	4790      	blx	r2
 8010e3e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010e40:	60ae      	str	r6, [r5, #8]
 8010e42:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010e46:	f04f 0800 	mov.w	r8, #0
 8010e4a:	19f6      	adds	r6, r6, r7
 8010e4c:	f8c4 8010 	str.w	r8, [r4, #16]
 8010e50:	f040 80ac 	bne.w	8010fac <rcl_wait_set_resize+0x218>
 8010e54:	6960      	ldr	r0, [r4, #20]
 8010e56:	b130      	cbz	r0, 8010e66 <rcl_wait_set_resize+0xd2>
 8010e58:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010e5a:	4649      	mov	r1, r9
 8010e5c:	4798      	blx	r3
 8010e5e:	6166      	str	r6, [r4, #20]
 8010e60:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010e62:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010e66:	2600      	movs	r6, #0
 8010e68:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010e6c:	616e      	str	r6, [r5, #20]
 8010e6e:	6426      	str	r6, [r4, #64]	; 0x40
 8010e70:	2f00      	cmp	r7, #0
 8010e72:	f040 80ad 	bne.w	8010fd0 <rcl_wait_set_resize+0x23c>
 8010e76:	6928      	ldr	r0, [r5, #16]
 8010e78:	b138      	cbz	r0, 8010e8a <rcl_wait_set_resize+0xf6>
 8010e7a:	4649      	mov	r1, r9
 8010e7c:	47d0      	blx	sl
 8010e7e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010e80:	612f      	str	r7, [r5, #16]
 8010e82:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010e86:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e8c:	2600      	movs	r6, #0
 8010e8e:	61ee      	str	r6, [r5, #28]
 8010e90:	61a6      	str	r6, [r4, #24]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	f040 80af 	bne.w	8010ff6 <rcl_wait_set_resize+0x262>
 8010e98:	69a8      	ldr	r0, [r5, #24]
 8010e9a:	b120      	cbz	r0, 8010ea6 <rcl_wait_set_resize+0x112>
 8010e9c:	4649      	mov	r1, r9
 8010e9e:	47d0      	blx	sl
 8010ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ea2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010ea4:	61ab      	str	r3, [r5, #24]
 8010ea6:	6a20      	ldr	r0, [r4, #32]
 8010ea8:	b128      	cbz	r0, 8010eb6 <rcl_wait_set_resize+0x122>
 8010eaa:	4649      	mov	r1, r9
 8010eac:	47d0      	blx	sl
 8010eae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010eb8:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8010eba:	2600      	movs	r6, #0
 8010ebc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8010ec0:	626e      	str	r6, [r5, #36]	; 0x24
 8010ec2:	6266      	str	r6, [r4, #36]	; 0x24
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	f000 80b6 	beq.w	8011036 <rcl_wait_set_resize+0x2a2>
 8010eca:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8010ece:	6a28      	ldr	r0, [r5, #32]
 8010ed0:	463a      	mov	r2, r7
 8010ed2:	4651      	mov	r1, sl
 8010ed4:	47c8      	blx	r9
 8010ed6:	6228      	str	r0, [r5, #32]
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	d04c      	beq.n	8010f76 <rcl_wait_set_resize+0x1e2>
 8010edc:	4652      	mov	r2, sl
 8010ede:	4631      	mov	r1, r6
 8010ee0:	f005 fdf8 	bl	8016ad4 <memset>
 8010ee4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ee8:	626b      	str	r3, [r5, #36]	; 0x24
 8010eea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010eec:	62a6      	str	r6, [r4, #40]	; 0x28
 8010eee:	463a      	mov	r2, r7
 8010ef0:	4651      	mov	r1, sl
 8010ef2:	47c8      	blx	r9
 8010ef4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010ef6:	62e0      	str	r0, [r4, #44]	; 0x2c
 8010ef8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010efa:	2c00      	cmp	r4, #0
 8010efc:	f000 80f0 	beq.w	80110e0 <rcl_wait_set_resize+0x34c>
 8010f00:	4620      	mov	r0, r4
 8010f02:	4652      	mov	r2, sl
 8010f04:	4631      	mov	r1, r6
 8010f06:	f005 fde5 	bl	8016ad4 <memset>
 8010f0a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f0e:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8010f10:	2600      	movs	r6, #0
 8010f12:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8010f16:	62ee      	str	r6, [r5, #44]	; 0x2c
 8010f18:	6326      	str	r6, [r4, #48]	; 0x30
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	f040 809d 	bne.w	801105a <rcl_wait_set_resize+0x2c6>
 8010f20:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010f22:	b120      	cbz	r0, 8010f2e <rcl_wait_set_resize+0x19a>
 8010f24:	4639      	mov	r1, r7
 8010f26:	47c0      	blx	r8
 8010f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f2a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010f2c:	62ab      	str	r3, [r5, #40]	; 0x28
 8010f2e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010f30:	b310      	cbz	r0, 8010f78 <rcl_wait_set_resize+0x1e4>
 8010f32:	4639      	mov	r1, r7
 8010f34:	47c0      	blx	r8
 8010f36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010f38:	2000      	movs	r0, #0
 8010f3a:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8010f3e:	b003      	add	sp, #12
 8010f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f44:	6800      	ldr	r0, [r0, #0]
 8010f46:	b120      	cbz	r0, 8010f52 <rcl_wait_set_resize+0x1be>
 8010f48:	4651      	mov	r1, sl
 8010f4a:	47d8      	blx	fp
 8010f4c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010f4e:	f8c5 8000 	str.w	r8, [r5]
 8010f52:	68a0      	ldr	r0, [r4, #8]
 8010f54:	2800      	cmp	r0, #0
 8010f56:	f43f af61 	beq.w	8010e1c <rcl_wait_set_resize+0x88>
 8010f5a:	4651      	mov	r1, sl
 8010f5c:	47d8      	blx	fp
 8010f5e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010f60:	2300      	movs	r3, #0
 8010f62:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010f66:	e759      	b.n	8010e1c <rcl_wait_set_resize+0x88>
 8010f68:	6828      	ldr	r0, [r5, #0]
 8010f6a:	9301      	str	r3, [sp, #4]
 8010f6c:	4651      	mov	r1, sl
 8010f6e:	47d8      	blx	fp
 8010f70:	9b01      	ldr	r3, [sp, #4]
 8010f72:	e9c5 3300 	strd	r3, r3, [r5]
 8010f76:	200a      	movs	r0, #10
 8010f78:	b003      	add	sp, #12
 8010f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f7e:	00b4      	lsls	r4, r6, #2
 8010f80:	68a8      	ldr	r0, [r5, #8]
 8010f82:	464a      	mov	r2, r9
 8010f84:	4621      	mov	r1, r4
 8010f86:	4798      	blx	r3
 8010f88:	60a8      	str	r0, [r5, #8]
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	d0f3      	beq.n	8010f76 <rcl_wait_set_resize+0x1e2>
 8010f8e:	4622      	mov	r2, r4
 8010f90:	4641      	mov	r1, r8
 8010f92:	f005 fd9f 	bl	8016ad4 <memset>
 8010f96:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010f98:	60ee      	str	r6, [r5, #12]
 8010f9a:	f04f 0800 	mov.w	r8, #0
 8010f9e:	19f6      	adds	r6, r6, r7
 8010fa0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010fa4:	f8c4 8010 	str.w	r8, [r4, #16]
 8010fa8:	f43f af54 	beq.w	8010e54 <rcl_wait_set_resize+0xc0>
 8010fac:	00b6      	lsls	r6, r6, #2
 8010fae:	464a      	mov	r2, r9
 8010fb0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010fb2:	6960      	ldr	r0, [r4, #20]
 8010fb4:	4631      	mov	r1, r6
 8010fb6:	4798      	blx	r3
 8010fb8:	4681      	mov	r9, r0
 8010fba:	6160      	str	r0, [r4, #20]
 8010fbc:	2800      	cmp	r0, #0
 8010fbe:	d076      	beq.n	80110ae <rcl_wait_set_resize+0x31a>
 8010fc0:	4632      	mov	r2, r6
 8010fc2:	4641      	mov	r1, r8
 8010fc4:	f005 fd86 	bl	8016ad4 <memset>
 8010fc8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010fca:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010fce:	e74a      	b.n	8010e66 <rcl_wait_set_resize+0xd2>
 8010fd0:	00bc      	lsls	r4, r7, #2
 8010fd2:	6928      	ldr	r0, [r5, #16]
 8010fd4:	464a      	mov	r2, r9
 8010fd6:	4621      	mov	r1, r4
 8010fd8:	47c0      	blx	r8
 8010fda:	6128      	str	r0, [r5, #16]
 8010fdc:	2800      	cmp	r0, #0
 8010fde:	d0ca      	beq.n	8010f76 <rcl_wait_set_resize+0x1e2>
 8010fe0:	4622      	mov	r2, r4
 8010fe2:	4631      	mov	r1, r6
 8010fe4:	f005 fd76 	bl	8016ad4 <memset>
 8010fe8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010fea:	616f      	str	r7, [r5, #20]
 8010fec:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010ff0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010ff4:	e749      	b.n	8010e8a <rcl_wait_set_resize+0xf6>
 8010ff6:	009c      	lsls	r4, r3, #2
 8010ff8:	69a8      	ldr	r0, [r5, #24]
 8010ffa:	464a      	mov	r2, r9
 8010ffc:	4621      	mov	r1, r4
 8010ffe:	47c0      	blx	r8
 8011000:	61a8      	str	r0, [r5, #24]
 8011002:	2800      	cmp	r0, #0
 8011004:	d0b7      	beq.n	8010f76 <rcl_wait_set_resize+0x1e2>
 8011006:	4622      	mov	r2, r4
 8011008:	4631      	mov	r1, r6
 801100a:	f005 fd63 	bl	8016ad4 <memset>
 801100e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8011010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011012:	61eb      	str	r3, [r5, #28]
 8011014:	6a38      	ldr	r0, [r7, #32]
 8011016:	61fe      	str	r6, [r7, #28]
 8011018:	464a      	mov	r2, r9
 801101a:	4621      	mov	r1, r4
 801101c:	47c0      	blx	r8
 801101e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011020:	6238      	str	r0, [r7, #32]
 8011022:	6a1f      	ldr	r7, [r3, #32]
 8011024:	2f00      	cmp	r7, #0
 8011026:	d054      	beq.n	80110d2 <rcl_wait_set_resize+0x33e>
 8011028:	4622      	mov	r2, r4
 801102a:	4631      	mov	r1, r6
 801102c:	4638      	mov	r0, r7
 801102e:	f005 fd51 	bl	8016ad4 <memset>
 8011032:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011034:	e73f      	b.n	8010eb6 <rcl_wait_set_resize+0x122>
 8011036:	6a28      	ldr	r0, [r5, #32]
 8011038:	b120      	cbz	r0, 8011044 <rcl_wait_set_resize+0x2b0>
 801103a:	4639      	mov	r1, r7
 801103c:	47c0      	blx	r8
 801103e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011040:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011042:	622b      	str	r3, [r5, #32]
 8011044:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011046:	2800      	cmp	r0, #0
 8011048:	f43f af60 	beq.w	8010f0c <rcl_wait_set_resize+0x178>
 801104c:	4639      	mov	r1, r7
 801104e:	47c0      	blx	r8
 8011050:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011052:	2300      	movs	r3, #0
 8011054:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8011058:	e758      	b.n	8010f0c <rcl_wait_set_resize+0x178>
 801105a:	009c      	lsls	r4, r3, #2
 801105c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801105e:	463a      	mov	r2, r7
 8011060:	4621      	mov	r1, r4
 8011062:	47c8      	blx	r9
 8011064:	62a8      	str	r0, [r5, #40]	; 0x28
 8011066:	2800      	cmp	r0, #0
 8011068:	d085      	beq.n	8010f76 <rcl_wait_set_resize+0x1e2>
 801106a:	4622      	mov	r2, r4
 801106c:	4631      	mov	r1, r6
 801106e:	f005 fd31 	bl	8016ad4 <memset>
 8011072:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8011076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011078:	62eb      	str	r3, [r5, #44]	; 0x2c
 801107a:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801107e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8011082:	463a      	mov	r2, r7
 8011084:	4621      	mov	r1, r4
 8011086:	47c8      	blx	r9
 8011088:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801108a:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801108e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011090:	b36b      	cbz	r3, 80110ee <rcl_wait_set_resize+0x35a>
 8011092:	4622      	mov	r2, r4
 8011094:	4631      	mov	r1, r6
 8011096:	4618      	mov	r0, r3
 8011098:	f005 fd1c 	bl	8016ad4 <memset>
 801109c:	4630      	mov	r0, r6
 801109e:	b003      	add	sp, #12
 80110a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110a4:	200b      	movs	r0, #11
 80110a6:	4770      	bx	lr
 80110a8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80110ac:	e764      	b.n	8010f78 <rcl_wait_set_resize+0x1e4>
 80110ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80110b0:	68a8      	ldr	r0, [r5, #8]
 80110b2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80110b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110b6:	4798      	blx	r3
 80110b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80110ba:	6928      	ldr	r0, [r5, #16]
 80110bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80110be:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80110c0:	f8c5 900c 	str.w	r9, [r5, #12]
 80110c4:	f8c5 9008 	str.w	r9, [r5, #8]
 80110c8:	4790      	blx	r2
 80110ca:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80110ce:	200a      	movs	r0, #10
 80110d0:	e752      	b.n	8010f78 <rcl_wait_set_resize+0x1e4>
 80110d2:	69a8      	ldr	r0, [r5, #24]
 80110d4:	4649      	mov	r1, r9
 80110d6:	47d0      	blx	sl
 80110d8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80110dc:	200a      	movs	r0, #10
 80110de:	e74b      	b.n	8010f78 <rcl_wait_set_resize+0x1e4>
 80110e0:	6a28      	ldr	r0, [r5, #32]
 80110e2:	4639      	mov	r1, r7
 80110e4:	47c0      	blx	r8
 80110e6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80110ea:	200a      	movs	r0, #10
 80110ec:	e744      	b.n	8010f78 <rcl_wait_set_resize+0x1e4>
 80110ee:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80110f0:	9301      	str	r3, [sp, #4]
 80110f2:	4639      	mov	r1, r7
 80110f4:	47c0      	blx	r8
 80110f6:	9b01      	ldr	r3, [sp, #4]
 80110f8:	200a      	movs	r0, #10
 80110fa:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80110fe:	e73b      	b.n	8010f78 <rcl_wait_set_resize+0x1e4>

08011100 <rcl_wait_set_init>:
 8011100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011104:	b084      	sub	sp, #16
 8011106:	4604      	mov	r4, r0
 8011108:	a810      	add	r0, sp, #64	; 0x40
 801110a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801110e:	460f      	mov	r7, r1
 8011110:	4690      	mov	r8, r2
 8011112:	4699      	mov	r9, r3
 8011114:	f7f9 fc3c 	bl	800a990 <rcutils_allocator_is_valid>
 8011118:	2800      	cmp	r0, #0
 801111a:	d06b      	beq.n	80111f4 <rcl_wait_set_init+0xf4>
 801111c:	2c00      	cmp	r4, #0
 801111e:	d069      	beq.n	80111f4 <rcl_wait_set_init+0xf4>
 8011120:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011122:	b125      	cbz	r5, 801112e <rcl_wait_set_init+0x2e>
 8011124:	2564      	movs	r5, #100	; 0x64
 8011126:	4628      	mov	r0, r5
 8011128:	b004      	add	sp, #16
 801112a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801112e:	f1ba 0f00 	cmp.w	sl, #0
 8011132:	d05f      	beq.n	80111f4 <rcl_wait_set_init+0xf4>
 8011134:	4650      	mov	r0, sl
 8011136:	f7fe fb3f 	bl	800f7b8 <rcl_context_is_valid>
 801113a:	2800      	cmp	r0, #0
 801113c:	d067      	beq.n	801120e <rcl_wait_set_init+0x10e>
 801113e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011140:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011142:	205c      	movs	r0, #92	; 0x5c
 8011144:	4798      	blx	r3
 8011146:	6320      	str	r0, [r4, #48]	; 0x30
 8011148:	2800      	cmp	r0, #0
 801114a:	d062      	beq.n	8011212 <rcl_wait_set_init+0x112>
 801114c:	4629      	mov	r1, r5
 801114e:	225c      	movs	r2, #92	; 0x5c
 8011150:	f005 fcc0 	bl	8016ad4 <memset>
 8011154:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8011158:	eb03 0e02 	add.w	lr, r3, r2
 801115c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801115e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8011160:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8011164:	449e      	add	lr, r3
 8011166:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801116a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801116e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8011172:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8011176:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 801117a:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 801117e:	f106 0548 	add.w	r5, r6, #72	; 0x48
 8011182:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8011186:	f8da a000 	ldr.w	sl, [sl]
 801118a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801118c:	44c6      	add	lr, r8
 801118e:	f8dc 3000 	ldr.w	r3, [ip]
 8011192:	602b      	str	r3, [r5, #0]
 8011194:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8011198:	f10a 0028 	add.w	r0, sl, #40	; 0x28
 801119c:	f002 fe68 	bl	8013e70 <rmw_create_wait_set>
 80111a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80111a2:	63f0      	str	r0, [r6, #60]	; 0x3c
 80111a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80111a6:	b350      	cbz	r0, 80111fe <rcl_wait_set_init+0xfe>
 80111a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111aa:	9302      	str	r3, [sp, #8]
 80111ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111ae:	9301      	str	r3, [sp, #4]
 80111b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111b2:	9300      	str	r3, [sp, #0]
 80111b4:	4642      	mov	r2, r8
 80111b6:	464b      	mov	r3, r9
 80111b8:	4639      	mov	r1, r7
 80111ba:	4620      	mov	r0, r4
 80111bc:	f7ff fdea 	bl	8010d94 <rcl_wait_set_resize>
 80111c0:	4605      	mov	r5, r0
 80111c2:	2800      	cmp	r0, #0
 80111c4:	d0af      	beq.n	8011126 <rcl_wait_set_init+0x26>
 80111c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80111c8:	bb2b      	cbnz	r3, 8011216 <rcl_wait_set_init+0x116>
 80111ca:	2600      	movs	r6, #0
 80111cc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80111d0:	9600      	str	r6, [sp, #0]
 80111d2:	4633      	mov	r3, r6
 80111d4:	4632      	mov	r2, r6
 80111d6:	4631      	mov	r1, r6
 80111d8:	4620      	mov	r0, r4
 80111da:	f7ff fddb 	bl	8010d94 <rcl_wait_set_resize>
 80111de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80111e0:	2800      	cmp	r0, #0
 80111e2:	d0a0      	beq.n	8011126 <rcl_wait_set_init+0x26>
 80111e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80111e6:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80111e8:	4798      	blx	r3
 80111ea:	4628      	mov	r0, r5
 80111ec:	6326      	str	r6, [r4, #48]	; 0x30
 80111ee:	b004      	add	sp, #16
 80111f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111f4:	250b      	movs	r5, #11
 80111f6:	4628      	mov	r0, r5
 80111f8:	b004      	add	sp, #16
 80111fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111fe:	2501      	movs	r5, #1
 8011200:	f002 fe40 	bl	8013e84 <rmw_destroy_wait_set>
 8011204:	2800      	cmp	r0, #0
 8011206:	bf18      	it	ne
 8011208:	f44f 7561 	movne.w	r5, #900	; 0x384
 801120c:	e7dd      	b.n	80111ca <rcl_wait_set_init+0xca>
 801120e:	2565      	movs	r5, #101	; 0x65
 8011210:	e789      	b.n	8011126 <rcl_wait_set_init+0x26>
 8011212:	250a      	movs	r5, #10
 8011214:	e787      	b.n	8011126 <rcl_wait_set_init+0x26>
 8011216:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011218:	e7f2      	b.n	8011200 <rcl_wait_set_init+0x100>
 801121a:	bf00      	nop

0801121c <rcl_wait_set_add_guard_condition>:
 801121c:	b318      	cbz	r0, 8011266 <rcl_wait_set_add_guard_condition+0x4a>
 801121e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011220:	b570      	push	{r4, r5, r6, lr}
 8011222:	4604      	mov	r4, r0
 8011224:	b30b      	cbz	r3, 801126a <rcl_wait_set_add_guard_condition+0x4e>
 8011226:	b319      	cbz	r1, 8011270 <rcl_wait_set_add_guard_condition+0x54>
 8011228:	68dd      	ldr	r5, [r3, #12]
 801122a:	68c0      	ldr	r0, [r0, #12]
 801122c:	4285      	cmp	r5, r0
 801122e:	d217      	bcs.n	8011260 <rcl_wait_set_add_guard_condition+0x44>
 8011230:	68a0      	ldr	r0, [r4, #8]
 8011232:	1c6e      	adds	r6, r5, #1
 8011234:	60de      	str	r6, [r3, #12]
 8011236:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801123a:	b102      	cbz	r2, 801123e <rcl_wait_set_add_guard_condition+0x22>
 801123c:	6015      	str	r5, [r2, #0]
 801123e:	4608      	mov	r0, r1
 8011240:	f004 fe48 	bl	8015ed4 <rcl_guard_condition_get_rmw_handle>
 8011244:	b150      	cbz	r0, 801125c <rcl_wait_set_add_guard_condition+0x40>
 8011246:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011248:	6842      	ldr	r2, [r0, #4]
 801124a:	695b      	ldr	r3, [r3, #20]
 801124c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011250:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011252:	6913      	ldr	r3, [r2, #16]
 8011254:	3301      	adds	r3, #1
 8011256:	2000      	movs	r0, #0
 8011258:	6113      	str	r3, [r2, #16]
 801125a:	bd70      	pop	{r4, r5, r6, pc}
 801125c:	2001      	movs	r0, #1
 801125e:	bd70      	pop	{r4, r5, r6, pc}
 8011260:	f240 3086 	movw	r0, #902	; 0x386
 8011264:	bd70      	pop	{r4, r5, r6, pc}
 8011266:	200b      	movs	r0, #11
 8011268:	4770      	bx	lr
 801126a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801126e:	bd70      	pop	{r4, r5, r6, pc}
 8011270:	200b      	movs	r0, #11
 8011272:	bd70      	pop	{r4, r5, r6, pc}

08011274 <rcl_wait_set_add_timer>:
 8011274:	b328      	cbz	r0, 80112c2 <rcl_wait_set_add_timer+0x4e>
 8011276:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011278:	b570      	push	{r4, r5, r6, lr}
 801127a:	4604      	mov	r4, r0
 801127c:	b31b      	cbz	r3, 80112c6 <rcl_wait_set_add_timer+0x52>
 801127e:	b329      	cbz	r1, 80112cc <rcl_wait_set_add_timer+0x58>
 8011280:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8011282:	6965      	ldr	r5, [r4, #20]
 8011284:	42a8      	cmp	r0, r5
 8011286:	d219      	bcs.n	80112bc <rcl_wait_set_add_timer+0x48>
 8011288:	6925      	ldr	r5, [r4, #16]
 801128a:	1c46      	adds	r6, r0, #1
 801128c:	641e      	str	r6, [r3, #64]	; 0x40
 801128e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011292:	b102      	cbz	r2, 8011296 <rcl_wait_set_add_timer+0x22>
 8011294:	6010      	str	r0, [r2, #0]
 8011296:	4608      	mov	r0, r1
 8011298:	f7ff fba6 	bl	80109e8 <rcl_timer_get_guard_condition>
 801129c:	b168      	cbz	r0, 80112ba <rcl_wait_set_add_timer+0x46>
 801129e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80112a0:	68e3      	ldr	r3, [r4, #12]
 80112a2:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80112a4:	3b01      	subs	r3, #1
 80112a6:	441d      	add	r5, r3
 80112a8:	f004 fe14 	bl	8015ed4 <rcl_guard_condition_get_rmw_handle>
 80112ac:	b180      	cbz	r0, 80112d0 <rcl_wait_set_add_timer+0x5c>
 80112ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80112b0:	6842      	ldr	r2, [r0, #4]
 80112b2:	695b      	ldr	r3, [r3, #20]
 80112b4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80112b8:	2000      	movs	r0, #0
 80112ba:	bd70      	pop	{r4, r5, r6, pc}
 80112bc:	f240 3086 	movw	r0, #902	; 0x386
 80112c0:	bd70      	pop	{r4, r5, r6, pc}
 80112c2:	200b      	movs	r0, #11
 80112c4:	4770      	bx	lr
 80112c6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80112ca:	bd70      	pop	{r4, r5, r6, pc}
 80112cc:	200b      	movs	r0, #11
 80112ce:	bd70      	pop	{r4, r5, r6, pc}
 80112d0:	2001      	movs	r0, #1
 80112d2:	bd70      	pop	{r4, r5, r6, pc}

080112d4 <rcl_wait_set_add_client>:
 80112d4:	b318      	cbz	r0, 801131e <rcl_wait_set_add_client+0x4a>
 80112d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80112d8:	b570      	push	{r4, r5, r6, lr}
 80112da:	4604      	mov	r4, r0
 80112dc:	b30b      	cbz	r3, 8011322 <rcl_wait_set_add_client+0x4e>
 80112de:	b319      	cbz	r1, 8011328 <rcl_wait_set_add_client+0x54>
 80112e0:	699d      	ldr	r5, [r3, #24]
 80112e2:	69c0      	ldr	r0, [r0, #28]
 80112e4:	4285      	cmp	r5, r0
 80112e6:	d217      	bcs.n	8011318 <rcl_wait_set_add_client+0x44>
 80112e8:	69a0      	ldr	r0, [r4, #24]
 80112ea:	1c6e      	adds	r6, r5, #1
 80112ec:	619e      	str	r6, [r3, #24]
 80112ee:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80112f2:	b102      	cbz	r2, 80112f6 <rcl_wait_set_add_client+0x22>
 80112f4:	6015      	str	r5, [r2, #0]
 80112f6:	4608      	mov	r0, r1
 80112f8:	f7fe f9b2 	bl	800f660 <rcl_client_get_rmw_handle>
 80112fc:	b150      	cbz	r0, 8011314 <rcl_wait_set_add_client+0x40>
 80112fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011300:	6842      	ldr	r2, [r0, #4]
 8011302:	6a1b      	ldr	r3, [r3, #32]
 8011304:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011308:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801130a:	69d3      	ldr	r3, [r2, #28]
 801130c:	3301      	adds	r3, #1
 801130e:	2000      	movs	r0, #0
 8011310:	61d3      	str	r3, [r2, #28]
 8011312:	bd70      	pop	{r4, r5, r6, pc}
 8011314:	2001      	movs	r0, #1
 8011316:	bd70      	pop	{r4, r5, r6, pc}
 8011318:	f240 3086 	movw	r0, #902	; 0x386
 801131c:	bd70      	pop	{r4, r5, r6, pc}
 801131e:	200b      	movs	r0, #11
 8011320:	4770      	bx	lr
 8011322:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011326:	bd70      	pop	{r4, r5, r6, pc}
 8011328:	200b      	movs	r0, #11
 801132a:	bd70      	pop	{r4, r5, r6, pc}

0801132c <rcl_wait_set_add_service>:
 801132c:	b318      	cbz	r0, 8011376 <rcl_wait_set_add_service+0x4a>
 801132e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011330:	b570      	push	{r4, r5, r6, lr}
 8011332:	4604      	mov	r4, r0
 8011334:	b30b      	cbz	r3, 801137a <rcl_wait_set_add_service+0x4e>
 8011336:	b319      	cbz	r1, 8011380 <rcl_wait_set_add_service+0x54>
 8011338:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801133a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801133c:	4285      	cmp	r5, r0
 801133e:	d217      	bcs.n	8011370 <rcl_wait_set_add_service+0x44>
 8011340:	6a20      	ldr	r0, [r4, #32]
 8011342:	1c6e      	adds	r6, r5, #1
 8011344:	625e      	str	r6, [r3, #36]	; 0x24
 8011346:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801134a:	b102      	cbz	r2, 801134e <rcl_wait_set_add_service+0x22>
 801134c:	6015      	str	r5, [r2, #0]
 801134e:	4608      	mov	r0, r1
 8011350:	f7ff f804 	bl	801035c <rcl_service_get_rmw_handle>
 8011354:	b150      	cbz	r0, 801136c <rcl_wait_set_add_service+0x40>
 8011356:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011358:	6842      	ldr	r2, [r0, #4]
 801135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801135c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011360:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011362:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8011364:	3301      	adds	r3, #1
 8011366:	2000      	movs	r0, #0
 8011368:	6293      	str	r3, [r2, #40]	; 0x28
 801136a:	bd70      	pop	{r4, r5, r6, pc}
 801136c:	2001      	movs	r0, #1
 801136e:	bd70      	pop	{r4, r5, r6, pc}
 8011370:	f240 3086 	movw	r0, #902	; 0x386
 8011374:	bd70      	pop	{r4, r5, r6, pc}
 8011376:	200b      	movs	r0, #11
 8011378:	4770      	bx	lr
 801137a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801137e:	bd70      	pop	{r4, r5, r6, pc}
 8011380:	200b      	movs	r0, #11
 8011382:	bd70      	pop	{r4, r5, r6, pc}
 8011384:	0000      	movs	r0, r0
	...

08011388 <rcl_wait>:
 8011388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801138c:	ed2d 8b02 	vpush	{d8}
 8011390:	b08d      	sub	sp, #52	; 0x34
 8011392:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011396:	2800      	cmp	r0, #0
 8011398:	f000 8143 	beq.w	8011622 <rcl_wait+0x29a>
 801139c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801139e:	4605      	mov	r5, r0
 80113a0:	2e00      	cmp	r6, #0
 80113a2:	f000 8112 	beq.w	80115ca <rcl_wait+0x242>
 80113a6:	6843      	ldr	r3, [r0, #4]
 80113a8:	b983      	cbnz	r3, 80113cc <rcl_wait+0x44>
 80113aa:	68eb      	ldr	r3, [r5, #12]
 80113ac:	b973      	cbnz	r3, 80113cc <rcl_wait+0x44>
 80113ae:	696b      	ldr	r3, [r5, #20]
 80113b0:	b963      	cbnz	r3, 80113cc <rcl_wait+0x44>
 80113b2:	69eb      	ldr	r3, [r5, #28]
 80113b4:	b953      	cbnz	r3, 80113cc <rcl_wait+0x44>
 80113b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80113b8:	b943      	cbnz	r3, 80113cc <rcl_wait+0x44>
 80113ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80113bc:	b933      	cbnz	r3, 80113cc <rcl_wait+0x44>
 80113be:	f240 3085 	movw	r0, #901	; 0x385
 80113c2:	b00d      	add	sp, #52	; 0x34
 80113c4:	ecbd 8b02 	vpop	{d8}
 80113c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113cc:	9b04      	ldr	r3, [sp, #16]
 80113ce:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80113d0:	2b01      	cmp	r3, #1
 80113d2:	9b05      	ldr	r3, [sp, #20]
 80113d4:	f173 0300 	sbcs.w	r3, r3, #0
 80113d8:	f2c0 80f0 	blt.w	80115bc <rcl_wait+0x234>
 80113dc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80113e0:	4643      	mov	r3, r8
 80113e2:	2a00      	cmp	r2, #0
 80113e4:	f000 8133 	beq.w	801164e <rcl_wait+0x2c6>
 80113e8:	2400      	movs	r4, #0
 80113ea:	4613      	mov	r3, r2
 80113ec:	ed9f 8b9c 	vldr	d8, [pc, #624]	; 8011660 <rcl_wait+0x2d8>
 80113f0:	46a2      	mov	sl, r4
 80113f2:	46a3      	mov	fp, r4
 80113f4:	f240 3921 	movw	r9, #801	; 0x321
 80113f8:	4632      	mov	r2, r6
 80113fa:	e014      	b.n	8011426 <rcl_wait+0x9e>
 80113fc:	2800      	cmp	r0, #0
 80113fe:	d1e0      	bne.n	80113c2 <rcl_wait+0x3a>
 8011400:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011404:	4542      	cmp	r2, r8
 8011406:	eb73 0107 	sbcs.w	r1, r3, r7
 801140a:	da03      	bge.n	8011414 <rcl_wait+0x8c>
 801140c:	4690      	mov	r8, r2
 801140e:	461f      	mov	r7, r3
 8011410:	f04f 0b01 	mov.w	fp, #1
 8011414:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8011416:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011418:	3401      	adds	r4, #1
 801141a:	f14a 0a00 	adc.w	sl, sl, #0
 801141e:	429c      	cmp	r4, r3
 8011420:	f17a 0100 	sbcs.w	r1, sl, #0
 8011424:	d228      	bcs.n	8011478 <rcl_wait+0xf0>
 8011426:	6928      	ldr	r0, [r5, #16]
 8011428:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801142c:	a908      	add	r1, sp, #32
 801142e:	00a6      	lsls	r6, r4, #2
 8011430:	2800      	cmp	r0, #0
 8011432:	d0f1      	beq.n	8011418 <rcl_wait+0x90>
 8011434:	68eb      	ldr	r3, [r5, #12]
 8011436:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801143a:	4423      	add	r3, r4
 801143c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8011440:	f1be 0f00 	cmp.w	lr, #0
 8011444:	d006      	beq.n	8011454 <rcl_wait+0xcc>
 8011446:	6913      	ldr	r3, [r2, #16]
 8011448:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801144c:	3301      	adds	r3, #1
 801144e:	6113      	str	r3, [r2, #16]
 8011450:	692b      	ldr	r3, [r5, #16]
 8011452:	5998      	ldr	r0, [r3, r6]
 8011454:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011458:	f7ff fa94 	bl	8010984 <rcl_timer_get_time_until_next_call>
 801145c:	4548      	cmp	r0, r9
 801145e:	d1cd      	bne.n	80113fc <rcl_wait+0x74>
 8011460:	692b      	ldr	r3, [r5, #16]
 8011462:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8011464:	2100      	movs	r1, #0
 8011466:	5199      	str	r1, [r3, r6]
 8011468:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801146a:	3401      	adds	r4, #1
 801146c:	f14a 0a00 	adc.w	sl, sl, #0
 8011470:	429c      	cmp	r4, r3
 8011472:	f17a 0100 	sbcs.w	r1, sl, #0
 8011476:	d3d6      	bcc.n	8011426 <rcl_wait+0x9e>
 8011478:	4616      	mov	r6, r2
 801147a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801147e:	4313      	orrs	r3, r2
 8011480:	46d9      	mov	r9, fp
 8011482:	f040 80a9 	bne.w	80115d8 <rcl_wait+0x250>
 8011486:	2300      	movs	r3, #0
 8011488:	2200      	movs	r2, #0
 801148a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801148e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011492:	ab08      	add	r3, sp, #32
 8011494:	9302      	str	r3, [sp, #8]
 8011496:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8011498:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801149c:	e9cd 3200 	strd	r3, r2, [sp]
 80114a0:	f106 0110 	add.w	r1, r6, #16
 80114a4:	f106 031c 	add.w	r3, r6, #28
 80114a8:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80114ac:	1d30      	adds	r0, r6, #4
 80114ae:	f002 fb67 	bl	8013b80 <rmw_wait>
 80114b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80114b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80114b6:	4680      	mov	r8, r0
 80114b8:	b1ca      	cbz	r2, 80114ee <rcl_wait+0x166>
 80114ba:	2400      	movs	r4, #0
 80114bc:	4627      	mov	r7, r4
 80114be:	692a      	ldr	r2, [r5, #16]
 80114c0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80114c4:	f10d 011f 	add.w	r1, sp, #31
 80114c8:	00a6      	lsls	r6, r4, #2
 80114ca:	b160      	cbz	r0, 80114e6 <rcl_wait+0x15e>
 80114cc:	f88d 701f 	strb.w	r7, [sp, #31]
 80114d0:	f7ff fa1e 	bl	8010910 <rcl_timer_is_ready>
 80114d4:	2800      	cmp	r0, #0
 80114d6:	f47f af74 	bne.w	80113c2 <rcl_wait+0x3a>
 80114da:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80114de:	b90b      	cbnz	r3, 80114e4 <rcl_wait+0x15c>
 80114e0:	692a      	ldr	r2, [r5, #16]
 80114e2:	5193      	str	r3, [r2, r6]
 80114e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80114e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80114e8:	3401      	adds	r4, #1
 80114ea:	42a2      	cmp	r2, r4
 80114ec:	d8e7      	bhi.n	80114be <rcl_wait+0x136>
 80114ee:	f038 0002 	bics.w	r0, r8, #2
 80114f2:	f040 8090 	bne.w	8011616 <rcl_wait+0x28e>
 80114f6:	686e      	ldr	r6, [r5, #4]
 80114f8:	4602      	mov	r2, r0
 80114fa:	b91e      	cbnz	r6, 8011504 <rcl_wait+0x17c>
 80114fc:	e00d      	b.n	801151a <rcl_wait+0x192>
 80114fe:	3201      	adds	r2, #1
 8011500:	42b2      	cmp	r2, r6
 8011502:	d00a      	beq.n	801151a <rcl_wait+0x192>
 8011504:	6899      	ldr	r1, [r3, #8]
 8011506:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801150a:	2900      	cmp	r1, #0
 801150c:	d1f7      	bne.n	80114fe <rcl_wait+0x176>
 801150e:	682c      	ldr	r4, [r5, #0]
 8011510:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011514:	3201      	adds	r2, #1
 8011516:	42b2      	cmp	r2, r6
 8011518:	d1f4      	bne.n	8011504 <rcl_wait+0x17c>
 801151a:	68ee      	ldr	r6, [r5, #12]
 801151c:	2200      	movs	r2, #0
 801151e:	b91e      	cbnz	r6, 8011528 <rcl_wait+0x1a0>
 8011520:	e00d      	b.n	801153e <rcl_wait+0x1b6>
 8011522:	3201      	adds	r2, #1
 8011524:	42b2      	cmp	r2, r6
 8011526:	d00a      	beq.n	801153e <rcl_wait+0x1b6>
 8011528:	6959      	ldr	r1, [r3, #20]
 801152a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801152e:	2900      	cmp	r1, #0
 8011530:	d1f7      	bne.n	8011522 <rcl_wait+0x19a>
 8011532:	68ac      	ldr	r4, [r5, #8]
 8011534:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011538:	3201      	adds	r2, #1
 801153a:	42b2      	cmp	r2, r6
 801153c:	d1f4      	bne.n	8011528 <rcl_wait+0x1a0>
 801153e:	69ee      	ldr	r6, [r5, #28]
 8011540:	2200      	movs	r2, #0
 8011542:	b91e      	cbnz	r6, 801154c <rcl_wait+0x1c4>
 8011544:	e00d      	b.n	8011562 <rcl_wait+0x1da>
 8011546:	3201      	adds	r2, #1
 8011548:	42b2      	cmp	r2, r6
 801154a:	d00a      	beq.n	8011562 <rcl_wait+0x1da>
 801154c:	6a19      	ldr	r1, [r3, #32]
 801154e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011552:	2900      	cmp	r1, #0
 8011554:	d1f7      	bne.n	8011546 <rcl_wait+0x1be>
 8011556:	69ac      	ldr	r4, [r5, #24]
 8011558:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801155c:	3201      	adds	r2, #1
 801155e:	42b2      	cmp	r2, r6
 8011560:	d1f4      	bne.n	801154c <rcl_wait+0x1c4>
 8011562:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8011564:	2200      	movs	r2, #0
 8011566:	b91e      	cbnz	r6, 8011570 <rcl_wait+0x1e8>
 8011568:	e00d      	b.n	8011586 <rcl_wait+0x1fe>
 801156a:	3201      	adds	r2, #1
 801156c:	4296      	cmp	r6, r2
 801156e:	d00a      	beq.n	8011586 <rcl_wait+0x1fe>
 8011570:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011572:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011576:	2900      	cmp	r1, #0
 8011578:	d1f7      	bne.n	801156a <rcl_wait+0x1e2>
 801157a:	6a2c      	ldr	r4, [r5, #32]
 801157c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011580:	3201      	adds	r2, #1
 8011582:	4296      	cmp	r6, r2
 8011584:	d1f4      	bne.n	8011570 <rcl_wait+0x1e8>
 8011586:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8011588:	2200      	movs	r2, #0
 801158a:	b91e      	cbnz	r6, 8011594 <rcl_wait+0x20c>
 801158c:	e00d      	b.n	80115aa <rcl_wait+0x222>
 801158e:	3201      	adds	r2, #1
 8011590:	42b2      	cmp	r2, r6
 8011592:	d00a      	beq.n	80115aa <rcl_wait+0x222>
 8011594:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8011596:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801159a:	2900      	cmp	r1, #0
 801159c:	d1f7      	bne.n	801158e <rcl_wait+0x206>
 801159e:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80115a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80115a4:	3201      	adds	r2, #1
 80115a6:	42b2      	cmp	r2, r6
 80115a8:	d1f4      	bne.n	8011594 <rcl_wait+0x20c>
 80115aa:	f1b8 0f02 	cmp.w	r8, #2
 80115ae:	f47f af08 	bne.w	80113c2 <rcl_wait+0x3a>
 80115b2:	464b      	mov	r3, r9
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	bf08      	it	eq
 80115b8:	2002      	moveq	r0, #2
 80115ba:	e702      	b.n	80113c2 <rcl_wait+0x3a>
 80115bc:	2a00      	cmp	r2, #0
 80115be:	d03a      	beq.n	8011636 <rcl_wait+0x2ae>
 80115c0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80115c4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80115c8:	e70e      	b.n	80113e8 <rcl_wait+0x60>
 80115ca:	f44f 7061 	mov.w	r0, #900	; 0x384
 80115ce:	b00d      	add	sp, #52	; 0x34
 80115d0:	ecbd 8b02 	vpop	{d8}
 80115d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d8:	9b04      	ldr	r3, [sp, #16]
 80115da:	2b01      	cmp	r3, #1
 80115dc:	9b05      	ldr	r3, [sp, #20]
 80115de:	f173 0300 	sbcs.w	r3, r3, #0
 80115e2:	db24      	blt.n	801162e <rcl_wait+0x2a6>
 80115e4:	2f00      	cmp	r7, #0
 80115e6:	bfbc      	itt	lt
 80115e8:	f04f 0800 	movlt.w	r8, #0
 80115ec:	4647      	movlt	r7, r8
 80115ee:	a31e      	add	r3, pc, #120	; (adr r3, 8011668 <rcl_wait+0x2e0>)
 80115f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f4:	4640      	mov	r0, r8
 80115f6:	4639      	mov	r1, r7
 80115f8:	f7ef fa78 	bl	8000aec <__aeabi_ldivmod>
 80115fc:	a31a      	add	r3, pc, #104	; (adr r3, 8011668 <rcl_wait+0x2e0>)
 80115fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011602:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011606:	4640      	mov	r0, r8
 8011608:	4639      	mov	r1, r7
 801160a:	f7ef fa6f 	bl	8000aec <__aeabi_ldivmod>
 801160e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011612:	ab08      	add	r3, sp, #32
 8011614:	e73e      	b.n	8011494 <rcl_wait+0x10c>
 8011616:	2001      	movs	r0, #1
 8011618:	b00d      	add	sp, #52	; 0x34
 801161a:	ecbd 8b02 	vpop	{d8}
 801161e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011622:	200b      	movs	r0, #11
 8011624:	b00d      	add	sp, #52	; 0x34
 8011626:	ecbd 8b02 	vpop	{d8}
 801162a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801162e:	465b      	mov	r3, fp
 8011630:	2b00      	cmp	r3, #0
 8011632:	d1d7      	bne.n	80115e4 <rcl_wait+0x25c>
 8011634:	e72e      	b.n	8011494 <rcl_wait+0x10c>
 8011636:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801163a:	430b      	orrs	r3, r1
 801163c:	bf08      	it	eq
 801163e:	4691      	moveq	r9, r2
 8011640:	f43f af21 	beq.w	8011486 <rcl_wait+0xfe>
 8011644:	9b04      	ldr	r3, [sp, #16]
 8011646:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801164a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801164e:	2b01      	cmp	r3, #1
 8011650:	9b05      	ldr	r3, [sp, #20]
 8011652:	f173 0300 	sbcs.w	r3, r3, #0
 8011656:	f04f 0300 	mov.w	r3, #0
 801165a:	4699      	mov	r9, r3
 801165c:	dac2      	bge.n	80115e4 <rcl_wait+0x25c>
 801165e:	e719      	b.n	8011494 <rcl_wait+0x10c>
 8011660:	ffffffff 	.word	0xffffffff
 8011664:	7fffffff 	.word	0x7fffffff
 8011668:	3b9aca00 	.word	0x3b9aca00
 801166c:	00000000 	.word	0x00000000

08011670 <rcl_action_take_goal_response>:
 8011670:	2800      	cmp	r0, #0
 8011672:	d039      	beq.n	80116e8 <rcl_action_take_goal_response+0x78>
 8011674:	b570      	push	{r4, r5, r6, lr}
 8011676:	4604      	mov	r4, r0
 8011678:	6800      	ldr	r0, [r0, #0]
 801167a:	b380      	cbz	r0, 80116de <rcl_action_take_goal_response+0x6e>
 801167c:	460d      	mov	r5, r1
 801167e:	4616      	mov	r6, r2
 8011680:	f7fe f872 	bl	800f768 <rcl_client_is_valid>
 8011684:	b330      	cbz	r0, 80116d4 <rcl_action_take_goal_response+0x64>
 8011686:	6820      	ldr	r0, [r4, #0]
 8011688:	3004      	adds	r0, #4
 801168a:	f7fe f86d 	bl	800f768 <rcl_client_is_valid>
 801168e:	b308      	cbz	r0, 80116d4 <rcl_action_take_goal_response+0x64>
 8011690:	6820      	ldr	r0, [r4, #0]
 8011692:	3008      	adds	r0, #8
 8011694:	f7fe f868 	bl	800f768 <rcl_client_is_valid>
 8011698:	b1e0      	cbz	r0, 80116d4 <rcl_action_take_goal_response+0x64>
 801169a:	6820      	ldr	r0, [r4, #0]
 801169c:	300c      	adds	r0, #12
 801169e:	f7fe ffff 	bl	80106a0 <rcl_subscription_is_valid>
 80116a2:	b1b8      	cbz	r0, 80116d4 <rcl_action_take_goal_response+0x64>
 80116a4:	6820      	ldr	r0, [r4, #0]
 80116a6:	3010      	adds	r0, #16
 80116a8:	f7fe fffa 	bl	80106a0 <rcl_subscription_is_valid>
 80116ac:	b190      	cbz	r0, 80116d4 <rcl_action_take_goal_response+0x64>
 80116ae:	b1cd      	cbz	r5, 80116e4 <rcl_action_take_goal_response+0x74>
 80116b0:	b1c6      	cbz	r6, 80116e4 <rcl_action_take_goal_response+0x74>
 80116b2:	6820      	ldr	r0, [r4, #0]
 80116b4:	4632      	mov	r2, r6
 80116b6:	4629      	mov	r1, r5
 80116b8:	f7fe f80e 	bl	800f6d8 <rcl_take_response>
 80116bc:	b148      	cbz	r0, 80116d2 <rcl_action_take_goal_response+0x62>
 80116be:	280a      	cmp	r0, #10
 80116c0:	d007      	beq.n	80116d2 <rcl_action_take_goal_response+0x62>
 80116c2:	f240 12f5 	movw	r2, #501	; 0x1f5
 80116c6:	f640 0337 	movw	r3, #2103	; 0x837
 80116ca:	4290      	cmp	r0, r2
 80116cc:	bf0c      	ite	eq
 80116ce:	4618      	moveq	r0, r3
 80116d0:	2001      	movne	r0, #1
 80116d2:	bd70      	pop	{r4, r5, r6, pc}
 80116d4:	f7f9 f980 	bl	800a9d8 <rcutils_reset_error>
 80116d8:	f640 0036 	movw	r0, #2102	; 0x836
 80116dc:	bd70      	pop	{r4, r5, r6, pc}
 80116de:	f640 0036 	movw	r0, #2102	; 0x836
 80116e2:	bd70      	pop	{r4, r5, r6, pc}
 80116e4:	200b      	movs	r0, #11
 80116e6:	bd70      	pop	{r4, r5, r6, pc}
 80116e8:	f640 0036 	movw	r0, #2102	; 0x836
 80116ec:	4770      	bx	lr
 80116ee:	bf00      	nop

080116f0 <rcl_action_send_result_request>:
 80116f0:	b390      	cbz	r0, 8011758 <rcl_action_send_result_request+0x68>
 80116f2:	b570      	push	{r4, r5, r6, lr}
 80116f4:	4604      	mov	r4, r0
 80116f6:	6800      	ldr	r0, [r0, #0]
 80116f8:	b348      	cbz	r0, 801174e <rcl_action_send_result_request+0x5e>
 80116fa:	460d      	mov	r5, r1
 80116fc:	4616      	mov	r6, r2
 80116fe:	f7fe f833 	bl	800f768 <rcl_client_is_valid>
 8011702:	b1f8      	cbz	r0, 8011744 <rcl_action_send_result_request+0x54>
 8011704:	6820      	ldr	r0, [r4, #0]
 8011706:	3004      	adds	r0, #4
 8011708:	f7fe f82e 	bl	800f768 <rcl_client_is_valid>
 801170c:	b1d0      	cbz	r0, 8011744 <rcl_action_send_result_request+0x54>
 801170e:	6820      	ldr	r0, [r4, #0]
 8011710:	3008      	adds	r0, #8
 8011712:	f7fe f829 	bl	800f768 <rcl_client_is_valid>
 8011716:	b1a8      	cbz	r0, 8011744 <rcl_action_send_result_request+0x54>
 8011718:	6820      	ldr	r0, [r4, #0]
 801171a:	300c      	adds	r0, #12
 801171c:	f7fe ffc0 	bl	80106a0 <rcl_subscription_is_valid>
 8011720:	b180      	cbz	r0, 8011744 <rcl_action_send_result_request+0x54>
 8011722:	6820      	ldr	r0, [r4, #0]
 8011724:	3010      	adds	r0, #16
 8011726:	f7fe ffbb 	bl	80106a0 <rcl_subscription_is_valid>
 801172a:	b158      	cbz	r0, 8011744 <rcl_action_send_result_request+0x54>
 801172c:	b195      	cbz	r5, 8011754 <rcl_action_send_result_request+0x64>
 801172e:	b18e      	cbz	r6, 8011754 <rcl_action_send_result_request+0x64>
 8011730:	6820      	ldr	r0, [r4, #0]
 8011732:	4632      	mov	r2, r6
 8011734:	4629      	mov	r1, r5
 8011736:	3008      	adds	r0, #8
 8011738:	f7fd ff98 	bl	800f66c <rcl_send_request>
 801173c:	3800      	subs	r0, #0
 801173e:	bf18      	it	ne
 8011740:	2001      	movne	r0, #1
 8011742:	bd70      	pop	{r4, r5, r6, pc}
 8011744:	f7f9 f948 	bl	800a9d8 <rcutils_reset_error>
 8011748:	f640 0036 	movw	r0, #2102	; 0x836
 801174c:	bd70      	pop	{r4, r5, r6, pc}
 801174e:	f640 0036 	movw	r0, #2102	; 0x836
 8011752:	bd70      	pop	{r4, r5, r6, pc}
 8011754:	200b      	movs	r0, #11
 8011756:	bd70      	pop	{r4, r5, r6, pc}
 8011758:	f640 0036 	movw	r0, #2102	; 0x836
 801175c:	4770      	bx	lr
 801175e:	bf00      	nop

08011760 <rcl_action_take_result_response>:
 8011760:	2800      	cmp	r0, #0
 8011762:	d03a      	beq.n	80117da <rcl_action_take_result_response+0x7a>
 8011764:	b570      	push	{r4, r5, r6, lr}
 8011766:	4604      	mov	r4, r0
 8011768:	6800      	ldr	r0, [r0, #0]
 801176a:	b388      	cbz	r0, 80117d0 <rcl_action_take_result_response+0x70>
 801176c:	460d      	mov	r5, r1
 801176e:	4616      	mov	r6, r2
 8011770:	f7fd fffa 	bl	800f768 <rcl_client_is_valid>
 8011774:	b338      	cbz	r0, 80117c6 <rcl_action_take_result_response+0x66>
 8011776:	6820      	ldr	r0, [r4, #0]
 8011778:	3004      	adds	r0, #4
 801177a:	f7fd fff5 	bl	800f768 <rcl_client_is_valid>
 801177e:	b310      	cbz	r0, 80117c6 <rcl_action_take_result_response+0x66>
 8011780:	6820      	ldr	r0, [r4, #0]
 8011782:	3008      	adds	r0, #8
 8011784:	f7fd fff0 	bl	800f768 <rcl_client_is_valid>
 8011788:	b1e8      	cbz	r0, 80117c6 <rcl_action_take_result_response+0x66>
 801178a:	6820      	ldr	r0, [r4, #0]
 801178c:	300c      	adds	r0, #12
 801178e:	f7fe ff87 	bl	80106a0 <rcl_subscription_is_valid>
 8011792:	b1c0      	cbz	r0, 80117c6 <rcl_action_take_result_response+0x66>
 8011794:	6820      	ldr	r0, [r4, #0]
 8011796:	3010      	adds	r0, #16
 8011798:	f7fe ff82 	bl	80106a0 <rcl_subscription_is_valid>
 801179c:	b198      	cbz	r0, 80117c6 <rcl_action_take_result_response+0x66>
 801179e:	b1d5      	cbz	r5, 80117d6 <rcl_action_take_result_response+0x76>
 80117a0:	b1ce      	cbz	r6, 80117d6 <rcl_action_take_result_response+0x76>
 80117a2:	6820      	ldr	r0, [r4, #0]
 80117a4:	4632      	mov	r2, r6
 80117a6:	4629      	mov	r1, r5
 80117a8:	3008      	adds	r0, #8
 80117aa:	f7fd ff95 	bl	800f6d8 <rcl_take_response>
 80117ae:	b148      	cbz	r0, 80117c4 <rcl_action_take_result_response+0x64>
 80117b0:	280a      	cmp	r0, #10
 80117b2:	d007      	beq.n	80117c4 <rcl_action_take_result_response+0x64>
 80117b4:	f240 12f5 	movw	r2, #501	; 0x1f5
 80117b8:	f640 0337 	movw	r3, #2103	; 0x837
 80117bc:	4290      	cmp	r0, r2
 80117be:	bf0c      	ite	eq
 80117c0:	4618      	moveq	r0, r3
 80117c2:	2001      	movne	r0, #1
 80117c4:	bd70      	pop	{r4, r5, r6, pc}
 80117c6:	f7f9 f907 	bl	800a9d8 <rcutils_reset_error>
 80117ca:	f640 0036 	movw	r0, #2102	; 0x836
 80117ce:	bd70      	pop	{r4, r5, r6, pc}
 80117d0:	f640 0036 	movw	r0, #2102	; 0x836
 80117d4:	bd70      	pop	{r4, r5, r6, pc}
 80117d6:	200b      	movs	r0, #11
 80117d8:	bd70      	pop	{r4, r5, r6, pc}
 80117da:	f640 0036 	movw	r0, #2102	; 0x836
 80117de:	4770      	bx	lr

080117e0 <rcl_action_take_cancel_response>:
 80117e0:	2800      	cmp	r0, #0
 80117e2:	d03a      	beq.n	801185a <rcl_action_take_cancel_response+0x7a>
 80117e4:	b570      	push	{r4, r5, r6, lr}
 80117e6:	4604      	mov	r4, r0
 80117e8:	6800      	ldr	r0, [r0, #0]
 80117ea:	b388      	cbz	r0, 8011850 <rcl_action_take_cancel_response+0x70>
 80117ec:	460d      	mov	r5, r1
 80117ee:	4616      	mov	r6, r2
 80117f0:	f7fd ffba 	bl	800f768 <rcl_client_is_valid>
 80117f4:	b338      	cbz	r0, 8011846 <rcl_action_take_cancel_response+0x66>
 80117f6:	6820      	ldr	r0, [r4, #0]
 80117f8:	3004      	adds	r0, #4
 80117fa:	f7fd ffb5 	bl	800f768 <rcl_client_is_valid>
 80117fe:	b310      	cbz	r0, 8011846 <rcl_action_take_cancel_response+0x66>
 8011800:	6820      	ldr	r0, [r4, #0]
 8011802:	3008      	adds	r0, #8
 8011804:	f7fd ffb0 	bl	800f768 <rcl_client_is_valid>
 8011808:	b1e8      	cbz	r0, 8011846 <rcl_action_take_cancel_response+0x66>
 801180a:	6820      	ldr	r0, [r4, #0]
 801180c:	300c      	adds	r0, #12
 801180e:	f7fe ff47 	bl	80106a0 <rcl_subscription_is_valid>
 8011812:	b1c0      	cbz	r0, 8011846 <rcl_action_take_cancel_response+0x66>
 8011814:	6820      	ldr	r0, [r4, #0]
 8011816:	3010      	adds	r0, #16
 8011818:	f7fe ff42 	bl	80106a0 <rcl_subscription_is_valid>
 801181c:	b198      	cbz	r0, 8011846 <rcl_action_take_cancel_response+0x66>
 801181e:	b1d5      	cbz	r5, 8011856 <rcl_action_take_cancel_response+0x76>
 8011820:	b1ce      	cbz	r6, 8011856 <rcl_action_take_cancel_response+0x76>
 8011822:	6820      	ldr	r0, [r4, #0]
 8011824:	4632      	mov	r2, r6
 8011826:	4629      	mov	r1, r5
 8011828:	3004      	adds	r0, #4
 801182a:	f7fd ff55 	bl	800f6d8 <rcl_take_response>
 801182e:	b148      	cbz	r0, 8011844 <rcl_action_take_cancel_response+0x64>
 8011830:	280a      	cmp	r0, #10
 8011832:	d007      	beq.n	8011844 <rcl_action_take_cancel_response+0x64>
 8011834:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011838:	f640 0337 	movw	r3, #2103	; 0x837
 801183c:	4290      	cmp	r0, r2
 801183e:	bf0c      	ite	eq
 8011840:	4618      	moveq	r0, r3
 8011842:	2001      	movne	r0, #1
 8011844:	bd70      	pop	{r4, r5, r6, pc}
 8011846:	f7f9 f8c7 	bl	800a9d8 <rcutils_reset_error>
 801184a:	f640 0036 	movw	r0, #2102	; 0x836
 801184e:	bd70      	pop	{r4, r5, r6, pc}
 8011850:	f640 0036 	movw	r0, #2102	; 0x836
 8011854:	bd70      	pop	{r4, r5, r6, pc}
 8011856:	200b      	movs	r0, #11
 8011858:	bd70      	pop	{r4, r5, r6, pc}
 801185a:	f640 0036 	movw	r0, #2102	; 0x836
 801185e:	4770      	bx	lr

08011860 <rcl_action_take_feedback>:
 8011860:	2800      	cmp	r0, #0
 8011862:	d038      	beq.n	80118d6 <rcl_action_take_feedback+0x76>
 8011864:	b530      	push	{r4, r5, lr}
 8011866:	4604      	mov	r4, r0
 8011868:	6800      	ldr	r0, [r0, #0]
 801186a:	b091      	sub	sp, #68	; 0x44
 801186c:	b378      	cbz	r0, 80118ce <rcl_action_take_feedback+0x6e>
 801186e:	460d      	mov	r5, r1
 8011870:	f7fd ff7a 	bl	800f768 <rcl_client_is_valid>
 8011874:	b328      	cbz	r0, 80118c2 <rcl_action_take_feedback+0x62>
 8011876:	6820      	ldr	r0, [r4, #0]
 8011878:	3004      	adds	r0, #4
 801187a:	f7fd ff75 	bl	800f768 <rcl_client_is_valid>
 801187e:	b300      	cbz	r0, 80118c2 <rcl_action_take_feedback+0x62>
 8011880:	6820      	ldr	r0, [r4, #0]
 8011882:	3008      	adds	r0, #8
 8011884:	f7fd ff70 	bl	800f768 <rcl_client_is_valid>
 8011888:	b1d8      	cbz	r0, 80118c2 <rcl_action_take_feedback+0x62>
 801188a:	6820      	ldr	r0, [r4, #0]
 801188c:	300c      	adds	r0, #12
 801188e:	f7fe ff07 	bl	80106a0 <rcl_subscription_is_valid>
 8011892:	b1b0      	cbz	r0, 80118c2 <rcl_action_take_feedback+0x62>
 8011894:	6820      	ldr	r0, [r4, #0]
 8011896:	3010      	adds	r0, #16
 8011898:	f7fe ff02 	bl	80106a0 <rcl_subscription_is_valid>
 801189c:	b188      	cbz	r0, 80118c2 <rcl_action_take_feedback+0x62>
 801189e:	b1ed      	cbz	r5, 80118dc <rcl_action_take_feedback+0x7c>
 80118a0:	6820      	ldr	r0, [r4, #0]
 80118a2:	2300      	movs	r3, #0
 80118a4:	466a      	mov	r2, sp
 80118a6:	4629      	mov	r1, r5
 80118a8:	300c      	adds	r0, #12
 80118aa:	f7fe fe9b 	bl	80105e4 <rcl_take>
 80118ae:	b160      	cbz	r0, 80118ca <rcl_action_take_feedback+0x6a>
 80118b0:	f240 1391 	movw	r3, #401	; 0x191
 80118b4:	4298      	cmp	r0, r3
 80118b6:	d014      	beq.n	80118e2 <rcl_action_take_feedback+0x82>
 80118b8:	280a      	cmp	r0, #10
 80118ba:	bf18      	it	ne
 80118bc:	2001      	movne	r0, #1
 80118be:	b011      	add	sp, #68	; 0x44
 80118c0:	bd30      	pop	{r4, r5, pc}
 80118c2:	f7f9 f889 	bl	800a9d8 <rcutils_reset_error>
 80118c6:	f640 0036 	movw	r0, #2102	; 0x836
 80118ca:	b011      	add	sp, #68	; 0x44
 80118cc:	bd30      	pop	{r4, r5, pc}
 80118ce:	f640 0036 	movw	r0, #2102	; 0x836
 80118d2:	b011      	add	sp, #68	; 0x44
 80118d4:	bd30      	pop	{r4, r5, pc}
 80118d6:	f640 0036 	movw	r0, #2102	; 0x836
 80118da:	4770      	bx	lr
 80118dc:	200b      	movs	r0, #11
 80118de:	b011      	add	sp, #68	; 0x44
 80118e0:	bd30      	pop	{r4, r5, pc}
 80118e2:	f640 0037 	movw	r0, #2103	; 0x837
 80118e6:	e7f0      	b.n	80118ca <rcl_action_take_feedback+0x6a>

080118e8 <rcl_action_wait_set_add_action_client>:
 80118e8:	2800      	cmp	r0, #0
 80118ea:	d048      	beq.n	801197e <rcl_action_wait_set_add_action_client+0x96>
 80118ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ee:	460c      	mov	r4, r1
 80118f0:	2900      	cmp	r1, #0
 80118f2:	d03c      	beq.n	801196e <rcl_action_wait_set_add_action_client+0x86>
 80118f4:	4605      	mov	r5, r0
 80118f6:	6808      	ldr	r0, [r1, #0]
 80118f8:	2800      	cmp	r0, #0
 80118fa:	d038      	beq.n	801196e <rcl_action_wait_set_add_action_client+0x86>
 80118fc:	4617      	mov	r7, r2
 80118fe:	461e      	mov	r6, r3
 8011900:	f7fd ff32 	bl	800f768 <rcl_client_is_valid>
 8011904:	b3b0      	cbz	r0, 8011974 <rcl_action_wait_set_add_action_client+0x8c>
 8011906:	6820      	ldr	r0, [r4, #0]
 8011908:	3004      	adds	r0, #4
 801190a:	f7fd ff2d 	bl	800f768 <rcl_client_is_valid>
 801190e:	b388      	cbz	r0, 8011974 <rcl_action_wait_set_add_action_client+0x8c>
 8011910:	6820      	ldr	r0, [r4, #0]
 8011912:	3008      	adds	r0, #8
 8011914:	f7fd ff28 	bl	800f768 <rcl_client_is_valid>
 8011918:	b360      	cbz	r0, 8011974 <rcl_action_wait_set_add_action_client+0x8c>
 801191a:	6820      	ldr	r0, [r4, #0]
 801191c:	300c      	adds	r0, #12
 801191e:	f7fe febf 	bl	80106a0 <rcl_subscription_is_valid>
 8011922:	b338      	cbz	r0, 8011974 <rcl_action_wait_set_add_action_client+0x8c>
 8011924:	6820      	ldr	r0, [r4, #0]
 8011926:	3010      	adds	r0, #16
 8011928:	f7fe feba 	bl	80106a0 <rcl_subscription_is_valid>
 801192c:	b310      	cbz	r0, 8011974 <rcl_action_wait_set_add_action_client+0x8c>
 801192e:	6821      	ldr	r1, [r4, #0]
 8011930:	4628      	mov	r0, r5
 8011932:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8011936:	f7ff fccd 	bl	80112d4 <rcl_wait_set_add_client>
 801193a:	b9b8      	cbnz	r0, 801196c <rcl_action_wait_set_add_action_client+0x84>
 801193c:	6821      	ldr	r1, [r4, #0]
 801193e:	4628      	mov	r0, r5
 8011940:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8011944:	3104      	adds	r1, #4
 8011946:	f7ff fcc5 	bl	80112d4 <rcl_wait_set_add_client>
 801194a:	b978      	cbnz	r0, 801196c <rcl_action_wait_set_add_action_client+0x84>
 801194c:	6821      	ldr	r1, [r4, #0]
 801194e:	4628      	mov	r0, r5
 8011950:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8011954:	3108      	adds	r1, #8
 8011956:	f7ff fcbd 	bl	80112d4 <rcl_wait_set_add_client>
 801195a:	b938      	cbnz	r0, 801196c <rcl_action_wait_set_add_action_client+0x84>
 801195c:	6821      	ldr	r1, [r4, #0]
 801195e:	4628      	mov	r0, r5
 8011960:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8011964:	310c      	adds	r1, #12
 8011966:	f7ff f96d 	bl	8010c44 <rcl_wait_set_add_subscription>
 801196a:	b158      	cbz	r0, 8011984 <rcl_action_wait_set_add_action_client+0x9c>
 801196c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801196e:	f640 0036 	movw	r0, #2102	; 0x836
 8011972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011974:	f7f9 f830 	bl	800a9d8 <rcutils_reset_error>
 8011978:	f640 0036 	movw	r0, #2102	; 0x836
 801197c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801197e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011982:	4770      	bx	lr
 8011984:	6821      	ldr	r1, [r4, #0]
 8011986:	4628      	mov	r0, r5
 8011988:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801198c:	3110      	adds	r1, #16
 801198e:	f7ff f959 	bl	8010c44 <rcl_wait_set_add_subscription>
 8011992:	2800      	cmp	r0, #0
 8011994:	d1ea      	bne.n	801196c <rcl_action_wait_set_add_action_client+0x84>
 8011996:	b11f      	cbz	r7, 80119a0 <rcl_action_wait_set_add_action_client+0xb8>
 8011998:	6823      	ldr	r3, [r4, #0]
 801199a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801199e:	603b      	str	r3, [r7, #0]
 80119a0:	2e00      	cmp	r6, #0
 80119a2:	d0e3      	beq.n	801196c <rcl_action_wait_set_add_action_client+0x84>
 80119a4:	6823      	ldr	r3, [r4, #0]
 80119a6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80119aa:	6033      	str	r3, [r6, #0]
 80119ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119ae:	bf00      	nop

080119b0 <rcl_action_client_wait_set_get_entities_ready>:
 80119b0:	2800      	cmp	r0, #0
 80119b2:	f000 808d 	beq.w	8011ad0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80119b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119ba:	460c      	mov	r4, r1
 80119bc:	2900      	cmp	r1, #0
 80119be:	d077      	beq.n	8011ab0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80119c0:	4605      	mov	r5, r0
 80119c2:	6808      	ldr	r0, [r1, #0]
 80119c4:	2800      	cmp	r0, #0
 80119c6:	d073      	beq.n	8011ab0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80119c8:	4616      	mov	r6, r2
 80119ca:	461f      	mov	r7, r3
 80119cc:	f7fd fecc 	bl	800f768 <rcl_client_is_valid>
 80119d0:	2800      	cmp	r0, #0
 80119d2:	d071      	beq.n	8011ab8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80119d4:	6820      	ldr	r0, [r4, #0]
 80119d6:	3004      	adds	r0, #4
 80119d8:	f7fd fec6 	bl	800f768 <rcl_client_is_valid>
 80119dc:	2800      	cmp	r0, #0
 80119de:	d06b      	beq.n	8011ab8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80119e0:	6820      	ldr	r0, [r4, #0]
 80119e2:	3008      	adds	r0, #8
 80119e4:	f7fd fec0 	bl	800f768 <rcl_client_is_valid>
 80119e8:	2800      	cmp	r0, #0
 80119ea:	d065      	beq.n	8011ab8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80119ec:	6820      	ldr	r0, [r4, #0]
 80119ee:	300c      	adds	r0, #12
 80119f0:	f7fe fe56 	bl	80106a0 <rcl_subscription_is_valid>
 80119f4:	2800      	cmp	r0, #0
 80119f6:	d05f      	beq.n	8011ab8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80119f8:	6820      	ldr	r0, [r4, #0]
 80119fa:	3010      	adds	r0, #16
 80119fc:	f7fe fe50 	bl	80106a0 <rcl_subscription_is_valid>
 8011a00:	2800      	cmp	r0, #0
 8011a02:	d059      	beq.n	8011ab8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011a04:	2e00      	cmp	r6, #0
 8011a06:	d060      	beq.n	8011aca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011a08:	2f00      	cmp	r7, #0
 8011a0a:	d05e      	beq.n	8011aca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011a0c:	9b06      	ldr	r3, [sp, #24]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d05b      	beq.n	8011aca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011a12:	9b07      	ldr	r3, [sp, #28]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d058      	beq.n	8011aca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011a18:	9b08      	ldr	r3, [sp, #32]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d055      	beq.n	8011aca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011a1e:	6823      	ldr	r3, [r4, #0]
 8011a20:	686a      	ldr	r2, [r5, #4]
 8011a22:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 8011a26:	428a      	cmp	r2, r1
 8011a28:	d94c      	bls.n	8011ac4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011a2a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 8011a2e:	4282      	cmp	r2, r0
 8011a30:	d948      	bls.n	8011ac4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011a32:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
 8011a36:	69ea      	ldr	r2, [r5, #28]
 8011a38:	42a2      	cmp	r2, r4
 8011a3a:	d943      	bls.n	8011ac4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011a3c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	; 0x1c8
 8011a40:	4562      	cmp	r2, ip
 8011a42:	d93f      	bls.n	8011ac4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011a44:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	; 0x1cc
 8011a48:	4572      	cmp	r2, lr
 8011a4a:	d93b      	bls.n	8011ac4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011a4c:	69aa      	ldr	r2, [r5, #24]
 8011a4e:	682d      	ldr	r5, [r5, #0]
 8011a50:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8011a54:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8011a58:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8011a5c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8011a60:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8011a64:	f103 0c0c 	add.w	ip, r3, #12
 8011a68:	eba5 050c 	sub.w	r5, r5, ip
 8011a6c:	fab5 f585 	clz	r5, r5
 8011a70:	096d      	lsrs	r5, r5, #5
 8011a72:	7035      	strb	r5, [r6, #0]
 8011a74:	f103 0510 	add.w	r5, r3, #16
 8011a78:	1b64      	subs	r4, r4, r5
 8011a7a:	fab4 f484 	clz	r4, r4
 8011a7e:	0964      	lsrs	r4, r4, #5
 8011a80:	703c      	strb	r4, [r7, #0]
 8011a82:	eba3 0008 	sub.w	r0, r3, r8
 8011a86:	1d1c      	adds	r4, r3, #4
 8011a88:	3308      	adds	r3, #8
 8011a8a:	1ad3      	subs	r3, r2, r3
 8011a8c:	fab0 f080 	clz	r0, r0
 8011a90:	9a06      	ldr	r2, [sp, #24]
 8011a92:	0940      	lsrs	r0, r0, #5
 8011a94:	1b09      	subs	r1, r1, r4
 8011a96:	7010      	strb	r0, [r2, #0]
 8011a98:	fab1 f181 	clz	r1, r1
 8011a9c:	9a07      	ldr	r2, [sp, #28]
 8011a9e:	0949      	lsrs	r1, r1, #5
 8011aa0:	7011      	strb	r1, [r2, #0]
 8011aa2:	fab3 f383 	clz	r3, r3
 8011aa6:	9a08      	ldr	r2, [sp, #32]
 8011aa8:	095b      	lsrs	r3, r3, #5
 8011aaa:	2000      	movs	r0, #0
 8011aac:	7013      	strb	r3, [r2, #0]
 8011aae:	e001      	b.n	8011ab4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8011ab0:	f640 0036 	movw	r0, #2102	; 0x836
 8011ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ab8:	f7f8 ff8e 	bl	800a9d8 <rcutils_reset_error>
 8011abc:	f640 0036 	movw	r0, #2102	; 0x836
 8011ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ac4:	2001      	movs	r0, #1
 8011ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aca:	200b      	movs	r0, #11
 8011acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ad0:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011ad4:	4770      	bx	lr
 8011ad6:	bf00      	nop

08011ad8 <rcl_action_take_goal_request>:
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	d039      	beq.n	8011b50 <rcl_action_take_goal_request+0x78>
 8011adc:	b570      	push	{r4, r5, r6, lr}
 8011ade:	4604      	mov	r4, r0
 8011ae0:	6800      	ldr	r0, [r0, #0]
 8011ae2:	b380      	cbz	r0, 8011b46 <rcl_action_take_goal_request+0x6e>
 8011ae4:	460d      	mov	r5, r1
 8011ae6:	4616      	mov	r6, r2
 8011ae8:	f7fe fc96 	bl	8010418 <rcl_service_is_valid>
 8011aec:	b330      	cbz	r0, 8011b3c <rcl_action_take_goal_request+0x64>
 8011aee:	6820      	ldr	r0, [r4, #0]
 8011af0:	3004      	adds	r0, #4
 8011af2:	f7fe fc91 	bl	8010418 <rcl_service_is_valid>
 8011af6:	b308      	cbz	r0, 8011b3c <rcl_action_take_goal_request+0x64>
 8011af8:	6820      	ldr	r0, [r4, #0]
 8011afa:	3008      	adds	r0, #8
 8011afc:	f7fe fc8c 	bl	8010418 <rcl_service_is_valid>
 8011b00:	b1e0      	cbz	r0, 8011b3c <rcl_action_take_goal_request+0x64>
 8011b02:	6820      	ldr	r0, [r4, #0]
 8011b04:	300c      	adds	r0, #12
 8011b06:	f7f7 ffdf 	bl	8009ac8 <rcl_publisher_is_valid>
 8011b0a:	b1b8      	cbz	r0, 8011b3c <rcl_action_take_goal_request+0x64>
 8011b0c:	6820      	ldr	r0, [r4, #0]
 8011b0e:	3010      	adds	r0, #16
 8011b10:	f7f7 ffda 	bl	8009ac8 <rcl_publisher_is_valid>
 8011b14:	b190      	cbz	r0, 8011b3c <rcl_action_take_goal_request+0x64>
 8011b16:	b1cd      	cbz	r5, 8011b4c <rcl_action_take_goal_request+0x74>
 8011b18:	b1c6      	cbz	r6, 8011b4c <rcl_action_take_goal_request+0x74>
 8011b1a:	6820      	ldr	r0, [r4, #0]
 8011b1c:	4632      	mov	r2, r6
 8011b1e:	4629      	mov	r1, r5
 8011b20:	f7fe fc22 	bl	8010368 <rcl_take_request>
 8011b24:	b148      	cbz	r0, 8011b3a <rcl_action_take_goal_request+0x62>
 8011b26:	280a      	cmp	r0, #10
 8011b28:	d007      	beq.n	8011b3a <rcl_action_take_goal_request+0x62>
 8011b2a:	f240 2259 	movw	r2, #601	; 0x259
 8011b2e:	f640 0399 	movw	r3, #2201	; 0x899
 8011b32:	4290      	cmp	r0, r2
 8011b34:	bf0c      	ite	eq
 8011b36:	4618      	moveq	r0, r3
 8011b38:	2001      	movne	r0, #1
 8011b3a:	bd70      	pop	{r4, r5, r6, pc}
 8011b3c:	f7f8 ff4c 	bl	800a9d8 <rcutils_reset_error>
 8011b40:	f640 0098 	movw	r0, #2200	; 0x898
 8011b44:	bd70      	pop	{r4, r5, r6, pc}
 8011b46:	f640 0098 	movw	r0, #2200	; 0x898
 8011b4a:	bd70      	pop	{r4, r5, r6, pc}
 8011b4c:	200b      	movs	r0, #11
 8011b4e:	bd70      	pop	{r4, r5, r6, pc}
 8011b50:	f640 0098 	movw	r0, #2200	; 0x898
 8011b54:	4770      	bx	lr
 8011b56:	bf00      	nop

08011b58 <rcl_action_send_goal_response>:
 8011b58:	b388      	cbz	r0, 8011bbe <rcl_action_send_goal_response+0x66>
 8011b5a:	b570      	push	{r4, r5, r6, lr}
 8011b5c:	4604      	mov	r4, r0
 8011b5e:	6800      	ldr	r0, [r0, #0]
 8011b60:	b340      	cbz	r0, 8011bb4 <rcl_action_send_goal_response+0x5c>
 8011b62:	460d      	mov	r5, r1
 8011b64:	4616      	mov	r6, r2
 8011b66:	f7fe fc57 	bl	8010418 <rcl_service_is_valid>
 8011b6a:	b1f0      	cbz	r0, 8011baa <rcl_action_send_goal_response+0x52>
 8011b6c:	6820      	ldr	r0, [r4, #0]
 8011b6e:	3004      	adds	r0, #4
 8011b70:	f7fe fc52 	bl	8010418 <rcl_service_is_valid>
 8011b74:	b1c8      	cbz	r0, 8011baa <rcl_action_send_goal_response+0x52>
 8011b76:	6820      	ldr	r0, [r4, #0]
 8011b78:	3008      	adds	r0, #8
 8011b7a:	f7fe fc4d 	bl	8010418 <rcl_service_is_valid>
 8011b7e:	b1a0      	cbz	r0, 8011baa <rcl_action_send_goal_response+0x52>
 8011b80:	6820      	ldr	r0, [r4, #0]
 8011b82:	300c      	adds	r0, #12
 8011b84:	f7f7 ffa0 	bl	8009ac8 <rcl_publisher_is_valid>
 8011b88:	b178      	cbz	r0, 8011baa <rcl_action_send_goal_response+0x52>
 8011b8a:	6820      	ldr	r0, [r4, #0]
 8011b8c:	3010      	adds	r0, #16
 8011b8e:	f7f7 ff9b 	bl	8009ac8 <rcl_publisher_is_valid>
 8011b92:	b150      	cbz	r0, 8011baa <rcl_action_send_goal_response+0x52>
 8011b94:	b18d      	cbz	r5, 8011bba <rcl_action_send_goal_response+0x62>
 8011b96:	b186      	cbz	r6, 8011bba <rcl_action_send_goal_response+0x62>
 8011b98:	6820      	ldr	r0, [r4, #0]
 8011b9a:	4632      	mov	r2, r6
 8011b9c:	4629      	mov	r1, r5
 8011b9e:	f7fe fc23 	bl	80103e8 <rcl_send_response>
 8011ba2:	3800      	subs	r0, #0
 8011ba4:	bf18      	it	ne
 8011ba6:	2001      	movne	r0, #1
 8011ba8:	bd70      	pop	{r4, r5, r6, pc}
 8011baa:	f7f8 ff15 	bl	800a9d8 <rcutils_reset_error>
 8011bae:	f640 0098 	movw	r0, #2200	; 0x898
 8011bb2:	bd70      	pop	{r4, r5, r6, pc}
 8011bb4:	f640 0098 	movw	r0, #2200	; 0x898
 8011bb8:	bd70      	pop	{r4, r5, r6, pc}
 8011bba:	200b      	movs	r0, #11
 8011bbc:	bd70      	pop	{r4, r5, r6, pc}
 8011bbe:	f640 0098 	movw	r0, #2200	; 0x898
 8011bc2:	4770      	bx	lr

08011bc4 <rcl_action_take_result_request>:
 8011bc4:	2800      	cmp	r0, #0
 8011bc6:	d03a      	beq.n	8011c3e <rcl_action_take_result_request+0x7a>
 8011bc8:	b570      	push	{r4, r5, r6, lr}
 8011bca:	4604      	mov	r4, r0
 8011bcc:	6800      	ldr	r0, [r0, #0]
 8011bce:	b388      	cbz	r0, 8011c34 <rcl_action_take_result_request+0x70>
 8011bd0:	460d      	mov	r5, r1
 8011bd2:	4616      	mov	r6, r2
 8011bd4:	f7fe fc20 	bl	8010418 <rcl_service_is_valid>
 8011bd8:	b338      	cbz	r0, 8011c2a <rcl_action_take_result_request+0x66>
 8011bda:	6820      	ldr	r0, [r4, #0]
 8011bdc:	3004      	adds	r0, #4
 8011bde:	f7fe fc1b 	bl	8010418 <rcl_service_is_valid>
 8011be2:	b310      	cbz	r0, 8011c2a <rcl_action_take_result_request+0x66>
 8011be4:	6820      	ldr	r0, [r4, #0]
 8011be6:	3008      	adds	r0, #8
 8011be8:	f7fe fc16 	bl	8010418 <rcl_service_is_valid>
 8011bec:	b1e8      	cbz	r0, 8011c2a <rcl_action_take_result_request+0x66>
 8011bee:	6820      	ldr	r0, [r4, #0]
 8011bf0:	300c      	adds	r0, #12
 8011bf2:	f7f7 ff69 	bl	8009ac8 <rcl_publisher_is_valid>
 8011bf6:	b1c0      	cbz	r0, 8011c2a <rcl_action_take_result_request+0x66>
 8011bf8:	6820      	ldr	r0, [r4, #0]
 8011bfa:	3010      	adds	r0, #16
 8011bfc:	f7f7 ff64 	bl	8009ac8 <rcl_publisher_is_valid>
 8011c00:	b198      	cbz	r0, 8011c2a <rcl_action_take_result_request+0x66>
 8011c02:	b1d5      	cbz	r5, 8011c3a <rcl_action_take_result_request+0x76>
 8011c04:	b1ce      	cbz	r6, 8011c3a <rcl_action_take_result_request+0x76>
 8011c06:	6820      	ldr	r0, [r4, #0]
 8011c08:	4632      	mov	r2, r6
 8011c0a:	4629      	mov	r1, r5
 8011c0c:	3008      	adds	r0, #8
 8011c0e:	f7fe fbab 	bl	8010368 <rcl_take_request>
 8011c12:	b148      	cbz	r0, 8011c28 <rcl_action_take_result_request+0x64>
 8011c14:	280a      	cmp	r0, #10
 8011c16:	d007      	beq.n	8011c28 <rcl_action_take_result_request+0x64>
 8011c18:	f240 2259 	movw	r2, #601	; 0x259
 8011c1c:	f640 0399 	movw	r3, #2201	; 0x899
 8011c20:	4290      	cmp	r0, r2
 8011c22:	bf0c      	ite	eq
 8011c24:	4618      	moveq	r0, r3
 8011c26:	2001      	movne	r0, #1
 8011c28:	bd70      	pop	{r4, r5, r6, pc}
 8011c2a:	f7f8 fed5 	bl	800a9d8 <rcutils_reset_error>
 8011c2e:	f640 0098 	movw	r0, #2200	; 0x898
 8011c32:	bd70      	pop	{r4, r5, r6, pc}
 8011c34:	f640 0098 	movw	r0, #2200	; 0x898
 8011c38:	bd70      	pop	{r4, r5, r6, pc}
 8011c3a:	200b      	movs	r0, #11
 8011c3c:	bd70      	pop	{r4, r5, r6, pc}
 8011c3e:	f640 0098 	movw	r0, #2200	; 0x898
 8011c42:	4770      	bx	lr

08011c44 <rcl_action_take_cancel_request>:
 8011c44:	2800      	cmp	r0, #0
 8011c46:	d03a      	beq.n	8011cbe <rcl_action_take_cancel_request+0x7a>
 8011c48:	b570      	push	{r4, r5, r6, lr}
 8011c4a:	4604      	mov	r4, r0
 8011c4c:	6800      	ldr	r0, [r0, #0]
 8011c4e:	b388      	cbz	r0, 8011cb4 <rcl_action_take_cancel_request+0x70>
 8011c50:	460d      	mov	r5, r1
 8011c52:	4616      	mov	r6, r2
 8011c54:	f7fe fbe0 	bl	8010418 <rcl_service_is_valid>
 8011c58:	b338      	cbz	r0, 8011caa <rcl_action_take_cancel_request+0x66>
 8011c5a:	6820      	ldr	r0, [r4, #0]
 8011c5c:	3004      	adds	r0, #4
 8011c5e:	f7fe fbdb 	bl	8010418 <rcl_service_is_valid>
 8011c62:	b310      	cbz	r0, 8011caa <rcl_action_take_cancel_request+0x66>
 8011c64:	6820      	ldr	r0, [r4, #0]
 8011c66:	3008      	adds	r0, #8
 8011c68:	f7fe fbd6 	bl	8010418 <rcl_service_is_valid>
 8011c6c:	b1e8      	cbz	r0, 8011caa <rcl_action_take_cancel_request+0x66>
 8011c6e:	6820      	ldr	r0, [r4, #0]
 8011c70:	300c      	adds	r0, #12
 8011c72:	f7f7 ff29 	bl	8009ac8 <rcl_publisher_is_valid>
 8011c76:	b1c0      	cbz	r0, 8011caa <rcl_action_take_cancel_request+0x66>
 8011c78:	6820      	ldr	r0, [r4, #0]
 8011c7a:	3010      	adds	r0, #16
 8011c7c:	f7f7 ff24 	bl	8009ac8 <rcl_publisher_is_valid>
 8011c80:	b198      	cbz	r0, 8011caa <rcl_action_take_cancel_request+0x66>
 8011c82:	b1d5      	cbz	r5, 8011cba <rcl_action_take_cancel_request+0x76>
 8011c84:	b1ce      	cbz	r6, 8011cba <rcl_action_take_cancel_request+0x76>
 8011c86:	6820      	ldr	r0, [r4, #0]
 8011c88:	4632      	mov	r2, r6
 8011c8a:	4629      	mov	r1, r5
 8011c8c:	3004      	adds	r0, #4
 8011c8e:	f7fe fb6b 	bl	8010368 <rcl_take_request>
 8011c92:	b148      	cbz	r0, 8011ca8 <rcl_action_take_cancel_request+0x64>
 8011c94:	280a      	cmp	r0, #10
 8011c96:	d007      	beq.n	8011ca8 <rcl_action_take_cancel_request+0x64>
 8011c98:	f240 2259 	movw	r2, #601	; 0x259
 8011c9c:	f640 0399 	movw	r3, #2201	; 0x899
 8011ca0:	4290      	cmp	r0, r2
 8011ca2:	bf0c      	ite	eq
 8011ca4:	4618      	moveq	r0, r3
 8011ca6:	2001      	movne	r0, #1
 8011ca8:	bd70      	pop	{r4, r5, r6, pc}
 8011caa:	f7f8 fe95 	bl	800a9d8 <rcutils_reset_error>
 8011cae:	f640 0098 	movw	r0, #2200	; 0x898
 8011cb2:	bd70      	pop	{r4, r5, r6, pc}
 8011cb4:	f640 0098 	movw	r0, #2200	; 0x898
 8011cb8:	bd70      	pop	{r4, r5, r6, pc}
 8011cba:	200b      	movs	r0, #11
 8011cbc:	bd70      	pop	{r4, r5, r6, pc}
 8011cbe:	f640 0098 	movw	r0, #2200	; 0x898
 8011cc2:	4770      	bx	lr

08011cc4 <rcl_action_send_cancel_response>:
 8011cc4:	b390      	cbz	r0, 8011d2c <rcl_action_send_cancel_response+0x68>
 8011cc6:	b570      	push	{r4, r5, r6, lr}
 8011cc8:	4604      	mov	r4, r0
 8011cca:	6800      	ldr	r0, [r0, #0]
 8011ccc:	b348      	cbz	r0, 8011d22 <rcl_action_send_cancel_response+0x5e>
 8011cce:	460d      	mov	r5, r1
 8011cd0:	4616      	mov	r6, r2
 8011cd2:	f7fe fba1 	bl	8010418 <rcl_service_is_valid>
 8011cd6:	b1f8      	cbz	r0, 8011d18 <rcl_action_send_cancel_response+0x54>
 8011cd8:	6820      	ldr	r0, [r4, #0]
 8011cda:	3004      	adds	r0, #4
 8011cdc:	f7fe fb9c 	bl	8010418 <rcl_service_is_valid>
 8011ce0:	b1d0      	cbz	r0, 8011d18 <rcl_action_send_cancel_response+0x54>
 8011ce2:	6820      	ldr	r0, [r4, #0]
 8011ce4:	3008      	adds	r0, #8
 8011ce6:	f7fe fb97 	bl	8010418 <rcl_service_is_valid>
 8011cea:	b1a8      	cbz	r0, 8011d18 <rcl_action_send_cancel_response+0x54>
 8011cec:	6820      	ldr	r0, [r4, #0]
 8011cee:	300c      	adds	r0, #12
 8011cf0:	f7f7 feea 	bl	8009ac8 <rcl_publisher_is_valid>
 8011cf4:	b180      	cbz	r0, 8011d18 <rcl_action_send_cancel_response+0x54>
 8011cf6:	6820      	ldr	r0, [r4, #0]
 8011cf8:	3010      	adds	r0, #16
 8011cfa:	f7f7 fee5 	bl	8009ac8 <rcl_publisher_is_valid>
 8011cfe:	b158      	cbz	r0, 8011d18 <rcl_action_send_cancel_response+0x54>
 8011d00:	b195      	cbz	r5, 8011d28 <rcl_action_send_cancel_response+0x64>
 8011d02:	b18e      	cbz	r6, 8011d28 <rcl_action_send_cancel_response+0x64>
 8011d04:	6820      	ldr	r0, [r4, #0]
 8011d06:	4632      	mov	r2, r6
 8011d08:	4629      	mov	r1, r5
 8011d0a:	3004      	adds	r0, #4
 8011d0c:	f7fe fb6c 	bl	80103e8 <rcl_send_response>
 8011d10:	3800      	subs	r0, #0
 8011d12:	bf18      	it	ne
 8011d14:	2001      	movne	r0, #1
 8011d16:	bd70      	pop	{r4, r5, r6, pc}
 8011d18:	f7f8 fe5e 	bl	800a9d8 <rcutils_reset_error>
 8011d1c:	f640 0098 	movw	r0, #2200	; 0x898
 8011d20:	bd70      	pop	{r4, r5, r6, pc}
 8011d22:	f640 0098 	movw	r0, #2200	; 0x898
 8011d26:	bd70      	pop	{r4, r5, r6, pc}
 8011d28:	200b      	movs	r0, #11
 8011d2a:	bd70      	pop	{r4, r5, r6, pc}
 8011d2c:	f640 0098 	movw	r0, #2200	; 0x898
 8011d30:	4770      	bx	lr
 8011d32:	bf00      	nop

08011d34 <rcl_action_wait_set_add_action_server>:
 8011d34:	2800      	cmp	r0, #0
 8011d36:	d04d      	beq.n	8011dd4 <rcl_action_wait_set_add_action_server+0xa0>
 8011d38:	b570      	push	{r4, r5, r6, lr}
 8011d3a:	460c      	mov	r4, r1
 8011d3c:	b159      	cbz	r1, 8011d56 <rcl_action_wait_set_add_action_server+0x22>
 8011d3e:	4605      	mov	r5, r0
 8011d40:	6808      	ldr	r0, [r1, #0]
 8011d42:	b140      	cbz	r0, 8011d56 <rcl_action_wait_set_add_action_server+0x22>
 8011d44:	4616      	mov	r6, r2
 8011d46:	f7fe fb67 	bl	8010418 <rcl_service_is_valid>
 8011d4a:	b120      	cbz	r0, 8011d56 <rcl_action_wait_set_add_action_server+0x22>
 8011d4c:	6820      	ldr	r0, [r4, #0]
 8011d4e:	3004      	adds	r0, #4
 8011d50:	f7fe fb62 	bl	8010418 <rcl_service_is_valid>
 8011d54:	b910      	cbnz	r0, 8011d5c <rcl_action_wait_set_add_action_server+0x28>
 8011d56:	f640 0098 	movw	r0, #2200	; 0x898
 8011d5a:	bd70      	pop	{r4, r5, r6, pc}
 8011d5c:	6820      	ldr	r0, [r4, #0]
 8011d5e:	3008      	adds	r0, #8
 8011d60:	f7fe fb5a 	bl	8010418 <rcl_service_is_valid>
 8011d64:	2800      	cmp	r0, #0
 8011d66:	d0f6      	beq.n	8011d56 <rcl_action_wait_set_add_action_server+0x22>
 8011d68:	6820      	ldr	r0, [r4, #0]
 8011d6a:	300c      	adds	r0, #12
 8011d6c:	f7f7 fec4 	bl	8009af8 <rcl_publisher_is_valid_except_context>
 8011d70:	2800      	cmp	r0, #0
 8011d72:	d0f0      	beq.n	8011d56 <rcl_action_wait_set_add_action_server+0x22>
 8011d74:	6820      	ldr	r0, [r4, #0]
 8011d76:	3010      	adds	r0, #16
 8011d78:	f7f7 febe 	bl	8009af8 <rcl_publisher_is_valid_except_context>
 8011d7c:	2800      	cmp	r0, #0
 8011d7e:	d0ea      	beq.n	8011d56 <rcl_action_wait_set_add_action_server+0x22>
 8011d80:	6821      	ldr	r1, [r4, #0]
 8011d82:	4628      	mov	r0, r5
 8011d84:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8011d88:	f7ff fad0 	bl	801132c <rcl_wait_set_add_service>
 8011d8c:	2800      	cmp	r0, #0
 8011d8e:	d1e4      	bne.n	8011d5a <rcl_action_wait_set_add_action_server+0x26>
 8011d90:	6821      	ldr	r1, [r4, #0]
 8011d92:	4628      	mov	r0, r5
 8011d94:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8011d98:	3104      	adds	r1, #4
 8011d9a:	f7ff fac7 	bl	801132c <rcl_wait_set_add_service>
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	d1db      	bne.n	8011d5a <rcl_action_wait_set_add_action_server+0x26>
 8011da2:	6821      	ldr	r1, [r4, #0]
 8011da4:	4628      	mov	r0, r5
 8011da6:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 8011daa:	3108      	adds	r1, #8
 8011dac:	f7ff fabe 	bl	801132c <rcl_wait_set_add_service>
 8011db0:	2800      	cmp	r0, #0
 8011db2:	d1d2      	bne.n	8011d5a <rcl_action_wait_set_add_action_server+0x26>
 8011db4:	6821      	ldr	r1, [r4, #0]
 8011db6:	4628      	mov	r0, r5
 8011db8:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8011dbc:	3114      	adds	r1, #20
 8011dbe:	f7ff fa59 	bl	8011274 <rcl_wait_set_add_timer>
 8011dc2:	2800      	cmp	r0, #0
 8011dc4:	d1c9      	bne.n	8011d5a <rcl_action_wait_set_add_action_server+0x26>
 8011dc6:	2e00      	cmp	r6, #0
 8011dc8:	d0c7      	beq.n	8011d5a <rcl_action_wait_set_add_action_server+0x26>
 8011dca:	6823      	ldr	r3, [r4, #0]
 8011dcc:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8011dd0:	6033      	str	r3, [r6, #0]
 8011dd2:	bd70      	pop	{r4, r5, r6, pc}
 8011dd4:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011dd8:	4770      	bx	lr
 8011dda:	bf00      	nop

08011ddc <rcl_action_server_wait_set_get_entities_ready>:
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	d05a      	beq.n	8011e96 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8011de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011de2:	460c      	mov	r4, r1
 8011de4:	b161      	cbz	r1, 8011e00 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011de6:	4605      	mov	r5, r0
 8011de8:	6808      	ldr	r0, [r1, #0]
 8011dea:	b148      	cbz	r0, 8011e00 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011dec:	4616      	mov	r6, r2
 8011dee:	461f      	mov	r7, r3
 8011df0:	f7fe fb12 	bl	8010418 <rcl_service_is_valid>
 8011df4:	b120      	cbz	r0, 8011e00 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011df6:	6820      	ldr	r0, [r4, #0]
 8011df8:	3004      	adds	r0, #4
 8011dfa:	f7fe fb0d 	bl	8010418 <rcl_service_is_valid>
 8011dfe:	b910      	cbnz	r0, 8011e06 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8011e00:	f640 0098 	movw	r0, #2200	; 0x898
 8011e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e06:	6820      	ldr	r0, [r4, #0]
 8011e08:	3008      	adds	r0, #8
 8011e0a:	f7fe fb05 	bl	8010418 <rcl_service_is_valid>
 8011e0e:	2800      	cmp	r0, #0
 8011e10:	d0f6      	beq.n	8011e00 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011e12:	6820      	ldr	r0, [r4, #0]
 8011e14:	300c      	adds	r0, #12
 8011e16:	f7f7 fe6f 	bl	8009af8 <rcl_publisher_is_valid_except_context>
 8011e1a:	2800      	cmp	r0, #0
 8011e1c:	d0f0      	beq.n	8011e00 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011e1e:	6820      	ldr	r0, [r4, #0]
 8011e20:	3010      	adds	r0, #16
 8011e22:	f7f7 fe69 	bl	8009af8 <rcl_publisher_is_valid_except_context>
 8011e26:	2800      	cmp	r0, #0
 8011e28:	d0ea      	beq.n	8011e00 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011e2a:	b3be      	cbz	r6, 8011e9c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011e2c:	b3b7      	cbz	r7, 8011e9c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011e2e:	9b06      	ldr	r3, [sp, #24]
 8011e30:	b3a3      	cbz	r3, 8011e9c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011e32:	9b07      	ldr	r3, [sp, #28]
 8011e34:	b393      	cbz	r3, 8011e9c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011e36:	6821      	ldr	r1, [r4, #0]
 8011e38:	692a      	ldr	r2, [r5, #16]
 8011e3a:	6a2c      	ldr	r4, [r5, #32]
 8011e3c:	f8d1 51e8 	ldr.w	r5, [r1, #488]	; 0x1e8
 8011e40:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8011e44:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8011e48:	f8d1 01e4 	ldr.w	r0, [r1, #484]	; 0x1e4
 8011e4c:	f8d1 51dc 	ldr.w	r5, [r1, #476]	; 0x1dc
 8011e50:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8011e54:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011e58:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8011e5c:	1a64      	subs	r4, r4, r1
 8011e5e:	fab4 f484 	clz	r4, r4
 8011e62:	0964      	lsrs	r4, r4, #5
 8011e64:	7034      	strb	r4, [r6, #0]
 8011e66:	1d0c      	adds	r4, r1, #4
 8011e68:	1b1b      	subs	r3, r3, r4
 8011e6a:	fab3 f383 	clz	r3, r3
 8011e6e:	095b      	lsrs	r3, r3, #5
 8011e70:	f101 0408 	add.w	r4, r1, #8
 8011e74:	703b      	strb	r3, [r7, #0]
 8011e76:	f101 0314 	add.w	r3, r1, #20
 8011e7a:	1b01      	subs	r1, r0, r4
 8011e7c:	1ad3      	subs	r3, r2, r3
 8011e7e:	fab1 f181 	clz	r1, r1
 8011e82:	9a06      	ldr	r2, [sp, #24]
 8011e84:	0949      	lsrs	r1, r1, #5
 8011e86:	7011      	strb	r1, [r2, #0]
 8011e88:	fab3 f383 	clz	r3, r3
 8011e8c:	9a07      	ldr	r2, [sp, #28]
 8011e8e:	095b      	lsrs	r3, r3, #5
 8011e90:	2000      	movs	r0, #0
 8011e92:	7013      	strb	r3, [r2, #0]
 8011e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e96:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011e9a:	4770      	bx	lr
 8011e9c:	200b      	movs	r0, #11
 8011e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ea0 <_execute_event_handler>:
 8011ea0:	2002      	movs	r0, #2
 8011ea2:	4770      	bx	lr

08011ea4 <_cancel_goal_event_handler>:
 8011ea4:	2003      	movs	r0, #3
 8011ea6:	4770      	bx	lr

08011ea8 <_succeed_event_handler>:
 8011ea8:	2004      	movs	r0, #4
 8011eaa:	4770      	bx	lr

08011eac <_abort_event_handler>:
 8011eac:	2006      	movs	r0, #6
 8011eae:	4770      	bx	lr

08011eb0 <_canceled_event_handler>:
 8011eb0:	2005      	movs	r0, #5
 8011eb2:	4770      	bx	lr

08011eb4 <rcl_action_transition_goal_state>:
 8011eb4:	b2c2      	uxtb	r2, r0
 8011eb6:	2a06      	cmp	r2, #6
 8011eb8:	d80c      	bhi.n	8011ed4 <rcl_action_transition_goal_state+0x20>
 8011eba:	2904      	cmp	r1, #4
 8011ebc:	d80a      	bhi.n	8011ed4 <rcl_action_transition_goal_state+0x20>
 8011ebe:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8011ec2:	b410      	push	{r4}
 8011ec4:	1853      	adds	r3, r2, r1
 8011ec6:	4c06      	ldr	r4, [pc, #24]	; (8011ee0 <rcl_action_transition_goal_state+0x2c>)
 8011ec8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011ecc:	b123      	cbz	r3, 8011ed8 <rcl_action_transition_goal_state+0x24>
 8011ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ed2:	4718      	bx	r3
 8011ed4:	2000      	movs	r0, #0
 8011ed6:	4770      	bx	lr
 8011ed8:	2000      	movs	r0, #0
 8011eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ede:	4770      	bx	lr
 8011ee0:	080180e4 	.word	0x080180e4

08011ee4 <rcl_action_get_zero_initialized_cancel_response>:
 8011ee4:	b510      	push	{r4, lr}
 8011ee6:	4c07      	ldr	r4, [pc, #28]	; (8011f04 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8011ee8:	4686      	mov	lr, r0
 8011eea:	4684      	mov	ip, r0
 8011eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011eee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ef4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ef8:	6823      	ldr	r3, [r4, #0]
 8011efa:	f8cc 3000 	str.w	r3, [ip]
 8011efe:	4670      	mov	r0, lr
 8011f00:	bd10      	pop	{r4, pc}
 8011f02:	bf00      	nop
 8011f04:	08018170 	.word	0x08018170

08011f08 <rclc_action_send_result_request>:
 8011f08:	b1d0      	cbz	r0, 8011f40 <rclc_action_send_result_request+0x38>
 8011f0a:	b500      	push	{lr}
 8011f0c:	4684      	mov	ip, r0
 8011f0e:	b087      	sub	sp, #28
 8011f10:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8011f14:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011f18:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8011f1c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011f20:	f10d 0e08 	add.w	lr, sp, #8
 8011f24:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011f28:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011f2c:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8011f30:	a902      	add	r1, sp, #8
 8011f32:	3010      	adds	r0, #16
 8011f34:	f7ff fbdc 	bl	80116f0 <rcl_action_send_result_request>
 8011f38:	b920      	cbnz	r0, 8011f44 <rclc_action_send_result_request+0x3c>
 8011f3a:	b007      	add	sp, #28
 8011f3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f40:	200b      	movs	r0, #11
 8011f42:	4770      	bx	lr
 8011f44:	9001      	str	r0, [sp, #4]
 8011f46:	f7f8 fd47 	bl	800a9d8 <rcutils_reset_error>
 8011f4a:	9801      	ldr	r0, [sp, #4]
 8011f4c:	b007      	add	sp, #28
 8011f4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f52:	bf00      	nop

08011f54 <rclc_action_take_goal_handle>:
 8011f54:	b160      	cbz	r0, 8011f70 <rclc_action_take_goal_handle+0x1c>
 8011f56:	6883      	ldr	r3, [r0, #8]
 8011f58:	b143      	cbz	r3, 8011f6c <rclc_action_take_goal_handle+0x18>
 8011f5a:	6819      	ldr	r1, [r3, #0]
 8011f5c:	6081      	str	r1, [r0, #8]
 8011f5e:	2200      	movs	r2, #0
 8011f60:	721a      	strb	r2, [r3, #8]
 8011f62:	68c1      	ldr	r1, [r0, #12]
 8011f64:	6019      	str	r1, [r3, #0]
 8011f66:	621a      	str	r2, [r3, #32]
 8011f68:	849a      	strh	r2, [r3, #36]	; 0x24
 8011f6a:	60c3      	str	r3, [r0, #12]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	4770      	bx	lr
 8011f70:	4603      	mov	r3, r0
 8011f72:	e7fb      	b.n	8011f6c <rclc_action_take_goal_handle+0x18>

08011f74 <rclc_action_remove_used_goal_handle>:
 8011f74:	b180      	cbz	r0, 8011f98 <rclc_action_remove_used_goal_handle+0x24>
 8011f76:	b179      	cbz	r1, 8011f98 <rclc_action_remove_used_goal_handle+0x24>
 8011f78:	68c3      	ldr	r3, [r0, #12]
 8011f7a:	4299      	cmp	r1, r3
 8011f7c:	d00d      	beq.n	8011f9a <rclc_action_remove_used_goal_handle+0x26>
 8011f7e:	b12b      	cbz	r3, 8011f8c <rclc_action_remove_used_goal_handle+0x18>
 8011f80:	681a      	ldr	r2, [r3, #0]
 8011f82:	4291      	cmp	r1, r2
 8011f84:	d003      	beq.n	8011f8e <rclc_action_remove_used_goal_handle+0x1a>
 8011f86:	4613      	mov	r3, r2
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d1f9      	bne.n	8011f80 <rclc_action_remove_used_goal_handle+0xc>
 8011f8c:	4770      	bx	lr
 8011f8e:	680a      	ldr	r2, [r1, #0]
 8011f90:	601a      	str	r2, [r3, #0]
 8011f92:	6883      	ldr	r3, [r0, #8]
 8011f94:	600b      	str	r3, [r1, #0]
 8011f96:	6081      	str	r1, [r0, #8]
 8011f98:	4770      	bx	lr
 8011f9a:	680b      	ldr	r3, [r1, #0]
 8011f9c:	60c3      	str	r3, [r0, #12]
 8011f9e:	e7f8      	b.n	8011f92 <rclc_action_remove_used_goal_handle+0x1e>

08011fa0 <rclc_action_find_goal_handle_by_uuid>:
 8011fa0:	b538      	push	{r3, r4, r5, lr}
 8011fa2:	b180      	cbz	r0, 8011fc6 <rclc_action_find_goal_handle_by_uuid+0x26>
 8011fa4:	460d      	mov	r5, r1
 8011fa6:	b181      	cbz	r1, 8011fca <rclc_action_find_goal_handle_by_uuid+0x2a>
 8011fa8:	68c4      	ldr	r4, [r0, #12]
 8011faa:	b914      	cbnz	r4, 8011fb2 <rclc_action_find_goal_handle_by_uuid+0x12>
 8011fac:	e009      	b.n	8011fc2 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011fae:	6824      	ldr	r4, [r4, #0]
 8011fb0:	b13c      	cbz	r4, 8011fc2 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011fb2:	f104 0009 	add.w	r0, r4, #9
 8011fb6:	2210      	movs	r2, #16
 8011fb8:	4629      	mov	r1, r5
 8011fba:	f004 fd61 	bl	8016a80 <memcmp>
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	d1f5      	bne.n	8011fae <rclc_action_find_goal_handle_by_uuid+0xe>
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	bd38      	pop	{r3, r4, r5, pc}
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	e7fb      	b.n	8011fc2 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011fca:	460c      	mov	r4, r1
 8011fcc:	e7f9      	b.n	8011fc2 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011fce:	bf00      	nop

08011fd0 <rclc_action_find_first_handle_by_status>:
 8011fd0:	b140      	cbz	r0, 8011fe4 <rclc_action_find_first_handle_by_status+0x14>
 8011fd2:	68c0      	ldr	r0, [r0, #12]
 8011fd4:	b910      	cbnz	r0, 8011fdc <rclc_action_find_first_handle_by_status+0xc>
 8011fd6:	e005      	b.n	8011fe4 <rclc_action_find_first_handle_by_status+0x14>
 8011fd8:	6800      	ldr	r0, [r0, #0]
 8011fda:	b118      	cbz	r0, 8011fe4 <rclc_action_find_first_handle_by_status+0x14>
 8011fdc:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011fe0:	428b      	cmp	r3, r1
 8011fe2:	d1f9      	bne.n	8011fd8 <rclc_action_find_first_handle_by_status+0x8>
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop

08011fe8 <rclc_action_find_first_terminated_handle>:
 8011fe8:	b140      	cbz	r0, 8011ffc <rclc_action_find_first_terminated_handle+0x14>
 8011fea:	68c0      	ldr	r0, [r0, #12]
 8011fec:	b910      	cbnz	r0, 8011ff4 <rclc_action_find_first_terminated_handle+0xc>
 8011fee:	e005      	b.n	8011ffc <rclc_action_find_first_terminated_handle+0x14>
 8011ff0:	6800      	ldr	r0, [r0, #0]
 8011ff2:	b118      	cbz	r0, 8011ffc <rclc_action_find_first_terminated_handle+0x14>
 8011ff4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011ff8:	2b03      	cmp	r3, #3
 8011ffa:	ddf9      	ble.n	8011ff0 <rclc_action_find_first_terminated_handle+0x8>
 8011ffc:	4770      	bx	lr
 8011ffe:	bf00      	nop

08012000 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012000:	b170      	cbz	r0, 8012020 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012002:	68c0      	ldr	r0, [r0, #12]
 8012004:	b160      	cbz	r0, 8012020 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012006:	b410      	push	{r4}
 8012008:	e001      	b.n	801200e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801200a:	6800      	ldr	r0, [r0, #0]
 801200c:	b128      	cbz	r0, 801201a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801200e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8012012:	4299      	cmp	r1, r3
 8012014:	bf08      	it	eq
 8012016:	4294      	cmpeq	r4, r2
 8012018:	d1f7      	bne.n	801200a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801201a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801201e:	4770      	bx	lr
 8012020:	4770      	bx	lr
 8012022:	bf00      	nop

08012024 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012024:	b170      	cbz	r0, 8012044 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012026:	68c0      	ldr	r0, [r0, #12]
 8012028:	b160      	cbz	r0, 8012044 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801202a:	b410      	push	{r4}
 801202c:	e001      	b.n	8012032 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801202e:	6800      	ldr	r0, [r0, #0]
 8012030:	b128      	cbz	r0, 801203e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8012032:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8012036:	4299      	cmp	r1, r3
 8012038:	bf08      	it	eq
 801203a:	4294      	cmpeq	r4, r2
 801203c:	d1f7      	bne.n	801202e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801203e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012042:	4770      	bx	lr
 8012044:	4770      	bx	lr
 8012046:	bf00      	nop

08012048 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8012048:	b170      	cbz	r0, 8012068 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801204a:	68c0      	ldr	r0, [r0, #12]
 801204c:	b160      	cbz	r0, 8012068 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801204e:	b410      	push	{r4}
 8012050:	e001      	b.n	8012056 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8012052:	6800      	ldr	r0, [r0, #0]
 8012054:	b128      	cbz	r0, 8012062 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8012056:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801205a:	4299      	cmp	r1, r3
 801205c:	bf08      	it	eq
 801205e:	4294      	cmpeq	r4, r2
 8012060:	d1f7      	bne.n	8012052 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8012062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012066:	4770      	bx	lr
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop

0801206c <rclc_action_find_first_handle_with_goal_response>:
 801206c:	b140      	cbz	r0, 8012080 <rclc_action_find_first_handle_with_goal_response+0x14>
 801206e:	68c0      	ldr	r0, [r0, #12]
 8012070:	b910      	cbnz	r0, 8012078 <rclc_action_find_first_handle_with_goal_response+0xc>
 8012072:	e005      	b.n	8012080 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012074:	6800      	ldr	r0, [r0, #0]
 8012076:	b118      	cbz	r0, 8012080 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012078:	f890 3020 	ldrb.w	r3, [r0, #32]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d0f9      	beq.n	8012074 <rclc_action_find_first_handle_with_goal_response+0x8>
 8012080:	4770      	bx	lr
 8012082:	bf00      	nop

08012084 <rclc_action_find_first_handle_with_result_response>:
 8012084:	b140      	cbz	r0, 8012098 <rclc_action_find_first_handle_with_result_response+0x14>
 8012086:	68c0      	ldr	r0, [r0, #12]
 8012088:	b910      	cbnz	r0, 8012090 <rclc_action_find_first_handle_with_result_response+0xc>
 801208a:	e005      	b.n	8012098 <rclc_action_find_first_handle_with_result_response+0x14>
 801208c:	6800      	ldr	r0, [r0, #0]
 801208e:	b118      	cbz	r0, 8012098 <rclc_action_find_first_handle_with_result_response+0x14>
 8012090:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8012094:	2b00      	cmp	r3, #0
 8012096:	d0f9      	beq.n	801208c <rclc_action_find_first_handle_with_result_response+0x8>
 8012098:	4770      	bx	lr
 801209a:	bf00      	nop

0801209c <rclc_action_server_response_goal_request>:
 801209c:	b198      	cbz	r0, 80120c6 <rclc_action_server_response_goal_request+0x2a>
 801209e:	b510      	push	{r4, lr}
 80120a0:	6844      	ldr	r4, [r0, #4]
 80120a2:	b086      	sub	sp, #24
 80120a4:	2200      	movs	r2, #0
 80120a6:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80120aa:	460b      	mov	r3, r1
 80120ac:	9205      	str	r2, [sp, #20]
 80120ae:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80120b2:	aa03      	add	r2, sp, #12
 80120b4:	f104 0010 	add.w	r0, r4, #16
 80120b8:	f88d 300c 	strb.w	r3, [sp, #12]
 80120bc:	f7ff fd4c 	bl	8011b58 <rcl_action_send_goal_response>
 80120c0:	b918      	cbnz	r0, 80120ca <rclc_action_server_response_goal_request+0x2e>
 80120c2:	b006      	add	sp, #24
 80120c4:	bd10      	pop	{r4, pc}
 80120c6:	200b      	movs	r0, #11
 80120c8:	4770      	bx	lr
 80120ca:	9001      	str	r0, [sp, #4]
 80120cc:	f7f8 fc84 	bl	800a9d8 <rcutils_reset_error>
 80120d0:	9801      	ldr	r0, [sp, #4]
 80120d2:	b006      	add	sp, #24
 80120d4:	bd10      	pop	{r4, pc}
 80120d6:	bf00      	nop

080120d8 <rclc_action_server_goal_cancel_accept>:
 80120d8:	b310      	cbz	r0, 8012120 <rclc_action_server_goal_cancel_accept+0x48>
 80120da:	b510      	push	{r4, lr}
 80120dc:	b090      	sub	sp, #64	; 0x40
 80120de:	4604      	mov	r4, r0
 80120e0:	a806      	add	r0, sp, #24
 80120e2:	f7ff feff 	bl	8011ee4 <rcl_action_get_zero_initialized_cancel_response>
 80120e6:	2300      	movs	r3, #0
 80120e8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80120ec:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80120f0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80120f4:	f88d 3018 	strb.w	r3, [sp, #24]
 80120f8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80120fc:	f8cd d01c 	str.w	sp, [sp, #28]
 8012100:	46ec      	mov	ip, sp
 8012102:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012106:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8012128 <rclc_action_server_goal_cancel_accept+0x50>
 801210a:	6860      	ldr	r0, [r4, #4]
 801210c:	aa06      	add	r2, sp, #24
 801210e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8012112:	3010      	adds	r0, #16
 8012114:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012118:	f7ff fdd4 	bl	8011cc4 <rcl_action_send_cancel_response>
 801211c:	b010      	add	sp, #64	; 0x40
 801211e:	bd10      	pop	{r4, pc}
 8012120:	200b      	movs	r0, #11
 8012122:	4770      	bx	lr
 8012124:	f3af 8000 	nop.w
 8012128:	00000001 	.word	0x00000001
 801212c:	00000001 	.word	0x00000001

08012130 <rclc_action_server_goal_cancel_reject>:
 8012130:	b082      	sub	sp, #8
 8012132:	b530      	push	{r4, r5, lr}
 8012134:	b08b      	sub	sp, #44	; 0x2c
 8012136:	ac0e      	add	r4, sp, #56	; 0x38
 8012138:	e884 000c 	stmia.w	r4, {r2, r3}
 801213c:	b188      	cbz	r0, 8012162 <rclc_action_server_goal_cancel_reject+0x32>
 801213e:	4604      	mov	r4, r0
 8012140:	a801      	add	r0, sp, #4
 8012142:	460d      	mov	r5, r1
 8012144:	f7ff fece 	bl	8011ee4 <rcl_action_get_zero_initialized_cancel_response>
 8012148:	aa01      	add	r2, sp, #4
 801214a:	a90e      	add	r1, sp, #56	; 0x38
 801214c:	f104 0010 	add.w	r0, r4, #16
 8012150:	f88d 5004 	strb.w	r5, [sp, #4]
 8012154:	f7ff fdb6 	bl	8011cc4 <rcl_action_send_cancel_response>
 8012158:	b00b      	add	sp, #44	; 0x2c
 801215a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801215e:	b002      	add	sp, #8
 8012160:	4770      	bx	lr
 8012162:	200b      	movs	r0, #11
 8012164:	b00b      	add	sp, #44	; 0x2c
 8012166:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801216a:	b002      	add	sp, #8
 801216c:	4770      	bx	lr
 801216e:	bf00      	nop

08012170 <__atomic_load_8>:
 8012170:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012174:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8012178:	4a15      	ldr	r2, [pc, #84]	; (80121d0 <__atomic_load_8+0x60>)
 801217a:	4b16      	ldr	r3, [pc, #88]	; (80121d4 <__atomic_load_8+0x64>)
 801217c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012180:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012184:	fb02 f101 	mul.w	r1, r2, r1
 8012188:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801218c:	fba3 2301 	umull	r2, r3, r3, r1
 8012190:	091b      	lsrs	r3, r3, #4
 8012192:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012196:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801219a:	b4d0      	push	{r4, r6, r7}
 801219c:	4c0e      	ldr	r4, [pc, #56]	; (80121d8 <__atomic_load_8+0x68>)
 801219e:	1ac9      	subs	r1, r1, r3
 80121a0:	1862      	adds	r2, r4, r1
 80121a2:	f04f 0c01 	mov.w	ip, #1
 80121a6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80121aa:	e8c2 cf46 	strexb	r6, ip, [r2]
 80121ae:	2e00      	cmp	r6, #0
 80121b0:	d1f9      	bne.n	80121a6 <__atomic_load_8+0x36>
 80121b2:	f3bf 8f5b 	dmb	ish
 80121b6:	b2db      	uxtb	r3, r3
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d1f4      	bne.n	80121a6 <__atomic_load_8+0x36>
 80121bc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80121c0:	f3bf 8f5b 	dmb	ish
 80121c4:	5463      	strb	r3, [r4, r1]
 80121c6:	4630      	mov	r0, r6
 80121c8:	4639      	mov	r1, r7
 80121ca:	bcd0      	pop	{r4, r6, r7}
 80121cc:	4770      	bx	lr
 80121ce:	bf00      	nop
 80121d0:	27d4eb2d 	.word	0x27d4eb2d
 80121d4:	b21642c9 	.word	0xb21642c9
 80121d8:	2000db58 	.word	0x2000db58

080121dc <__atomic_store_8>:
 80121dc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80121e0:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80121e4:	b570      	push	{r4, r5, r6, lr}
 80121e6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80121ea:	4c14      	ldr	r4, [pc, #80]	; (801223c <__atomic_store_8+0x60>)
 80121ec:	4d14      	ldr	r5, [pc, #80]	; (8012240 <__atomic_store_8+0x64>)
 80121ee:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80121f2:	fb04 f101 	mul.w	r1, r4, r1
 80121f6:	4c13      	ldr	r4, [pc, #76]	; (8012244 <__atomic_store_8+0x68>)
 80121f8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80121fc:	fba4 4e01 	umull	r4, lr, r4, r1
 8012200:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8012204:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012208:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801220c:	eba1 0e0e 	sub.w	lr, r1, lr
 8012210:	eb05 0c0e 	add.w	ip, r5, lr
 8012214:	f04f 0401 	mov.w	r4, #1
 8012218:	e8dc 1f4f 	ldrexb	r1, [ip]
 801221c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8012220:	2e00      	cmp	r6, #0
 8012222:	d1f9      	bne.n	8012218 <__atomic_store_8+0x3c>
 8012224:	f3bf 8f5b 	dmb	ish
 8012228:	b2c9      	uxtb	r1, r1
 801222a:	2900      	cmp	r1, #0
 801222c:	d1f4      	bne.n	8012218 <__atomic_store_8+0x3c>
 801222e:	e9c0 2300 	strd	r2, r3, [r0]
 8012232:	f3bf 8f5b 	dmb	ish
 8012236:	f805 100e 	strb.w	r1, [r5, lr]
 801223a:	bd70      	pop	{r4, r5, r6, pc}
 801223c:	27d4eb2d 	.word	0x27d4eb2d
 8012240:	2000db58 	.word	0x2000db58
 8012244:	b21642c9 	.word	0xb21642c9

08012248 <__atomic_exchange_8>:
 8012248:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801224c:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8012250:	4916      	ldr	r1, [pc, #88]	; (80122ac <__atomic_exchange_8+0x64>)
 8012252:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8012256:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801225a:	fb01 fc0c 	mul.w	ip, r1, ip
 801225e:	4914      	ldr	r1, [pc, #80]	; (80122b0 <__atomic_exchange_8+0x68>)
 8012260:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8012264:	b570      	push	{r4, r5, r6, lr}
 8012266:	4605      	mov	r5, r0
 8012268:	fba1 010c 	umull	r0, r1, r1, ip
 801226c:	0909      	lsrs	r1, r1, #4
 801226e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8012272:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8012276:	4e0f      	ldr	r6, [pc, #60]	; (80122b4 <__atomic_exchange_8+0x6c>)
 8012278:	ebac 0c01 	sub.w	ip, ip, r1
 801227c:	eb06 010c 	add.w	r1, r6, ip
 8012280:	f04f 0e01 	mov.w	lr, #1
 8012284:	e8d1 4f4f 	ldrexb	r4, [r1]
 8012288:	e8c1 ef40 	strexb	r0, lr, [r1]
 801228c:	2800      	cmp	r0, #0
 801228e:	d1f9      	bne.n	8012284 <__atomic_exchange_8+0x3c>
 8012290:	f3bf 8f5b 	dmb	ish
 8012294:	b2e4      	uxtb	r4, r4
 8012296:	2c00      	cmp	r4, #0
 8012298:	d1f4      	bne.n	8012284 <__atomic_exchange_8+0x3c>
 801229a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801229e:	e9c5 2300 	strd	r2, r3, [r5]
 80122a2:	f3bf 8f5b 	dmb	ish
 80122a6:	f806 400c 	strb.w	r4, [r6, ip]
 80122aa:	bd70      	pop	{r4, r5, r6, pc}
 80122ac:	27d4eb2d 	.word	0x27d4eb2d
 80122b0:	b21642c9 	.word	0xb21642c9
 80122b4:	2000db58 	.word	0x2000db58

080122b8 <rcutils_get_env>:
 80122b8:	b168      	cbz	r0, 80122d6 <rcutils_get_env+0x1e>
 80122ba:	b510      	push	{r4, lr}
 80122bc:	460c      	mov	r4, r1
 80122be:	b129      	cbz	r1, 80122cc <rcutils_get_env+0x14>
 80122c0:	f004 f836 	bl	8016330 <getenv>
 80122c4:	b120      	cbz	r0, 80122d0 <rcutils_get_env+0x18>
 80122c6:	6020      	str	r0, [r4, #0]
 80122c8:	2000      	movs	r0, #0
 80122ca:	bd10      	pop	{r4, pc}
 80122cc:	4803      	ldr	r0, [pc, #12]	; (80122dc <rcutils_get_env+0x24>)
 80122ce:	bd10      	pop	{r4, pc}
 80122d0:	4b03      	ldr	r3, [pc, #12]	; (80122e0 <rcutils_get_env+0x28>)
 80122d2:	6023      	str	r3, [r4, #0]
 80122d4:	bd10      	pop	{r4, pc}
 80122d6:	4803      	ldr	r0, [pc, #12]	; (80122e4 <rcutils_get_env+0x2c>)
 80122d8:	4770      	bx	lr
 80122da:	bf00      	nop
 80122dc:	080181b0 	.word	0x080181b0
 80122e0:	080182d4 	.word	0x080182d4
 80122e4:	08018194 	.word	0x08018194

080122e8 <rcutils_is_directory>:
 80122e8:	2000      	movs	r0, #0
 80122ea:	4770      	bx	lr

080122ec <rcutils_join_path>:
 80122ec:	b082      	sub	sp, #8
 80122ee:	e88d 000c 	stmia.w	sp, {r2, r3}
 80122f2:	2000      	movs	r0, #0
 80122f4:	b002      	add	sp, #8
 80122f6:	4770      	bx	lr

080122f8 <rcutils_to_native_path>:
 80122f8:	b084      	sub	sp, #16
 80122fa:	a801      	add	r0, sp, #4
 80122fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012300:	b004      	add	sp, #16
 8012302:	2000      	movs	r0, #0
 8012304:	4770      	bx	lr
 8012306:	bf00      	nop

08012308 <rcutils_format_string_limit>:
 8012308:	b40f      	push	{r0, r1, r2, r3}
 801230a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801230c:	b083      	sub	sp, #12
 801230e:	ac08      	add	r4, sp, #32
 8012310:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012312:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012316:	b34e      	cbz	r6, 801236c <rcutils_format_string_limit+0x64>
 8012318:	a808      	add	r0, sp, #32
 801231a:	f7f8 fb39 	bl	800a990 <rcutils_allocator_is_valid>
 801231e:	b328      	cbz	r0, 801236c <rcutils_format_string_limit+0x64>
 8012320:	2100      	movs	r1, #0
 8012322:	ab0f      	add	r3, sp, #60	; 0x3c
 8012324:	4632      	mov	r2, r6
 8012326:	4608      	mov	r0, r1
 8012328:	e9cd 3300 	strd	r3, r3, [sp]
 801232c:	f000 f8f4 	bl	8012518 <rcutils_vsnprintf>
 8012330:	1c43      	adds	r3, r0, #1
 8012332:	4605      	mov	r5, r0
 8012334:	d01a      	beq.n	801236c <rcutils_format_string_limit+0x64>
 8012336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012338:	990c      	ldr	r1, [sp, #48]	; 0x30
 801233a:	1c47      	adds	r7, r0, #1
 801233c:	429f      	cmp	r7, r3
 801233e:	bf84      	itt	hi
 8012340:	461f      	movhi	r7, r3
 8012342:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8012346:	4638      	mov	r0, r7
 8012348:	9b08      	ldr	r3, [sp, #32]
 801234a:	4798      	blx	r3
 801234c:	4604      	mov	r4, r0
 801234e:	b168      	cbz	r0, 801236c <rcutils_format_string_limit+0x64>
 8012350:	9b01      	ldr	r3, [sp, #4]
 8012352:	4632      	mov	r2, r6
 8012354:	4639      	mov	r1, r7
 8012356:	f000 f8df 	bl	8012518 <rcutils_vsnprintf>
 801235a:	2800      	cmp	r0, #0
 801235c:	db02      	blt.n	8012364 <rcutils_format_string_limit+0x5c>
 801235e:	2300      	movs	r3, #0
 8012360:	5563      	strb	r3, [r4, r5]
 8012362:	e004      	b.n	801236e <rcutils_format_string_limit+0x66>
 8012364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012366:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012368:	4620      	mov	r0, r4
 801236a:	4798      	blx	r3
 801236c:	2400      	movs	r4, #0
 801236e:	4620      	mov	r0, r4
 8012370:	b003      	add	sp, #12
 8012372:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012376:	b004      	add	sp, #16
 8012378:	4770      	bx	lr
 801237a:	bf00      	nop

0801237c <rcutils_repl_str>:
 801237c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012380:	ed2d 8b02 	vpush	{d8}
 8012384:	b087      	sub	sp, #28
 8012386:	4680      	mov	r8, r0
 8012388:	4608      	mov	r0, r1
 801238a:	f8cd 8004 	str.w	r8, [sp, #4]
 801238e:	ee08 2a10 	vmov	s16, r2
 8012392:	468a      	mov	sl, r1
 8012394:	4699      	mov	r9, r3
 8012396:	f7ed ff2d 	bl	80001f4 <strlen>
 801239a:	2600      	movs	r6, #0
 801239c:	4647      	mov	r7, r8
 801239e:	9002      	str	r0, [sp, #8]
 80123a0:	46b3      	mov	fp, r6
 80123a2:	2510      	movs	r5, #16
 80123a4:	46b0      	mov	r8, r6
 80123a6:	e01d      	b.n	80123e4 <rcutils_repl_str+0x68>
 80123a8:	f10b 0b01 	add.w	fp, fp, #1
 80123ac:	455e      	cmp	r6, fp
 80123ae:	d211      	bcs.n	80123d4 <rcutils_repl_str+0x58>
 80123b0:	442e      	add	r6, r5
 80123b2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80123b6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80123ba:	00b1      	lsls	r1, r6, #2
 80123bc:	4798      	blx	r3
 80123be:	2800      	cmp	r0, #0
 80123c0:	f000 8088 	beq.w	80124d4 <rcutils_repl_str+0x158>
 80123c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80123c8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80123cc:	4680      	mov	r8, r0
 80123ce:	bf28      	it	cs
 80123d0:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 80123d4:	9a01      	ldr	r2, [sp, #4]
 80123d6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80123da:	1aa2      	subs	r2, r4, r2
 80123dc:	f843 2c04 	str.w	r2, [r3, #-4]
 80123e0:	9b02      	ldr	r3, [sp, #8]
 80123e2:	18e7      	adds	r7, r4, r3
 80123e4:	4651      	mov	r1, sl
 80123e6:	4638      	mov	r0, r7
 80123e8:	f004 fb9b 	bl	8016b22 <strstr>
 80123ec:	4604      	mov	r4, r0
 80123ee:	4640      	mov	r0, r8
 80123f0:	2c00      	cmp	r4, #0
 80123f2:	d1d9      	bne.n	80123a8 <rcutils_repl_str+0x2c>
 80123f4:	46b8      	mov	r8, r7
 80123f6:	4607      	mov	r7, r0
 80123f8:	4640      	mov	r0, r8
 80123fa:	f7ed fefb 	bl	80001f4 <strlen>
 80123fe:	9b01      	ldr	r3, [sp, #4]
 8012400:	eba8 0303 	sub.w	r3, r8, r3
 8012404:	181c      	adds	r4, r3, r0
 8012406:	9404      	str	r4, [sp, #16]
 8012408:	f1bb 0f00 	cmp.w	fp, #0
 801240c:	d04a      	beq.n	80124a4 <rcutils_repl_str+0x128>
 801240e:	ee18 0a10 	vmov	r0, s16
 8012412:	f7ed feef 	bl	80001f4 <strlen>
 8012416:	9b02      	ldr	r3, [sp, #8]
 8012418:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801241c:	1ac3      	subs	r3, r0, r3
 801241e:	fb0b 4303 	mla	r3, fp, r3, r4
 8012422:	461a      	mov	r2, r3
 8012424:	9305      	str	r3, [sp, #20]
 8012426:	4606      	mov	r6, r0
 8012428:	f8d9 3000 	ldr.w	r3, [r9]
 801242c:	1c50      	adds	r0, r2, #1
 801242e:	4798      	blx	r3
 8012430:	9003      	str	r0, [sp, #12]
 8012432:	2800      	cmp	r0, #0
 8012434:	d04f      	beq.n	80124d6 <rcutils_repl_str+0x15a>
 8012436:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801243a:	683a      	ldr	r2, [r7, #0]
 801243c:	4641      	mov	r1, r8
 801243e:	f004 fc12 	bl	8016c66 <memcpy>
 8012442:	683d      	ldr	r5, [r7, #0]
 8012444:	9b03      	ldr	r3, [sp, #12]
 8012446:	9701      	str	r7, [sp, #4]
 8012448:	46ba      	mov	sl, r7
 801244a:	441d      	add	r5, r3
 801244c:	9f02      	ldr	r7, [sp, #8]
 801244e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012452:	2401      	movs	r4, #1
 8012454:	46d1      	mov	r9, sl
 8012456:	ee18 aa10 	vmov	sl, s16
 801245a:	e00a      	b.n	8012472 <rcutils_repl_str+0xf6>
 801245c:	f8d9 5000 	ldr.w	r5, [r9]
 8012460:	1aaa      	subs	r2, r5, r2
 8012462:	1885      	adds	r5, r0, r2
 8012464:	f004 fbff 	bl	8016c66 <memcpy>
 8012468:	45a3      	cmp	fp, r4
 801246a:	f104 0201 	add.w	r2, r4, #1
 801246e:	d935      	bls.n	80124dc <rcutils_repl_str+0x160>
 8012470:	4614      	mov	r4, r2
 8012472:	4632      	mov	r2, r6
 8012474:	4651      	mov	r1, sl
 8012476:	4628      	mov	r0, r5
 8012478:	f004 fbf5 	bl	8016c66 <memcpy>
 801247c:	f859 2b04 	ldr.w	r2, [r9], #4
 8012480:	45a3      	cmp	fp, r4
 8012482:	443a      	add	r2, r7
 8012484:	eb05 0006 	add.w	r0, r5, r6
 8012488:	eb08 0102 	add.w	r1, r8, r2
 801248c:	d1e6      	bne.n	801245c <rcutils_repl_str+0xe0>
 801248e:	9b04      	ldr	r3, [sp, #16]
 8012490:	1a9a      	subs	r2, r3, r2
 8012492:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012496:	f004 fbe6 	bl	8016c66 <memcpy>
 801249a:	9a03      	ldr	r2, [sp, #12]
 801249c:	9905      	ldr	r1, [sp, #20]
 801249e:	2300      	movs	r3, #0
 80124a0:	5453      	strb	r3, [r2, r1]
 80124a2:	e00b      	b.n	80124bc <rcutils_repl_str+0x140>
 80124a4:	4620      	mov	r0, r4
 80124a6:	f8d9 3000 	ldr.w	r3, [r9]
 80124aa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80124ae:	3001      	adds	r0, #1
 80124b0:	4798      	blx	r3
 80124b2:	9003      	str	r0, [sp, #12]
 80124b4:	b110      	cbz	r0, 80124bc <rcutils_repl_str+0x140>
 80124b6:	9901      	ldr	r1, [sp, #4]
 80124b8:	f004 fbcd 	bl	8016c56 <strcpy>
 80124bc:	4638      	mov	r0, r7
 80124be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80124c2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80124c6:	4798      	blx	r3
 80124c8:	9803      	ldr	r0, [sp, #12]
 80124ca:	b007      	add	sp, #28
 80124cc:	ecbd 8b02 	vpop	{d8}
 80124d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d4:	4647      	mov	r7, r8
 80124d6:	2300      	movs	r3, #0
 80124d8:	9303      	str	r3, [sp, #12]
 80124da:	e7ef      	b.n	80124bc <rcutils_repl_str+0x140>
 80124dc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80124e0:	e7db      	b.n	801249a <rcutils_repl_str+0x11e>
 80124e2:	bf00      	nop

080124e4 <rcutils_snprintf>:
 80124e4:	b40c      	push	{r2, r3}
 80124e6:	b530      	push	{r4, r5, lr}
 80124e8:	b083      	sub	sp, #12
 80124ea:	ab06      	add	r3, sp, #24
 80124ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80124f0:	9301      	str	r3, [sp, #4]
 80124f2:	b152      	cbz	r2, 801250a <rcutils_snprintf+0x26>
 80124f4:	b138      	cbz	r0, 8012506 <rcutils_snprintf+0x22>
 80124f6:	b141      	cbz	r1, 801250a <rcutils_snprintf+0x26>
 80124f8:	f004 fab4 	bl	8016a64 <vsniprintf>
 80124fc:	b003      	add	sp, #12
 80124fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012502:	b002      	add	sp, #8
 8012504:	4770      	bx	lr
 8012506:	2900      	cmp	r1, #0
 8012508:	d0f6      	beq.n	80124f8 <rcutils_snprintf+0x14>
 801250a:	f004 fb77 	bl	8016bfc <__errno>
 801250e:	2316      	movs	r3, #22
 8012510:	6003      	str	r3, [r0, #0]
 8012512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012516:	e7f1      	b.n	80124fc <rcutils_snprintf+0x18>

08012518 <rcutils_vsnprintf>:
 8012518:	b570      	push	{r4, r5, r6, lr}
 801251a:	b13a      	cbz	r2, 801252c <rcutils_vsnprintf+0x14>
 801251c:	b120      	cbz	r0, 8012528 <rcutils_vsnprintf+0x10>
 801251e:	b129      	cbz	r1, 801252c <rcutils_vsnprintf+0x14>
 8012520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012524:	f004 ba9e 	b.w	8016a64 <vsniprintf>
 8012528:	2900      	cmp	r1, #0
 801252a:	d0f9      	beq.n	8012520 <rcutils_vsnprintf+0x8>
 801252c:	f004 fb66 	bl	8016bfc <__errno>
 8012530:	2316      	movs	r3, #22
 8012532:	6003      	str	r3, [r0, #0]
 8012534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012538:	bd70      	pop	{r4, r5, r6, pc}
 801253a:	bf00      	nop

0801253c <rcutils_strdup>:
 801253c:	b084      	sub	sp, #16
 801253e:	b570      	push	{r4, r5, r6, lr}
 8012540:	b082      	sub	sp, #8
 8012542:	ac07      	add	r4, sp, #28
 8012544:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8012548:	4605      	mov	r5, r0
 801254a:	b1b0      	cbz	r0, 801257a <rcutils_strdup+0x3e>
 801254c:	f7ed fe52 	bl	80001f4 <strlen>
 8012550:	1c42      	adds	r2, r0, #1
 8012552:	9b07      	ldr	r3, [sp, #28]
 8012554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012556:	9201      	str	r2, [sp, #4]
 8012558:	4606      	mov	r6, r0
 801255a:	4610      	mov	r0, r2
 801255c:	4798      	blx	r3
 801255e:	4604      	mov	r4, r0
 8012560:	b128      	cbz	r0, 801256e <rcutils_strdup+0x32>
 8012562:	9a01      	ldr	r2, [sp, #4]
 8012564:	4629      	mov	r1, r5
 8012566:	f004 fb7e 	bl	8016c66 <memcpy>
 801256a:	2300      	movs	r3, #0
 801256c:	55a3      	strb	r3, [r4, r6]
 801256e:	4620      	mov	r0, r4
 8012570:	b002      	add	sp, #8
 8012572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012576:	b004      	add	sp, #16
 8012578:	4770      	bx	lr
 801257a:	4604      	mov	r4, r0
 801257c:	e7f7      	b.n	801256e <rcutils_strdup+0x32>
 801257e:	bf00      	nop

08012580 <rcutils_strndup>:
 8012580:	b082      	sub	sp, #8
 8012582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012584:	ac06      	add	r4, sp, #24
 8012586:	e884 000c 	stmia.w	r4, {r2, r3}
 801258a:	4605      	mov	r5, r0
 801258c:	b188      	cbz	r0, 80125b2 <rcutils_strndup+0x32>
 801258e:	1c4f      	adds	r7, r1, #1
 8012590:	460e      	mov	r6, r1
 8012592:	4638      	mov	r0, r7
 8012594:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012596:	4790      	blx	r2
 8012598:	4604      	mov	r4, r0
 801259a:	b128      	cbz	r0, 80125a8 <rcutils_strndup+0x28>
 801259c:	463a      	mov	r2, r7
 801259e:	4629      	mov	r1, r5
 80125a0:	f004 fb61 	bl	8016c66 <memcpy>
 80125a4:	2300      	movs	r3, #0
 80125a6:	55a3      	strb	r3, [r4, r6]
 80125a8:	4620      	mov	r0, r4
 80125aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80125ae:	b002      	add	sp, #8
 80125b0:	4770      	bx	lr
 80125b2:	4604      	mov	r4, r0
 80125b4:	e7f8      	b.n	80125a8 <rcutils_strndup+0x28>
 80125b6:	bf00      	nop

080125b8 <rcutils_get_zero_initialized_string_map>:
 80125b8:	4b01      	ldr	r3, [pc, #4]	; (80125c0 <rcutils_get_zero_initialized_string_map+0x8>)
 80125ba:	2000      	movs	r0, #0
 80125bc:	6018      	str	r0, [r3, #0]
 80125be:	4770      	bx	lr
 80125c0:	2000db70 	.word	0x2000db70

080125c4 <rcutils_string_map_reserve>:
 80125c4:	2800      	cmp	r0, #0
 80125c6:	d05f      	beq.n	8012688 <rcutils_string_map_reserve+0xc4>
 80125c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125cc:	460c      	mov	r4, r1
 80125ce:	6801      	ldr	r1, [r0, #0]
 80125d0:	b082      	sub	sp, #8
 80125d2:	4605      	mov	r5, r0
 80125d4:	b129      	cbz	r1, 80125e2 <rcutils_string_map_reserve+0x1e>
 80125d6:	68cb      	ldr	r3, [r1, #12]
 80125d8:	42a3      	cmp	r3, r4
 80125da:	d906      	bls.n	80125ea <rcutils_string_map_reserve+0x26>
 80125dc:	461c      	mov	r4, r3
 80125de:	2900      	cmp	r1, #0
 80125e0:	d1f9      	bne.n	80125d6 <rcutils_string_map_reserve+0x12>
 80125e2:	201f      	movs	r0, #31
 80125e4:	b002      	add	sp, #8
 80125e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ea:	688b      	ldr	r3, [r1, #8]
 80125ec:	42a3      	cmp	r3, r4
 80125ee:	d047      	beq.n	8012680 <rcutils_string_map_reserve+0xbc>
 80125f0:	6a0e      	ldr	r6, [r1, #32]
 80125f2:	2c00      	cmp	r4, #0
 80125f4:	d034      	beq.n	8012660 <rcutils_string_map_reserve+0x9c>
 80125f6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80125fa:	d243      	bcs.n	8012684 <rcutils_string_map_reserve+0xc0>
 80125fc:	00a7      	lsls	r7, r4, #2
 80125fe:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8012602:	6808      	ldr	r0, [r1, #0]
 8012604:	4632      	mov	r2, r6
 8012606:	4639      	mov	r1, r7
 8012608:	47c0      	blx	r8
 801260a:	2800      	cmp	r0, #0
 801260c:	d03a      	beq.n	8012684 <rcutils_string_map_reserve+0xc0>
 801260e:	682b      	ldr	r3, [r5, #0]
 8012610:	4632      	mov	r2, r6
 8012612:	6018      	str	r0, [r3, #0]
 8012614:	4639      	mov	r1, r7
 8012616:	6858      	ldr	r0, [r3, #4]
 8012618:	47c0      	blx	r8
 801261a:	2800      	cmp	r0, #0
 801261c:	d032      	beq.n	8012684 <rcutils_string_map_reserve+0xc0>
 801261e:	682d      	ldr	r5, [r5, #0]
 8012620:	68ab      	ldr	r3, [r5, #8]
 8012622:	6068      	str	r0, [r5, #4]
 8012624:	42a3      	cmp	r3, r4
 8012626:	d226      	bcs.n	8012676 <rcutils_string_map_reserve+0xb2>
 8012628:	682a      	ldr	r2, [r5, #0]
 801262a:	eb00 0c07 	add.w	ip, r0, r7
 801262e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8012632:	45e6      	cmp	lr, ip
 8012634:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8012638:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801263c:	d203      	bcs.n	8012646 <rcutils_string_map_reserve+0x82>
 801263e:	eb02 0c07 	add.w	ip, r2, r7
 8012642:	4566      	cmp	r6, ip
 8012644:	d322      	bcc.n	801268c <rcutils_string_map_reserve+0xc8>
 8012646:	1ae3      	subs	r3, r4, r3
 8012648:	009a      	lsls	r2, r3, #2
 801264a:	4670      	mov	r0, lr
 801264c:	2100      	movs	r1, #0
 801264e:	9201      	str	r2, [sp, #4]
 8012650:	f004 fa40 	bl	8016ad4 <memset>
 8012654:	9a01      	ldr	r2, [sp, #4]
 8012656:	2100      	movs	r1, #0
 8012658:	4630      	mov	r0, r6
 801265a:	f004 fa3b 	bl	8016ad4 <memset>
 801265e:	e00a      	b.n	8012676 <rcutils_string_map_reserve+0xb2>
 8012660:	694f      	ldr	r7, [r1, #20]
 8012662:	6808      	ldr	r0, [r1, #0]
 8012664:	4631      	mov	r1, r6
 8012666:	47b8      	blx	r7
 8012668:	682b      	ldr	r3, [r5, #0]
 801266a:	4631      	mov	r1, r6
 801266c:	6858      	ldr	r0, [r3, #4]
 801266e:	601c      	str	r4, [r3, #0]
 8012670:	47b8      	blx	r7
 8012672:	682d      	ldr	r5, [r5, #0]
 8012674:	606c      	str	r4, [r5, #4]
 8012676:	2000      	movs	r0, #0
 8012678:	60ac      	str	r4, [r5, #8]
 801267a:	b002      	add	sp, #8
 801267c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012680:	2000      	movs	r0, #0
 8012682:	e7af      	b.n	80125e4 <rcutils_string_map_reserve+0x20>
 8012684:	200a      	movs	r0, #10
 8012686:	e7ad      	b.n	80125e4 <rcutils_string_map_reserve+0x20>
 8012688:	200b      	movs	r0, #11
 801268a:	4770      	bx	lr
 801268c:	1f0b      	subs	r3, r1, #4
 801268e:	4418      	add	r0, r3
 8012690:	4413      	add	r3, r2
 8012692:	3a04      	subs	r2, #4
 8012694:	4417      	add	r7, r2
 8012696:	2200      	movs	r2, #0
 8012698:	f843 2f04 	str.w	r2, [r3, #4]!
 801269c:	42bb      	cmp	r3, r7
 801269e:	f840 2f04 	str.w	r2, [r0, #4]!
 80126a2:	d1f9      	bne.n	8012698 <rcutils_string_map_reserve+0xd4>
 80126a4:	e7e7      	b.n	8012676 <rcutils_string_map_reserve+0xb2>
 80126a6:	bf00      	nop

080126a8 <rcutils_string_map_init>:
 80126a8:	b082      	sub	sp, #8
 80126aa:	b570      	push	{r4, r5, r6, lr}
 80126ac:	ac04      	add	r4, sp, #16
 80126ae:	e884 000c 	stmia.w	r4, {r2, r3}
 80126b2:	b380      	cbz	r0, 8012716 <rcutils_string_map_init+0x6e>
 80126b4:	6806      	ldr	r6, [r0, #0]
 80126b6:	4604      	mov	r4, r0
 80126b8:	b12e      	cbz	r6, 80126c6 <rcutils_string_map_init+0x1e>
 80126ba:	251e      	movs	r5, #30
 80126bc:	4628      	mov	r0, r5
 80126be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126c2:	b002      	add	sp, #8
 80126c4:	4770      	bx	lr
 80126c6:	a804      	add	r0, sp, #16
 80126c8:	460d      	mov	r5, r1
 80126ca:	f7f8 f961 	bl	800a990 <rcutils_allocator_is_valid>
 80126ce:	b310      	cbz	r0, 8012716 <rcutils_string_map_init+0x6e>
 80126d0:	9b04      	ldr	r3, [sp, #16]
 80126d2:	9908      	ldr	r1, [sp, #32]
 80126d4:	2024      	movs	r0, #36	; 0x24
 80126d6:	4798      	blx	r3
 80126d8:	6020      	str	r0, [r4, #0]
 80126da:	b310      	cbz	r0, 8012722 <rcutils_string_map_init+0x7a>
 80126dc:	f10d 0e10 	add.w	lr, sp, #16
 80126e0:	e9c0 6600 	strd	r6, r6, [r0]
 80126e4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80126e8:	f100 0c10 	add.w	ip, r0, #16
 80126ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80126f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80126f4:	f8de 3000 	ldr.w	r3, [lr]
 80126f8:	f8cc 3000 	str.w	r3, [ip]
 80126fc:	4629      	mov	r1, r5
 80126fe:	4620      	mov	r0, r4
 8012700:	f7ff ff60 	bl	80125c4 <rcutils_string_map_reserve>
 8012704:	4605      	mov	r5, r0
 8012706:	2800      	cmp	r0, #0
 8012708:	d0d8      	beq.n	80126bc <rcutils_string_map_init+0x14>
 801270a:	9b05      	ldr	r3, [sp, #20]
 801270c:	9908      	ldr	r1, [sp, #32]
 801270e:	6820      	ldr	r0, [r4, #0]
 8012710:	4798      	blx	r3
 8012712:	6026      	str	r6, [r4, #0]
 8012714:	e7d2      	b.n	80126bc <rcutils_string_map_init+0x14>
 8012716:	250b      	movs	r5, #11
 8012718:	4628      	mov	r0, r5
 801271a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801271e:	b002      	add	sp, #8
 8012720:	4770      	bx	lr
 8012722:	250a      	movs	r5, #10
 8012724:	e7ca      	b.n	80126bc <rcutils_string_map_init+0x14>
 8012726:	bf00      	nop

08012728 <rcutils_string_map_fini>:
 8012728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801272c:	b082      	sub	sp, #8
 801272e:	2800      	cmp	r0, #0
 8012730:	d03a      	beq.n	80127a8 <rcutils_string_map_fini+0x80>
 8012732:	6804      	ldr	r4, [r0, #0]
 8012734:	4606      	mov	r6, r0
 8012736:	2c00      	cmp	r4, #0
 8012738:	d032      	beq.n	80127a0 <rcutils_string_map_fini+0x78>
 801273a:	68a3      	ldr	r3, [r4, #8]
 801273c:	b32b      	cbz	r3, 801278a <rcutils_string_map_fini+0x62>
 801273e:	2500      	movs	r5, #0
 8012740:	6822      	ldr	r2, [r4, #0]
 8012742:	462f      	mov	r7, r5
 8012744:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012748:	b1e0      	cbz	r0, 8012784 <rcutils_string_map_fini+0x5c>
 801274a:	6a21      	ldr	r1, [r4, #32]
 801274c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012750:	9101      	str	r1, [sp, #4]
 8012752:	47c0      	blx	r8
 8012754:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012758:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801275c:	9901      	ldr	r1, [sp, #4]
 801275e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012762:	47c0      	blx	r8
 8012764:	68e3      	ldr	r3, [r4, #12]
 8012766:	6862      	ldr	r2, [r4, #4]
 8012768:	3b01      	subs	r3, #1
 801276a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801276e:	60e3      	str	r3, [r4, #12]
 8012770:	6834      	ldr	r4, [r6, #0]
 8012772:	68a3      	ldr	r3, [r4, #8]
 8012774:	3501      	adds	r5, #1
 8012776:	429d      	cmp	r5, r3
 8012778:	d207      	bcs.n	801278a <rcutils_string_map_fini+0x62>
 801277a:	6822      	ldr	r2, [r4, #0]
 801277c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012780:	2800      	cmp	r0, #0
 8012782:	d1e2      	bne.n	801274a <rcutils_string_map_fini+0x22>
 8012784:	3501      	adds	r5, #1
 8012786:	429d      	cmp	r5, r3
 8012788:	d3dc      	bcc.n	8012744 <rcutils_string_map_fini+0x1c>
 801278a:	2100      	movs	r1, #0
 801278c:	4630      	mov	r0, r6
 801278e:	f7ff ff19 	bl	80125c4 <rcutils_string_map_reserve>
 8012792:	4604      	mov	r4, r0
 8012794:	b920      	cbnz	r0, 80127a0 <rcutils_string_map_fini+0x78>
 8012796:	6830      	ldr	r0, [r6, #0]
 8012798:	6943      	ldr	r3, [r0, #20]
 801279a:	6a01      	ldr	r1, [r0, #32]
 801279c:	4798      	blx	r3
 801279e:	6034      	str	r4, [r6, #0]
 80127a0:	4620      	mov	r0, r4
 80127a2:	b002      	add	sp, #8
 80127a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a8:	240b      	movs	r4, #11
 80127aa:	4620      	mov	r0, r4
 80127ac:	b002      	add	sp, #8
 80127ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b2:	bf00      	nop

080127b4 <rcutils_string_map_getn>:
 80127b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b8:	b300      	cbz	r0, 80127fc <rcutils_string_map_getn+0x48>
 80127ba:	6807      	ldr	r7, [r0, #0]
 80127bc:	b1ff      	cbz	r7, 80127fe <rcutils_string_map_getn+0x4a>
 80127be:	4688      	mov	r8, r1
 80127c0:	b1e1      	cbz	r1, 80127fc <rcutils_string_map_getn+0x48>
 80127c2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80127c6:	683e      	ldr	r6, [r7, #0]
 80127c8:	f1ba 0f00 	cmp.w	sl, #0
 80127cc:	d016      	beq.n	80127fc <rcutils_string_map_getn+0x48>
 80127ce:	4691      	mov	r9, r2
 80127d0:	3e04      	subs	r6, #4
 80127d2:	2400      	movs	r4, #0
 80127d4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80127d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80127dc:	4628      	mov	r0, r5
 80127de:	3401      	adds	r4, #1
 80127e0:	b155      	cbz	r5, 80127f8 <rcutils_string_map_getn+0x44>
 80127e2:	f7ed fd07 	bl	80001f4 <strlen>
 80127e6:	4548      	cmp	r0, r9
 80127e8:	4602      	mov	r2, r0
 80127ea:	4629      	mov	r1, r5
 80127ec:	bf38      	it	cc
 80127ee:	464a      	movcc	r2, r9
 80127f0:	4640      	mov	r0, r8
 80127f2:	f004 f984 	bl	8016afe <strncmp>
 80127f6:	b128      	cbz	r0, 8012804 <rcutils_string_map_getn+0x50>
 80127f8:	45a2      	cmp	sl, r4
 80127fa:	d1eb      	bne.n	80127d4 <rcutils_string_map_getn+0x20>
 80127fc:	2700      	movs	r7, #0
 80127fe:	4638      	mov	r0, r7
 8012800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f853 700b 	ldr.w	r7, [r3, fp]
 801280a:	4638      	mov	r0, r7
 801280c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012810 <rmw_get_zero_initialized_context>:
 8012810:	b510      	push	{r4, lr}
 8012812:	4604      	mov	r4, r0
 8012814:	3010      	adds	r0, #16
 8012816:	f000 f80b 	bl	8012830 <rmw_get_zero_initialized_init_options>
 801281a:	2300      	movs	r3, #0
 801281c:	2000      	movs	r0, #0
 801281e:	2100      	movs	r1, #0
 8012820:	e9c4 0100 	strd	r0, r1, [r4]
 8012824:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012828:	60a3      	str	r3, [r4, #8]
 801282a:	4620      	mov	r0, r4
 801282c:	bd10      	pop	{r4, pc}
 801282e:	bf00      	nop

08012830 <rmw_get_zero_initialized_init_options>:
 8012830:	b510      	push	{r4, lr}
 8012832:	2238      	movs	r2, #56	; 0x38
 8012834:	4604      	mov	r4, r0
 8012836:	2100      	movs	r1, #0
 8012838:	f004 f94c 	bl	8016ad4 <memset>
 801283c:	f104 0010 	add.w	r0, r4, #16
 8012840:	f000 f806 	bl	8012850 <rmw_get_default_security_options>
 8012844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012848:	60e3      	str	r3, [r4, #12]
 801284a:	4620      	mov	r0, r4
 801284c:	bd10      	pop	{r4, pc}
 801284e:	bf00      	nop

08012850 <rmw_get_default_security_options>:
 8012850:	2200      	movs	r2, #0
 8012852:	7002      	strb	r2, [r0, #0]
 8012854:	6042      	str	r2, [r0, #4]
 8012856:	4770      	bx	lr

08012858 <rmw_subscription_content_filter_options_fini>:
 8012858:	b1b0      	cbz	r0, 8012888 <rmw_subscription_content_filter_options_fini+0x30>
 801285a:	b538      	push	{r3, r4, r5, lr}
 801285c:	4604      	mov	r4, r0
 801285e:	4608      	mov	r0, r1
 8012860:	460d      	mov	r5, r1
 8012862:	f7f8 f895 	bl	800a990 <rcutils_allocator_is_valid>
 8012866:	b168      	cbz	r0, 8012884 <rmw_subscription_content_filter_options_fini+0x2c>
 8012868:	6820      	ldr	r0, [r4, #0]
 801286a:	b120      	cbz	r0, 8012876 <rmw_subscription_content_filter_options_fini+0x1e>
 801286c:	686b      	ldr	r3, [r5, #4]
 801286e:	6929      	ldr	r1, [r5, #16]
 8012870:	4798      	blx	r3
 8012872:	2300      	movs	r3, #0
 8012874:	6023      	str	r3, [r4, #0]
 8012876:	1d20      	adds	r0, r4, #4
 8012878:	f003 fc04 	bl	8016084 <rcutils_string_array_fini>
 801287c:	3800      	subs	r0, #0
 801287e:	bf18      	it	ne
 8012880:	2001      	movne	r0, #1
 8012882:	bd38      	pop	{r3, r4, r5, pc}
 8012884:	200b      	movs	r0, #11
 8012886:	bd38      	pop	{r3, r4, r5, pc}
 8012888:	200b      	movs	r0, #11
 801288a:	4770      	bx	lr

0801288c <rmw_get_default_subscription_options>:
 801288c:	2200      	movs	r2, #0
 801288e:	e9c0 2200 	strd	r2, r2, [r0]
 8012892:	6082      	str	r2, [r0, #8]
 8012894:	4770      	bx	lr
 8012896:	bf00      	nop

08012898 <rmw_time_equal>:
 8012898:	b4f0      	push	{r4, r5, r6, r7}
 801289a:	b084      	sub	sp, #16
 801289c:	ac04      	add	r4, sp, #16
 801289e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80128a2:	4603      	mov	r3, r0
 80128a4:	4924      	ldr	r1, [pc, #144]	; (8012938 <rmw_time_equal+0xa0>)
 80128a6:	9e03      	ldr	r6, [sp, #12]
 80128a8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80128ac:	2202      	movs	r2, #2
 80128ae:	4299      	cmp	r1, r3
 80128b0:	41aa      	sbcs	r2, r5
 80128b2:	d330      	bcc.n	8012916 <rmw_time_equal+0x7e>
 80128b4:	4c21      	ldr	r4, [pc, #132]	; (801293c <rmw_time_equal+0xa4>)
 80128b6:	fba3 3204 	umull	r3, r2, r3, r4
 80128ba:	fb04 2205 	mla	r2, r4, r5, r2
 80128be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80128c2:	43dd      	mvns	r5, r3
 80128c4:	1a8c      	subs	r4, r1, r2
 80128c6:	4285      	cmp	r5, r0
 80128c8:	41b4      	sbcs	r4, r6
 80128ca:	d332      	bcc.n	8012932 <rmw_time_equal+0x9a>
 80128cc:	eb10 0c03 	adds.w	ip, r0, r3
 80128d0:	eb42 0106 	adc.w	r1, r2, r6
 80128d4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80128d8:	4817      	ldr	r0, [pc, #92]	; (8012938 <rmw_time_equal+0xa0>)
 80128da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80128dc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80128de:	2202      	movs	r2, #2
 80128e0:	4298      	cmp	r0, r3
 80128e2:	41b2      	sbcs	r2, r6
 80128e4:	d31c      	bcc.n	8012920 <rmw_time_equal+0x88>
 80128e6:	4c15      	ldr	r4, [pc, #84]	; (801293c <rmw_time_equal+0xa4>)
 80128e8:	fba3 3204 	umull	r3, r2, r3, r4
 80128ec:	fb04 2206 	mla	r2, r4, r6, r2
 80128f0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80128f4:	43de      	mvns	r6, r3
 80128f6:	1a84      	subs	r4, r0, r2
 80128f8:	42ae      	cmp	r6, r5
 80128fa:	41bc      	sbcs	r4, r7
 80128fc:	d315      	bcc.n	801292a <rmw_time_equal+0x92>
 80128fe:	195b      	adds	r3, r3, r5
 8012900:	eb42 0207 	adc.w	r2, r2, r7
 8012904:	428a      	cmp	r2, r1
 8012906:	bf08      	it	eq
 8012908:	4563      	cmpeq	r3, ip
 801290a:	bf0c      	ite	eq
 801290c:	2001      	moveq	r0, #1
 801290e:	2000      	movne	r0, #0
 8012910:	b004      	add	sp, #16
 8012912:	bcf0      	pop	{r4, r5, r6, r7}
 8012914:	4770      	bx	lr
 8012916:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801291a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801291e:	e7d9      	b.n	80128d4 <rmw_time_equal+0x3c>
 8012920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012924:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8012928:	e7ec      	b.n	8012904 <rmw_time_equal+0x6c>
 801292a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801292e:	4602      	mov	r2, r0
 8012930:	e7e8      	b.n	8012904 <rmw_time_equal+0x6c>
 8012932:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8012936:	e7cd      	b.n	80128d4 <rmw_time_equal+0x3c>
 8012938:	25c17d04 	.word	0x25c17d04
 801293c:	3b9aca00 	.word	0x3b9aca00

08012940 <rmw_time_total_nsec>:
 8012940:	b470      	push	{r4, r5, r6}
 8012942:	b085      	sub	sp, #20
 8012944:	ac04      	add	r4, sp, #16
 8012946:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801294a:	4603      	mov	r3, r0
 801294c:	4912      	ldr	r1, [pc, #72]	; (8012998 <rmw_time_total_nsec+0x58>)
 801294e:	9e03      	ldr	r6, [sp, #12]
 8012950:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012954:	2202      	movs	r2, #2
 8012956:	4299      	cmp	r1, r3
 8012958:	41aa      	sbcs	r2, r5
 801295a:	d311      	bcc.n	8012980 <rmw_time_total_nsec+0x40>
 801295c:	4c0f      	ldr	r4, [pc, #60]	; (801299c <rmw_time_total_nsec+0x5c>)
 801295e:	fba3 3204 	umull	r3, r2, r3, r4
 8012962:	fb04 2205 	mla	r2, r4, r5, r2
 8012966:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801296a:	43dd      	mvns	r5, r3
 801296c:	1a8c      	subs	r4, r1, r2
 801296e:	4285      	cmp	r5, r0
 8012970:	41b4      	sbcs	r4, r6
 8012972:	d30c      	bcc.n	801298e <rmw_time_total_nsec+0x4e>
 8012974:	1818      	adds	r0, r3, r0
 8012976:	eb42 0106 	adc.w	r1, r2, r6
 801297a:	b005      	add	sp, #20
 801297c:	bc70      	pop	{r4, r5, r6}
 801297e:	4770      	bx	lr
 8012980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012984:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012988:	b005      	add	sp, #20
 801298a:	bc70      	pop	{r4, r5, r6}
 801298c:	4770      	bx	lr
 801298e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012992:	b005      	add	sp, #20
 8012994:	bc70      	pop	{r4, r5, r6}
 8012996:	4770      	bx	lr
 8012998:	25c17d04 	.word	0x25c17d04
 801299c:	3b9aca00 	.word	0x3b9aca00

080129a0 <rmw_get_zero_initialized_message_info>:
 80129a0:	b510      	push	{r4, lr}
 80129a2:	2240      	movs	r2, #64	; 0x40
 80129a4:	4604      	mov	r4, r0
 80129a6:	2100      	movs	r1, #0
 80129a8:	f004 f894 	bl	8016ad4 <memset>
 80129ac:	4620      	mov	r0, r4
 80129ae:	bd10      	pop	{r4, pc}

080129b0 <rmw_validate_full_topic_name>:
 80129b0:	2800      	cmp	r0, #0
 80129b2:	d057      	beq.n	8012a64 <rmw_validate_full_topic_name+0xb4>
 80129b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129b8:	460d      	mov	r5, r1
 80129ba:	2900      	cmp	r1, #0
 80129bc:	d054      	beq.n	8012a68 <rmw_validate_full_topic_name+0xb8>
 80129be:	4616      	mov	r6, r2
 80129c0:	4604      	mov	r4, r0
 80129c2:	f7ed fc17 	bl	80001f4 <strlen>
 80129c6:	b148      	cbz	r0, 80129dc <rmw_validate_full_topic_name+0x2c>
 80129c8:	7823      	ldrb	r3, [r4, #0]
 80129ca:	2b2f      	cmp	r3, #47	; 0x2f
 80129cc:	d00d      	beq.n	80129ea <rmw_validate_full_topic_name+0x3a>
 80129ce:	2302      	movs	r3, #2
 80129d0:	602b      	str	r3, [r5, #0]
 80129d2:	b13e      	cbz	r6, 80129e4 <rmw_validate_full_topic_name+0x34>
 80129d4:	2000      	movs	r0, #0
 80129d6:	6030      	str	r0, [r6, #0]
 80129d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129dc:	2301      	movs	r3, #1
 80129de:	602b      	str	r3, [r5, #0]
 80129e0:	2e00      	cmp	r6, #0
 80129e2:	d1f7      	bne.n	80129d4 <rmw_validate_full_topic_name+0x24>
 80129e4:	2000      	movs	r0, #0
 80129e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ea:	1e43      	subs	r3, r0, #1
 80129ec:	5ce2      	ldrb	r2, [r4, r3]
 80129ee:	2a2f      	cmp	r2, #47	; 0x2f
 80129f0:	d03c      	beq.n	8012a6c <rmw_validate_full_topic_name+0xbc>
 80129f2:	1e63      	subs	r3, r4, #1
 80129f4:	eb03 0800 	add.w	r8, r3, r0
 80129f8:	f1c4 0e01 	rsb	lr, r4, #1
 80129fc:	eb0e 0703 	add.w	r7, lr, r3
 8012a00:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012a04:	f021 0220 	bic.w	r2, r1, #32
 8012a08:	3a41      	subs	r2, #65	; 0x41
 8012a0a:	2a19      	cmp	r2, #25
 8012a0c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8012a10:	d90b      	bls.n	8012a2a <rmw_validate_full_topic_name+0x7a>
 8012a12:	295f      	cmp	r1, #95	; 0x5f
 8012a14:	d009      	beq.n	8012a2a <rmw_validate_full_topic_name+0x7a>
 8012a16:	f1bc 0f0a 	cmp.w	ip, #10
 8012a1a:	d906      	bls.n	8012a2a <rmw_validate_full_topic_name+0x7a>
 8012a1c:	2304      	movs	r3, #4
 8012a1e:	602b      	str	r3, [r5, #0]
 8012a20:	2e00      	cmp	r6, #0
 8012a22:	d0df      	beq.n	80129e4 <rmw_validate_full_topic_name+0x34>
 8012a24:	6037      	str	r7, [r6, #0]
 8012a26:	2000      	movs	r0, #0
 8012a28:	e7d6      	b.n	80129d8 <rmw_validate_full_topic_name+0x28>
 8012a2a:	4543      	cmp	r3, r8
 8012a2c:	d1e6      	bne.n	80129fc <rmw_validate_full_topic_name+0x4c>
 8012a2e:	4f1a      	ldr	r7, [pc, #104]	; (8012a98 <rmw_validate_full_topic_name+0xe8>)
 8012a30:	2301      	movs	r3, #1
 8012a32:	e004      	b.n	8012a3e <rmw_validate_full_topic_name+0x8e>
 8012a34:	4298      	cmp	r0, r3
 8012a36:	f104 0401 	add.w	r4, r4, #1
 8012a3a:	d91c      	bls.n	8012a76 <rmw_validate_full_topic_name+0xc6>
 8012a3c:	4613      	mov	r3, r2
 8012a3e:	4298      	cmp	r0, r3
 8012a40:	f103 0201 	add.w	r2, r3, #1
 8012a44:	d0f6      	beq.n	8012a34 <rmw_validate_full_topic_name+0x84>
 8012a46:	7821      	ldrb	r1, [r4, #0]
 8012a48:	292f      	cmp	r1, #47	; 0x2f
 8012a4a:	d1f3      	bne.n	8012a34 <rmw_validate_full_topic_name+0x84>
 8012a4c:	7861      	ldrb	r1, [r4, #1]
 8012a4e:	292f      	cmp	r1, #47	; 0x2f
 8012a50:	d01c      	beq.n	8012a8c <rmw_validate_full_topic_name+0xdc>
 8012a52:	5dc9      	ldrb	r1, [r1, r7]
 8012a54:	0749      	lsls	r1, r1, #29
 8012a56:	d5ed      	bpl.n	8012a34 <rmw_validate_full_topic_name+0x84>
 8012a58:	2206      	movs	r2, #6
 8012a5a:	602a      	str	r2, [r5, #0]
 8012a5c:	2e00      	cmp	r6, #0
 8012a5e:	d0c1      	beq.n	80129e4 <rmw_validate_full_topic_name+0x34>
 8012a60:	6033      	str	r3, [r6, #0]
 8012a62:	e7bf      	b.n	80129e4 <rmw_validate_full_topic_name+0x34>
 8012a64:	200b      	movs	r0, #11
 8012a66:	4770      	bx	lr
 8012a68:	200b      	movs	r0, #11
 8012a6a:	e7b5      	b.n	80129d8 <rmw_validate_full_topic_name+0x28>
 8012a6c:	2203      	movs	r2, #3
 8012a6e:	602a      	str	r2, [r5, #0]
 8012a70:	2e00      	cmp	r6, #0
 8012a72:	d1f5      	bne.n	8012a60 <rmw_validate_full_topic_name+0xb0>
 8012a74:	e7b6      	b.n	80129e4 <rmw_validate_full_topic_name+0x34>
 8012a76:	28f7      	cmp	r0, #247	; 0xf7
 8012a78:	d802      	bhi.n	8012a80 <rmw_validate_full_topic_name+0xd0>
 8012a7a:	2000      	movs	r0, #0
 8012a7c:	6028      	str	r0, [r5, #0]
 8012a7e:	e7ab      	b.n	80129d8 <rmw_validate_full_topic_name+0x28>
 8012a80:	2307      	movs	r3, #7
 8012a82:	602b      	str	r3, [r5, #0]
 8012a84:	2e00      	cmp	r6, #0
 8012a86:	d0ad      	beq.n	80129e4 <rmw_validate_full_topic_name+0x34>
 8012a88:	23f6      	movs	r3, #246	; 0xf6
 8012a8a:	e7e9      	b.n	8012a60 <rmw_validate_full_topic_name+0xb0>
 8012a8c:	2205      	movs	r2, #5
 8012a8e:	602a      	str	r2, [r5, #0]
 8012a90:	2e00      	cmp	r6, #0
 8012a92:	d1e5      	bne.n	8012a60 <rmw_validate_full_topic_name+0xb0>
 8012a94:	e7a6      	b.n	80129e4 <rmw_validate_full_topic_name+0x34>
 8012a96:	bf00      	nop
 8012a98:	080187c4 	.word	0x080187c4

08012a9c <rmw_validate_namespace_with_size>:
 8012a9c:	b340      	cbz	r0, 8012af0 <rmw_validate_namespace_with_size+0x54>
 8012a9e:	b570      	push	{r4, r5, r6, lr}
 8012aa0:	4614      	mov	r4, r2
 8012aa2:	b0c2      	sub	sp, #264	; 0x108
 8012aa4:	b332      	cbz	r2, 8012af4 <rmw_validate_namespace_with_size+0x58>
 8012aa6:	2901      	cmp	r1, #1
 8012aa8:	460d      	mov	r5, r1
 8012aaa:	461e      	mov	r6, r3
 8012aac:	d102      	bne.n	8012ab4 <rmw_validate_namespace_with_size+0x18>
 8012aae:	7803      	ldrb	r3, [r0, #0]
 8012ab0:	2b2f      	cmp	r3, #47	; 0x2f
 8012ab2:	d012      	beq.n	8012ada <rmw_validate_namespace_with_size+0x3e>
 8012ab4:	aa01      	add	r2, sp, #4
 8012ab6:	4669      	mov	r1, sp
 8012ab8:	f7ff ff7a 	bl	80129b0 <rmw_validate_full_topic_name>
 8012abc:	b978      	cbnz	r0, 8012ade <rmw_validate_namespace_with_size+0x42>
 8012abe:	9b00      	ldr	r3, [sp, #0]
 8012ac0:	b14b      	cbz	r3, 8012ad6 <rmw_validate_namespace_with_size+0x3a>
 8012ac2:	2b07      	cmp	r3, #7
 8012ac4:	d007      	beq.n	8012ad6 <rmw_validate_namespace_with_size+0x3a>
 8012ac6:	1e5a      	subs	r2, r3, #1
 8012ac8:	2a05      	cmp	r2, #5
 8012aca:	d82b      	bhi.n	8012b24 <rmw_validate_namespace_with_size+0x88>
 8012acc:	e8df f002 	tbb	[pc, r2]
 8012ad0:	1e212427 	.word	0x1e212427
 8012ad4:	141b      	.short	0x141b
 8012ad6:	2df5      	cmp	r5, #245	; 0xf5
 8012ad8:	d803      	bhi.n	8012ae2 <rmw_validate_namespace_with_size+0x46>
 8012ada:	2000      	movs	r0, #0
 8012adc:	6020      	str	r0, [r4, #0]
 8012ade:	b042      	add	sp, #264	; 0x108
 8012ae0:	bd70      	pop	{r4, r5, r6, pc}
 8012ae2:	2307      	movs	r3, #7
 8012ae4:	6023      	str	r3, [r4, #0]
 8012ae6:	2e00      	cmp	r6, #0
 8012ae8:	d0f9      	beq.n	8012ade <rmw_validate_namespace_with_size+0x42>
 8012aea:	23f4      	movs	r3, #244	; 0xf4
 8012aec:	6033      	str	r3, [r6, #0]
 8012aee:	e7f6      	b.n	8012ade <rmw_validate_namespace_with_size+0x42>
 8012af0:	200b      	movs	r0, #11
 8012af2:	4770      	bx	lr
 8012af4:	200b      	movs	r0, #11
 8012af6:	e7f2      	b.n	8012ade <rmw_validate_namespace_with_size+0x42>
 8012af8:	2306      	movs	r3, #6
 8012afa:	6023      	str	r3, [r4, #0]
 8012afc:	2e00      	cmp	r6, #0
 8012afe:	d0ee      	beq.n	8012ade <rmw_validate_namespace_with_size+0x42>
 8012b00:	9b01      	ldr	r3, [sp, #4]
 8012b02:	6033      	str	r3, [r6, #0]
 8012b04:	e7eb      	b.n	8012ade <rmw_validate_namespace_with_size+0x42>
 8012b06:	2305      	movs	r3, #5
 8012b08:	6023      	str	r3, [r4, #0]
 8012b0a:	e7f7      	b.n	8012afc <rmw_validate_namespace_with_size+0x60>
 8012b0c:	2304      	movs	r3, #4
 8012b0e:	6023      	str	r3, [r4, #0]
 8012b10:	e7f4      	b.n	8012afc <rmw_validate_namespace_with_size+0x60>
 8012b12:	2303      	movs	r3, #3
 8012b14:	6023      	str	r3, [r4, #0]
 8012b16:	e7f1      	b.n	8012afc <rmw_validate_namespace_with_size+0x60>
 8012b18:	2302      	movs	r3, #2
 8012b1a:	6023      	str	r3, [r4, #0]
 8012b1c:	e7ee      	b.n	8012afc <rmw_validate_namespace_with_size+0x60>
 8012b1e:	2301      	movs	r3, #1
 8012b20:	6023      	str	r3, [r4, #0]
 8012b22:	e7eb      	b.n	8012afc <rmw_validate_namespace_with_size+0x60>
 8012b24:	4a03      	ldr	r2, [pc, #12]	; (8012b34 <rmw_validate_namespace_with_size+0x98>)
 8012b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012b2a:	a802      	add	r0, sp, #8
 8012b2c:	f7ff fcda 	bl	80124e4 <rcutils_snprintf>
 8012b30:	2001      	movs	r0, #1
 8012b32:	e7d4      	b.n	8012ade <rmw_validate_namespace_with_size+0x42>
 8012b34:	080181cc 	.word	0x080181cc

08012b38 <rmw_validate_namespace>:
 8012b38:	b168      	cbz	r0, 8012b56 <rmw_validate_namespace+0x1e>
 8012b3a:	b570      	push	{r4, r5, r6, lr}
 8012b3c:	460d      	mov	r5, r1
 8012b3e:	4616      	mov	r6, r2
 8012b40:	4604      	mov	r4, r0
 8012b42:	f7ed fb57 	bl	80001f4 <strlen>
 8012b46:	4633      	mov	r3, r6
 8012b48:	4601      	mov	r1, r0
 8012b4a:	462a      	mov	r2, r5
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b52:	f7ff bfa3 	b.w	8012a9c <rmw_validate_namespace_with_size>
 8012b56:	200b      	movs	r0, #11
 8012b58:	4770      	bx	lr
 8012b5a:	bf00      	nop

08012b5c <rmw_namespace_validation_result_string>:
 8012b5c:	2807      	cmp	r0, #7
 8012b5e:	bf9a      	itte	ls
 8012b60:	4b02      	ldrls	r3, [pc, #8]	; (8012b6c <rmw_namespace_validation_result_string+0x10>)
 8012b62:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012b66:	4802      	ldrhi	r0, [pc, #8]	; (8012b70 <rmw_namespace_validation_result_string+0x14>)
 8012b68:	4770      	bx	lr
 8012b6a:	bf00      	nop
 8012b6c:	080183c4 	.word	0x080183c4
 8012b70:	0801821c 	.word	0x0801821c

08012b74 <rmw_validate_node_name>:
 8012b74:	2800      	cmp	r0, #0
 8012b76:	d03b      	beq.n	8012bf0 <rmw_validate_node_name+0x7c>
 8012b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b7c:	460d      	mov	r5, r1
 8012b7e:	2900      	cmp	r1, #0
 8012b80:	d038      	beq.n	8012bf4 <rmw_validate_node_name+0x80>
 8012b82:	4616      	mov	r6, r2
 8012b84:	4604      	mov	r4, r0
 8012b86:	f7ed fb35 	bl	80001f4 <strlen>
 8012b8a:	b1e0      	cbz	r0, 8012bc6 <rmw_validate_node_name+0x52>
 8012b8c:	1e63      	subs	r3, r4, #1
 8012b8e:	eb03 0800 	add.w	r8, r3, r0
 8012b92:	f1c4 0101 	rsb	r1, r4, #1
 8012b96:	18cf      	adds	r7, r1, r3
 8012b98:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012b9c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8012ba0:	f02e 0c20 	bic.w	ip, lr, #32
 8012ba4:	2a09      	cmp	r2, #9
 8012ba6:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8012baa:	d914      	bls.n	8012bd6 <rmw_validate_node_name+0x62>
 8012bac:	f1bc 0f19 	cmp.w	ip, #25
 8012bb0:	d911      	bls.n	8012bd6 <rmw_validate_node_name+0x62>
 8012bb2:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8012bb6:	d00e      	beq.n	8012bd6 <rmw_validate_node_name+0x62>
 8012bb8:	2302      	movs	r3, #2
 8012bba:	602b      	str	r3, [r5, #0]
 8012bbc:	b106      	cbz	r6, 8012bc0 <rmw_validate_node_name+0x4c>
 8012bbe:	6037      	str	r7, [r6, #0]
 8012bc0:	2000      	movs	r0, #0
 8012bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	602b      	str	r3, [r5, #0]
 8012bca:	2e00      	cmp	r6, #0
 8012bcc:	d0f8      	beq.n	8012bc0 <rmw_validate_node_name+0x4c>
 8012bce:	2000      	movs	r0, #0
 8012bd0:	6030      	str	r0, [r6, #0]
 8012bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bd6:	4543      	cmp	r3, r8
 8012bd8:	d1dd      	bne.n	8012b96 <rmw_validate_node_name+0x22>
 8012bda:	7822      	ldrb	r2, [r4, #0]
 8012bdc:	4b0d      	ldr	r3, [pc, #52]	; (8012c14 <rmw_validate_node_name+0xa0>)
 8012bde:	5cd3      	ldrb	r3, [r2, r3]
 8012be0:	f013 0304 	ands.w	r3, r3, #4
 8012be4:	d110      	bne.n	8012c08 <rmw_validate_node_name+0x94>
 8012be6:	28ff      	cmp	r0, #255	; 0xff
 8012be8:	d806      	bhi.n	8012bf8 <rmw_validate_node_name+0x84>
 8012bea:	602b      	str	r3, [r5, #0]
 8012bec:	4618      	mov	r0, r3
 8012bee:	e7e8      	b.n	8012bc2 <rmw_validate_node_name+0x4e>
 8012bf0:	200b      	movs	r0, #11
 8012bf2:	4770      	bx	lr
 8012bf4:	200b      	movs	r0, #11
 8012bf6:	e7e4      	b.n	8012bc2 <rmw_validate_node_name+0x4e>
 8012bf8:	2204      	movs	r2, #4
 8012bfa:	602a      	str	r2, [r5, #0]
 8012bfc:	2e00      	cmp	r6, #0
 8012bfe:	d0df      	beq.n	8012bc0 <rmw_validate_node_name+0x4c>
 8012c00:	22fe      	movs	r2, #254	; 0xfe
 8012c02:	6032      	str	r2, [r6, #0]
 8012c04:	4618      	mov	r0, r3
 8012c06:	e7dc      	b.n	8012bc2 <rmw_validate_node_name+0x4e>
 8012c08:	2303      	movs	r3, #3
 8012c0a:	602b      	str	r3, [r5, #0]
 8012c0c:	2e00      	cmp	r6, #0
 8012c0e:	d1de      	bne.n	8012bce <rmw_validate_node_name+0x5a>
 8012c10:	e7d6      	b.n	8012bc0 <rmw_validate_node_name+0x4c>
 8012c12:	bf00      	nop
 8012c14:	080187c4 	.word	0x080187c4

08012c18 <rmw_node_name_validation_result_string>:
 8012c18:	2804      	cmp	r0, #4
 8012c1a:	bf9a      	itte	ls
 8012c1c:	4b02      	ldrls	r3, [pc, #8]	; (8012c28 <rmw_node_name_validation_result_string+0x10>)
 8012c1e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012c22:	4802      	ldrhi	r0, [pc, #8]	; (8012c2c <rmw_node_name_validation_result_string+0x14>)
 8012c24:	4770      	bx	lr
 8012c26:	bf00      	nop
 8012c28:	080184d0 	.word	0x080184d0
 8012c2c:	080183e4 	.word	0x080183e4

08012c30 <get_memory>:
 8012c30:	4603      	mov	r3, r0
 8012c32:	6840      	ldr	r0, [r0, #4]
 8012c34:	b158      	cbz	r0, 8012c4e <get_memory+0x1e>
 8012c36:	6842      	ldr	r2, [r0, #4]
 8012c38:	605a      	str	r2, [r3, #4]
 8012c3a:	b10a      	cbz	r2, 8012c40 <get_memory+0x10>
 8012c3c:	2100      	movs	r1, #0
 8012c3e:	6011      	str	r1, [r2, #0]
 8012c40:	681a      	ldr	r2, [r3, #0]
 8012c42:	6042      	str	r2, [r0, #4]
 8012c44:	b102      	cbz	r2, 8012c48 <get_memory+0x18>
 8012c46:	6010      	str	r0, [r2, #0]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	6002      	str	r2, [r0, #0]
 8012c4c:	6018      	str	r0, [r3, #0]
 8012c4e:	4770      	bx	lr

08012c50 <put_memory>:
 8012c50:	680b      	ldr	r3, [r1, #0]
 8012c52:	b10b      	cbz	r3, 8012c58 <put_memory+0x8>
 8012c54:	684a      	ldr	r2, [r1, #4]
 8012c56:	605a      	str	r2, [r3, #4]
 8012c58:	684a      	ldr	r2, [r1, #4]
 8012c5a:	b102      	cbz	r2, 8012c5e <put_memory+0xe>
 8012c5c:	6013      	str	r3, [r2, #0]
 8012c5e:	6803      	ldr	r3, [r0, #0]
 8012c60:	428b      	cmp	r3, r1
 8012c62:	6843      	ldr	r3, [r0, #4]
 8012c64:	bf08      	it	eq
 8012c66:	6002      	streq	r2, [r0, #0]
 8012c68:	604b      	str	r3, [r1, #4]
 8012c6a:	b103      	cbz	r3, 8012c6e <put_memory+0x1e>
 8012c6c:	6019      	str	r1, [r3, #0]
 8012c6e:	2300      	movs	r3, #0
 8012c70:	600b      	str	r3, [r1, #0]
 8012c72:	6041      	str	r1, [r0, #4]
 8012c74:	4770      	bx	lr
 8012c76:	bf00      	nop

08012c78 <rmw_destroy_client>:
 8012c78:	b570      	push	{r4, r5, r6, lr}
 8012c7a:	b128      	cbz	r0, 8012c88 <rmw_destroy_client+0x10>
 8012c7c:	4604      	mov	r4, r0
 8012c7e:	6800      	ldr	r0, [r0, #0]
 8012c80:	460d      	mov	r5, r1
 8012c82:	f7f8 fc2b 	bl	800b4dc <is_uxrce_rmw_identifier_valid>
 8012c86:	b910      	cbnz	r0, 8012c8e <rmw_destroy_client+0x16>
 8012c88:	2401      	movs	r4, #1
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	bd70      	pop	{r4, r5, r6, pc}
 8012c8e:	6863      	ldr	r3, [r4, #4]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d0f9      	beq.n	8012c88 <rmw_destroy_client+0x10>
 8012c94:	2d00      	cmp	r5, #0
 8012c96:	d0f7      	beq.n	8012c88 <rmw_destroy_client+0x10>
 8012c98:	6828      	ldr	r0, [r5, #0]
 8012c9a:	f7f8 fc1f 	bl	800b4dc <is_uxrce_rmw_identifier_valid>
 8012c9e:	2800      	cmp	r0, #0
 8012ca0:	d0f2      	beq.n	8012c88 <rmw_destroy_client+0x10>
 8012ca2:	686e      	ldr	r6, [r5, #4]
 8012ca4:	2e00      	cmp	r6, #0
 8012ca6:	d0ef      	beq.n	8012c88 <rmw_destroy_client+0x10>
 8012ca8:	6864      	ldr	r4, [r4, #4]
 8012caa:	6932      	ldr	r2, [r6, #16]
 8012cac:	6920      	ldr	r0, [r4, #16]
 8012cae:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012cb2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012cb6:	6819      	ldr	r1, [r3, #0]
 8012cb8:	f002 f920 	bl	8014efc <uxr_buffer_cancel_data>
 8012cbc:	4602      	mov	r2, r0
 8012cbe:	6920      	ldr	r0, [r4, #16]
 8012cc0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012cc4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012cc8:	f7f8 fb88 	bl	800b3dc <run_xrce_session>
 8012ccc:	6920      	ldr	r0, [r4, #16]
 8012cce:	6932      	ldr	r2, [r6, #16]
 8012cd0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012cd4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012cd8:	6819      	ldr	r1, [r3, #0]
 8012cda:	f7f9 fe3b 	bl	800c954 <uxr_buffer_delete_entity>
 8012cde:	4602      	mov	r2, r0
 8012ce0:	6920      	ldr	r0, [r4, #16]
 8012ce2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012ce6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012cea:	f7f8 fb77 	bl	800b3dc <run_xrce_session>
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	4628      	mov	r0, r5
 8012cf2:	bf14      	ite	ne
 8012cf4:	2400      	movne	r4, #0
 8012cf6:	2402      	moveq	r4, #2
 8012cf8:	f7f8 fa58 	bl	800b1ac <rmw_uxrce_fini_client_memory>
 8012cfc:	e7c5      	b.n	8012c8a <rmw_destroy_client+0x12>
 8012cfe:	bf00      	nop

08012d00 <rmw_get_implementation_identifier>:
 8012d00:	4b01      	ldr	r3, [pc, #4]	; (8012d08 <rmw_get_implementation_identifier+0x8>)
 8012d02:	6818      	ldr	r0, [r3, #0]
 8012d04:	4770      	bx	lr
 8012d06:	bf00      	nop
 8012d08:	080184fc 	.word	0x080184fc

08012d0c <rmw_init_options_init>:
 8012d0c:	b084      	sub	sp, #16
 8012d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d10:	b083      	sub	sp, #12
 8012d12:	ad09      	add	r5, sp, #36	; 0x24
 8012d14:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012d18:	b130      	cbz	r0, 8012d28 <rmw_init_options_init+0x1c>
 8012d1a:	4604      	mov	r4, r0
 8012d1c:	4628      	mov	r0, r5
 8012d1e:	f7f7 fe37 	bl	800a990 <rcutils_allocator_is_valid>
 8012d22:	b108      	cbz	r0, 8012d28 <rmw_init_options_init+0x1c>
 8012d24:	68a6      	ldr	r6, [r4, #8]
 8012d26:	b12e      	cbz	r6, 8012d34 <rmw_init_options_init+0x28>
 8012d28:	200b      	movs	r0, #11
 8012d2a:	b003      	add	sp, #12
 8012d2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012d30:	b004      	add	sp, #16
 8012d32:	4770      	bx	lr
 8012d34:	2200      	movs	r2, #0
 8012d36:	2300      	movs	r3, #0
 8012d38:	e9c4 2300 	strd	r2, r3, [r4]
 8012d3c:	4b22      	ldr	r3, [pc, #136]	; (8012dc8 <rmw_init_options_init+0xbc>)
 8012d3e:	f8df e098 	ldr.w	lr, [pc, #152]	; 8012dd8 <rmw_init_options_init+0xcc>
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	60a3      	str	r3, [r4, #8]
 8012d46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d48:	f104 0c20 	add.w	ip, r4, #32
 8012d4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d50:	466f      	mov	r7, sp
 8012d52:	682b      	ldr	r3, [r5, #0]
 8012d54:	f8cc 3000 	str.w	r3, [ip]
 8012d58:	4638      	mov	r0, r7
 8012d5a:	f8c4 e01c 	str.w	lr, [r4, #28]
 8012d5e:	60e6      	str	r6, [r4, #12]
 8012d60:	f7ff fd76 	bl	8012850 <rmw_get_default_security_options>
 8012d64:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012d68:	f104 0310 	add.w	r3, r4, #16
 8012d6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012d70:	2203      	movs	r2, #3
 8012d72:	4816      	ldr	r0, [pc, #88]	; (8012dcc <rmw_init_options_init+0xc0>)
 8012d74:	4916      	ldr	r1, [pc, #88]	; (8012dd0 <rmw_init_options_init+0xc4>)
 8012d76:	7626      	strb	r6, [r4, #24]
 8012d78:	f7f8 f958 	bl	800b02c <rmw_uxrce_init_init_options_impl_memory>
 8012d7c:	4813      	ldr	r0, [pc, #76]	; (8012dcc <rmw_init_options_init+0xc0>)
 8012d7e:	f7ff ff57 	bl	8012c30 <get_memory>
 8012d82:	b1f0      	cbz	r0, 8012dc2 <rmw_init_options_init+0xb6>
 8012d84:	4a13      	ldr	r2, [pc, #76]	; (8012dd4 <rmw_init_options_init+0xc8>)
 8012d86:	6883      	ldr	r3, [r0, #8]
 8012d88:	6851      	ldr	r1, [r2, #4]
 8012d8a:	7810      	ldrb	r0, [r2, #0]
 8012d8c:	6363      	str	r3, [r4, #52]	; 0x34
 8012d8e:	7418      	strb	r0, [r3, #16]
 8012d90:	6159      	str	r1, [r3, #20]
 8012d92:	68d1      	ldr	r1, [r2, #12]
 8012d94:	61d9      	str	r1, [r3, #28]
 8012d96:	6911      	ldr	r1, [r2, #16]
 8012d98:	6219      	str	r1, [r3, #32]
 8012d9a:	6951      	ldr	r1, [r2, #20]
 8012d9c:	6892      	ldr	r2, [r2, #8]
 8012d9e:	619a      	str	r2, [r3, #24]
 8012da0:	6259      	str	r1, [r3, #36]	; 0x24
 8012da2:	f7fb fa35 	bl	800e210 <uxr_nanos>
 8012da6:	f003 fbc7 	bl	8016538 <srand>
 8012daa:	f003 fbf3 	bl	8016594 <rand>
 8012dae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012db0:	6298      	str	r0, [r3, #40]	; 0x28
 8012db2:	2800      	cmp	r0, #0
 8012db4:	d0f9      	beq.n	8012daa <rmw_init_options_init+0x9e>
 8012db6:	2000      	movs	r0, #0
 8012db8:	b003      	add	sp, #12
 8012dba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012dbe:	b004      	add	sp, #16
 8012dc0:	4770      	bx	lr
 8012dc2:	2001      	movs	r0, #1
 8012dc4:	e7b1      	b.n	8012d2a <rmw_init_options_init+0x1e>
 8012dc6:	bf00      	nop
 8012dc8:	080184fc 	.word	0x080184fc
 8012dcc:	2000da54 	.word	0x2000da54
 8012dd0:	200092f0 	.word	0x200092f0
 8012dd4:	2000917c 	.word	0x2000917c
 8012dd8:	08017f64 	.word	0x08017f64

08012ddc <rmw_init_options_copy>:
 8012ddc:	b570      	push	{r4, r5, r6, lr}
 8012dde:	b158      	cbz	r0, 8012df8 <rmw_init_options_copy+0x1c>
 8012de0:	460d      	mov	r5, r1
 8012de2:	b149      	cbz	r1, 8012df8 <rmw_init_options_copy+0x1c>
 8012de4:	4604      	mov	r4, r0
 8012de6:	6880      	ldr	r0, [r0, #8]
 8012de8:	b120      	cbz	r0, 8012df4 <rmw_init_options_copy+0x18>
 8012dea:	4b1e      	ldr	r3, [pc, #120]	; (8012e64 <rmw_init_options_copy+0x88>)
 8012dec:	6819      	ldr	r1, [r3, #0]
 8012dee:	f7ed f9f7 	bl	80001e0 <strcmp>
 8012df2:	bb90      	cbnz	r0, 8012e5a <rmw_init_options_copy+0x7e>
 8012df4:	68ab      	ldr	r3, [r5, #8]
 8012df6:	b113      	cbz	r3, 8012dfe <rmw_init_options_copy+0x22>
 8012df8:	250b      	movs	r5, #11
 8012dfa:	4628      	mov	r0, r5
 8012dfc:	bd70      	pop	{r4, r5, r6, pc}
 8012dfe:	4623      	mov	r3, r4
 8012e00:	462a      	mov	r2, r5
 8012e02:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8012e06:	f8d3 c000 	ldr.w	ip, [r3]
 8012e0a:	6858      	ldr	r0, [r3, #4]
 8012e0c:	6899      	ldr	r1, [r3, #8]
 8012e0e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8012e12:	f8c2 e00c 	str.w	lr, [r2, #12]
 8012e16:	3310      	adds	r3, #16
 8012e18:	42b3      	cmp	r3, r6
 8012e1a:	f8c2 c000 	str.w	ip, [r2]
 8012e1e:	6050      	str	r0, [r2, #4]
 8012e20:	6091      	str	r1, [r2, #8]
 8012e22:	f102 0210 	add.w	r2, r2, #16
 8012e26:	d1ee      	bne.n	8012e06 <rmw_init_options_copy+0x2a>
 8012e28:	6819      	ldr	r1, [r3, #0]
 8012e2a:	685b      	ldr	r3, [r3, #4]
 8012e2c:	480e      	ldr	r0, [pc, #56]	; (8012e68 <rmw_init_options_copy+0x8c>)
 8012e2e:	6053      	str	r3, [r2, #4]
 8012e30:	6011      	str	r1, [r2, #0]
 8012e32:	f7ff fefd 	bl	8012c30 <get_memory>
 8012e36:	b198      	cbz	r0, 8012e60 <rmw_init_options_copy+0x84>
 8012e38:	6883      	ldr	r3, [r0, #8]
 8012e3a:	636b      	str	r3, [r5, #52]	; 0x34
 8012e3c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012e3e:	f102 0c10 	add.w	ip, r2, #16
 8012e42:	f103 0410 	add.w	r4, r3, #16
 8012e46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e4c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8012e50:	2500      	movs	r5, #0
 8012e52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012e56:	4628      	mov	r0, r5
 8012e58:	bd70      	pop	{r4, r5, r6, pc}
 8012e5a:	250c      	movs	r5, #12
 8012e5c:	4628      	mov	r0, r5
 8012e5e:	bd70      	pop	{r4, r5, r6, pc}
 8012e60:	2501      	movs	r5, #1
 8012e62:	e7ca      	b.n	8012dfa <rmw_init_options_copy+0x1e>
 8012e64:	080184fc 	.word	0x080184fc
 8012e68:	2000da54 	.word	0x2000da54

08012e6c <rmw_init_options_fini>:
 8012e6c:	2800      	cmp	r0, #0
 8012e6e:	d03d      	beq.n	8012eec <rmw_init_options_fini+0x80>
 8012e70:	b510      	push	{r4, lr}
 8012e72:	4604      	mov	r4, r0
 8012e74:	b08e      	sub	sp, #56	; 0x38
 8012e76:	3020      	adds	r0, #32
 8012e78:	f7f7 fd8a 	bl	800a990 <rcutils_allocator_is_valid>
 8012e7c:	b360      	cbz	r0, 8012ed8 <rmw_init_options_fini+0x6c>
 8012e7e:	68a0      	ldr	r0, [r4, #8]
 8012e80:	b120      	cbz	r0, 8012e8c <rmw_init_options_fini+0x20>
 8012e82:	4b1c      	ldr	r3, [pc, #112]	; (8012ef4 <rmw_init_options_fini+0x88>)
 8012e84:	6819      	ldr	r1, [r3, #0]
 8012e86:	f7ed f9ab 	bl	80001e0 <strcmp>
 8012e8a:	bb68      	cbnz	r0, 8012ee8 <rmw_init_options_fini+0x7c>
 8012e8c:	4b1a      	ldr	r3, [pc, #104]	; (8012ef8 <rmw_init_options_fini+0x8c>)
 8012e8e:	6819      	ldr	r1, [r3, #0]
 8012e90:	b331      	cbz	r1, 8012ee0 <rmw_init_options_fini+0x74>
 8012e92:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012e94:	e001      	b.n	8012e9a <rmw_init_options_fini+0x2e>
 8012e96:	6849      	ldr	r1, [r1, #4]
 8012e98:	b311      	cbz	r1, 8012ee0 <rmw_init_options_fini+0x74>
 8012e9a:	688b      	ldr	r3, [r1, #8]
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d1fa      	bne.n	8012e96 <rmw_init_options_fini+0x2a>
 8012ea0:	4815      	ldr	r0, [pc, #84]	; (8012ef8 <rmw_init_options_fini+0x8c>)
 8012ea2:	f7ff fed5 	bl	8012c50 <put_memory>
 8012ea6:	4668      	mov	r0, sp
 8012ea8:	f7ff fcc2 	bl	8012830 <rmw_get_zero_initialized_init_options>
 8012eac:	46ee      	mov	lr, sp
 8012eae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012eb2:	46a4      	mov	ip, r4
 8012eb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012eb8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012ebc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ec0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012ec4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ec8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012ecc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	b00e      	add	sp, #56	; 0x38
 8012ed6:	bd10      	pop	{r4, pc}
 8012ed8:	230b      	movs	r3, #11
 8012eda:	4618      	mov	r0, r3
 8012edc:	b00e      	add	sp, #56	; 0x38
 8012ede:	bd10      	pop	{r4, pc}
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	b00e      	add	sp, #56	; 0x38
 8012ee6:	bd10      	pop	{r4, pc}
 8012ee8:	230c      	movs	r3, #12
 8012eea:	e7f2      	b.n	8012ed2 <rmw_init_options_fini+0x66>
 8012eec:	230b      	movs	r3, #11
 8012eee:	4618      	mov	r0, r3
 8012ef0:	4770      	bx	lr
 8012ef2:	bf00      	nop
 8012ef4:	080184fc 	.word	0x080184fc
 8012ef8:	2000da54 	.word	0x2000da54

08012efc <rmw_init>:
 8012efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f00:	b083      	sub	sp, #12
 8012f02:	2800      	cmp	r0, #0
 8012f04:	f000 80d3 	beq.w	80130ae <rmw_init+0x1b2>
 8012f08:	460e      	mov	r6, r1
 8012f0a:	2900      	cmp	r1, #0
 8012f0c:	f000 80cf 	beq.w	80130ae <rmw_init+0x1b2>
 8012f10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012f12:	4605      	mov	r5, r0
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	f000 80ca 	beq.w	80130ae <rmw_init+0x1b2>
 8012f1a:	4b78      	ldr	r3, [pc, #480]	; (80130fc <rmw_init+0x200>)
 8012f1c:	6880      	ldr	r0, [r0, #8]
 8012f1e:	681f      	ldr	r7, [r3, #0]
 8012f20:	b128      	cbz	r0, 8012f2e <rmw_init+0x32>
 8012f22:	4639      	mov	r1, r7
 8012f24:	f7ed f95c 	bl	80001e0 <strcmp>
 8012f28:	2800      	cmp	r0, #0
 8012f2a:	f040 80ca 	bne.w	80130c2 <rmw_init+0x1c6>
 8012f2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012f32:	4c73      	ldr	r4, [pc, #460]	; (8013100 <rmw_init+0x204>)
 8012f34:	4973      	ldr	r1, [pc, #460]	; (8013104 <rmw_init+0x208>)
 8012f36:	4874      	ldr	r0, [pc, #464]	; (8013108 <rmw_init+0x20c>)
 8012f38:	60b7      	str	r7, [r6, #8]
 8012f3a:	e9c6 2300 	strd	r2, r3, [r6]
 8012f3e:	68eb      	ldr	r3, [r5, #12]
 8012f40:	64b3      	str	r3, [r6, #72]	; 0x48
 8012f42:	2201      	movs	r2, #1
 8012f44:	f7f8 f812 	bl	800af6c <rmw_uxrce_init_session_memory>
 8012f48:	4620      	mov	r0, r4
 8012f4a:	4970      	ldr	r1, [pc, #448]	; (801310c <rmw_init+0x210>)
 8012f4c:	2204      	movs	r2, #4
 8012f4e:	f7f8 f84d 	bl	800afec <rmw_uxrce_init_static_input_buffer_memory>
 8012f52:	f04f 0800 	mov.w	r8, #0
 8012f56:	486c      	ldr	r0, [pc, #432]	; (8013108 <rmw_init+0x20c>)
 8012f58:	f884 800d 	strb.w	r8, [r4, #13]
 8012f5c:	f7ff fe68 	bl	8012c30 <get_memory>
 8012f60:	2800      	cmp	r0, #0
 8012f62:	f000 80a9 	beq.w	80130b8 <rmw_init+0x1bc>
 8012f66:	6884      	ldr	r4, [r0, #8]
 8012f68:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8012f6a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8012f6c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8012f70:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012f74:	9101      	str	r1, [sp, #4]
 8012f76:	6a00      	ldr	r0, [r0, #32]
 8012f78:	9000      	str	r0, [sp, #0]
 8012f7a:	f104 0910 	add.w	r9, r4, #16
 8012f7e:	4661      	mov	r1, ip
 8012f80:	4648      	mov	r0, r9
 8012f82:	f001 f9f3 	bl	801436c <uxr_set_custom_transport_callbacks>
 8012f86:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8012f8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012f8e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8012f92:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8012f96:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8012f9a:	495d      	ldr	r1, [pc, #372]	; (8013110 <rmw_init+0x214>)
 8012f9c:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8012fa0:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8012fa4:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8012fa8:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8012fac:	4859      	ldr	r0, [pc, #356]	; (8013114 <rmw_init+0x218>)
 8012fae:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8012fb2:	2201      	movs	r2, #1
 8012fb4:	64f4      	str	r4, [r6, #76]	; 0x4c
 8012fb6:	f7f7 ffb9 	bl	800af2c <rmw_uxrce_init_node_memory>
 8012fba:	4957      	ldr	r1, [pc, #348]	; (8013118 <rmw_init+0x21c>)
 8012fbc:	4857      	ldr	r0, [pc, #348]	; (801311c <rmw_init+0x220>)
 8012fbe:	2205      	movs	r2, #5
 8012fc0:	f7f7 ff94 	bl	800aeec <rmw_uxrce_init_subscription_memory>
 8012fc4:	4956      	ldr	r1, [pc, #344]	; (8013120 <rmw_init+0x224>)
 8012fc6:	4857      	ldr	r0, [pc, #348]	; (8013124 <rmw_init+0x228>)
 8012fc8:	220a      	movs	r2, #10
 8012fca:	f7f7 ff6f 	bl	800aeac <rmw_uxrce_init_publisher_memory>
 8012fce:	4956      	ldr	r1, [pc, #344]	; (8013128 <rmw_init+0x22c>)
 8012fd0:	4856      	ldr	r0, [pc, #344]	; (801312c <rmw_init+0x230>)
 8012fd2:	2201      	movs	r2, #1
 8012fd4:	f7f7 ff2a 	bl	800ae2c <rmw_uxrce_init_service_memory>
 8012fd8:	4955      	ldr	r1, [pc, #340]	; (8013130 <rmw_init+0x234>)
 8012fda:	4856      	ldr	r0, [pc, #344]	; (8013134 <rmw_init+0x238>)
 8012fdc:	2201      	movs	r2, #1
 8012fde:	f7f7 ff45 	bl	800ae6c <rmw_uxrce_init_client_memory>
 8012fe2:	4955      	ldr	r1, [pc, #340]	; (8013138 <rmw_init+0x23c>)
 8012fe4:	4855      	ldr	r0, [pc, #340]	; (801313c <rmw_init+0x240>)
 8012fe6:	220f      	movs	r2, #15
 8012fe8:	f7f7 ffe0 	bl	800afac <rmw_uxrce_init_topic_memory>
 8012fec:	4954      	ldr	r1, [pc, #336]	; (8013140 <rmw_init+0x244>)
 8012fee:	4855      	ldr	r0, [pc, #340]	; (8013144 <rmw_init+0x248>)
 8012ff0:	2203      	movs	r2, #3
 8012ff2:	f7f8 f81b 	bl	800b02c <rmw_uxrce_init_init_options_impl_memory>
 8012ff6:	4954      	ldr	r1, [pc, #336]	; (8013148 <rmw_init+0x24c>)
 8012ff8:	4854      	ldr	r0, [pc, #336]	; (801314c <rmw_init+0x250>)
 8012ffa:	2204      	movs	r2, #4
 8012ffc:	f7f8 f836 	bl	800b06c <rmw_uxrce_init_wait_set_memory>
 8013000:	4953      	ldr	r1, [pc, #332]	; (8013150 <rmw_init+0x254>)
 8013002:	4854      	ldr	r0, [pc, #336]	; (8013154 <rmw_init+0x258>)
 8013004:	2204      	movs	r2, #4
 8013006:	f7f8 f851 	bl	800b0ac <rmw_uxrce_init_guard_condition_memory>
 801300a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801300c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801300e:	4642      	mov	r2, r8
 8013010:	f000 fd9e 	bl	8013b50 <rmw_uxrce_transport_init>
 8013014:	4607      	mov	r7, r0
 8013016:	2800      	cmp	r0, #0
 8013018:	d158      	bne.n	80130cc <rmw_init+0x1d0>
 801301a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801301c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8013020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013022:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8013026:	4628      	mov	r0, r5
 8013028:	f7f9 ff56 	bl	800ced8 <uxr_init_session>
 801302c:	494a      	ldr	r1, [pc, #296]	; (8013158 <rmw_init+0x25c>)
 801302e:	4622      	mov	r2, r4
 8013030:	4628      	mov	r0, r5
 8013032:	f7f9 ff75 	bl	800cf20 <uxr_set_topic_callback>
 8013036:	4949      	ldr	r1, [pc, #292]	; (801315c <rmw_init+0x260>)
 8013038:	463a      	mov	r2, r7
 801303a:	4628      	mov	r0, r5
 801303c:	f7f9 ff6c 	bl	800cf18 <uxr_set_status_callback>
 8013040:	4947      	ldr	r1, [pc, #284]	; (8013160 <rmw_init+0x264>)
 8013042:	463a      	mov	r2, r7
 8013044:	4628      	mov	r0, r5
 8013046:	f7f9 ff6f 	bl	800cf28 <uxr_set_request_callback>
 801304a:	4946      	ldr	r1, [pc, #280]	; (8013164 <rmw_init+0x268>)
 801304c:	463a      	mov	r2, r7
 801304e:	4628      	mov	r0, r5
 8013050:	f7f9 ff6e 	bl	800cf30 <uxr_set_reply_callback>
 8013054:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8013058:	2304      	movs	r3, #4
 801305a:	0092      	lsls	r2, r2, #2
 801305c:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8013060:	4628      	mov	r0, r5
 8013062:	f7f9 ffa3 	bl	800cfac <uxr_create_input_reliable_stream>
 8013066:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801306a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 801306e:	0092      	lsls	r2, r2, #2
 8013070:	2304      	movs	r3, #4
 8013072:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8013076:	4628      	mov	r0, r5
 8013078:	f7f9 ff70 	bl	800cf5c <uxr_create_output_reliable_stream>
 801307c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8013080:	4628      	mov	r0, r5
 8013082:	f7f9 ff8d 	bl	800cfa0 <uxr_create_input_best_effort_stream>
 8013086:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 801308a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801308e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8013092:	3114      	adds	r1, #20
 8013094:	4628      	mov	r0, r5
 8013096:	f7f9 ff4f 	bl	800cf38 <uxr_create_output_best_effort_stream>
 801309a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801309e:	4628      	mov	r0, r5
 80130a0:	f7fa fcda 	bl	800da58 <uxr_create_session>
 80130a4:	b1f8      	cbz	r0, 80130e6 <rmw_init+0x1ea>
 80130a6:	4638      	mov	r0, r7
 80130a8:	b003      	add	sp, #12
 80130aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130ae:	270b      	movs	r7, #11
 80130b0:	4638      	mov	r0, r7
 80130b2:	b003      	add	sp, #12
 80130b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130b8:	2701      	movs	r7, #1
 80130ba:	4638      	mov	r0, r7
 80130bc:	b003      	add	sp, #12
 80130be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130c2:	270c      	movs	r7, #12
 80130c4:	4638      	mov	r0, r7
 80130c6:	b003      	add	sp, #12
 80130c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130cc:	4648      	mov	r0, r9
 80130ce:	f001 f98f 	bl	80143f0 <uxr_close_custom_transport>
 80130d2:	480d      	ldr	r0, [pc, #52]	; (8013108 <rmw_init+0x20c>)
 80130d4:	4621      	mov	r1, r4
 80130d6:	f7ff fdbb 	bl	8012c50 <put_memory>
 80130da:	4638      	mov	r0, r7
 80130dc:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 80130e0:	b003      	add	sp, #12
 80130e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130e6:	4648      	mov	r0, r9
 80130e8:	f001 f982 	bl	80143f0 <uxr_close_custom_transport>
 80130ec:	4806      	ldr	r0, [pc, #24]	; (8013108 <rmw_init+0x20c>)
 80130ee:	4621      	mov	r1, r4
 80130f0:	f7ff fdae 	bl	8012c50 <put_memory>
 80130f4:	64f7      	str	r7, [r6, #76]	; 0x4c
 80130f6:	2701      	movs	r7, #1
 80130f8:	e7d5      	b.n	80130a6 <rmw_init+0x1aa>
 80130fa:	bf00      	nop
 80130fc:	080184fc 	.word	0x080184fc
 8013100:	2000daa4 	.word	0x2000daa4
 8013104:	20009d50 	.word	0x20009d50
 8013108:	2000da94 	.word	0x2000da94
 801310c:	2000b2f8 	.word	0x2000b2f8
 8013110:	20009374 	.word	0x20009374
 8013114:	2000da64 	.word	0x2000da64
 8013118:	2000d3f8 	.word	0x2000d3f8
 801311c:	2000dab4 	.word	0x2000dab4
 8013120:	20009418 	.word	0x20009418
 8013124:	2000da74 	.word	0x2000da74
 8013128:	20009c88 	.word	0x20009c88
 801312c:	2000da84 	.word	0x2000da84
 8013130:	200091a8 	.word	0x200091a8
 8013134:	20009198 	.word	0x20009198
 8013138:	2000d830 	.word	0x2000d830
 801313c:	2000dac4 	.word	0x2000dac4
 8013140:	200092f0 	.word	0x200092f0
 8013144:	2000da54 	.word	0x2000da54
 8013148:	2000d9d4 	.word	0x2000d9d4
 801314c:	2000dad4 	.word	0x2000dad4
 8013150:	20009270 	.word	0x20009270
 8013154:	2000da44 	.word	0x2000da44
 8013158:	080160dd 	.word	0x080160dd
 801315c:	080160d5 	.word	0x080160d5
 8013160:	08016175 	.word	0x08016175
 8013164:	08016211 	.word	0x08016211

08013168 <rmw_context_fini>:
 8013168:	4b17      	ldr	r3, [pc, #92]	; (80131c8 <rmw_context_fini+0x60>)
 801316a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801316c:	b570      	push	{r4, r5, r6, lr}
 801316e:	681c      	ldr	r4, [r3, #0]
 8013170:	4605      	mov	r5, r0
 8013172:	b334      	cbz	r4, 80131c2 <rmw_context_fini+0x5a>
 8013174:	2600      	movs	r6, #0
 8013176:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801317a:	6902      	ldr	r2, [r0, #16]
 801317c:	428a      	cmp	r2, r1
 801317e:	d018      	beq.n	80131b2 <rmw_context_fini+0x4a>
 8013180:	2c00      	cmp	r4, #0
 8013182:	d1f8      	bne.n	8013176 <rmw_context_fini+0xe>
 8013184:	b189      	cbz	r1, 80131aa <rmw_context_fini+0x42>
 8013186:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 801318a:	789b      	ldrb	r3, [r3, #2]
 801318c:	2b01      	cmp	r3, #1
 801318e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8013192:	bf14      	ite	ne
 8013194:	210a      	movne	r1, #10
 8013196:	2100      	moveq	r1, #0
 8013198:	f7fa fc36 	bl	800da08 <uxr_delete_session_retries>
 801319c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 801319e:	f7f7 ffa5 	bl	800b0ec <rmw_uxrce_fini_session_memory>
 80131a2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80131a4:	3010      	adds	r0, #16
 80131a6:	f001 f923 	bl	80143f0 <uxr_close_custom_transport>
 80131aa:	2300      	movs	r3, #0
 80131ac:	64eb      	str	r3, [r5, #76]	; 0x4c
 80131ae:	4630      	mov	r0, r6
 80131b0:	bd70      	pop	{r4, r5, r6, pc}
 80131b2:	3018      	adds	r0, #24
 80131b4:	f000 f90e 	bl	80133d4 <rmw_destroy_node>
 80131b8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80131ba:	4606      	mov	r6, r0
 80131bc:	2c00      	cmp	r4, #0
 80131be:	d1da      	bne.n	8013176 <rmw_context_fini+0xe>
 80131c0:	e7e0      	b.n	8013184 <rmw_context_fini+0x1c>
 80131c2:	4626      	mov	r6, r4
 80131c4:	e7de      	b.n	8013184 <rmw_context_fini+0x1c>
 80131c6:	bf00      	nop
 80131c8:	2000da64 	.word	0x2000da64

080131cc <create_topic>:
 80131cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d0:	4605      	mov	r5, r0
 80131d2:	b084      	sub	sp, #16
 80131d4:	4822      	ldr	r0, [pc, #136]	; (8013260 <create_topic+0x94>)
 80131d6:	460f      	mov	r7, r1
 80131d8:	4616      	mov	r6, r2
 80131da:	f7ff fd29 	bl	8012c30 <get_memory>
 80131de:	4604      	mov	r4, r0
 80131e0:	2800      	cmp	r0, #0
 80131e2:	d039      	beq.n	8013258 <create_topic+0x8c>
 80131e4:	692b      	ldr	r3, [r5, #16]
 80131e6:	6884      	ldr	r4, [r0, #8]
 80131e8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8013268 <create_topic+0x9c>
 80131ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80131f0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80131f4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 80131f8:	1c42      	adds	r2, r0, #1
 80131fa:	2102      	movs	r1, #2
 80131fc:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8013200:	f7f9 fdaa 	bl	800cd58 <uxr_object_id>
 8013204:	223c      	movs	r2, #60	; 0x3c
 8013206:	6120      	str	r0, [r4, #16]
 8013208:	4641      	mov	r1, r8
 801320a:	4638      	mov	r0, r7
 801320c:	f7f8 f94c 	bl	800b4a8 <generate_topic_name>
 8013210:	b1f0      	cbz	r0, 8013250 <create_topic+0x84>
 8013212:	4f14      	ldr	r7, [pc, #80]	; (8013264 <create_topic+0x98>)
 8013214:	4630      	mov	r0, r6
 8013216:	2264      	movs	r2, #100	; 0x64
 8013218:	4639      	mov	r1, r7
 801321a:	f7f8 f915 	bl	800b448 <generate_type_name>
 801321e:	b1b8      	cbz	r0, 8013250 <create_topic+0x84>
 8013220:	6928      	ldr	r0, [r5, #16]
 8013222:	2306      	movs	r3, #6
 8013224:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8013228:	f8cd 8000 	str.w	r8, [sp]
 801322c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013230:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013234:	6811      	ldr	r1, [r2, #0]
 8013236:	696b      	ldr	r3, [r5, #20]
 8013238:	6922      	ldr	r2, [r4, #16]
 801323a:	f7f9 fc09 	bl	800ca50 <uxr_buffer_create_topic_bin>
 801323e:	4602      	mov	r2, r0
 8013240:	6928      	ldr	r0, [r5, #16]
 8013242:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8013246:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801324a:	f7f8 f8c7 	bl	800b3dc <run_xrce_session>
 801324e:	b918      	cbnz	r0, 8013258 <create_topic+0x8c>
 8013250:	4620      	mov	r0, r4
 8013252:	f7f7 ffc1 	bl	800b1d8 <rmw_uxrce_fini_topic_memory>
 8013256:	2400      	movs	r4, #0
 8013258:	4620      	mov	r0, r4
 801325a:	b004      	add	sp, #16
 801325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013260:	2000dac4 	.word	0x2000dac4
 8013264:	2000dbb0 	.word	0x2000dbb0
 8013268:	2000db74 	.word	0x2000db74

0801326c <destroy_topic>:
 801326c:	b538      	push	{r3, r4, r5, lr}
 801326e:	6985      	ldr	r5, [r0, #24]
 8013270:	b1d5      	cbz	r5, 80132a8 <destroy_topic+0x3c>
 8013272:	4604      	mov	r4, r0
 8013274:	6928      	ldr	r0, [r5, #16]
 8013276:	6922      	ldr	r2, [r4, #16]
 8013278:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801327c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013280:	6819      	ldr	r1, [r3, #0]
 8013282:	f7f9 fb67 	bl	800c954 <uxr_buffer_delete_entity>
 8013286:	4602      	mov	r2, r0
 8013288:	6928      	ldr	r0, [r5, #16]
 801328a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801328e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013292:	f7f8 f8a3 	bl	800b3dc <run_xrce_session>
 8013296:	2800      	cmp	r0, #0
 8013298:	4620      	mov	r0, r4
 801329a:	bf14      	ite	ne
 801329c:	2400      	movne	r4, #0
 801329e:	2402      	moveq	r4, #2
 80132a0:	f7f7 ff9a 	bl	800b1d8 <rmw_uxrce_fini_topic_memory>
 80132a4:	4620      	mov	r0, r4
 80132a6:	bd38      	pop	{r3, r4, r5, pc}
 80132a8:	2401      	movs	r4, #1
 80132aa:	4620      	mov	r0, r4
 80132ac:	bd38      	pop	{r3, r4, r5, pc}
 80132ae:	bf00      	nop

080132b0 <create_node>:
 80132b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132b4:	b083      	sub	sp, #12
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d05f      	beq.n	801337a <create_node+0xca>
 80132ba:	4606      	mov	r6, r0
 80132bc:	4835      	ldr	r0, [pc, #212]	; (8013394 <create_node+0xe4>)
 80132be:	460f      	mov	r7, r1
 80132c0:	4690      	mov	r8, r2
 80132c2:	461d      	mov	r5, r3
 80132c4:	f7ff fcb4 	bl	8012c30 <get_memory>
 80132c8:	2800      	cmp	r0, #0
 80132ca:	d056      	beq.n	801337a <create_node+0xca>
 80132cc:	6884      	ldr	r4, [r0, #8]
 80132ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80132d0:	6123      	str	r3, [r4, #16]
 80132d2:	f7ff fd15 	bl	8012d00 <rmw_get_implementation_identifier>
 80132d6:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80132da:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80132de:	f8c4 9020 	str.w	r9, [r4, #32]
 80132e2:	4630      	mov	r0, r6
 80132e4:	f7ec ff86 	bl	80001f4 <strlen>
 80132e8:	1c42      	adds	r2, r0, #1
 80132ea:	2a3c      	cmp	r2, #60	; 0x3c
 80132ec:	f104 0518 	add.w	r5, r4, #24
 80132f0:	d840      	bhi.n	8013374 <create_node+0xc4>
 80132f2:	4648      	mov	r0, r9
 80132f4:	4631      	mov	r1, r6
 80132f6:	f104 0968 	add.w	r9, r4, #104	; 0x68
 80132fa:	f003 fcb4 	bl	8016c66 <memcpy>
 80132fe:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8013302:	4638      	mov	r0, r7
 8013304:	f7ec ff76 	bl	80001f4 <strlen>
 8013308:	1c42      	adds	r2, r0, #1
 801330a:	2a3c      	cmp	r2, #60	; 0x3c
 801330c:	d832      	bhi.n	8013374 <create_node+0xc4>
 801330e:	4639      	mov	r1, r7
 8013310:	4648      	mov	r0, r9
 8013312:	f003 fca8 	bl	8016c66 <memcpy>
 8013316:	6923      	ldr	r3, [r4, #16]
 8013318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801331c:	2101      	movs	r1, #1
 801331e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8013322:	1842      	adds	r2, r0, r1
 8013324:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8013328:	f7f9 fd16 	bl	800cd58 <uxr_object_id>
 801332c:	6160      	str	r0, [r4, #20]
 801332e:	783b      	ldrb	r3, [r7, #0]
 8013330:	2b2f      	cmp	r3, #47	; 0x2f
 8013332:	d127      	bne.n	8013384 <create_node+0xd4>
 8013334:	787b      	ldrb	r3, [r7, #1]
 8013336:	bb2b      	cbnz	r3, 8013384 <create_node+0xd4>
 8013338:	4a17      	ldr	r2, [pc, #92]	; (8013398 <create_node+0xe8>)
 801333a:	4818      	ldr	r0, [pc, #96]	; (801339c <create_node+0xec>)
 801333c:	4633      	mov	r3, r6
 801333e:	213c      	movs	r1, #60	; 0x3c
 8013340:	f003 faee 	bl	8016920 <sniprintf>
 8013344:	6920      	ldr	r0, [r4, #16]
 8013346:	4915      	ldr	r1, [pc, #84]	; (801339c <create_node+0xec>)
 8013348:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801334c:	9100      	str	r1, [sp, #0]
 801334e:	2106      	movs	r1, #6
 8013350:	9101      	str	r1, [sp, #4]
 8013352:	6811      	ldr	r1, [r2, #0]
 8013354:	6962      	ldr	r2, [r4, #20]
 8013356:	fa1f f388 	uxth.w	r3, r8
 801335a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801335e:	f7f9 fb45 	bl	800c9ec <uxr_buffer_create_participant_bin>
 8013362:	4602      	mov	r2, r0
 8013364:	6920      	ldr	r0, [r4, #16]
 8013366:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801336a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801336e:	f7f8 f835 	bl	800b3dc <run_xrce_session>
 8013372:	b918      	cbnz	r0, 801337c <create_node+0xcc>
 8013374:	4628      	mov	r0, r5
 8013376:	f7f7 febf 	bl	800b0f8 <rmw_uxrce_fini_node_memory>
 801337a:	2500      	movs	r5, #0
 801337c:	4628      	mov	r0, r5
 801337e:	b003      	add	sp, #12
 8013380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013384:	4a06      	ldr	r2, [pc, #24]	; (80133a0 <create_node+0xf0>)
 8013386:	9600      	str	r6, [sp, #0]
 8013388:	463b      	mov	r3, r7
 801338a:	213c      	movs	r1, #60	; 0x3c
 801338c:	4803      	ldr	r0, [pc, #12]	; (801339c <create_node+0xec>)
 801338e:	f003 fac7 	bl	8016920 <sniprintf>
 8013392:	e7d7      	b.n	8013344 <create_node+0x94>
 8013394:	2000da64 	.word	0x2000da64
 8013398:	08017ce4 	.word	0x08017ce4
 801339c:	2000dc14 	.word	0x2000dc14
 80133a0:	08017f6c 	.word	0x08017f6c

080133a4 <rmw_create_node>:
 80133a4:	b199      	cbz	r1, 80133ce <rmw_create_node+0x2a>
 80133a6:	780b      	ldrb	r3, [r1, #0]
 80133a8:	468c      	mov	ip, r1
 80133aa:	b183      	cbz	r3, 80133ce <rmw_create_node+0x2a>
 80133ac:	b410      	push	{r4}
 80133ae:	4614      	mov	r4, r2
 80133b0:	b14a      	cbz	r2, 80133c6 <rmw_create_node+0x22>
 80133b2:	7813      	ldrb	r3, [r2, #0]
 80133b4:	b13b      	cbz	r3, 80133c6 <rmw_create_node+0x22>
 80133b6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80133b8:	4603      	mov	r3, r0
 80133ba:	4621      	mov	r1, r4
 80133bc:	4660      	mov	r0, ip
 80133be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133c2:	f7ff bf75 	b.w	80132b0 <create_node>
 80133c6:	2000      	movs	r0, #0
 80133c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133cc:	4770      	bx	lr
 80133ce:	2000      	movs	r0, #0
 80133d0:	4770      	bx	lr
 80133d2:	bf00      	nop

080133d4 <rmw_destroy_node>:
 80133d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133d6:	b328      	cbz	r0, 8013424 <rmw_destroy_node+0x50>
 80133d8:	4607      	mov	r7, r0
 80133da:	6800      	ldr	r0, [r0, #0]
 80133dc:	b120      	cbz	r0, 80133e8 <rmw_destroy_node+0x14>
 80133de:	4b36      	ldr	r3, [pc, #216]	; (80134b8 <rmw_destroy_node+0xe4>)
 80133e0:	6819      	ldr	r1, [r3, #0]
 80133e2:	f7ec fefd 	bl	80001e0 <strcmp>
 80133e6:	b9e8      	cbnz	r0, 8013424 <rmw_destroy_node+0x50>
 80133e8:	687d      	ldr	r5, [r7, #4]
 80133ea:	b1dd      	cbz	r5, 8013424 <rmw_destroy_node+0x50>
 80133ec:	4b33      	ldr	r3, [pc, #204]	; (80134bc <rmw_destroy_node+0xe8>)
 80133ee:	681c      	ldr	r4, [r3, #0]
 80133f0:	2c00      	cmp	r4, #0
 80133f2:	d05f      	beq.n	80134b4 <rmw_destroy_node+0xe0>
 80133f4:	2600      	movs	r6, #0
 80133f6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80133fa:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80133fe:	429d      	cmp	r5, r3
 8013400:	d013      	beq.n	801342a <rmw_destroy_node+0x56>
 8013402:	2c00      	cmp	r4, #0
 8013404:	d1f7      	bne.n	80133f6 <rmw_destroy_node+0x22>
 8013406:	4b2e      	ldr	r3, [pc, #184]	; (80134c0 <rmw_destroy_node+0xec>)
 8013408:	681c      	ldr	r4, [r3, #0]
 801340a:	b1c4      	cbz	r4, 801343e <rmw_destroy_node+0x6a>
 801340c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013410:	6a0b      	ldr	r3, [r1, #32]
 8013412:	429d      	cmp	r5, r3
 8013414:	d1f9      	bne.n	801340a <rmw_destroy_node+0x36>
 8013416:	317c      	adds	r1, #124	; 0x7c
 8013418:	4638      	mov	r0, r7
 801341a:	f000 fae5 	bl	80139e8 <rmw_destroy_subscription>
 801341e:	2801      	cmp	r0, #1
 8013420:	4606      	mov	r6, r0
 8013422:	d1f2      	bne.n	801340a <rmw_destroy_node+0x36>
 8013424:	2601      	movs	r6, #1
 8013426:	4630      	mov	r0, r6
 8013428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801342a:	3184      	adds	r1, #132	; 0x84
 801342c:	4638      	mov	r0, r7
 801342e:	f7f7 fcab 	bl	800ad88 <rmw_destroy_publisher>
 8013432:	2801      	cmp	r0, #1
 8013434:	4606      	mov	r6, r0
 8013436:	d0f5      	beq.n	8013424 <rmw_destroy_node+0x50>
 8013438:	2c00      	cmp	r4, #0
 801343a:	d1dc      	bne.n	80133f6 <rmw_destroy_node+0x22>
 801343c:	e7e3      	b.n	8013406 <rmw_destroy_node+0x32>
 801343e:	4b21      	ldr	r3, [pc, #132]	; (80134c4 <rmw_destroy_node+0xf0>)
 8013440:	681c      	ldr	r4, [r3, #0]
 8013442:	b16c      	cbz	r4, 8013460 <rmw_destroy_node+0x8c>
 8013444:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013448:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801344a:	429d      	cmp	r5, r3
 801344c:	d1f9      	bne.n	8013442 <rmw_destroy_node+0x6e>
 801344e:	317c      	adds	r1, #124	; 0x7c
 8013450:	4638      	mov	r0, r7
 8013452:	f000 f993 	bl	801377c <rmw_destroy_service>
 8013456:	2801      	cmp	r0, #1
 8013458:	4606      	mov	r6, r0
 801345a:	d0e3      	beq.n	8013424 <rmw_destroy_node+0x50>
 801345c:	2c00      	cmp	r4, #0
 801345e:	d1f1      	bne.n	8013444 <rmw_destroy_node+0x70>
 8013460:	4b19      	ldr	r3, [pc, #100]	; (80134c8 <rmw_destroy_node+0xf4>)
 8013462:	681c      	ldr	r4, [r3, #0]
 8013464:	b16c      	cbz	r4, 8013482 <rmw_destroy_node+0xae>
 8013466:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801346a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801346c:	429d      	cmp	r5, r3
 801346e:	d1f9      	bne.n	8013464 <rmw_destroy_node+0x90>
 8013470:	317c      	adds	r1, #124	; 0x7c
 8013472:	4638      	mov	r0, r7
 8013474:	f7ff fc00 	bl	8012c78 <rmw_destroy_client>
 8013478:	2801      	cmp	r0, #1
 801347a:	4606      	mov	r6, r0
 801347c:	d0d2      	beq.n	8013424 <rmw_destroy_node+0x50>
 801347e:	2c00      	cmp	r4, #0
 8013480:	d1f1      	bne.n	8013466 <rmw_destroy_node+0x92>
 8013482:	6928      	ldr	r0, [r5, #16]
 8013484:	696a      	ldr	r2, [r5, #20]
 8013486:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801348a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801348e:	6819      	ldr	r1, [r3, #0]
 8013490:	f7f9 fa60 	bl	800c954 <uxr_buffer_delete_entity>
 8013494:	4602      	mov	r2, r0
 8013496:	6928      	ldr	r0, [r5, #16]
 8013498:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801349c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80134a0:	f7f7 ff9c 	bl	800b3dc <run_xrce_session>
 80134a4:	2800      	cmp	r0, #0
 80134a6:	bf08      	it	eq
 80134a8:	2602      	moveq	r6, #2
 80134aa:	4638      	mov	r0, r7
 80134ac:	f7f7 fe24 	bl	800b0f8 <rmw_uxrce_fini_node_memory>
 80134b0:	4630      	mov	r0, r6
 80134b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134b4:	4626      	mov	r6, r4
 80134b6:	e7a6      	b.n	8013406 <rmw_destroy_node+0x32>
 80134b8:	080184fc 	.word	0x080184fc
 80134bc:	2000da74 	.word	0x2000da74
 80134c0:	2000dab4 	.word	0x2000dab4
 80134c4:	2000da84 	.word	0x2000da84
 80134c8:	20009198 	.word	0x20009198

080134cc <rmw_node_get_graph_guard_condition>:
 80134cc:	6843      	ldr	r3, [r0, #4]
 80134ce:	6918      	ldr	r0, [r3, #16]
 80134d0:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80134d4:	4770      	bx	lr
 80134d6:	bf00      	nop

080134d8 <rmw_send_request>:
 80134d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134dc:	4604      	mov	r4, r0
 80134de:	6800      	ldr	r0, [r0, #0]
 80134e0:	b08b      	sub	sp, #44	; 0x2c
 80134e2:	460e      	mov	r6, r1
 80134e4:	4615      	mov	r5, r2
 80134e6:	b128      	cbz	r0, 80134f4 <rmw_send_request+0x1c>
 80134e8:	4b21      	ldr	r3, [pc, #132]	; (8013570 <rmw_send_request+0x98>)
 80134ea:	6819      	ldr	r1, [r3, #0]
 80134ec:	f7ec fe78 	bl	80001e0 <strcmp>
 80134f0:	2800      	cmp	r0, #0
 80134f2:	d139      	bne.n	8013568 <rmw_send_request+0x90>
 80134f4:	6864      	ldr	r4, [r4, #4]
 80134f6:	6963      	ldr	r3, [r4, #20]
 80134f8:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 80134fc:	689b      	ldr	r3, [r3, #8]
 80134fe:	4798      	blx	r3
 8013500:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013504:	4630      	mov	r0, r6
 8013506:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801350a:	4798      	blx	r3
 801350c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013510:	9000      	str	r0, [sp, #0]
 8013512:	6922      	ldr	r2, [r4, #16]
 8013514:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8013516:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801351a:	ab02      	add	r3, sp, #8
 801351c:	f7fa ff18 	bl	800e350 <uxr_prepare_output_stream>
 8013520:	2700      	movs	r7, #0
 8013522:	6028      	str	r0, [r5, #0]
 8013524:	606f      	str	r7, [r5, #4]
 8013526:	b198      	cbz	r0, 8013550 <rmw_send_request+0x78>
 8013528:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801352c:	a902      	add	r1, sp, #8
 801352e:	4630      	mov	r0, r6
 8013530:	4798      	blx	r3
 8013532:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8013536:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801353a:	2b01      	cmp	r3, #1
 801353c:	d00c      	beq.n	8013558 <rmw_send_request+0x80>
 801353e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8013540:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013544:	f7fa f918 	bl	800d778 <uxr_run_session_until_confirm_delivery>
 8013548:	4638      	mov	r0, r7
 801354a:	b00b      	add	sp, #44	; 0x2c
 801354c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013550:	2001      	movs	r0, #1
 8013552:	b00b      	add	sp, #44	; 0x2c
 8013554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013558:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801355c:	f7f9 fd4c 	bl	800cff8 <uxr_flash_output_streams>
 8013560:	4638      	mov	r0, r7
 8013562:	b00b      	add	sp, #44	; 0x2c
 8013564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013568:	200c      	movs	r0, #12
 801356a:	b00b      	add	sp, #44	; 0x2c
 801356c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013570:	080184fc 	.word	0x080184fc

08013574 <rmw_take_request>:
 8013574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013578:	4605      	mov	r5, r0
 801357a:	6800      	ldr	r0, [r0, #0]
 801357c:	b089      	sub	sp, #36	; 0x24
 801357e:	460c      	mov	r4, r1
 8013580:	4690      	mov	r8, r2
 8013582:	461e      	mov	r6, r3
 8013584:	b128      	cbz	r0, 8013592 <rmw_take_request+0x1e>
 8013586:	4b28      	ldr	r3, [pc, #160]	; (8013628 <rmw_take_request+0xb4>)
 8013588:	6819      	ldr	r1, [r3, #0]
 801358a:	f7ec fe29 	bl	80001e0 <strcmp>
 801358e:	2800      	cmp	r0, #0
 8013590:	d146      	bne.n	8013620 <rmw_take_request+0xac>
 8013592:	b10e      	cbz	r6, 8013598 <rmw_take_request+0x24>
 8013594:	2300      	movs	r3, #0
 8013596:	7033      	strb	r3, [r6, #0]
 8013598:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801359c:	f7f7 fea0 	bl	800b2e0 <rmw_uxrce_clean_expired_static_input_buffer>
 80135a0:	4648      	mov	r0, r9
 80135a2:	f7f7 fe75 	bl	800b290 <rmw_uxrce_find_static_input_buffer_by_owner>
 80135a6:	4607      	mov	r7, r0
 80135a8:	b3b0      	cbz	r0, 8013618 <rmw_take_request+0xa4>
 80135aa:	6885      	ldr	r5, [r0, #8]
 80135ac:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
 80135b0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	; 0x83c
 80135b4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80135b8:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80135bc:	7423      	strb	r3, [r4, #16]
 80135be:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 80135c2:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 80135c6:	74e2      	strb	r2, [r4, #19]
 80135c8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80135cc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 80135d0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 80135d4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 80135d8:	61e1      	str	r1, [r4, #28]
 80135da:	6162      	str	r2, [r4, #20]
 80135dc:	61a3      	str	r3, [r4, #24]
 80135de:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80135e2:	689b      	ldr	r3, [r3, #8]
 80135e4:	4798      	blx	r3
 80135e6:	6844      	ldr	r4, [r0, #4]
 80135e8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 80135ec:	f105 0110 	add.w	r1, r5, #16
 80135f0:	4668      	mov	r0, sp
 80135f2:	f7f9 f93f 	bl	800c874 <ucdr_init_buffer>
 80135f6:	68e3      	ldr	r3, [r4, #12]
 80135f8:	4641      	mov	r1, r8
 80135fa:	4668      	mov	r0, sp
 80135fc:	4798      	blx	r3
 80135fe:	4639      	mov	r1, r7
 8013600:	4604      	mov	r4, r0
 8013602:	480a      	ldr	r0, [pc, #40]	; (801362c <rmw_take_request+0xb8>)
 8013604:	f7ff fb24 	bl	8012c50 <put_memory>
 8013608:	b106      	cbz	r6, 801360c <rmw_take_request+0x98>
 801360a:	7034      	strb	r4, [r6, #0]
 801360c:	f084 0001 	eor.w	r0, r4, #1
 8013610:	b2c0      	uxtb	r0, r0
 8013612:	b009      	add	sp, #36	; 0x24
 8013614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013618:	2001      	movs	r0, #1
 801361a:	b009      	add	sp, #36	; 0x24
 801361c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013620:	200c      	movs	r0, #12
 8013622:	b009      	add	sp, #36	; 0x24
 8013624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013628:	080184fc 	.word	0x080184fc
 801362c:	2000daa4 	.word	0x2000daa4

08013630 <rmw_send_response>:
 8013630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013632:	4605      	mov	r5, r0
 8013634:	6800      	ldr	r0, [r0, #0]
 8013636:	b091      	sub	sp, #68	; 0x44
 8013638:	460c      	mov	r4, r1
 801363a:	4616      	mov	r6, r2
 801363c:	b128      	cbz	r0, 801364a <rmw_send_response+0x1a>
 801363e:	4b29      	ldr	r3, [pc, #164]	; (80136e4 <rmw_send_response+0xb4>)
 8013640:	6819      	ldr	r1, [r3, #0]
 8013642:	f7ec fdcd 	bl	80001e0 <strcmp>
 8013646:	2800      	cmp	r0, #0
 8013648:	d141      	bne.n	80136ce <rmw_send_response+0x9e>
 801364a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801364e:	9306      	str	r3, [sp, #24]
 8013650:	4623      	mov	r3, r4
 8013652:	9207      	str	r2, [sp, #28]
 8013654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013658:	686d      	ldr	r5, [r5, #4]
 801365a:	789b      	ldrb	r3, [r3, #2]
 801365c:	68a1      	ldr	r1, [r4, #8]
 801365e:	f88d 2017 	strb.w	r2, [sp, #23]
 8013662:	f88d 3016 	strb.w	r3, [sp, #22]
 8013666:	68e2      	ldr	r2, [r4, #12]
 8013668:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801366c:	6860      	ldr	r0, [r4, #4]
 801366e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013672:	ab02      	add	r3, sp, #8
 8013674:	c307      	stmia	r3!, {r0, r1, r2}
 8013676:	696b      	ldr	r3, [r5, #20]
 8013678:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801367a:	68db      	ldr	r3, [r3, #12]
 801367c:	4798      	blx	r3
 801367e:	6844      	ldr	r4, [r0, #4]
 8013680:	4630      	mov	r0, r6
 8013682:	6923      	ldr	r3, [r4, #16]
 8013684:	4798      	blx	r3
 8013686:	f100 0318 	add.w	r3, r0, #24
 801368a:	6938      	ldr	r0, [r7, #16]
 801368c:	9300      	str	r3, [sp, #0]
 801368e:	692a      	ldr	r2, [r5, #16]
 8013690:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8013692:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013696:	ab08      	add	r3, sp, #32
 8013698:	f7fa fe5a 	bl	800e350 <uxr_prepare_output_stream>
 801369c:	b910      	cbnz	r0, 80136a4 <rmw_send_response+0x74>
 801369e:	2001      	movs	r0, #1
 80136a0:	b011      	add	sp, #68	; 0x44
 80136a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136a4:	a902      	add	r1, sp, #8
 80136a6:	a808      	add	r0, sp, #32
 80136a8:	f7fb ff8a 	bl	800f5c0 <uxr_serialize_SampleIdentity>
 80136ac:	68a3      	ldr	r3, [r4, #8]
 80136ae:	a908      	add	r1, sp, #32
 80136b0:	4630      	mov	r0, r6
 80136b2:	4798      	blx	r3
 80136b4:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80136b8:	6938      	ldr	r0, [r7, #16]
 80136ba:	2b01      	cmp	r3, #1
 80136bc:	d00a      	beq.n	80136d4 <rmw_send_response+0xa4>
 80136be:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80136c0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80136c4:	f7fa f858 	bl	800d778 <uxr_run_session_until_confirm_delivery>
 80136c8:	2000      	movs	r0, #0
 80136ca:	b011      	add	sp, #68	; 0x44
 80136cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136ce:	200c      	movs	r0, #12
 80136d0:	b011      	add	sp, #68	; 0x44
 80136d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136d4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80136d8:	f7f9 fc8e 	bl	800cff8 <uxr_flash_output_streams>
 80136dc:	2000      	movs	r0, #0
 80136de:	b011      	add	sp, #68	; 0x44
 80136e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136e2:	bf00      	nop
 80136e4:	080184fc 	.word	0x080184fc

080136e8 <rmw_take_response>:
 80136e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ec:	4604      	mov	r4, r0
 80136ee:	6800      	ldr	r0, [r0, #0]
 80136f0:	b088      	sub	sp, #32
 80136f2:	4688      	mov	r8, r1
 80136f4:	4617      	mov	r7, r2
 80136f6:	461d      	mov	r5, r3
 80136f8:	b120      	cbz	r0, 8013704 <rmw_take_response+0x1c>
 80136fa:	4b1e      	ldr	r3, [pc, #120]	; (8013774 <rmw_take_response+0x8c>)
 80136fc:	6819      	ldr	r1, [r3, #0]
 80136fe:	f7ec fd6f 	bl	80001e0 <strcmp>
 8013702:	bb78      	cbnz	r0, 8013764 <rmw_take_response+0x7c>
 8013704:	b10d      	cbz	r5, 801370a <rmw_take_response+0x22>
 8013706:	2300      	movs	r3, #0
 8013708:	702b      	strb	r3, [r5, #0]
 801370a:	6864      	ldr	r4, [r4, #4]
 801370c:	f7f7 fde8 	bl	800b2e0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013710:	4620      	mov	r0, r4
 8013712:	f7f7 fdbd 	bl	800b290 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013716:	4606      	mov	r6, r0
 8013718:	b340      	cbz	r0, 801376c <rmw_take_response+0x84>
 801371a:	6963      	ldr	r3, [r4, #20]
 801371c:	6884      	ldr	r4, [r0, #8]
 801371e:	68db      	ldr	r3, [r3, #12]
 8013720:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8013724:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8013728:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801372c:	4798      	blx	r3
 801372e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013732:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8013736:	f104 0110 	add.w	r1, r4, #16
 801373a:	4668      	mov	r0, sp
 801373c:	f7f9 f89a 	bl	800c874 <ucdr_init_buffer>
 8013740:	4639      	mov	r1, r7
 8013742:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013746:	4668      	mov	r0, sp
 8013748:	4798      	blx	r3
 801374a:	4631      	mov	r1, r6
 801374c:	4604      	mov	r4, r0
 801374e:	480a      	ldr	r0, [pc, #40]	; (8013778 <rmw_take_response+0x90>)
 8013750:	f7ff fa7e 	bl	8012c50 <put_memory>
 8013754:	b105      	cbz	r5, 8013758 <rmw_take_response+0x70>
 8013756:	702c      	strb	r4, [r5, #0]
 8013758:	f084 0001 	eor.w	r0, r4, #1
 801375c:	b2c0      	uxtb	r0, r0
 801375e:	b008      	add	sp, #32
 8013760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013764:	200c      	movs	r0, #12
 8013766:	b008      	add	sp, #32
 8013768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801376c:	2001      	movs	r0, #1
 801376e:	b008      	add	sp, #32
 8013770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013774:	080184fc 	.word	0x080184fc
 8013778:	2000daa4 	.word	0x2000daa4

0801377c <rmw_destroy_service>:
 801377c:	b570      	push	{r4, r5, r6, lr}
 801377e:	b128      	cbz	r0, 801378c <rmw_destroy_service+0x10>
 8013780:	4604      	mov	r4, r0
 8013782:	6800      	ldr	r0, [r0, #0]
 8013784:	460d      	mov	r5, r1
 8013786:	f7f7 fea9 	bl	800b4dc <is_uxrce_rmw_identifier_valid>
 801378a:	b910      	cbnz	r0, 8013792 <rmw_destroy_service+0x16>
 801378c:	2401      	movs	r4, #1
 801378e:	4620      	mov	r0, r4
 8013790:	bd70      	pop	{r4, r5, r6, pc}
 8013792:	6863      	ldr	r3, [r4, #4]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d0f9      	beq.n	801378c <rmw_destroy_service+0x10>
 8013798:	2d00      	cmp	r5, #0
 801379a:	d0f7      	beq.n	801378c <rmw_destroy_service+0x10>
 801379c:	6828      	ldr	r0, [r5, #0]
 801379e:	f7f7 fe9d 	bl	800b4dc <is_uxrce_rmw_identifier_valid>
 80137a2:	2800      	cmp	r0, #0
 80137a4:	d0f2      	beq.n	801378c <rmw_destroy_service+0x10>
 80137a6:	686e      	ldr	r6, [r5, #4]
 80137a8:	2e00      	cmp	r6, #0
 80137aa:	d0ef      	beq.n	801378c <rmw_destroy_service+0x10>
 80137ac:	6864      	ldr	r4, [r4, #4]
 80137ae:	6932      	ldr	r2, [r6, #16]
 80137b0:	6920      	ldr	r0, [r4, #16]
 80137b2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80137b6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80137ba:	6819      	ldr	r1, [r3, #0]
 80137bc:	f001 fb9e 	bl	8014efc <uxr_buffer_cancel_data>
 80137c0:	4602      	mov	r2, r0
 80137c2:	6920      	ldr	r0, [r4, #16]
 80137c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80137c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80137cc:	f7f7 fe06 	bl	800b3dc <run_xrce_session>
 80137d0:	6920      	ldr	r0, [r4, #16]
 80137d2:	6932      	ldr	r2, [r6, #16]
 80137d4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80137d8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80137dc:	6819      	ldr	r1, [r3, #0]
 80137de:	f7f9 f8b9 	bl	800c954 <uxr_buffer_delete_entity>
 80137e2:	4602      	mov	r2, r0
 80137e4:	6920      	ldr	r0, [r4, #16]
 80137e6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80137ea:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80137ee:	f7f7 fdf5 	bl	800b3dc <run_xrce_session>
 80137f2:	2800      	cmp	r0, #0
 80137f4:	4628      	mov	r0, r5
 80137f6:	bf14      	ite	ne
 80137f8:	2400      	movne	r4, #0
 80137fa:	2402      	moveq	r4, #2
 80137fc:	f7f7 fcc0 	bl	800b180 <rmw_uxrce_fini_service_memory>
 8013800:	e7c5      	b.n	801378e <rmw_destroy_service+0x12>
 8013802:	bf00      	nop

08013804 <rmw_create_subscription>:
 8013804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013808:	b08d      	sub	sp, #52	; 0x34
 801380a:	2800      	cmp	r0, #0
 801380c:	f000 80d1 	beq.w	80139b2 <rmw_create_subscription+0x1ae>
 8013810:	460e      	mov	r6, r1
 8013812:	2900      	cmp	r1, #0
 8013814:	f000 80cd 	beq.w	80139b2 <rmw_create_subscription+0x1ae>
 8013818:	4604      	mov	r4, r0
 801381a:	6800      	ldr	r0, [r0, #0]
 801381c:	4615      	mov	r5, r2
 801381e:	4698      	mov	r8, r3
 8013820:	f7f7 fe5c 	bl	800b4dc <is_uxrce_rmw_identifier_valid>
 8013824:	2800      	cmp	r0, #0
 8013826:	f000 80c4 	beq.w	80139b2 <rmw_create_subscription+0x1ae>
 801382a:	2d00      	cmp	r5, #0
 801382c:	f000 80c1 	beq.w	80139b2 <rmw_create_subscription+0x1ae>
 8013830:	782b      	ldrb	r3, [r5, #0]
 8013832:	2b00      	cmp	r3, #0
 8013834:	f000 80bd 	beq.w	80139b2 <rmw_create_subscription+0x1ae>
 8013838:	f1b8 0f00 	cmp.w	r8, #0
 801383c:	f000 80b9 	beq.w	80139b2 <rmw_create_subscription+0x1ae>
 8013840:	485e      	ldr	r0, [pc, #376]	; (80139bc <rmw_create_subscription+0x1b8>)
 8013842:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013846:	f7ff f9f3 	bl	8012c30 <get_memory>
 801384a:	4604      	mov	r4, r0
 801384c:	2800      	cmp	r0, #0
 801384e:	f000 80b1 	beq.w	80139b4 <rmw_create_subscription+0x1b0>
 8013852:	6887      	ldr	r7, [r0, #8]
 8013854:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8013858:	f7ff fa52 	bl	8012d00 <rmw_get_implementation_identifier>
 801385c:	f107 0a98 	add.w	sl, r7, #152	; 0x98
 8013860:	67f8      	str	r0, [r7, #124]	; 0x7c
 8013862:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8013866:	4628      	mov	r0, r5
 8013868:	f7ec fcc4 	bl	80001f4 <strlen>
 801386c:	3001      	adds	r0, #1
 801386e:	283c      	cmp	r0, #60	; 0x3c
 8013870:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8013874:	f200 8096 	bhi.w	80139a4 <rmw_create_subscription+0x1a0>
 8013878:	4a51      	ldr	r2, [pc, #324]	; (80139c0 <rmw_create_subscription+0x1bc>)
 801387a:	462b      	mov	r3, r5
 801387c:	213c      	movs	r1, #60	; 0x3c
 801387e:	4650      	mov	r0, sl
 8013880:	f003 f84e 	bl	8016920 <sniprintf>
 8013884:	4641      	mov	r1, r8
 8013886:	f8c7 9020 	str.w	r9, [r7, #32]
 801388a:	2250      	movs	r2, #80	; 0x50
 801388c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8013890:	f003 f9e9 	bl	8016c66 <memcpy>
 8013894:	494b      	ldr	r1, [pc, #300]	; (80139c4 <rmw_create_subscription+0x1c0>)
 8013896:	4630      	mov	r0, r6
 8013898:	f7f7 fe2e 	bl	800b4f8 <get_message_typesupport_handle>
 801389c:	2800      	cmp	r0, #0
 801389e:	f000 8081 	beq.w	80139a4 <rmw_create_subscription+0x1a0>
 80138a2:	6842      	ldr	r2, [r0, #4]
 80138a4:	61ba      	str	r2, [r7, #24]
 80138a6:	2a00      	cmp	r2, #0
 80138a8:	d07c      	beq.n	80139a4 <rmw_create_subscription+0x1a0>
 80138aa:	4629      	mov	r1, r5
 80138ac:	4643      	mov	r3, r8
 80138ae:	4648      	mov	r0, r9
 80138b0:	f7ff fc8c 	bl	80131cc <create_topic>
 80138b4:	61f8      	str	r0, [r7, #28]
 80138b6:	2800      	cmp	r0, #0
 80138b8:	d078      	beq.n	80139ac <rmw_create_subscription+0x1a8>
 80138ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80138be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80138c2:	2104      	movs	r1, #4
 80138c4:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 80138c8:	1c42      	adds	r2, r0, #1
 80138ca:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 80138ce:	f7f9 fa43 	bl	800cd58 <uxr_object_id>
 80138d2:	6138      	str	r0, [r7, #16]
 80138d4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80138d8:	2506      	movs	r5, #6
 80138da:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 80138de:	9500      	str	r5, [sp, #0]
 80138e0:	6819      	ldr	r1, [r3, #0]
 80138e2:	693a      	ldr	r2, [r7, #16]
 80138e4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80138e8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80138ec:	f7f9 f916 	bl	800cb1c <uxr_buffer_create_subscriber_bin>
 80138f0:	4602      	mov	r2, r0
 80138f2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80138f6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80138fa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80138fe:	f7f7 fd6d 	bl	800b3dc <run_xrce_session>
 8013902:	2800      	cmp	r0, #0
 8013904:	d04e      	beq.n	80139a4 <rmw_create_subscription+0x1a0>
 8013906:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801390a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801390e:	4629      	mov	r1, r5
 8013910:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8013914:	1c42      	adds	r2, r0, #1
 8013916:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 801391a:	f7f9 fa1d 	bl	800cd58 <uxr_object_id>
 801391e:	ae08      	add	r6, sp, #32
 8013920:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013924:	69fb      	ldr	r3, [r7, #28]
 8013926:	6178      	str	r0, [r7, #20]
 8013928:	4641      	mov	r1, r8
 801392a:	4630      	mov	r0, r6
 801392c:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8013930:	9305      	str	r3, [sp, #20]
 8013932:	f7f7 fd6f 	bl	800b414 <convert_qos_profile>
 8013936:	9503      	str	r5, [sp, #12]
 8013938:	e896 0003 	ldmia.w	r6, {r0, r1}
 801393c:	9b05      	ldr	r3, [sp, #20]
 801393e:	9001      	str	r0, [sp, #4]
 8013940:	f8ad 1008 	strh.w	r1, [sp, #8]
 8013944:	691b      	ldr	r3, [r3, #16]
 8013946:	9300      	str	r3, [sp, #0]
 8013948:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 801394c:	f8db 1000 	ldr.w	r1, [fp]
 8013950:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8013954:	f7f9 f988 	bl	800cc68 <uxr_buffer_create_datareader_bin>
 8013958:	4602      	mov	r2, r0
 801395a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801395e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8013962:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013966:	f7f7 fd39 	bl	800b3dc <run_xrce_session>
 801396a:	b1d8      	cbz	r0, 80139a4 <rmw_create_subscription+0x1a0>
 801396c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8013970:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013974:	2b02      	cmp	r3, #2
 8013976:	bf0c      	ite	eq
 8013978:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 801397c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 8013980:	9307      	str	r3, [sp, #28]
 8013982:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013986:	2200      	movs	r2, #0
 8013988:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 801398c:	ab0a      	add	r3, sp, #40	; 0x28
 801398e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013992:	9300      	str	r3, [sp, #0]
 8013994:	697a      	ldr	r2, [r7, #20]
 8013996:	9b07      	ldr	r3, [sp, #28]
 8013998:	6809      	ldr	r1, [r1, #0]
 801399a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801399e:	f001 fa73 	bl	8014e88 <uxr_buffer_request_data>
 80139a2:	e007      	b.n	80139b4 <rmw_create_subscription+0x1b0>
 80139a4:	69f8      	ldr	r0, [r7, #28]
 80139a6:	b108      	cbz	r0, 80139ac <rmw_create_subscription+0x1a8>
 80139a8:	f7f7 fc16 	bl	800b1d8 <rmw_uxrce_fini_topic_memory>
 80139ac:	4620      	mov	r0, r4
 80139ae:	f7f7 fbd1 	bl	800b154 <rmw_uxrce_fini_subscription_memory>
 80139b2:	2400      	movs	r4, #0
 80139b4:	4620      	mov	r0, r4
 80139b6:	b00d      	add	sp, #52	; 0x34
 80139b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139bc:	2000dab4 	.word	0x2000dab4
 80139c0:	08017ce4 	.word	0x08017ce4
 80139c4:	08017cb0 	.word	0x08017cb0

080139c8 <rmw_subscription_get_actual_qos>:
 80139c8:	b150      	cbz	r0, 80139e0 <rmw_subscription_get_actual_qos+0x18>
 80139ca:	b508      	push	{r3, lr}
 80139cc:	460b      	mov	r3, r1
 80139ce:	b149      	cbz	r1, 80139e4 <rmw_subscription_get_actual_qos+0x1c>
 80139d0:	6841      	ldr	r1, [r0, #4]
 80139d2:	2250      	movs	r2, #80	; 0x50
 80139d4:	3128      	adds	r1, #40	; 0x28
 80139d6:	4618      	mov	r0, r3
 80139d8:	f003 f945 	bl	8016c66 <memcpy>
 80139dc:	2000      	movs	r0, #0
 80139de:	bd08      	pop	{r3, pc}
 80139e0:	200b      	movs	r0, #11
 80139e2:	4770      	bx	lr
 80139e4:	200b      	movs	r0, #11
 80139e6:	bd08      	pop	{r3, pc}

080139e8 <rmw_destroy_subscription>:
 80139e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ea:	b128      	cbz	r0, 80139f8 <rmw_destroy_subscription+0x10>
 80139ec:	4604      	mov	r4, r0
 80139ee:	6800      	ldr	r0, [r0, #0]
 80139f0:	460d      	mov	r5, r1
 80139f2:	f7f7 fd73 	bl	800b4dc <is_uxrce_rmw_identifier_valid>
 80139f6:	b910      	cbnz	r0, 80139fe <rmw_destroy_subscription+0x16>
 80139f8:	2401      	movs	r4, #1
 80139fa:	4620      	mov	r0, r4
 80139fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139fe:	6863      	ldr	r3, [r4, #4]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d0f9      	beq.n	80139f8 <rmw_destroy_subscription+0x10>
 8013a04:	2d00      	cmp	r5, #0
 8013a06:	d0f7      	beq.n	80139f8 <rmw_destroy_subscription+0x10>
 8013a08:	6828      	ldr	r0, [r5, #0]
 8013a0a:	f7f7 fd67 	bl	800b4dc <is_uxrce_rmw_identifier_valid>
 8013a0e:	2800      	cmp	r0, #0
 8013a10:	d0f2      	beq.n	80139f8 <rmw_destroy_subscription+0x10>
 8013a12:	686c      	ldr	r4, [r5, #4]
 8013a14:	2c00      	cmp	r4, #0
 8013a16:	d0ef      	beq.n	80139f8 <rmw_destroy_subscription+0x10>
 8013a18:	6a26      	ldr	r6, [r4, #32]
 8013a1a:	6962      	ldr	r2, [r4, #20]
 8013a1c:	6930      	ldr	r0, [r6, #16]
 8013a1e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013a22:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013a26:	6819      	ldr	r1, [r3, #0]
 8013a28:	f001 fa68 	bl	8014efc <uxr_buffer_cancel_data>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	6930      	ldr	r0, [r6, #16]
 8013a30:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013a34:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013a38:	f7f7 fcd0 	bl	800b3dc <run_xrce_session>
 8013a3c:	69e0      	ldr	r0, [r4, #28]
 8013a3e:	f7ff fc15 	bl	801326c <destroy_topic>
 8013a42:	6a23      	ldr	r3, [r4, #32]
 8013a44:	6962      	ldr	r2, [r4, #20]
 8013a46:	6918      	ldr	r0, [r3, #16]
 8013a48:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013a4c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013a50:	6819      	ldr	r1, [r3, #0]
 8013a52:	f7f8 ff7f 	bl	800c954 <uxr_buffer_delete_entity>
 8013a56:	6a23      	ldr	r3, [r4, #32]
 8013a58:	6922      	ldr	r2, [r4, #16]
 8013a5a:	691b      	ldr	r3, [r3, #16]
 8013a5c:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8013a60:	4604      	mov	r4, r0
 8013a62:	6809      	ldr	r1, [r1, #0]
 8013a64:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8013a68:	f7f8 ff74 	bl	800c954 <uxr_buffer_delete_entity>
 8013a6c:	6937      	ldr	r7, [r6, #16]
 8013a6e:	4622      	mov	r2, r4
 8013a70:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8013a74:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8013a78:	4604      	mov	r4, r0
 8013a7a:	4638      	mov	r0, r7
 8013a7c:	f7f7 fcae 	bl	800b3dc <run_xrce_session>
 8013a80:	6936      	ldr	r6, [r6, #16]
 8013a82:	4622      	mov	r2, r4
 8013a84:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8013a88:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8013a8c:	4604      	mov	r4, r0
 8013a8e:	4630      	mov	r0, r6
 8013a90:	f7f7 fca4 	bl	800b3dc <run_xrce_session>
 8013a94:	b12c      	cbz	r4, 8013aa2 <rmw_destroy_subscription+0xba>
 8013a96:	b120      	cbz	r0, 8013aa2 <rmw_destroy_subscription+0xba>
 8013a98:	2400      	movs	r4, #0
 8013a9a:	4628      	mov	r0, r5
 8013a9c:	f7f7 fb5a 	bl	800b154 <rmw_uxrce_fini_subscription_memory>
 8013aa0:	e7ab      	b.n	80139fa <rmw_destroy_subscription+0x12>
 8013aa2:	2402      	movs	r4, #2
 8013aa4:	e7f9      	b.n	8013a9a <rmw_destroy_subscription+0xb2>
 8013aa6:	bf00      	nop

08013aa8 <rmw_take_with_info>:
 8013aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013aaa:	4604      	mov	r4, r0
 8013aac:	6800      	ldr	r0, [r0, #0]
 8013aae:	b089      	sub	sp, #36	; 0x24
 8013ab0:	460f      	mov	r7, r1
 8013ab2:	4615      	mov	r5, r2
 8013ab4:	b128      	cbz	r0, 8013ac2 <rmw_take_with_info+0x1a>
 8013ab6:	4b24      	ldr	r3, [pc, #144]	; (8013b48 <rmw_take_with_info+0xa0>)
 8013ab8:	6819      	ldr	r1, [r3, #0]
 8013aba:	f7ec fb91 	bl	80001e0 <strcmp>
 8013abe:	2800      	cmp	r0, #0
 8013ac0:	d13e      	bne.n	8013b40 <rmw_take_with_info+0x98>
 8013ac2:	b305      	cbz	r5, 8013b06 <rmw_take_with_info+0x5e>
 8013ac4:	6864      	ldr	r4, [r4, #4]
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	702b      	strb	r3, [r5, #0]
 8013aca:	f7f7 fc09 	bl	800b2e0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f7f7 fbde 	bl	800b290 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013ad4:	4606      	mov	r6, r0
 8013ad6:	b1f0      	cbz	r0, 8013b16 <rmw_take_with_info+0x6e>
 8013ad8:	6881      	ldr	r1, [r0, #8]
 8013ada:	4668      	mov	r0, sp
 8013adc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8013ae0:	3110      	adds	r1, #16
 8013ae2:	f7f8 fec7 	bl	800c874 <ucdr_init_buffer>
 8013ae6:	69a3      	ldr	r3, [r4, #24]
 8013ae8:	4639      	mov	r1, r7
 8013aea:	68db      	ldr	r3, [r3, #12]
 8013aec:	4668      	mov	r0, sp
 8013aee:	4798      	blx	r3
 8013af0:	4631      	mov	r1, r6
 8013af2:	4604      	mov	r4, r0
 8013af4:	4815      	ldr	r0, [pc, #84]	; (8013b4c <rmw_take_with_info+0xa4>)
 8013af6:	f7ff f8ab 	bl	8012c50 <put_memory>
 8013afa:	702c      	strb	r4, [r5, #0]
 8013afc:	f084 0001 	eor.w	r0, r4, #1
 8013b00:	b2c0      	uxtb	r0, r0
 8013b02:	b009      	add	sp, #36	; 0x24
 8013b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b06:	6864      	ldr	r4, [r4, #4]
 8013b08:	f7f7 fbea 	bl	800b2e0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	f7f7 fbbf 	bl	800b290 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013b12:	4605      	mov	r5, r0
 8013b14:	b910      	cbnz	r0, 8013b1c <rmw_take_with_info+0x74>
 8013b16:	2001      	movs	r0, #1
 8013b18:	b009      	add	sp, #36	; 0x24
 8013b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b1c:	68a9      	ldr	r1, [r5, #8]
 8013b1e:	4668      	mov	r0, sp
 8013b20:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8013b24:	3110      	adds	r1, #16
 8013b26:	f7f8 fea5 	bl	800c874 <ucdr_init_buffer>
 8013b2a:	69a3      	ldr	r3, [r4, #24]
 8013b2c:	4639      	mov	r1, r7
 8013b2e:	68db      	ldr	r3, [r3, #12]
 8013b30:	4668      	mov	r0, sp
 8013b32:	4798      	blx	r3
 8013b34:	4629      	mov	r1, r5
 8013b36:	4604      	mov	r4, r0
 8013b38:	4804      	ldr	r0, [pc, #16]	; (8013b4c <rmw_take_with_info+0xa4>)
 8013b3a:	f7ff f889 	bl	8012c50 <put_memory>
 8013b3e:	e7dd      	b.n	8013afc <rmw_take_with_info+0x54>
 8013b40:	200c      	movs	r0, #12
 8013b42:	b009      	add	sp, #36	; 0x24
 8013b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b46:	bf00      	nop
 8013b48:	080184fc 	.word	0x080184fc
 8013b4c:	2000daa4 	.word	0x2000daa4

08013b50 <rmw_uxrce_transport_init>:
 8013b50:	b508      	push	{r3, lr}
 8013b52:	b108      	cbz	r0, 8013b58 <rmw_uxrce_transport_init+0x8>
 8013b54:	f100 0210 	add.w	r2, r0, #16
 8013b58:	b139      	cbz	r1, 8013b6a <rmw_uxrce_transport_init+0x1a>
 8013b5a:	6949      	ldr	r1, [r1, #20]
 8013b5c:	4610      	mov	r0, r2
 8013b5e:	f000 fc13 	bl	8014388 <uxr_init_custom_transport>
 8013b62:	f080 0001 	eor.w	r0, r0, #1
 8013b66:	b2c0      	uxtb	r0, r0
 8013b68:	bd08      	pop	{r3, pc}
 8013b6a:	4b04      	ldr	r3, [pc, #16]	; (8013b7c <rmw_uxrce_transport_init+0x2c>)
 8013b6c:	4610      	mov	r0, r2
 8013b6e:	6859      	ldr	r1, [r3, #4]
 8013b70:	f000 fc0a 	bl	8014388 <uxr_init_custom_transport>
 8013b74:	f080 0001 	eor.w	r0, r0, #1
 8013b78:	b2c0      	uxtb	r0, r0
 8013b7a:	bd08      	pop	{r3, pc}
 8013b7c:	2000917c 	.word	0x2000917c

08013b80 <rmw_wait>:
 8013b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b84:	b089      	sub	sp, #36	; 0x24
 8013b86:	4605      	mov	r5, r0
 8013b88:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013b8a:	460e      	mov	r6, r1
 8013b8c:	4698      	mov	r8, r3
 8013b8e:	4691      	mov	r9, r2
 8013b90:	2a00      	cmp	r2, #0
 8013b92:	f000 810a 	beq.w	8013daa <rmw_wait+0x22a>
 8013b96:	b16c      	cbz	r4, 8013bb4 <rmw_wait+0x34>
 8013b98:	4bae      	ldr	r3, [pc, #696]	; (8013e54 <rmw_wait+0x2d4>)
 8013b9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013b9c:	af04      	add	r7, sp, #16
 8013b9e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013ba2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013ba6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013baa:	f7fe fe75 	bl	8012898 <rmw_time_equal>
 8013bae:	2800      	cmp	r0, #0
 8013bb0:	f000 8127 	beq.w	8013e02 <rmw_wait+0x282>
 8013bb4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013bb8:	f7f7 fb92 	bl	800b2e0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013bbc:	4ba6      	ldr	r3, [pc, #664]	; (8013e58 <rmw_wait+0x2d8>)
 8013bbe:	681c      	ldr	r4, [r3, #0]
 8013bc0:	b14c      	cbz	r4, 8013bd6 <rmw_wait+0x56>
 8013bc2:	4623      	mov	r3, r4
 8013bc4:	2100      	movs	r1, #0
 8013bc6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8013bca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013bce:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d1f7      	bne.n	8013bc6 <rmw_wait+0x46>
 8013bd6:	f1b9 0f00 	cmp.w	r9, #0
 8013bda:	d011      	beq.n	8013c00 <rmw_wait+0x80>
 8013bdc:	f8d9 1000 	ldr.w	r1, [r9]
 8013be0:	b171      	cbz	r1, 8013c00 <rmw_wait+0x80>
 8013be2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013be6:	2300      	movs	r3, #0
 8013be8:	2001      	movs	r0, #1
 8013bea:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013bee:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8013bf0:	6912      	ldr	r2, [r2, #16]
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013bf8:	4299      	cmp	r1, r3
 8013bfa:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8013bfe:	d1f4      	bne.n	8013bea <rmw_wait+0x6a>
 8013c00:	f1b8 0f00 	cmp.w	r8, #0
 8013c04:	d011      	beq.n	8013c2a <rmw_wait+0xaa>
 8013c06:	f8d8 1000 	ldr.w	r1, [r8]
 8013c0a:	b171      	cbz	r1, 8013c2a <rmw_wait+0xaa>
 8013c0c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8013c10:	2300      	movs	r3, #0
 8013c12:	2001      	movs	r0, #1
 8013c14:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013c18:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8013c1a:	6912      	ldr	r2, [r2, #16]
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013c22:	4299      	cmp	r1, r3
 8013c24:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8013c28:	d1f4      	bne.n	8013c14 <rmw_wait+0x94>
 8013c2a:	b185      	cbz	r5, 8013c4e <rmw_wait+0xce>
 8013c2c:	6829      	ldr	r1, [r5, #0]
 8013c2e:	b171      	cbz	r1, 8013c4e <rmw_wait+0xce>
 8013c30:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8013c34:	2300      	movs	r3, #0
 8013c36:	2001      	movs	r0, #1
 8013c38:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013c3c:	6a12      	ldr	r2, [r2, #32]
 8013c3e:	6912      	ldr	r2, [r2, #16]
 8013c40:	3301      	adds	r3, #1
 8013c42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013c46:	4299      	cmp	r1, r3
 8013c48:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8013c4c:	d1f4      	bne.n	8013c38 <rmw_wait+0xb8>
 8013c4e:	b34c      	cbz	r4, 8013ca4 <rmw_wait+0x124>
 8013c50:	4622      	mov	r2, r4
 8013c52:	2300      	movs	r3, #0
 8013c54:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8013c58:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8013c5c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8013c60:	440b      	add	r3, r1
 8013c62:	b2db      	uxtb	r3, r3
 8013c64:	2a00      	cmp	r2, #0
 8013c66:	d1f5      	bne.n	8013c54 <rmw_wait+0xd4>
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	f000 8084 	beq.w	8013d76 <rmw_wait+0x1f6>
 8013c6e:	1c7a      	adds	r2, r7, #1
 8013c70:	d00d      	beq.n	8013c8e <rmw_wait+0x10e>
 8013c72:	ee07 7a90 	vmov	s15, r7
 8013c76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013c7a:	ee07 3a90 	vmov	s15, r3
 8013c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c86:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013c8a:	ee17 7a90 	vmov	r7, s15
 8013c8e:	68a0      	ldr	r0, [r4, #8]
 8013c90:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8013c94:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	f040 8090 	bne.w	8013dbe <rmw_wait+0x23e>
 8013c9e:	6864      	ldr	r4, [r4, #4]
 8013ca0:	2c00      	cmp	r4, #0
 8013ca2:	d1f4      	bne.n	8013c8e <rmw_wait+0x10e>
 8013ca4:	f1b9 0f00 	cmp.w	r9, #0
 8013ca8:	f000 80bc 	beq.w	8013e24 <rmw_wait+0x2a4>
 8013cac:	f8d9 7000 	ldr.w	r7, [r9]
 8013cb0:	2f00      	cmp	r7, #0
 8013cb2:	f000 808e 	beq.w	8013dd2 <rmw_wait+0x252>
 8013cb6:	2400      	movs	r4, #0
 8013cb8:	4627      	mov	r7, r4
 8013cba:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013cbe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013cc2:	f7f7 fae5 	bl	800b290 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013cc6:	2800      	cmp	r0, #0
 8013cc8:	d05f      	beq.n	8013d8a <rmw_wait+0x20a>
 8013cca:	f8d9 3000 	ldr.w	r3, [r9]
 8013cce:	3401      	adds	r4, #1
 8013cd0:	42a3      	cmp	r3, r4
 8013cd2:	f04f 0701 	mov.w	r7, #1
 8013cd6:	d8f0      	bhi.n	8013cba <rmw_wait+0x13a>
 8013cd8:	f1b8 0f00 	cmp.w	r8, #0
 8013cdc:	d012      	beq.n	8013d04 <rmw_wait+0x184>
 8013cde:	f8d8 3000 	ldr.w	r3, [r8]
 8013ce2:	b17b      	cbz	r3, 8013d04 <rmw_wait+0x184>
 8013ce4:	2400      	movs	r4, #0
 8013ce6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013cea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013cee:	f7f7 facf 	bl	800b290 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013cf2:	2800      	cmp	r0, #0
 8013cf4:	d051      	beq.n	8013d9a <rmw_wait+0x21a>
 8013cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8013cfa:	3401      	adds	r4, #1
 8013cfc:	42a3      	cmp	r3, r4
 8013cfe:	f04f 0701 	mov.w	r7, #1
 8013d02:	d8f0      	bhi.n	8013ce6 <rmw_wait+0x166>
 8013d04:	b1dd      	cbz	r5, 8013d3e <rmw_wait+0x1be>
 8013d06:	682b      	ldr	r3, [r5, #0]
 8013d08:	b1cb      	cbz	r3, 8013d3e <rmw_wait+0x1be>
 8013d0a:	2400      	movs	r4, #0
 8013d0c:	686b      	ldr	r3, [r5, #4]
 8013d0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013d12:	f7f7 fabd 	bl	800b290 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013d16:	b158      	cbz	r0, 8013d30 <rmw_wait+0x1b0>
 8013d18:	682b      	ldr	r3, [r5, #0]
 8013d1a:	3401      	adds	r4, #1
 8013d1c:	42a3      	cmp	r3, r4
 8013d1e:	d969      	bls.n	8013df4 <rmw_wait+0x274>
 8013d20:	686b      	ldr	r3, [r5, #4]
 8013d22:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013d26:	2701      	movs	r7, #1
 8013d28:	f7f7 fab2 	bl	800b290 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	d1f3      	bne.n	8013d18 <rmw_wait+0x198>
 8013d30:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013d34:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013d38:	3401      	adds	r4, #1
 8013d3a:	42a3      	cmp	r3, r4
 8013d3c:	d8e6      	bhi.n	8013d0c <rmw_wait+0x18c>
 8013d3e:	b1a6      	cbz	r6, 8013d6a <rmw_wait+0x1ea>
 8013d40:	6834      	ldr	r4, [r6, #0]
 8013d42:	b194      	cbz	r4, 8013d6a <rmw_wait+0x1ea>
 8013d44:	2300      	movs	r3, #0
 8013d46:	461d      	mov	r5, r3
 8013d48:	e004      	b.n	8013d54 <rmw_wait+0x1d4>
 8013d4a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013d4e:	3301      	adds	r3, #1
 8013d50:	42a3      	cmp	r3, r4
 8013d52:	d00a      	beq.n	8013d6a <rmw_wait+0x1ea>
 8013d54:	6870      	ldr	r0, [r6, #4]
 8013d56:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8013d5a:	7c0a      	ldrb	r2, [r1, #16]
 8013d5c:	2a00      	cmp	r2, #0
 8013d5e:	d0f4      	beq.n	8013d4a <rmw_wait+0x1ca>
 8013d60:	3301      	adds	r3, #1
 8013d62:	42a3      	cmp	r3, r4
 8013d64:	740d      	strb	r5, [r1, #16]
 8013d66:	4617      	mov	r7, r2
 8013d68:	d1f4      	bne.n	8013d54 <rmw_wait+0x1d4>
 8013d6a:	2f00      	cmp	r7, #0
 8013d6c:	d03e      	beq.n	8013dec <rmw_wait+0x26c>
 8013d6e:	2000      	movs	r0, #0
 8013d70:	b009      	add	sp, #36	; 0x24
 8013d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d76:	68a0      	ldr	r0, [r4, #8]
 8013d78:	2100      	movs	r1, #0
 8013d7a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013d7e:	f7f9 fcc1 	bl	800d704 <uxr_run_session_timeout>
 8013d82:	6864      	ldr	r4, [r4, #4]
 8013d84:	2c00      	cmp	r4, #0
 8013d86:	d1f6      	bne.n	8013d76 <rmw_wait+0x1f6>
 8013d88:	e78c      	b.n	8013ca4 <rmw_wait+0x124>
 8013d8a:	e9d9 3200 	ldrd	r3, r2, [r9]
 8013d8e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013d92:	3401      	adds	r4, #1
 8013d94:	42a3      	cmp	r3, r4
 8013d96:	d890      	bhi.n	8013cba <rmw_wait+0x13a>
 8013d98:	e79e      	b.n	8013cd8 <rmw_wait+0x158>
 8013d9a:	e9d8 3200 	ldrd	r3, r2, [r8]
 8013d9e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013da2:	3401      	adds	r4, #1
 8013da4:	429c      	cmp	r4, r3
 8013da6:	d39e      	bcc.n	8013ce6 <rmw_wait+0x166>
 8013da8:	e7ac      	b.n	8013d04 <rmw_wait+0x184>
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	f47f aef3 	bne.w	8013b96 <rmw_wait+0x16>
 8013db0:	2800      	cmp	r0, #0
 8013db2:	f47f aef0 	bne.w	8013b96 <rmw_wait+0x16>
 8013db6:	2900      	cmp	r1, #0
 8013db8:	f47f aeed 	bne.w	8013b96 <rmw_wait+0x16>
 8013dbc:	e7d7      	b.n	8013d6e <rmw_wait+0x1ee>
 8013dbe:	4639      	mov	r1, r7
 8013dc0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013dc4:	f7f9 fcb8 	bl	800d738 <uxr_run_session_until_data>
 8013dc8:	6864      	ldr	r4, [r4, #4]
 8013dca:	2c00      	cmp	r4, #0
 8013dcc:	f47f af5f 	bne.w	8013c8e <rmw_wait+0x10e>
 8013dd0:	e768      	b.n	8013ca4 <rmw_wait+0x124>
 8013dd2:	f1b8 0f00 	cmp.w	r8, #0
 8013dd6:	d032      	beq.n	8013e3e <rmw_wait+0x2be>
 8013dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d181      	bne.n	8013ce4 <rmw_wait+0x164>
 8013de0:	461f      	mov	r7, r3
 8013de2:	2d00      	cmp	r5, #0
 8013de4:	d18f      	bne.n	8013d06 <rmw_wait+0x186>
 8013de6:	462f      	mov	r7, r5
 8013de8:	2e00      	cmp	r6, #0
 8013dea:	d1a9      	bne.n	8013d40 <rmw_wait+0x1c0>
 8013dec:	2002      	movs	r0, #2
 8013dee:	b009      	add	sp, #36	; 0x24
 8013df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013df4:	2e00      	cmp	r6, #0
 8013df6:	d0ba      	beq.n	8013d6e <rmw_wait+0x1ee>
 8013df8:	6834      	ldr	r4, [r6, #0]
 8013dfa:	2701      	movs	r7, #1
 8013dfc:	2c00      	cmp	r4, #0
 8013dfe:	d1a1      	bne.n	8013d44 <rmw_wait+0x1c4>
 8013e00:	e7b5      	b.n	8013d6e <rmw_wait+0x1ee>
 8013e02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013e06:	f7fe fd9b 	bl	8012940 <rmw_time_total_nsec>
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	4a13      	ldr	r2, [pc, #76]	; (8013e5c <rmw_wait+0x2dc>)
 8013e0e:	f7ec febd 	bl	8000b8c <__aeabi_uldivmod>
 8013e12:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8013e16:	f171 0300 	sbcs.w	r3, r1, #0
 8013e1a:	4607      	mov	r7, r0
 8013e1c:	bfa8      	it	ge
 8013e1e:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 8013e22:	e6c9      	b.n	8013bb8 <rmw_wait+0x38>
 8013e24:	f1b8 0f00 	cmp.w	r8, #0
 8013e28:	d009      	beq.n	8013e3e <rmw_wait+0x2be>
 8013e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8013e2e:	464f      	mov	r7, r9
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	f47f af57 	bne.w	8013ce4 <rmw_wait+0x164>
 8013e36:	2d00      	cmp	r5, #0
 8013e38:	f47f af65 	bne.w	8013d06 <rmw_wait+0x186>
 8013e3c:	e7d3      	b.n	8013de6 <rmw_wait+0x266>
 8013e3e:	b17d      	cbz	r5, 8013e60 <rmw_wait+0x2e0>
 8013e40:	682b      	ldr	r3, [r5, #0]
 8013e42:	4647      	mov	r7, r8
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	f47f af60 	bne.w	8013d0a <rmw_wait+0x18a>
 8013e4a:	2e00      	cmp	r6, #0
 8013e4c:	f47f af78 	bne.w	8013d40 <rmw_wait+0x1c0>
 8013e50:	e7cc      	b.n	8013dec <rmw_wait+0x26c>
 8013e52:	bf00      	nop
 8013e54:	08017ac8 	.word	0x08017ac8
 8013e58:	2000da94 	.word	0x2000da94
 8013e5c:	000f4240 	.word	0x000f4240
 8013e60:	2e00      	cmp	r6, #0
 8013e62:	d0c3      	beq.n	8013dec <rmw_wait+0x26c>
 8013e64:	6834      	ldr	r4, [r6, #0]
 8013e66:	462f      	mov	r7, r5
 8013e68:	2c00      	cmp	r4, #0
 8013e6a:	f47f af6b 	bne.w	8013d44 <rmw_wait+0x1c4>
 8013e6e:	e7bd      	b.n	8013dec <rmw_wait+0x26c>

08013e70 <rmw_create_wait_set>:
 8013e70:	b508      	push	{r3, lr}
 8013e72:	4803      	ldr	r0, [pc, #12]	; (8013e80 <rmw_create_wait_set+0x10>)
 8013e74:	f7fe fedc 	bl	8012c30 <get_memory>
 8013e78:	b108      	cbz	r0, 8013e7e <rmw_create_wait_set+0xe>
 8013e7a:	6880      	ldr	r0, [r0, #8]
 8013e7c:	3010      	adds	r0, #16
 8013e7e:	bd08      	pop	{r3, pc}
 8013e80:	2000dad4 	.word	0x2000dad4

08013e84 <rmw_destroy_wait_set>:
 8013e84:	b508      	push	{r3, lr}
 8013e86:	4b08      	ldr	r3, [pc, #32]	; (8013ea8 <rmw_destroy_wait_set+0x24>)
 8013e88:	6819      	ldr	r1, [r3, #0]
 8013e8a:	b911      	cbnz	r1, 8013e92 <rmw_destroy_wait_set+0xe>
 8013e8c:	e00a      	b.n	8013ea4 <rmw_destroy_wait_set+0x20>
 8013e8e:	6849      	ldr	r1, [r1, #4]
 8013e90:	b141      	cbz	r1, 8013ea4 <rmw_destroy_wait_set+0x20>
 8013e92:	688b      	ldr	r3, [r1, #8]
 8013e94:	3310      	adds	r3, #16
 8013e96:	4298      	cmp	r0, r3
 8013e98:	d1f9      	bne.n	8013e8e <rmw_destroy_wait_set+0xa>
 8013e9a:	4803      	ldr	r0, [pc, #12]	; (8013ea8 <rmw_destroy_wait_set+0x24>)
 8013e9c:	f7fe fed8 	bl	8012c50 <put_memory>
 8013ea0:	2000      	movs	r0, #0
 8013ea2:	bd08      	pop	{r3, pc}
 8013ea4:	2001      	movs	r0, #1
 8013ea6:	bd08      	pop	{r3, pc}
 8013ea8:	2000dad4 	.word	0x2000dad4

08013eac <rmw_uros_epoch_nanos>:
 8013eac:	4b05      	ldr	r3, [pc, #20]	; (8013ec4 <rmw_uros_epoch_nanos+0x18>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	b123      	cbz	r3, 8013ebc <rmw_uros_epoch_nanos+0x10>
 8013eb2:	6898      	ldr	r0, [r3, #8]
 8013eb4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013eb8:	f7f9 b894 	b.w	800cfe4 <uxr_epoch_nanos>
 8013ebc:	2000      	movs	r0, #0
 8013ebe:	2100      	movs	r1, #0
 8013ec0:	4770      	bx	lr
 8013ec2:	bf00      	nop
 8013ec4:	2000da94 	.word	0x2000da94

08013ec8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ecc:	6805      	ldr	r5, [r0, #0]
 8013ece:	4604      	mov	r4, r0
 8013ed0:	4628      	mov	r0, r5
 8013ed2:	460e      	mov	r6, r1
 8013ed4:	f7ec f984 	bl	80001e0 <strcmp>
 8013ed8:	b1c8      	cbz	r0, 8013f0e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013eda:	4b11      	ldr	r3, [pc, #68]	; (8013f20 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	429d      	cmp	r5, r3
 8013ee0:	d112      	bne.n	8013f08 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013ee2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013ee6:	f8d8 4000 	ldr.w	r4, [r8]
 8013eea:	b16c      	cbz	r4, 8013f08 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013eec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013ef0:	2700      	movs	r7, #0
 8013ef2:	3d04      	subs	r5, #4
 8013ef4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013ef8:	4631      	mov	r1, r6
 8013efa:	f7ec f971 	bl	80001e0 <strcmp>
 8013efe:	00bb      	lsls	r3, r7, #2
 8013f00:	b140      	cbz	r0, 8013f14 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013f02:	3701      	adds	r7, #1
 8013f04:	42bc      	cmp	r4, r7
 8013f06:	d1f5      	bne.n	8013ef4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013f08:	2000      	movs	r0, #0
 8013f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f0e:	4620      	mov	r0, r4
 8013f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f14:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f1c:	58d3      	ldr	r3, [r2, r3]
 8013f1e:	4718      	bx	r3
 8013f20:	20000130 	.word	0x20000130

08013f24 <std_msgs__msg__Float32__init>:
 8013f24:	3800      	subs	r0, #0
 8013f26:	bf18      	it	ne
 8013f28:	2001      	movne	r0, #1
 8013f2a:	4770      	bx	lr

08013f2c <std_msgs__msg__Float32__fini>:
 8013f2c:	4770      	bx	lr
 8013f2e:	bf00      	nop

08013f30 <std_msgs__msg__Int32__init>:
 8013f30:	3800      	subs	r0, #0
 8013f32:	bf18      	it	ne
 8013f34:	2001      	movne	r0, #1
 8013f36:	4770      	bx	lr

08013f38 <std_msgs__msg__Int32__fini>:
 8013f38:	4770      	bx	lr
 8013f3a:	bf00      	nop

08013f3c <ucdr_serialize_endian_array_char>:
 8013f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f40:	4619      	mov	r1, r3
 8013f42:	461f      	mov	r7, r3
 8013f44:	4605      	mov	r5, r0
 8013f46:	4690      	mov	r8, r2
 8013f48:	f7f8 fc40 	bl	800c7cc <ucdr_check_buffer_available_for>
 8013f4c:	b9e0      	cbnz	r0, 8013f88 <ucdr_serialize_endian_array_char+0x4c>
 8013f4e:	463e      	mov	r6, r7
 8013f50:	e009      	b.n	8013f66 <ucdr_serialize_endian_array_char+0x2a>
 8013f52:	68a8      	ldr	r0, [r5, #8]
 8013f54:	f002 fe87 	bl	8016c66 <memcpy>
 8013f58:	68ab      	ldr	r3, [r5, #8]
 8013f5a:	6928      	ldr	r0, [r5, #16]
 8013f5c:	4423      	add	r3, r4
 8013f5e:	4420      	add	r0, r4
 8013f60:	1b36      	subs	r6, r6, r4
 8013f62:	60ab      	str	r3, [r5, #8]
 8013f64:	6128      	str	r0, [r5, #16]
 8013f66:	4631      	mov	r1, r6
 8013f68:	2201      	movs	r2, #1
 8013f6a:	4628      	mov	r0, r5
 8013f6c:	f7f8 fcb6 	bl	800c8dc <ucdr_check_final_buffer_behavior_array>
 8013f70:	1bb9      	subs	r1, r7, r6
 8013f72:	4441      	add	r1, r8
 8013f74:	4604      	mov	r4, r0
 8013f76:	4602      	mov	r2, r0
 8013f78:	2800      	cmp	r0, #0
 8013f7a:	d1ea      	bne.n	8013f52 <ucdr_serialize_endian_array_char+0x16>
 8013f7c:	2301      	movs	r3, #1
 8013f7e:	7da8      	ldrb	r0, [r5, #22]
 8013f80:	756b      	strb	r3, [r5, #21]
 8013f82:	4058      	eors	r0, r3
 8013f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f88:	463a      	mov	r2, r7
 8013f8a:	68a8      	ldr	r0, [r5, #8]
 8013f8c:	4641      	mov	r1, r8
 8013f8e:	f002 fe6a 	bl	8016c66 <memcpy>
 8013f92:	68aa      	ldr	r2, [r5, #8]
 8013f94:	692b      	ldr	r3, [r5, #16]
 8013f96:	443a      	add	r2, r7
 8013f98:	443b      	add	r3, r7
 8013f9a:	60aa      	str	r2, [r5, #8]
 8013f9c:	612b      	str	r3, [r5, #16]
 8013f9e:	e7ed      	b.n	8013f7c <ucdr_serialize_endian_array_char+0x40>

08013fa0 <ucdr_deserialize_endian_array_char>:
 8013fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa4:	4619      	mov	r1, r3
 8013fa6:	461f      	mov	r7, r3
 8013fa8:	4605      	mov	r5, r0
 8013faa:	4690      	mov	r8, r2
 8013fac:	f7f8 fc0e 	bl	800c7cc <ucdr_check_buffer_available_for>
 8013fb0:	b9e0      	cbnz	r0, 8013fec <ucdr_deserialize_endian_array_char+0x4c>
 8013fb2:	463e      	mov	r6, r7
 8013fb4:	e009      	b.n	8013fca <ucdr_deserialize_endian_array_char+0x2a>
 8013fb6:	68a9      	ldr	r1, [r5, #8]
 8013fb8:	f002 fe55 	bl	8016c66 <memcpy>
 8013fbc:	68ab      	ldr	r3, [r5, #8]
 8013fbe:	6928      	ldr	r0, [r5, #16]
 8013fc0:	4423      	add	r3, r4
 8013fc2:	4420      	add	r0, r4
 8013fc4:	1b36      	subs	r6, r6, r4
 8013fc6:	60ab      	str	r3, [r5, #8]
 8013fc8:	6128      	str	r0, [r5, #16]
 8013fca:	2201      	movs	r2, #1
 8013fcc:	4631      	mov	r1, r6
 8013fce:	4628      	mov	r0, r5
 8013fd0:	f7f8 fc84 	bl	800c8dc <ucdr_check_final_buffer_behavior_array>
 8013fd4:	4604      	mov	r4, r0
 8013fd6:	1bb8      	subs	r0, r7, r6
 8013fd8:	4440      	add	r0, r8
 8013fda:	4622      	mov	r2, r4
 8013fdc:	2c00      	cmp	r4, #0
 8013fde:	d1ea      	bne.n	8013fb6 <ucdr_deserialize_endian_array_char+0x16>
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	7da8      	ldrb	r0, [r5, #22]
 8013fe4:	756b      	strb	r3, [r5, #21]
 8013fe6:	4058      	eors	r0, r3
 8013fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fec:	463a      	mov	r2, r7
 8013fee:	68a9      	ldr	r1, [r5, #8]
 8013ff0:	4640      	mov	r0, r8
 8013ff2:	f002 fe38 	bl	8016c66 <memcpy>
 8013ff6:	68aa      	ldr	r2, [r5, #8]
 8013ff8:	692b      	ldr	r3, [r5, #16]
 8013ffa:	443a      	add	r2, r7
 8013ffc:	443b      	add	r3, r7
 8013ffe:	60aa      	str	r2, [r5, #8]
 8014000:	612b      	str	r3, [r5, #16]
 8014002:	e7ed      	b.n	8013fe0 <ucdr_deserialize_endian_array_char+0x40>

08014004 <ucdr_serialize_array_uint8_t>:
 8014004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014008:	4688      	mov	r8, r1
 801400a:	4611      	mov	r1, r2
 801400c:	4617      	mov	r7, r2
 801400e:	4605      	mov	r5, r0
 8014010:	f7f8 fbdc 	bl	800c7cc <ucdr_check_buffer_available_for>
 8014014:	b9e0      	cbnz	r0, 8014050 <ucdr_serialize_array_uint8_t+0x4c>
 8014016:	463e      	mov	r6, r7
 8014018:	e009      	b.n	801402e <ucdr_serialize_array_uint8_t+0x2a>
 801401a:	68a8      	ldr	r0, [r5, #8]
 801401c:	f002 fe23 	bl	8016c66 <memcpy>
 8014020:	68aa      	ldr	r2, [r5, #8]
 8014022:	692b      	ldr	r3, [r5, #16]
 8014024:	4422      	add	r2, r4
 8014026:	4423      	add	r3, r4
 8014028:	1b36      	subs	r6, r6, r4
 801402a:	60aa      	str	r2, [r5, #8]
 801402c:	612b      	str	r3, [r5, #16]
 801402e:	4631      	mov	r1, r6
 8014030:	2201      	movs	r2, #1
 8014032:	4628      	mov	r0, r5
 8014034:	f7f8 fc52 	bl	800c8dc <ucdr_check_final_buffer_behavior_array>
 8014038:	1bb9      	subs	r1, r7, r6
 801403a:	4441      	add	r1, r8
 801403c:	4604      	mov	r4, r0
 801403e:	4602      	mov	r2, r0
 8014040:	2800      	cmp	r0, #0
 8014042:	d1ea      	bne.n	801401a <ucdr_serialize_array_uint8_t+0x16>
 8014044:	2301      	movs	r3, #1
 8014046:	7da8      	ldrb	r0, [r5, #22]
 8014048:	756b      	strb	r3, [r5, #21]
 801404a:	4058      	eors	r0, r3
 801404c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014050:	463a      	mov	r2, r7
 8014052:	68a8      	ldr	r0, [r5, #8]
 8014054:	4641      	mov	r1, r8
 8014056:	f002 fe06 	bl	8016c66 <memcpy>
 801405a:	68aa      	ldr	r2, [r5, #8]
 801405c:	692b      	ldr	r3, [r5, #16]
 801405e:	443a      	add	r2, r7
 8014060:	443b      	add	r3, r7
 8014062:	60aa      	str	r2, [r5, #8]
 8014064:	612b      	str	r3, [r5, #16]
 8014066:	e7ed      	b.n	8014044 <ucdr_serialize_array_uint8_t+0x40>

08014068 <ucdr_serialize_endian_array_uint8_t>:
 8014068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801406c:	4619      	mov	r1, r3
 801406e:	461f      	mov	r7, r3
 8014070:	4605      	mov	r5, r0
 8014072:	4690      	mov	r8, r2
 8014074:	f7f8 fbaa 	bl	800c7cc <ucdr_check_buffer_available_for>
 8014078:	b9e0      	cbnz	r0, 80140b4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801407a:	463e      	mov	r6, r7
 801407c:	e009      	b.n	8014092 <ucdr_serialize_endian_array_uint8_t+0x2a>
 801407e:	68a8      	ldr	r0, [r5, #8]
 8014080:	f002 fdf1 	bl	8016c66 <memcpy>
 8014084:	68ab      	ldr	r3, [r5, #8]
 8014086:	6928      	ldr	r0, [r5, #16]
 8014088:	4423      	add	r3, r4
 801408a:	4420      	add	r0, r4
 801408c:	1b36      	subs	r6, r6, r4
 801408e:	60ab      	str	r3, [r5, #8]
 8014090:	6128      	str	r0, [r5, #16]
 8014092:	4631      	mov	r1, r6
 8014094:	2201      	movs	r2, #1
 8014096:	4628      	mov	r0, r5
 8014098:	f7f8 fc20 	bl	800c8dc <ucdr_check_final_buffer_behavior_array>
 801409c:	1bb9      	subs	r1, r7, r6
 801409e:	4441      	add	r1, r8
 80140a0:	4604      	mov	r4, r0
 80140a2:	4602      	mov	r2, r0
 80140a4:	2800      	cmp	r0, #0
 80140a6:	d1ea      	bne.n	801407e <ucdr_serialize_endian_array_uint8_t+0x16>
 80140a8:	2301      	movs	r3, #1
 80140aa:	7da8      	ldrb	r0, [r5, #22]
 80140ac:	756b      	strb	r3, [r5, #21]
 80140ae:	4058      	eors	r0, r3
 80140b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140b4:	463a      	mov	r2, r7
 80140b6:	68a8      	ldr	r0, [r5, #8]
 80140b8:	4641      	mov	r1, r8
 80140ba:	f002 fdd4 	bl	8016c66 <memcpy>
 80140be:	68aa      	ldr	r2, [r5, #8]
 80140c0:	692b      	ldr	r3, [r5, #16]
 80140c2:	443a      	add	r2, r7
 80140c4:	443b      	add	r3, r7
 80140c6:	60aa      	str	r2, [r5, #8]
 80140c8:	612b      	str	r3, [r5, #16]
 80140ca:	e7ed      	b.n	80140a8 <ucdr_serialize_endian_array_uint8_t+0x40>

080140cc <ucdr_deserialize_array_uint8_t>:
 80140cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140d0:	4688      	mov	r8, r1
 80140d2:	4611      	mov	r1, r2
 80140d4:	4617      	mov	r7, r2
 80140d6:	4605      	mov	r5, r0
 80140d8:	f7f8 fb78 	bl	800c7cc <ucdr_check_buffer_available_for>
 80140dc:	b9e0      	cbnz	r0, 8014118 <ucdr_deserialize_array_uint8_t+0x4c>
 80140de:	463e      	mov	r6, r7
 80140e0:	e009      	b.n	80140f6 <ucdr_deserialize_array_uint8_t+0x2a>
 80140e2:	68a9      	ldr	r1, [r5, #8]
 80140e4:	f002 fdbf 	bl	8016c66 <memcpy>
 80140e8:	68aa      	ldr	r2, [r5, #8]
 80140ea:	692b      	ldr	r3, [r5, #16]
 80140ec:	4422      	add	r2, r4
 80140ee:	4423      	add	r3, r4
 80140f0:	1b36      	subs	r6, r6, r4
 80140f2:	60aa      	str	r2, [r5, #8]
 80140f4:	612b      	str	r3, [r5, #16]
 80140f6:	2201      	movs	r2, #1
 80140f8:	4631      	mov	r1, r6
 80140fa:	4628      	mov	r0, r5
 80140fc:	f7f8 fbee 	bl	800c8dc <ucdr_check_final_buffer_behavior_array>
 8014100:	4604      	mov	r4, r0
 8014102:	1bb8      	subs	r0, r7, r6
 8014104:	4440      	add	r0, r8
 8014106:	4622      	mov	r2, r4
 8014108:	2c00      	cmp	r4, #0
 801410a:	d1ea      	bne.n	80140e2 <ucdr_deserialize_array_uint8_t+0x16>
 801410c:	2301      	movs	r3, #1
 801410e:	7da8      	ldrb	r0, [r5, #22]
 8014110:	756b      	strb	r3, [r5, #21]
 8014112:	4058      	eors	r0, r3
 8014114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014118:	463a      	mov	r2, r7
 801411a:	68a9      	ldr	r1, [r5, #8]
 801411c:	4640      	mov	r0, r8
 801411e:	f002 fda2 	bl	8016c66 <memcpy>
 8014122:	68aa      	ldr	r2, [r5, #8]
 8014124:	692b      	ldr	r3, [r5, #16]
 8014126:	443a      	add	r2, r7
 8014128:	443b      	add	r3, r7
 801412a:	60aa      	str	r2, [r5, #8]
 801412c:	612b      	str	r3, [r5, #16]
 801412e:	e7ed      	b.n	801410c <ucdr_deserialize_array_uint8_t+0x40>

08014130 <ucdr_deserialize_endian_array_uint8_t>:
 8014130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014134:	4619      	mov	r1, r3
 8014136:	461f      	mov	r7, r3
 8014138:	4605      	mov	r5, r0
 801413a:	4690      	mov	r8, r2
 801413c:	f7f8 fb46 	bl	800c7cc <ucdr_check_buffer_available_for>
 8014140:	b9e0      	cbnz	r0, 801417c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8014142:	463e      	mov	r6, r7
 8014144:	e009      	b.n	801415a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8014146:	68a9      	ldr	r1, [r5, #8]
 8014148:	f002 fd8d 	bl	8016c66 <memcpy>
 801414c:	68ab      	ldr	r3, [r5, #8]
 801414e:	6928      	ldr	r0, [r5, #16]
 8014150:	4423      	add	r3, r4
 8014152:	4420      	add	r0, r4
 8014154:	1b36      	subs	r6, r6, r4
 8014156:	60ab      	str	r3, [r5, #8]
 8014158:	6128      	str	r0, [r5, #16]
 801415a:	2201      	movs	r2, #1
 801415c:	4631      	mov	r1, r6
 801415e:	4628      	mov	r0, r5
 8014160:	f7f8 fbbc 	bl	800c8dc <ucdr_check_final_buffer_behavior_array>
 8014164:	4604      	mov	r4, r0
 8014166:	1bb8      	subs	r0, r7, r6
 8014168:	4440      	add	r0, r8
 801416a:	4622      	mov	r2, r4
 801416c:	2c00      	cmp	r4, #0
 801416e:	d1ea      	bne.n	8014146 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014170:	2301      	movs	r3, #1
 8014172:	7da8      	ldrb	r0, [r5, #22]
 8014174:	756b      	strb	r3, [r5, #21]
 8014176:	4058      	eors	r0, r3
 8014178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801417c:	463a      	mov	r2, r7
 801417e:	68a9      	ldr	r1, [r5, #8]
 8014180:	4640      	mov	r0, r8
 8014182:	f002 fd70 	bl	8016c66 <memcpy>
 8014186:	68aa      	ldr	r2, [r5, #8]
 8014188:	692b      	ldr	r3, [r5, #16]
 801418a:	443a      	add	r2, r7
 801418c:	443b      	add	r3, r7
 801418e:	60aa      	str	r2, [r5, #8]
 8014190:	612b      	str	r3, [r5, #16]
 8014192:	e7ed      	b.n	8014170 <ucdr_deserialize_endian_array_uint8_t+0x40>

08014194 <ucdr_serialize_sequence_char>:
 8014194:	b570      	push	{r4, r5, r6, lr}
 8014196:	4615      	mov	r5, r2
 8014198:	460e      	mov	r6, r1
 801419a:	7d01      	ldrb	r1, [r0, #20]
 801419c:	4604      	mov	r4, r0
 801419e:	f7f7 fd43 	bl	800bc28 <ucdr_serialize_endian_uint32_t>
 80141a2:	b90d      	cbnz	r5, 80141a8 <ucdr_serialize_sequence_char+0x14>
 80141a4:	2001      	movs	r0, #1
 80141a6:	bd70      	pop	{r4, r5, r6, pc}
 80141a8:	7d21      	ldrb	r1, [r4, #20]
 80141aa:	462b      	mov	r3, r5
 80141ac:	4632      	mov	r2, r6
 80141ae:	4620      	mov	r0, r4
 80141b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80141b4:	f7ff bec2 	b.w	8013f3c <ucdr_serialize_endian_array_char>

080141b8 <ucdr_deserialize_sequence_char>:
 80141b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141bc:	461d      	mov	r5, r3
 80141be:	4616      	mov	r6, r2
 80141c0:	460f      	mov	r7, r1
 80141c2:	461a      	mov	r2, r3
 80141c4:	7d01      	ldrb	r1, [r0, #20]
 80141c6:	4604      	mov	r4, r0
 80141c8:	f7f7 fe56 	bl	800be78 <ucdr_deserialize_endian_uint32_t>
 80141cc:	682b      	ldr	r3, [r5, #0]
 80141ce:	429e      	cmp	r6, r3
 80141d0:	bf3c      	itt	cc
 80141d2:	2201      	movcc	r2, #1
 80141d4:	75a2      	strbcc	r2, [r4, #22]
 80141d6:	b913      	cbnz	r3, 80141de <ucdr_deserialize_sequence_char+0x26>
 80141d8:	2001      	movs	r0, #1
 80141da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141de:	7d21      	ldrb	r1, [r4, #20]
 80141e0:	463a      	mov	r2, r7
 80141e2:	4620      	mov	r0, r4
 80141e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141e8:	f7ff beda 	b.w	8013fa0 <ucdr_deserialize_endian_array_char>

080141ec <ucdr_serialize_sequence_uint8_t>:
 80141ec:	b570      	push	{r4, r5, r6, lr}
 80141ee:	4615      	mov	r5, r2
 80141f0:	460e      	mov	r6, r1
 80141f2:	7d01      	ldrb	r1, [r0, #20]
 80141f4:	4604      	mov	r4, r0
 80141f6:	f7f7 fd17 	bl	800bc28 <ucdr_serialize_endian_uint32_t>
 80141fa:	b90d      	cbnz	r5, 8014200 <ucdr_serialize_sequence_uint8_t+0x14>
 80141fc:	2001      	movs	r0, #1
 80141fe:	bd70      	pop	{r4, r5, r6, pc}
 8014200:	7d21      	ldrb	r1, [r4, #20]
 8014202:	462b      	mov	r3, r5
 8014204:	4632      	mov	r2, r6
 8014206:	4620      	mov	r0, r4
 8014208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801420c:	f7ff bf2c 	b.w	8014068 <ucdr_serialize_endian_array_uint8_t>

08014210 <ucdr_deserialize_sequence_uint8_t>:
 8014210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014214:	461d      	mov	r5, r3
 8014216:	4616      	mov	r6, r2
 8014218:	460f      	mov	r7, r1
 801421a:	461a      	mov	r2, r3
 801421c:	7d01      	ldrb	r1, [r0, #20]
 801421e:	4604      	mov	r4, r0
 8014220:	f7f7 fe2a 	bl	800be78 <ucdr_deserialize_endian_uint32_t>
 8014224:	682b      	ldr	r3, [r5, #0]
 8014226:	429e      	cmp	r6, r3
 8014228:	bf3c      	itt	cc
 801422a:	2201      	movcc	r2, #1
 801422c:	75a2      	strbcc	r2, [r4, #22]
 801422e:	b913      	cbnz	r3, 8014236 <ucdr_deserialize_sequence_uint8_t+0x26>
 8014230:	2001      	movs	r0, #1
 8014232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014236:	7d21      	ldrb	r1, [r4, #20]
 8014238:	463a      	mov	r2, r7
 801423a:	4620      	mov	r0, r4
 801423c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014240:	f7ff bf76 	b.w	8014130 <ucdr_deserialize_endian_array_uint8_t>

08014244 <ucdr_serialize_string>:
 8014244:	b510      	push	{r4, lr}
 8014246:	b082      	sub	sp, #8
 8014248:	4604      	mov	r4, r0
 801424a:	4608      	mov	r0, r1
 801424c:	9101      	str	r1, [sp, #4]
 801424e:	f7eb ffd1 	bl	80001f4 <strlen>
 8014252:	9901      	ldr	r1, [sp, #4]
 8014254:	1c42      	adds	r2, r0, #1
 8014256:	4620      	mov	r0, r4
 8014258:	b002      	add	sp, #8
 801425a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801425e:	f7ff bf99 	b.w	8014194 <ucdr_serialize_sequence_char>
 8014262:	bf00      	nop

08014264 <ucdr_deserialize_string>:
 8014264:	b500      	push	{lr}
 8014266:	b083      	sub	sp, #12
 8014268:	ab01      	add	r3, sp, #4
 801426a:	f7ff ffa5 	bl	80141b8 <ucdr_deserialize_sequence_char>
 801426e:	b003      	add	sp, #12
 8014270:	f85d fb04 	ldr.w	pc, [sp], #4

08014274 <get_custom_error>:
 8014274:	4b01      	ldr	r3, [pc, #4]	; (801427c <get_custom_error+0x8>)
 8014276:	7818      	ldrb	r0, [r3, #0]
 8014278:	4770      	bx	lr
 801427a:	bf00      	nop
 801427c:	2000dc50 	.word	0x2000dc50

08014280 <recv_custom_msg>:
 8014280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014284:	4693      	mov	fp, r2
 8014286:	b089      	sub	sp, #36	; 0x24
 8014288:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 801428c:	9305      	str	r3, [sp, #20]
 801428e:	468a      	mov	sl, r1
 8014290:	2100      	movs	r1, #0
 8014292:	4604      	mov	r4, r0
 8014294:	f88d 101e 	strb.w	r1, [sp, #30]
 8014298:	b322      	cbz	r2, 80142e4 <recv_custom_msg+0x64>
 801429a:	f200 2902 	addw	r9, r0, #514	; 0x202
 801429e:	f10d 081f 	add.w	r8, sp, #31
 80142a2:	af05      	add	r7, sp, #20
 80142a4:	f10d 061e 	add.w	r6, sp, #30
 80142a8:	f44f 7500 	mov.w	r5, #512	; 0x200
 80142ac:	e002      	b.n	80142b4 <recv_custom_msg+0x34>
 80142ae:	9b05      	ldr	r3, [sp, #20]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	dd0f      	ble.n	80142d4 <recv_custom_msg+0x54>
 80142b4:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80142b8:	4623      	mov	r3, r4
 80142ba:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80142be:	e9cd 5600 	strd	r5, r6, [sp]
 80142c2:	4622      	mov	r2, r4
 80142c4:	4648      	mov	r0, r9
 80142c6:	f001 f92d 	bl	8015524 <uxr_read_framed_msg>
 80142ca:	2800      	cmp	r0, #0
 80142cc:	d0ef      	beq.n	80142ae <recv_custom_msg+0x2e>
 80142ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80142d2:	b1b3      	cbz	r3, 8014302 <recv_custom_msg+0x82>
 80142d4:	4b0f      	ldr	r3, [pc, #60]	; (8014314 <recv_custom_msg+0x94>)
 80142d6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80142da:	701a      	strb	r2, [r3, #0]
 80142dc:	2000      	movs	r0, #0
 80142de:	b009      	add	sp, #36	; 0x24
 80142e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142e4:	f10d 021f 	add.w	r2, sp, #31
 80142e8:	9200      	str	r2, [sp, #0]
 80142ea:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80142ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80142f2:	4601      	mov	r1, r0
 80142f4:	47a8      	blx	r5
 80142f6:	2800      	cmp	r0, #0
 80142f8:	d0ec      	beq.n	80142d4 <recv_custom_msg+0x54>
 80142fa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d1e8      	bne.n	80142d4 <recv_custom_msg+0x54>
 8014302:	f8cb 0000 	str.w	r0, [fp]
 8014306:	2001      	movs	r0, #1
 8014308:	f8ca 4000 	str.w	r4, [sl]
 801430c:	b009      	add	sp, #36	; 0x24
 801430e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014312:	bf00      	nop
 8014314:	2000dc50 	.word	0x2000dc50

08014318 <send_custom_msg>:
 8014318:	b530      	push	{r4, r5, lr}
 801431a:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 801431e:	b087      	sub	sp, #28
 8014320:	4615      	mov	r5, r2
 8014322:	b974      	cbnz	r4, 8014342 <send_custom_msg+0x2a>
 8014324:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8014328:	f10d 0317 	add.w	r3, sp, #23
 801432c:	47a0      	blx	r4
 801432e:	b108      	cbz	r0, 8014334 <send_custom_msg+0x1c>
 8014330:	42a8      	cmp	r0, r5
 8014332:	d015      	beq.n	8014360 <send_custom_msg+0x48>
 8014334:	4b0c      	ldr	r3, [pc, #48]	; (8014368 <send_custom_msg+0x50>)
 8014336:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801433a:	701a      	strb	r2, [r3, #0]
 801433c:	2000      	movs	r0, #0
 801433e:	b007      	add	sp, #28
 8014340:	bd30      	pop	{r4, r5, pc}
 8014342:	460b      	mov	r3, r1
 8014344:	2200      	movs	r2, #0
 8014346:	f10d 0117 	add.w	r1, sp, #23
 801434a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801434e:	4602      	mov	r2, r0
 8014350:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8014354:	9500      	str	r5, [sp, #0]
 8014356:	f200 2002 	addw	r0, r0, #514	; 0x202
 801435a:	f000 feeb 	bl	8015134 <uxr_write_framed_msg>
 801435e:	e7e6      	b.n	801432e <send_custom_msg+0x16>
 8014360:	2001      	movs	r0, #1
 8014362:	b007      	add	sp, #28
 8014364:	bd30      	pop	{r4, r5, pc}
 8014366:	bf00      	nop
 8014368:	2000dc50 	.word	0x2000dc50

0801436c <uxr_set_custom_transport_callbacks>:
 801436c:	b410      	push	{r4}
 801436e:	9c01      	ldr	r4, [sp, #4]
 8014370:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8014374:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8014378:	9b02      	ldr	r3, [sp, #8]
 801437a:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801437e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014382:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 8014386:	4770      	bx	lr

08014388 <uxr_init_custom_transport>:
 8014388:	b538      	push	{r3, r4, r5, lr}
 801438a:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801438e:	b303      	cbz	r3, 80143d2 <uxr_init_custom_transport+0x4a>
 8014390:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8014394:	4604      	mov	r4, r0
 8014396:	b1e2      	cbz	r2, 80143d2 <uxr_init_custom_transport+0x4a>
 8014398:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 801439c:	b1ca      	cbz	r2, 80143d2 <uxr_init_custom_transport+0x4a>
 801439e:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80143a2:	b1b2      	cbz	r2, 80143d2 <uxr_init_custom_transport+0x4a>
 80143a4:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80143a8:	4798      	blx	r3
 80143aa:	4605      	mov	r5, r0
 80143ac:	b188      	cbz	r0, 80143d2 <uxr_init_custom_transport+0x4a>
 80143ae:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80143b2:	b98b      	cbnz	r3, 80143d8 <uxr_init_custom_transport+0x50>
 80143b4:	490b      	ldr	r1, [pc, #44]	; (80143e4 <uxr_init_custom_transport+0x5c>)
 80143b6:	4b0c      	ldr	r3, [pc, #48]	; (80143e8 <uxr_init_custom_transport+0x60>)
 80143b8:	4a0c      	ldr	r2, [pc, #48]	; (80143ec <uxr_init_custom_transport+0x64>)
 80143ba:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 80143be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80143c2:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 80143c6:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80143ca:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80143ce:	4628      	mov	r0, r5
 80143d0:	bd38      	pop	{r3, r4, r5, pc}
 80143d2:	2500      	movs	r5, #0
 80143d4:	4628      	mov	r0, r5
 80143d6:	bd38      	pop	{r3, r4, r5, pc}
 80143d8:	2100      	movs	r1, #0
 80143da:	f204 2002 	addw	r0, r4, #514	; 0x202
 80143de:	f000 fea3 	bl	8015128 <uxr_init_framing_io>
 80143e2:	e7e7      	b.n	80143b4 <uxr_init_custom_transport+0x2c>
 80143e4:	08014319 	.word	0x08014319
 80143e8:	08014281 	.word	0x08014281
 80143ec:	08014275 	.word	0x08014275

080143f0 <uxr_close_custom_transport>:
 80143f0:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80143f4:	4718      	bx	r3
 80143f6:	bf00      	nop

080143f8 <uxr_init_input_best_effort_stream>:
 80143f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80143fc:	8003      	strh	r3, [r0, #0]
 80143fe:	4770      	bx	lr

08014400 <uxr_reset_input_best_effort_stream>:
 8014400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014404:	8003      	strh	r3, [r0, #0]
 8014406:	4770      	bx	lr

08014408 <uxr_receive_best_effort_message>:
 8014408:	b538      	push	{r3, r4, r5, lr}
 801440a:	4604      	mov	r4, r0
 801440c:	8800      	ldrh	r0, [r0, #0]
 801440e:	460d      	mov	r5, r1
 8014410:	f000 fe72 	bl	80150f8 <uxr_seq_num_cmp>
 8014414:	4603      	mov	r3, r0
 8014416:	2b00      	cmp	r3, #0
 8014418:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801441c:	bfb8      	it	lt
 801441e:	8025      	strhlt	r5, [r4, #0]
 8014420:	bd38      	pop	{r3, r4, r5, pc}
 8014422:	bf00      	nop

08014424 <on_full_input_buffer>:
 8014424:	b570      	push	{r4, r5, r6, lr}
 8014426:	4605      	mov	r5, r0
 8014428:	460c      	mov	r4, r1
 801442a:	682b      	ldr	r3, [r5, #0]
 801442c:	6809      	ldr	r1, [r1, #0]
 801442e:	8920      	ldrh	r0, [r4, #8]
 8014430:	6862      	ldr	r2, [r4, #4]
 8014432:	fbb2 f2f0 	udiv	r2, r2, r0
 8014436:	eba3 0c01 	sub.w	ip, r3, r1
 801443a:	fbbc fcf2 	udiv	ip, ip, r2
 801443e:	f10c 0c01 	add.w	ip, ip, #1
 8014442:	fa1f f38c 	uxth.w	r3, ip
 8014446:	fbb3 f6f0 	udiv	r6, r3, r0
 801444a:	fb00 3316 	mls	r3, r0, r6, r3
 801444e:	b29b      	uxth	r3, r3
 8014450:	fb02 f303 	mul.w	r3, r2, r3
 8014454:	1d18      	adds	r0, r3, #4
 8014456:	4408      	add	r0, r1
 8014458:	7d26      	ldrb	r6, [r4, #20]
 801445a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801445e:	b116      	cbz	r6, 8014466 <on_full_input_buffer+0x42>
 8014460:	2600      	movs	r6, #0
 8014462:	f840 6c04 	str.w	r6, [r0, #-4]
 8014466:	2a03      	cmp	r2, #3
 8014468:	d801      	bhi.n	801446e <on_full_input_buffer+0x4a>
 801446a:	2001      	movs	r0, #1
 801446c:	bd70      	pop	{r4, r5, r6, pc}
 801446e:	3308      	adds	r3, #8
 8014470:	4419      	add	r1, r3
 8014472:	4628      	mov	r0, r5
 8014474:	692b      	ldr	r3, [r5, #16]
 8014476:	3a04      	subs	r2, #4
 8014478:	f7f8 f9f4 	bl	800c864 <ucdr_init_buffer_origin>
 801447c:	4628      	mov	r0, r5
 801447e:	4903      	ldr	r1, [pc, #12]	; (801448c <on_full_input_buffer+0x68>)
 8014480:	4622      	mov	r2, r4
 8014482:	f7f8 f9cb 	bl	800c81c <ucdr_set_on_full_buffer_callback>
 8014486:	2000      	movs	r0, #0
 8014488:	bd70      	pop	{r4, r5, r6, pc}
 801448a:	bf00      	nop
 801448c:	08014425 	.word	0x08014425

08014490 <uxr_init_input_reliable_stream>:
 8014490:	b500      	push	{lr}
 8014492:	e9c0 1200 	strd	r1, r2, [r0]
 8014496:	f04f 0e00 	mov.w	lr, #0
 801449a:	9a01      	ldr	r2, [sp, #4]
 801449c:	8103      	strh	r3, [r0, #8]
 801449e:	6102      	str	r2, [r0, #16]
 80144a0:	f880 e014 	strb.w	lr, [r0, #20]
 80144a4:	b1d3      	cbz	r3, 80144dc <uxr_init_input_reliable_stream+0x4c>
 80144a6:	f8c1 e000 	str.w	lr, [r1]
 80144aa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80144ae:	f1bc 0f01 	cmp.w	ip, #1
 80144b2:	d913      	bls.n	80144dc <uxr_init_input_reliable_stream+0x4c>
 80144b4:	2301      	movs	r3, #1
 80144b6:	fbb3 f1fc 	udiv	r1, r3, ip
 80144ba:	fb0c 3111 	mls	r1, ip, r1, r3
 80144be:	b289      	uxth	r1, r1
 80144c0:	6842      	ldr	r2, [r0, #4]
 80144c2:	fbb2 f2fc 	udiv	r2, r2, ip
 80144c6:	fb01 f202 	mul.w	r2, r1, r2
 80144ca:	6801      	ldr	r1, [r0, #0]
 80144cc:	f841 e002 	str.w	lr, [r1, r2]
 80144d0:	3301      	adds	r3, #1
 80144d2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80144d6:	b29b      	uxth	r3, r3
 80144d8:	459c      	cmp	ip, r3
 80144da:	d8ec      	bhi.n	80144b6 <uxr_init_input_reliable_stream+0x26>
 80144dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80144e0:	60c3      	str	r3, [r0, #12]
 80144e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80144e6:	bf00      	nop

080144e8 <uxr_reset_input_reliable_stream>:
 80144e8:	8901      	ldrh	r1, [r0, #8]
 80144ea:	b1e9      	cbz	r1, 8014528 <uxr_reset_input_reliable_stream+0x40>
 80144ec:	f04f 0c00 	mov.w	ip, #0
 80144f0:	b500      	push	{lr}
 80144f2:	4663      	mov	r3, ip
 80144f4:	46e6      	mov	lr, ip
 80144f6:	fbb3 f2f1 	udiv	r2, r3, r1
 80144fa:	fb01 3312 	mls	r3, r1, r2, r3
 80144fe:	b29b      	uxth	r3, r3
 8014500:	6842      	ldr	r2, [r0, #4]
 8014502:	fbb2 f2f1 	udiv	r2, r2, r1
 8014506:	fb02 f303 	mul.w	r3, r2, r3
 801450a:	6802      	ldr	r2, [r0, #0]
 801450c:	f842 e003 	str.w	lr, [r2, r3]
 8014510:	f10c 0c01 	add.w	ip, ip, #1
 8014514:	8901      	ldrh	r1, [r0, #8]
 8014516:	fa1f f38c 	uxth.w	r3, ip
 801451a:	4299      	cmp	r1, r3
 801451c:	d8eb      	bhi.n	80144f6 <uxr_reset_input_reliable_stream+0xe>
 801451e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014522:	60c3      	str	r3, [r0, #12]
 8014524:	f85d fb04 	ldr.w	pc, [sp], #4
 8014528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801452c:	60c3      	str	r3, [r0, #12]
 801452e:	4770      	bx	lr

08014530 <uxr_receive_reliable_message>:
 8014530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014534:	4604      	mov	r4, r0
 8014536:	460d      	mov	r5, r1
 8014538:	8901      	ldrh	r1, [r0, #8]
 801453a:	8980      	ldrh	r0, [r0, #12]
 801453c:	4690      	mov	r8, r2
 801453e:	461f      	mov	r7, r3
 8014540:	f000 fdd2 	bl	80150e8 <uxr_seq_num_add>
 8014544:	4629      	mov	r1, r5
 8014546:	4606      	mov	r6, r0
 8014548:	89a0      	ldrh	r0, [r4, #12]
 801454a:	f000 fdd5 	bl	80150f8 <uxr_seq_num_cmp>
 801454e:	2800      	cmp	r0, #0
 8014550:	db0a      	blt.n	8014568 <uxr_receive_reliable_message+0x38>
 8014552:	2600      	movs	r6, #0
 8014554:	89e0      	ldrh	r0, [r4, #14]
 8014556:	4629      	mov	r1, r5
 8014558:	f000 fdce 	bl	80150f8 <uxr_seq_num_cmp>
 801455c:	2800      	cmp	r0, #0
 801455e:	da00      	bge.n	8014562 <uxr_receive_reliable_message+0x32>
 8014560:	81e5      	strh	r5, [r4, #14]
 8014562:	4630      	mov	r0, r6
 8014564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014568:	4630      	mov	r0, r6
 801456a:	4629      	mov	r1, r5
 801456c:	f000 fdc4 	bl	80150f8 <uxr_seq_num_cmp>
 8014570:	2800      	cmp	r0, #0
 8014572:	dbee      	blt.n	8014552 <uxr_receive_reliable_message+0x22>
 8014574:	6923      	ldr	r3, [r4, #16]
 8014576:	4640      	mov	r0, r8
 8014578:	4798      	blx	r3
 801457a:	2101      	movs	r1, #1
 801457c:	4681      	mov	r9, r0
 801457e:	89a0      	ldrh	r0, [r4, #12]
 8014580:	f000 fdb2 	bl	80150e8 <uxr_seq_num_add>
 8014584:	f1b9 0f00 	cmp.w	r9, #0
 8014588:	d101      	bne.n	801458e <uxr_receive_reliable_message+0x5e>
 801458a:	4285      	cmp	r5, r0
 801458c:	d047      	beq.n	801461e <uxr_receive_reliable_message+0xee>
 801458e:	8922      	ldrh	r2, [r4, #8]
 8014590:	fbb5 f0f2 	udiv	r0, r5, r2
 8014594:	fb02 5010 	mls	r0, r2, r0, r5
 8014598:	b280      	uxth	r0, r0
 801459a:	6863      	ldr	r3, [r4, #4]
 801459c:	fbb3 f3f2 	udiv	r3, r3, r2
 80145a0:	fb00 f303 	mul.w	r3, r0, r3
 80145a4:	6820      	ldr	r0, [r4, #0]
 80145a6:	3304      	adds	r3, #4
 80145a8:	4418      	add	r0, r3
 80145aa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d1cf      	bne.n	8014552 <uxr_receive_reliable_message+0x22>
 80145b2:	4641      	mov	r1, r8
 80145b4:	463a      	mov	r2, r7
 80145b6:	f002 fb56 	bl	8016c66 <memcpy>
 80145ba:	8921      	ldrh	r1, [r4, #8]
 80145bc:	fbb5 f2f1 	udiv	r2, r5, r1
 80145c0:	fb01 5212 	mls	r2, r1, r2, r5
 80145c4:	b292      	uxth	r2, r2
 80145c6:	6863      	ldr	r3, [r4, #4]
 80145c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80145cc:	fb02 f303 	mul.w	r3, r2, r3
 80145d0:	6822      	ldr	r2, [r4, #0]
 80145d2:	50d7      	str	r7, [r2, r3]
 80145d4:	9a08      	ldr	r2, [sp, #32]
 80145d6:	2301      	movs	r3, #1
 80145d8:	7013      	strb	r3, [r2, #0]
 80145da:	f1b9 0f00 	cmp.w	r9, #0
 80145de:	d0b8      	beq.n	8014552 <uxr_receive_reliable_message+0x22>
 80145e0:	89a6      	ldrh	r6, [r4, #12]
 80145e2:	4630      	mov	r0, r6
 80145e4:	2101      	movs	r1, #1
 80145e6:	f000 fd7f 	bl	80150e8 <uxr_seq_num_add>
 80145ea:	8922      	ldrh	r2, [r4, #8]
 80145ec:	6863      	ldr	r3, [r4, #4]
 80145ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80145f2:	4606      	mov	r6, r0
 80145f4:	fbb0 f0f2 	udiv	r0, r0, r2
 80145f8:	fb02 6010 	mls	r0, r2, r0, r6
 80145fc:	b280      	uxth	r0, r0
 80145fe:	fb00 f303 	mul.w	r3, r0, r3
 8014602:	6820      	ldr	r0, [r4, #0]
 8014604:	3304      	adds	r3, #4
 8014606:	4418      	add	r0, r3
 8014608:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d0a0      	beq.n	8014552 <uxr_receive_reliable_message+0x22>
 8014610:	6923      	ldr	r3, [r4, #16]
 8014612:	4798      	blx	r3
 8014614:	2802      	cmp	r0, #2
 8014616:	d008      	beq.n	801462a <uxr_receive_reliable_message+0xfa>
 8014618:	2801      	cmp	r0, #1
 801461a:	d0e2      	beq.n	80145e2 <uxr_receive_reliable_message+0xb2>
 801461c:	e799      	b.n	8014552 <uxr_receive_reliable_message+0x22>
 801461e:	9b08      	ldr	r3, [sp, #32]
 8014620:	81a5      	strh	r5, [r4, #12]
 8014622:	2601      	movs	r6, #1
 8014624:	f883 9000 	strb.w	r9, [r3]
 8014628:	e794      	b.n	8014554 <uxr_receive_reliable_message+0x24>
 801462a:	2601      	movs	r6, #1
 801462c:	e792      	b.n	8014554 <uxr_receive_reliable_message+0x24>
 801462e:	bf00      	nop

08014630 <uxr_next_input_reliable_buffer_available>:
 8014630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014634:	4604      	mov	r4, r0
 8014636:	460f      	mov	r7, r1
 8014638:	8980      	ldrh	r0, [r0, #12]
 801463a:	2101      	movs	r1, #1
 801463c:	4690      	mov	r8, r2
 801463e:	f000 fd53 	bl	80150e8 <uxr_seq_num_add>
 8014642:	8922      	ldrh	r2, [r4, #8]
 8014644:	fbb0 f6f2 	udiv	r6, r0, r2
 8014648:	fb02 0616 	mls	r6, r2, r6, r0
 801464c:	b2b6      	uxth	r6, r6
 801464e:	6863      	ldr	r3, [r4, #4]
 8014650:	fbb3 f3f2 	udiv	r3, r3, r2
 8014654:	fb06 f303 	mul.w	r3, r6, r3
 8014658:	6826      	ldr	r6, [r4, #0]
 801465a:	3304      	adds	r3, #4
 801465c:	441e      	add	r6, r3
 801465e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8014662:	f1b9 0f00 	cmp.w	r9, #0
 8014666:	d023      	beq.n	80146b0 <uxr_next_input_reliable_buffer_available+0x80>
 8014668:	6923      	ldr	r3, [r4, #16]
 801466a:	4605      	mov	r5, r0
 801466c:	4630      	mov	r0, r6
 801466e:	4798      	blx	r3
 8014670:	4682      	mov	sl, r0
 8014672:	b300      	cbz	r0, 80146b6 <uxr_next_input_reliable_buffer_available+0x86>
 8014674:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8014678:	2101      	movs	r1, #1
 801467a:	4650      	mov	r0, sl
 801467c:	f000 fd34 	bl	80150e8 <uxr_seq_num_add>
 8014680:	8921      	ldrh	r1, [r4, #8]
 8014682:	fbb0 f2f1 	udiv	r2, r0, r1
 8014686:	4682      	mov	sl, r0
 8014688:	fb01 0212 	mls	r2, r1, r2, r0
 801468c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8014690:	b292      	uxth	r2, r2
 8014692:	fbb3 f3f1 	udiv	r3, r3, r1
 8014696:	fb02 f303 	mul.w	r3, r2, r3
 801469a:	3304      	adds	r3, #4
 801469c:	4418      	add	r0, r3
 801469e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80146a2:	b12b      	cbz	r3, 80146b0 <uxr_next_input_reliable_buffer_available+0x80>
 80146a4:	6923      	ldr	r3, [r4, #16]
 80146a6:	4798      	blx	r3
 80146a8:	2802      	cmp	r0, #2
 80146aa:	d01b      	beq.n	80146e4 <uxr_next_input_reliable_buffer_available+0xb4>
 80146ac:	2801      	cmp	r0, #1
 80146ae:	d0e3      	beq.n	8014678 <uxr_next_input_reliable_buffer_available+0x48>
 80146b0:	2000      	movs	r0, #0
 80146b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146b6:	464a      	mov	r2, r9
 80146b8:	4631      	mov	r1, r6
 80146ba:	4638      	mov	r0, r7
 80146bc:	f7f8 f8da 	bl	800c874 <ucdr_init_buffer>
 80146c0:	8921      	ldrh	r1, [r4, #8]
 80146c2:	fbb5 f2f1 	udiv	r2, r5, r1
 80146c6:	fb01 5212 	mls	r2, r1, r2, r5
 80146ca:	b292      	uxth	r2, r2
 80146cc:	6863      	ldr	r3, [r4, #4]
 80146ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80146d2:	fb02 f303 	mul.w	r3, r2, r3
 80146d6:	6822      	ldr	r2, [r4, #0]
 80146d8:	f842 a003 	str.w	sl, [r2, r3]
 80146dc:	2001      	movs	r0, #1
 80146de:	81a5      	strh	r5, [r4, #12]
 80146e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146e4:	8920      	ldrh	r0, [r4, #8]
 80146e6:	fbb5 f3f0 	udiv	r3, r5, r0
 80146ea:	fb00 5513 	mls	r5, r0, r3, r5
 80146ee:	b2ad      	uxth	r5, r5
 80146f0:	6863      	ldr	r3, [r4, #4]
 80146f2:	fbb3 f3f0 	udiv	r3, r3, r0
 80146f6:	fb03 f505 	mul.w	r5, r3, r5
 80146fa:	6823      	ldr	r3, [r4, #0]
 80146fc:	2000      	movs	r0, #0
 80146fe:	5158      	str	r0, [r3, r5]
 8014700:	eb06 0108 	add.w	r1, r6, r8
 8014704:	eba9 0208 	sub.w	r2, r9, r8
 8014708:	4638      	mov	r0, r7
 801470a:	f7f8 f8b3 	bl	800c874 <ucdr_init_buffer>
 801470e:	4638      	mov	r0, r7
 8014710:	4903      	ldr	r1, [pc, #12]	; (8014720 <uxr_next_input_reliable_buffer_available+0xf0>)
 8014712:	4622      	mov	r2, r4
 8014714:	f7f8 f882 	bl	800c81c <ucdr_set_on_full_buffer_callback>
 8014718:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801471c:	2001      	movs	r0, #1
 801471e:	e7c8      	b.n	80146b2 <uxr_next_input_reliable_buffer_available+0x82>
 8014720:	08014425 	.word	0x08014425

08014724 <uxr_process_heartbeat>:
 8014724:	b538      	push	{r3, r4, r5, lr}
 8014726:	4611      	mov	r1, r2
 8014728:	4604      	mov	r4, r0
 801472a:	89c0      	ldrh	r0, [r0, #14]
 801472c:	4615      	mov	r5, r2
 801472e:	f000 fce3 	bl	80150f8 <uxr_seq_num_cmp>
 8014732:	2800      	cmp	r0, #0
 8014734:	bfb8      	it	lt
 8014736:	81e5      	strhlt	r5, [r4, #14]
 8014738:	bd38      	pop	{r3, r4, r5, pc}
 801473a:	bf00      	nop

0801473c <uxr_compute_acknack>:
 801473c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014740:	8903      	ldrh	r3, [r0, #8]
 8014742:	8985      	ldrh	r5, [r0, #12]
 8014744:	4604      	mov	r4, r0
 8014746:	460e      	mov	r6, r1
 8014748:	b1d3      	cbz	r3, 8014780 <uxr_compute_acknack+0x44>
 801474a:	4628      	mov	r0, r5
 801474c:	2701      	movs	r7, #1
 801474e:	e003      	b.n	8014758 <uxr_compute_acknack+0x1c>
 8014750:	4567      	cmp	r7, ip
 8014752:	d215      	bcs.n	8014780 <uxr_compute_acknack+0x44>
 8014754:	89a0      	ldrh	r0, [r4, #12]
 8014756:	3701      	adds	r7, #1
 8014758:	b2b9      	uxth	r1, r7
 801475a:	f000 fcc5 	bl	80150e8 <uxr_seq_num_add>
 801475e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014762:	fbb0 f3fc 	udiv	r3, r0, ip
 8014766:	fb0c 0313 	mls	r3, ip, r3, r0
 801476a:	b29a      	uxth	r2, r3
 801476c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8014770:	fbb3 f3fc 	udiv	r3, r3, ip
 8014774:	fb02 f303 	mul.w	r3, r2, r3
 8014778:	58cb      	ldr	r3, [r1, r3]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d1e8      	bne.n	8014750 <uxr_compute_acknack+0x14>
 801477e:	4605      	mov	r5, r0
 8014780:	8035      	strh	r5, [r6, #0]
 8014782:	2101      	movs	r1, #1
 8014784:	4628      	mov	r0, r5
 8014786:	89e7      	ldrh	r7, [r4, #14]
 8014788:	f000 fcb2 	bl	80150f0 <uxr_seq_num_sub>
 801478c:	4601      	mov	r1, r0
 801478e:	4638      	mov	r0, r7
 8014790:	f000 fcae 	bl	80150f0 <uxr_seq_num_sub>
 8014794:	4605      	mov	r5, r0
 8014796:	b318      	cbz	r0, 80147e0 <uxr_compute_acknack+0xa4>
 8014798:	f04f 0900 	mov.w	r9, #0
 801479c:	464f      	mov	r7, r9
 801479e:	f04f 0801 	mov.w	r8, #1
 80147a2:	fa1f f189 	uxth.w	r1, r9
 80147a6:	8830      	ldrh	r0, [r6, #0]
 80147a8:	f000 fc9e 	bl	80150e8 <uxr_seq_num_add>
 80147ac:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80147b0:	fbb0 f3fc 	udiv	r3, r0, ip
 80147b4:	e9d4 1200 	ldrd	r1, r2, [r4]
 80147b8:	fb03 001c 	mls	r0, r3, ip, r0
 80147bc:	b283      	uxth	r3, r0
 80147be:	fbb2 f2fc 	udiv	r2, r2, ip
 80147c2:	fb02 f303 	mul.w	r3, r2, r3
 80147c6:	fa08 f209 	lsl.w	r2, r8, r9
 80147ca:	58cb      	ldr	r3, [r1, r3]
 80147cc:	f109 0901 	add.w	r9, r9, #1
 80147d0:	b90b      	cbnz	r3, 80147d6 <uxr_compute_acknack+0x9a>
 80147d2:	4317      	orrs	r7, r2
 80147d4:	b2bf      	uxth	r7, r7
 80147d6:	454d      	cmp	r5, r9
 80147d8:	d1e3      	bne.n	80147a2 <uxr_compute_acknack+0x66>
 80147da:	4638      	mov	r0, r7
 80147dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147e0:	4607      	mov	r7, r0
 80147e2:	4638      	mov	r0, r7
 80147e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080147e8 <uxr_init_output_best_effort_stream>:
 80147e8:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80147ec:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80147f0:	6001      	str	r1, [r0, #0]
 80147f2:	7303      	strb	r3, [r0, #12]
 80147f4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80147f8:	4770      	bx	lr
 80147fa:	bf00      	nop

080147fc <uxr_reset_output_best_effort_stream>:
 80147fc:	7b02      	ldrb	r2, [r0, #12]
 80147fe:	6042      	str	r2, [r0, #4]
 8014800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014804:	81c3      	strh	r3, [r0, #14]
 8014806:	4770      	bx	lr

08014808 <uxr_prepare_best_effort_buffer_to_write>:
 8014808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801480a:	4604      	mov	r4, r0
 801480c:	b083      	sub	sp, #12
 801480e:	6840      	ldr	r0, [r0, #4]
 8014810:	460d      	mov	r5, r1
 8014812:	4616      	mov	r6, r2
 8014814:	f7f9 fcdc 	bl	800e1d0 <uxr_submessage_padding>
 8014818:	6863      	ldr	r3, [r4, #4]
 801481a:	4418      	add	r0, r3
 801481c:	68a3      	ldr	r3, [r4, #8]
 801481e:	1942      	adds	r2, r0, r5
 8014820:	4293      	cmp	r3, r2
 8014822:	bf2c      	ite	cs
 8014824:	2701      	movcs	r7, #1
 8014826:	2700      	movcc	r7, #0
 8014828:	d202      	bcs.n	8014830 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801482a:	4638      	mov	r0, r7
 801482c:	b003      	add	sp, #12
 801482e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014830:	9000      	str	r0, [sp, #0]
 8014832:	6821      	ldr	r1, [r4, #0]
 8014834:	4630      	mov	r0, r6
 8014836:	2300      	movs	r3, #0
 8014838:	f7f8 f80a 	bl	800c850 <ucdr_init_buffer_origin_offset>
 801483c:	6861      	ldr	r1, [r4, #4]
 801483e:	4638      	mov	r0, r7
 8014840:	4429      	add	r1, r5
 8014842:	6061      	str	r1, [r4, #4]
 8014844:	b003      	add	sp, #12
 8014846:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014848 <uxr_prepare_best_effort_buffer_to_send>:
 8014848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801484c:	4604      	mov	r4, r0
 801484e:	461d      	mov	r5, r3
 8014850:	6840      	ldr	r0, [r0, #4]
 8014852:	7b23      	ldrb	r3, [r4, #12]
 8014854:	4298      	cmp	r0, r3
 8014856:	bf8c      	ite	hi
 8014858:	2601      	movhi	r6, #1
 801485a:	2600      	movls	r6, #0
 801485c:	d802      	bhi.n	8014864 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801485e:	4630      	mov	r0, r6
 8014860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014864:	4688      	mov	r8, r1
 8014866:	89e0      	ldrh	r0, [r4, #14]
 8014868:	2101      	movs	r1, #1
 801486a:	4617      	mov	r7, r2
 801486c:	f000 fc3c 	bl	80150e8 <uxr_seq_num_add>
 8014870:	6823      	ldr	r3, [r4, #0]
 8014872:	81e0      	strh	r0, [r4, #14]
 8014874:	8028      	strh	r0, [r5, #0]
 8014876:	f8c8 3000 	str.w	r3, [r8]
 801487a:	6863      	ldr	r3, [r4, #4]
 801487c:	603b      	str	r3, [r7, #0]
 801487e:	7b23      	ldrb	r3, [r4, #12]
 8014880:	6063      	str	r3, [r4, #4]
 8014882:	4630      	mov	r0, r6
 8014884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014888 <on_full_output_buffer>:
 8014888:	b538      	push	{r3, r4, r5, lr}
 801488a:	6802      	ldr	r2, [r0, #0]
 801488c:	460c      	mov	r4, r1
 801488e:	6809      	ldr	r1, [r1, #0]
 8014890:	8923      	ldrh	r3, [r4, #8]
 8014892:	eba2 0c01 	sub.w	ip, r2, r1
 8014896:	6862      	ldr	r2, [r4, #4]
 8014898:	fbb2 f2f3 	udiv	r2, r2, r3
 801489c:	fbbc fcf2 	udiv	ip, ip, r2
 80148a0:	f10c 0c01 	add.w	ip, ip, #1
 80148a4:	fa1f fc8c 	uxth.w	ip, ip
 80148a8:	fbbc fef3 	udiv	lr, ip, r3
 80148ac:	fb03 c31e 	mls	r3, r3, lr, ip
 80148b0:	b29b      	uxth	r3, r3
 80148b2:	fb02 f303 	mul.w	r3, r2, r3
 80148b6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80148ba:	58ca      	ldr	r2, [r1, r3]
 80148bc:	4463      	add	r3, ip
 80148be:	eba2 020c 	sub.w	r2, r2, ip
 80148c2:	3308      	adds	r3, #8
 80148c4:	4605      	mov	r5, r0
 80148c6:	4419      	add	r1, r3
 80148c8:	3a04      	subs	r2, #4
 80148ca:	6903      	ldr	r3, [r0, #16]
 80148cc:	f7f7 ffca 	bl	800c864 <ucdr_init_buffer_origin>
 80148d0:	4628      	mov	r0, r5
 80148d2:	4903      	ldr	r1, [pc, #12]	; (80148e0 <on_full_output_buffer+0x58>)
 80148d4:	4622      	mov	r2, r4
 80148d6:	f7f7 ffa1 	bl	800c81c <ucdr_set_on_full_buffer_callback>
 80148da:	2000      	movs	r0, #0
 80148dc:	bd38      	pop	{r3, r4, r5, pc}
 80148de:	bf00      	nop
 80148e0:	08014889 	.word	0x08014889

080148e4 <uxr_init_output_reliable_stream>:
 80148e4:	b410      	push	{r4}
 80148e6:	f89d c004 	ldrb.w	ip, [sp, #4]
 80148ea:	8103      	strh	r3, [r0, #8]
 80148ec:	e9c0 1200 	strd	r1, r2, [r0]
 80148f0:	f880 c00c 	strb.w	ip, [r0, #12]
 80148f4:	b1d3      	cbz	r3, 801492c <uxr_init_output_reliable_stream+0x48>
 80148f6:	f8c1 c000 	str.w	ip, [r1]
 80148fa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80148fe:	f1bc 0f01 	cmp.w	ip, #1
 8014902:	d913      	bls.n	801492c <uxr_init_output_reliable_stream+0x48>
 8014904:	2301      	movs	r3, #1
 8014906:	fbb3 f1fc 	udiv	r1, r3, ip
 801490a:	fb0c 3111 	mls	r1, ip, r1, r3
 801490e:	b289      	uxth	r1, r1
 8014910:	6842      	ldr	r2, [r0, #4]
 8014912:	6804      	ldr	r4, [r0, #0]
 8014914:	fbb2 f2fc 	udiv	r2, r2, ip
 8014918:	fb01 f202 	mul.w	r2, r1, r2
 801491c:	7b01      	ldrb	r1, [r0, #12]
 801491e:	50a1      	str	r1, [r4, r2]
 8014920:	3301      	adds	r3, #1
 8014922:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014926:	b29b      	uxth	r3, r3
 8014928:	459c      	cmp	ip, r3
 801492a:	d8ec      	bhi.n	8014906 <uxr_init_output_reliable_stream+0x22>
 801492c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014930:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014934:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014938:	4905      	ldr	r1, [pc, #20]	; (8014950 <uxr_init_output_reliable_stream+0x6c>)
 801493a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801493e:	f8c0 100e 	str.w	r1, [r0, #14]
 8014942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014946:	2300      	movs	r3, #0
 8014948:	8242      	strh	r2, [r0, #18]
 801494a:	8403      	strh	r3, [r0, #32]
 801494c:	4770      	bx	lr
 801494e:	bf00      	nop
 8014950:	ffff0000 	.word	0xffff0000

08014954 <uxr_reset_output_reliable_stream>:
 8014954:	8901      	ldrh	r1, [r0, #8]
 8014956:	b1b1      	cbz	r1, 8014986 <uxr_reset_output_reliable_stream+0x32>
 8014958:	f04f 0c00 	mov.w	ip, #0
 801495c:	4663      	mov	r3, ip
 801495e:	fbb3 f2f1 	udiv	r2, r3, r1
 8014962:	fb01 3312 	mls	r3, r1, r2, r3
 8014966:	b29b      	uxth	r3, r3
 8014968:	6842      	ldr	r2, [r0, #4]
 801496a:	fbb2 f2f1 	udiv	r2, r2, r1
 801496e:	6801      	ldr	r1, [r0, #0]
 8014970:	fb02 f303 	mul.w	r3, r2, r3
 8014974:	7b02      	ldrb	r2, [r0, #12]
 8014976:	50ca      	str	r2, [r1, r3]
 8014978:	f10c 0c01 	add.w	ip, ip, #1
 801497c:	8901      	ldrh	r1, [r0, #8]
 801497e:	fa1f f38c 	uxth.w	r3, ip
 8014982:	4299      	cmp	r1, r3
 8014984:	d8eb      	bhi.n	801495e <uxr_reset_output_reliable_stream+0xa>
 8014986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801498a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801498e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014992:	4904      	ldr	r1, [pc, #16]	; (80149a4 <uxr_reset_output_reliable_stream+0x50>)
 8014994:	f8c0 100e 	str.w	r1, [r0, #14]
 8014998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801499c:	2300      	movs	r3, #0
 801499e:	8242      	strh	r2, [r0, #18]
 80149a0:	8403      	strh	r3, [r0, #32]
 80149a2:	4770      	bx	lr
 80149a4:	ffff0000 	.word	0xffff0000

080149a8 <uxr_prepare_reliable_buffer_to_write>:
 80149a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ac:	4604      	mov	r4, r0
 80149ae:	b091      	sub	sp, #68	; 0x44
 80149b0:	8900      	ldrh	r0, [r0, #8]
 80149b2:	89e6      	ldrh	r6, [r4, #14]
 80149b4:	6823      	ldr	r3, [r4, #0]
 80149b6:	9204      	str	r2, [sp, #16]
 80149b8:	fbb6 f2f0 	udiv	r2, r6, r0
 80149bc:	fb00 6212 	mls	r2, r0, r2, r6
 80149c0:	b292      	uxth	r2, r2
 80149c2:	6865      	ldr	r5, [r4, #4]
 80149c4:	fbb5 f5f0 	udiv	r5, r5, r0
 80149c8:	fb05 3202 	mla	r2, r5, r2, r3
 80149cc:	3204      	adds	r2, #4
 80149ce:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80149d2:	f894 900c 	ldrb.w	r9, [r4, #12]
 80149d6:	9203      	str	r2, [sp, #12]
 80149d8:	468b      	mov	fp, r1
 80149da:	1f2f      	subs	r7, r5, #4
 80149dc:	2800      	cmp	r0, #0
 80149de:	f000 814c 	beq.w	8014c7a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80149e2:	f04f 0c00 	mov.w	ip, #0
 80149e6:	46e2      	mov	sl, ip
 80149e8:	4661      	mov	r1, ip
 80149ea:	fbb1 f2f0 	udiv	r2, r1, r0
 80149ee:	fb00 1212 	mls	r2, r0, r2, r1
 80149f2:	b292      	uxth	r2, r2
 80149f4:	fb05 f202 	mul.w	r2, r5, r2
 80149f8:	f10c 0c01 	add.w	ip, ip, #1
 80149fc:	589a      	ldr	r2, [r3, r2]
 80149fe:	454a      	cmp	r2, r9
 8014a00:	bf08      	it	eq
 8014a02:	f10a 0a01 	addeq.w	sl, sl, #1
 8014a06:	fa1f f18c 	uxth.w	r1, ip
 8014a0a:	bf08      	it	eq
 8014a0c:	fa1f fa8a 	uxtheq.w	sl, sl
 8014a10:	4281      	cmp	r1, r0
 8014a12:	d3ea      	bcc.n	80149ea <uxr_prepare_reliable_buffer_to_write+0x42>
 8014a14:	4640      	mov	r0, r8
 8014a16:	2104      	movs	r1, #4
 8014a18:	f8cd a014 	str.w	sl, [sp, #20]
 8014a1c:	f7f7 ff2e 	bl	800c87c <ucdr_alignment>
 8014a20:	4480      	add	r8, r0
 8014a22:	eb08 020b 	add.w	r2, r8, fp
 8014a26:	42ba      	cmp	r2, r7
 8014a28:	f240 80cd 	bls.w	8014bc6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8014a2c:	7b22      	ldrb	r2, [r4, #12]
 8014a2e:	445a      	add	r2, fp
 8014a30:	42ba      	cmp	r2, r7
 8014a32:	f240 80b5 	bls.w	8014ba0 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8014a36:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 8014a3a:	33fc      	adds	r3, #252	; 0xfc
 8014a3c:	b2ba      	uxth	r2, r7
 8014a3e:	4413      	add	r3, r2
 8014a40:	b29b      	uxth	r3, r3
 8014a42:	fb0a f903 	mul.w	r9, sl, r3
 8014a46:	45d9      	cmp	r9, fp
 8014a48:	9305      	str	r3, [sp, #20]
 8014a4a:	9306      	str	r3, [sp, #24]
 8014a4c:	f0c0 80b7 	bcc.w	8014bbe <uxr_prepare_reliable_buffer_to_write+0x216>
 8014a50:	f108 0304 	add.w	r3, r8, #4
 8014a54:	42bb      	cmp	r3, r7
 8014a56:	f080 80db 	bcs.w	8014c10 <uxr_prepare_reliable_buffer_to_write+0x268>
 8014a5a:	f1a2 0904 	sub.w	r9, r2, #4
 8014a5e:	eba9 0908 	sub.w	r9, r9, r8
 8014a62:	9b05      	ldr	r3, [sp, #20]
 8014a64:	fa1f f989 	uxth.w	r9, r9
 8014a68:	ebab 0b09 	sub.w	fp, fp, r9
 8014a6c:	fbbb f2f3 	udiv	r2, fp, r3
 8014a70:	fb03 b312 	mls	r3, r3, r2, fp
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	f000 80c8 	beq.w	8014c0a <uxr_prepare_reliable_buffer_to_write+0x262>
 8014a7a:	3201      	adds	r2, #1
 8014a7c:	b292      	uxth	r2, r2
 8014a7e:	9306      	str	r3, [sp, #24]
 8014a80:	4552      	cmp	r2, sl
 8014a82:	f200 809c 	bhi.w	8014bbe <uxr_prepare_reliable_buffer_to_write+0x216>
 8014a86:	f10d 0b20 	add.w	fp, sp, #32
 8014a8a:	2a00      	cmp	r2, #0
 8014a8c:	d042      	beq.n	8014b14 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8014a8e:	f8cd 801c 	str.w	r8, [sp, #28]
 8014a92:	f04f 0a00 	mov.w	sl, #0
 8014a96:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014a9a:	9505      	str	r5, [sp, #20]
 8014a9c:	f10d 0b20 	add.w	fp, sp, #32
 8014aa0:	4615      	mov	r5, r2
 8014aa2:	e000      	b.n	8014aa6 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8014aa4:	46c1      	mov	r9, r8
 8014aa6:	8920      	ldrh	r0, [r4, #8]
 8014aa8:	fbb6 f2f0 	udiv	r2, r6, r0
 8014aac:	fb00 6112 	mls	r1, r0, r2, r6
 8014ab0:	b28a      	uxth	r2, r1
 8014ab2:	6863      	ldr	r3, [r4, #4]
 8014ab4:	fbb3 f1f0 	udiv	r1, r3, r0
 8014ab8:	6823      	ldr	r3, [r4, #0]
 8014aba:	fb02 f101 	mul.w	r1, r2, r1
 8014abe:	3104      	adds	r1, #4
 8014ac0:	4419      	add	r1, r3
 8014ac2:	4658      	mov	r0, fp
 8014ac4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8014ac8:	9200      	str	r2, [sp, #0]
 8014aca:	2300      	movs	r3, #0
 8014acc:	463a      	mov	r2, r7
 8014ace:	f7f7 febf 	bl	800c850 <ucdr_init_buffer_origin_offset>
 8014ad2:	464a      	mov	r2, r9
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	210d      	movs	r1, #13
 8014ad8:	4658      	mov	r0, fp
 8014ada:	f7f9 fb39 	bl	800e150 <uxr_buffer_submessage_header>
 8014ade:	8921      	ldrh	r1, [r4, #8]
 8014ae0:	fbb6 f2f1 	udiv	r2, r6, r1
 8014ae4:	fb01 6212 	mls	r2, r1, r2, r6
 8014ae8:	b292      	uxth	r2, r2
 8014aea:	6863      	ldr	r3, [r4, #4]
 8014aec:	fbb3 f3f1 	udiv	r3, r3, r1
 8014af0:	fb02 f303 	mul.w	r3, r2, r3
 8014af4:	6822      	ldr	r2, [r4, #0]
 8014af6:	4630      	mov	r0, r6
 8014af8:	50d7      	str	r7, [r2, r3]
 8014afa:	2101      	movs	r1, #1
 8014afc:	f000 faf4 	bl	80150e8 <uxr_seq_num_add>
 8014b00:	f10a 0a01 	add.w	sl, sl, #1
 8014b04:	fa1f f38a 	uxth.w	r3, sl
 8014b08:	429d      	cmp	r5, r3
 8014b0a:	4606      	mov	r6, r0
 8014b0c:	d8ca      	bhi.n	8014aa4 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8014b0e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014b12:	9d05      	ldr	r5, [sp, #20]
 8014b14:	8920      	ldrh	r0, [r4, #8]
 8014b16:	fbb6 f3f0 	udiv	r3, r6, r0
 8014b1a:	fb00 6313 	mls	r3, r0, r3, r6
 8014b1e:	b299      	uxth	r1, r3
 8014b20:	6863      	ldr	r3, [r4, #4]
 8014b22:	fbb3 f3f0 	udiv	r3, r3, r0
 8014b26:	fb01 f303 	mul.w	r3, r1, r3
 8014b2a:	6821      	ldr	r1, [r4, #0]
 8014b2c:	3304      	adds	r3, #4
 8014b2e:	4419      	add	r1, r3
 8014b30:	463a      	mov	r2, r7
 8014b32:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8014b36:	9000      	str	r0, [sp, #0]
 8014b38:	2300      	movs	r3, #0
 8014b3a:	4658      	mov	r0, fp
 8014b3c:	f7f7 fe88 	bl	800c850 <ucdr_init_buffer_origin_offset>
 8014b40:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8014b44:	4658      	mov	r0, fp
 8014b46:	fa1f f289 	uxth.w	r2, r9
 8014b4a:	2302      	movs	r3, #2
 8014b4c:	210d      	movs	r1, #13
 8014b4e:	f7f9 faff 	bl	800e150 <uxr_buffer_submessage_header>
 8014b52:	9b03      	ldr	r3, [sp, #12]
 8014b54:	8927      	ldrh	r7, [r4, #8]
 8014b56:	7b20      	ldrb	r0, [r4, #12]
 8014b58:	f108 0104 	add.w	r1, r8, #4
 8014b5c:	440b      	add	r3, r1
 8014b5e:	4619      	mov	r1, r3
 8014b60:	fbb6 f3f7 	udiv	r3, r6, r7
 8014b64:	fb07 6313 	mls	r3, r7, r3, r6
 8014b68:	f1a5 0208 	sub.w	r2, r5, #8
 8014b6c:	b29d      	uxth	r5, r3
 8014b6e:	3004      	adds	r0, #4
 8014b70:	6863      	ldr	r3, [r4, #4]
 8014b72:	fbb3 f3f7 	udiv	r3, r3, r7
 8014b76:	fb05 f303 	mul.w	r3, r5, r3
 8014b7a:	6825      	ldr	r5, [r4, #0]
 8014b7c:	4448      	add	r0, r9
 8014b7e:	50e8      	str	r0, [r5, r3]
 8014b80:	9d04      	ldr	r5, [sp, #16]
 8014b82:	eba2 0208 	sub.w	r2, r2, r8
 8014b86:	4628      	mov	r0, r5
 8014b88:	f7f7 fe74 	bl	800c874 <ucdr_init_buffer>
 8014b8c:	4628      	mov	r0, r5
 8014b8e:	493c      	ldr	r1, [pc, #240]	; (8014c80 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8014b90:	4622      	mov	r2, r4
 8014b92:	f7f7 fe43 	bl	800c81c <ucdr_set_on_full_buffer_callback>
 8014b96:	2001      	movs	r0, #1
 8014b98:	81e6      	strh	r6, [r4, #14]
 8014b9a:	b011      	add	sp, #68	; 0x44
 8014b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ba0:	2101      	movs	r1, #1
 8014ba2:	89e0      	ldrh	r0, [r4, #14]
 8014ba4:	f000 faa0 	bl	80150e8 <uxr_seq_num_add>
 8014ba8:	8921      	ldrh	r1, [r4, #8]
 8014baa:	4605      	mov	r5, r0
 8014bac:	8a60      	ldrh	r0, [r4, #18]
 8014bae:	f000 fa9b 	bl	80150e8 <uxr_seq_num_add>
 8014bb2:	4601      	mov	r1, r0
 8014bb4:	4628      	mov	r0, r5
 8014bb6:	f000 fa9f 	bl	80150f8 <uxr_seq_num_cmp>
 8014bba:	2800      	cmp	r0, #0
 8014bbc:	dd42      	ble.n	8014c44 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8014bbe:	2000      	movs	r0, #0
 8014bc0:	b011      	add	sp, #68	; 0x44
 8014bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bc6:	8921      	ldrh	r1, [r4, #8]
 8014bc8:	8a60      	ldrh	r0, [r4, #18]
 8014bca:	9205      	str	r2, [sp, #20]
 8014bcc:	f000 fa8c 	bl	80150e8 <uxr_seq_num_add>
 8014bd0:	4601      	mov	r1, r0
 8014bd2:	4630      	mov	r0, r6
 8014bd4:	f000 fa90 	bl	80150f8 <uxr_seq_num_cmp>
 8014bd8:	2800      	cmp	r0, #0
 8014bda:	9a05      	ldr	r2, [sp, #20]
 8014bdc:	dcef      	bgt.n	8014bbe <uxr_prepare_reliable_buffer_to_write+0x216>
 8014bde:	8927      	ldrh	r7, [r4, #8]
 8014be0:	fbb6 f3f7 	udiv	r3, r6, r7
 8014be4:	fb07 6313 	mls	r3, r7, r3, r6
 8014be8:	b29d      	uxth	r5, r3
 8014bea:	6863      	ldr	r3, [r4, #4]
 8014bec:	6824      	ldr	r4, [r4, #0]
 8014bee:	fbb3 f3f7 	udiv	r3, r3, r7
 8014bf2:	fb05 f303 	mul.w	r3, r5, r3
 8014bf6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8014bfa:	50e2      	str	r2, [r4, r3]
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	f8cd 8000 	str.w	r8, [sp]
 8014c02:	f7f7 fe25 	bl	800c850 <ucdr_init_buffer_origin_offset>
 8014c06:	2001      	movs	r0, #1
 8014c08:	e7da      	b.n	8014bc0 <uxr_prepare_reliable_buffer_to_write+0x218>
 8014c0a:	b293      	uxth	r3, r2
 8014c0c:	461a      	mov	r2, r3
 8014c0e:	e737      	b.n	8014a80 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8014c10:	4630      	mov	r0, r6
 8014c12:	2101      	movs	r1, #1
 8014c14:	9207      	str	r2, [sp, #28]
 8014c16:	f000 fa67 	bl	80150e8 <uxr_seq_num_add>
 8014c1a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014c1e:	fbb0 f1fc 	udiv	r1, r0, ip
 8014c22:	fb0c 0111 	mls	r1, ip, r1, r0
 8014c26:	4606      	mov	r6, r0
 8014c28:	b288      	uxth	r0, r1
 8014c2a:	6863      	ldr	r3, [r4, #4]
 8014c2c:	fbb3 f1fc 	udiv	r1, r3, ip
 8014c30:	6823      	ldr	r3, [r4, #0]
 8014c32:	9a07      	ldr	r2, [sp, #28]
 8014c34:	fb00 f101 	mul.w	r1, r0, r1
 8014c38:	3104      	adds	r1, #4
 8014c3a:	440b      	add	r3, r1
 8014c3c:	9303      	str	r3, [sp, #12]
 8014c3e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8014c42:	e70a      	b.n	8014a5a <uxr_prepare_reliable_buffer_to_write+0xb2>
 8014c44:	8921      	ldrh	r1, [r4, #8]
 8014c46:	fbb5 f3f1 	udiv	r3, r5, r1
 8014c4a:	fb01 5313 	mls	r3, r1, r3, r5
 8014c4e:	b29a      	uxth	r2, r3
 8014c50:	6863      	ldr	r3, [r4, #4]
 8014c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8014c56:	6821      	ldr	r1, [r4, #0]
 8014c58:	9804      	ldr	r0, [sp, #16]
 8014c5a:	fb02 f303 	mul.w	r3, r2, r3
 8014c5e:	3304      	adds	r3, #4
 8014c60:	7b22      	ldrb	r2, [r4, #12]
 8014c62:	4419      	add	r1, r3
 8014c64:	445a      	add	r2, fp
 8014c66:	f841 2c04 	str.w	r2, [r1, #-4]
 8014c6a:	7b23      	ldrb	r3, [r4, #12]
 8014c6c:	9300      	str	r3, [sp, #0]
 8014c6e:	2300      	movs	r3, #0
 8014c70:	f7f7 fdee 	bl	800c850 <ucdr_init_buffer_origin_offset>
 8014c74:	81e5      	strh	r5, [r4, #14]
 8014c76:	2001      	movs	r0, #1
 8014c78:	e7a2      	b.n	8014bc0 <uxr_prepare_reliable_buffer_to_write+0x218>
 8014c7a:	4682      	mov	sl, r0
 8014c7c:	e6ca      	b.n	8014a14 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8014c7e:	bf00      	nop
 8014c80:	08014889 	.word	0x08014889

08014c84 <uxr_prepare_next_reliable_buffer_to_send>:
 8014c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c86:	4604      	mov	r4, r0
 8014c88:	460f      	mov	r7, r1
 8014c8a:	8a00      	ldrh	r0, [r0, #16]
 8014c8c:	2101      	movs	r1, #1
 8014c8e:	4616      	mov	r6, r2
 8014c90:	461d      	mov	r5, r3
 8014c92:	f000 fa29 	bl	80150e8 <uxr_seq_num_add>
 8014c96:	8028      	strh	r0, [r5, #0]
 8014c98:	8922      	ldrh	r2, [r4, #8]
 8014c9a:	fbb0 f3f2 	udiv	r3, r0, r2
 8014c9e:	fb02 0c13 	mls	ip, r2, r3, r0
 8014ca2:	fa1f fc8c 	uxth.w	ip, ip
 8014ca6:	6863      	ldr	r3, [r4, #4]
 8014ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8014cac:	fb0c fc03 	mul.w	ip, ip, r3
 8014cb0:	6823      	ldr	r3, [r4, #0]
 8014cb2:	89e1      	ldrh	r1, [r4, #14]
 8014cb4:	f10c 0c04 	add.w	ip, ip, #4
 8014cb8:	4463      	add	r3, ip
 8014cba:	603b      	str	r3, [r7, #0]
 8014cbc:	6823      	ldr	r3, [r4, #0]
 8014cbe:	449c      	add	ip, r3
 8014cc0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8014cc4:	6033      	str	r3, [r6, #0]
 8014cc6:	f000 fa17 	bl	80150f8 <uxr_seq_num_cmp>
 8014cca:	2800      	cmp	r0, #0
 8014ccc:	dd01      	ble.n	8014cd2 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8014cce:	2000      	movs	r0, #0
 8014cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cd2:	7b23      	ldrb	r3, [r4, #12]
 8014cd4:	6832      	ldr	r2, [r6, #0]
 8014cd6:	429a      	cmp	r2, r3
 8014cd8:	d9f9      	bls.n	8014cce <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014cda:	8a61      	ldrh	r1, [r4, #18]
 8014cdc:	8a20      	ldrh	r0, [r4, #16]
 8014cde:	f000 fa07 	bl	80150f0 <uxr_seq_num_sub>
 8014ce2:	8923      	ldrh	r3, [r4, #8]
 8014ce4:	4283      	cmp	r3, r0
 8014ce6:	d0f2      	beq.n	8014cce <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014ce8:	8828      	ldrh	r0, [r5, #0]
 8014cea:	89e3      	ldrh	r3, [r4, #14]
 8014cec:	8220      	strh	r0, [r4, #16]
 8014cee:	4298      	cmp	r0, r3
 8014cf0:	d001      	beq.n	8014cf6 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8014cf2:	2001      	movs	r0, #1
 8014cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cf6:	2101      	movs	r1, #1
 8014cf8:	f000 f9f6 	bl	80150e8 <uxr_seq_num_add>
 8014cfc:	81e0      	strh	r0, [r4, #14]
 8014cfe:	2001      	movs	r0, #1
 8014d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d02:	bf00      	nop

08014d04 <uxr_update_output_stream_heartbeat_timestamp>:
 8014d04:	b570      	push	{r4, r5, r6, lr}
 8014d06:	8a01      	ldrh	r1, [r0, #16]
 8014d08:	4604      	mov	r4, r0
 8014d0a:	8a40      	ldrh	r0, [r0, #18]
 8014d0c:	4615      	mov	r5, r2
 8014d0e:	461e      	mov	r6, r3
 8014d10:	f000 f9f2 	bl	80150f8 <uxr_seq_num_cmp>
 8014d14:	2800      	cmp	r0, #0
 8014d16:	db07      	blt.n	8014d28 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014d20:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014d24:	2000      	movs	r0, #0
 8014d26:	bd70      	pop	{r4, r5, r6, pc}
 8014d28:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014d2c:	b940      	cbnz	r0, 8014d40 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8014d2e:	2301      	movs	r3, #1
 8014d30:	f884 3020 	strb.w	r3, [r4, #32]
 8014d34:	3564      	adds	r5, #100	; 0x64
 8014d36:	f146 0600 	adc.w	r6, r6, #0
 8014d3a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014d3e:	bd70      	pop	{r4, r5, r6, pc}
 8014d40:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014d44:	4295      	cmp	r5, r2
 8014d46:	eb76 0303 	sbcs.w	r3, r6, r3
 8014d4a:	bfa5      	ittet	ge
 8014d4c:	3001      	addge	r0, #1
 8014d4e:	f884 0020 	strbge.w	r0, [r4, #32]
 8014d52:	2000      	movlt	r0, #0
 8014d54:	2001      	movge	r0, #1
 8014d56:	e7ed      	b.n	8014d34 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08014d58 <uxr_begin_output_nack_buffer_it>:
 8014d58:	8a40      	ldrh	r0, [r0, #18]
 8014d5a:	4770      	bx	lr

08014d5c <uxr_next_reliable_nack_buffer_to_send>:
 8014d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d60:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 8014d64:	b082      	sub	sp, #8
 8014d66:	f1b8 0f00 	cmp.w	r8, #0
 8014d6a:	d011      	beq.n	8014d90 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8014d6c:	4604      	mov	r4, r0
 8014d6e:	8818      	ldrh	r0, [r3, #0]
 8014d70:	460e      	mov	r6, r1
 8014d72:	4617      	mov	r7, r2
 8014d74:	461d      	mov	r5, r3
 8014d76:	2101      	movs	r1, #1
 8014d78:	f000 f9b6 	bl	80150e8 <uxr_seq_num_add>
 8014d7c:	8028      	strh	r0, [r5, #0]
 8014d7e:	8a21      	ldrh	r1, [r4, #16]
 8014d80:	f000 f9ba 	bl	80150f8 <uxr_seq_num_cmp>
 8014d84:	2800      	cmp	r0, #0
 8014d86:	dd07      	ble.n	8014d98 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8014d88:	f04f 0800 	mov.w	r8, #0
 8014d8c:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8014d90:	4640      	mov	r0, r8
 8014d92:	b002      	add	sp, #8
 8014d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d98:	8921      	ldrh	r1, [r4, #8]
 8014d9a:	8828      	ldrh	r0, [r5, #0]
 8014d9c:	6823      	ldr	r3, [r4, #0]
 8014d9e:	fbb0 f2f1 	udiv	r2, r0, r1
 8014da2:	fb01 0c12 	mls	ip, r1, r2, r0
 8014da6:	fa1f f28c 	uxth.w	r2, ip
 8014daa:	9301      	str	r3, [sp, #4]
 8014dac:	6863      	ldr	r3, [r4, #4]
 8014dae:	fbb3 fcf1 	udiv	ip, r3, r1
 8014db2:	9b01      	ldr	r3, [sp, #4]
 8014db4:	fb02 fc0c 	mul.w	ip, r2, ip
 8014db8:	f10c 0c04 	add.w	ip, ip, #4
 8014dbc:	4463      	add	r3, ip
 8014dbe:	6033      	str	r3, [r6, #0]
 8014dc0:	6823      	ldr	r3, [r4, #0]
 8014dc2:	4463      	add	r3, ip
 8014dc4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014dc8:	603b      	str	r3, [r7, #0]
 8014dca:	7b22      	ldrb	r2, [r4, #12]
 8014dcc:	429a      	cmp	r2, r3
 8014dce:	d0d2      	beq.n	8014d76 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8014dd0:	4640      	mov	r0, r8
 8014dd2:	b002      	add	sp, #8
 8014dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014dd8 <uxr_process_acknack>:
 8014dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dda:	4604      	mov	r4, r0
 8014ddc:	460e      	mov	r6, r1
 8014dde:	4610      	mov	r0, r2
 8014de0:	2101      	movs	r1, #1
 8014de2:	f000 f985 	bl	80150f0 <uxr_seq_num_sub>
 8014de6:	8a61      	ldrh	r1, [r4, #18]
 8014de8:	f000 f982 	bl	80150f0 <uxr_seq_num_sub>
 8014dec:	b1c0      	cbz	r0, 8014e20 <uxr_process_acknack+0x48>
 8014dee:	4605      	mov	r5, r0
 8014df0:	2700      	movs	r7, #0
 8014df2:	2101      	movs	r1, #1
 8014df4:	8a60      	ldrh	r0, [r4, #18]
 8014df6:	f000 f977 	bl	80150e8 <uxr_seq_num_add>
 8014dfa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014dfe:	fbb0 f1fc 	udiv	r1, r0, ip
 8014e02:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014e06:	fb0c 0111 	mls	r1, ip, r1, r0
 8014e0a:	b289      	uxth	r1, r1
 8014e0c:	3701      	adds	r7, #1
 8014e0e:	fbb3 f3fc 	udiv	r3, r3, ip
 8014e12:	fb01 f303 	mul.w	r3, r1, r3
 8014e16:	42bd      	cmp	r5, r7
 8014e18:	7b21      	ldrb	r1, [r4, #12]
 8014e1a:	8260      	strh	r0, [r4, #18]
 8014e1c:	50d1      	str	r1, [r2, r3]
 8014e1e:	d1e8      	bne.n	8014df2 <uxr_process_acknack+0x1a>
 8014e20:	3e00      	subs	r6, #0
 8014e22:	f04f 0300 	mov.w	r3, #0
 8014e26:	bf18      	it	ne
 8014e28:	2601      	movne	r6, #1
 8014e2a:	f884 3020 	strb.w	r3, [r4, #32]
 8014e2e:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8014e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014e34 <uxr_is_output_up_to_date>:
 8014e34:	8a01      	ldrh	r1, [r0, #16]
 8014e36:	8a40      	ldrh	r0, [r0, #18]
 8014e38:	b508      	push	{r3, lr}
 8014e3a:	f000 f95d 	bl	80150f8 <uxr_seq_num_cmp>
 8014e3e:	fab0 f080 	clz	r0, r0
 8014e42:	0940      	lsrs	r0, r0, #5
 8014e44:	bd08      	pop	{r3, pc}
 8014e46:	bf00      	nop

08014e48 <get_available_free_slots>:
 8014e48:	8902      	ldrh	r2, [r0, #8]
 8014e4a:	b1da      	cbz	r2, 8014e84 <get_available_free_slots+0x3c>
 8014e4c:	b530      	push	{r4, r5, lr}
 8014e4e:	2100      	movs	r1, #0
 8014e50:	6843      	ldr	r3, [r0, #4]
 8014e52:	6805      	ldr	r5, [r0, #0]
 8014e54:	7b04      	ldrb	r4, [r0, #12]
 8014e56:	fbb3 fef2 	udiv	lr, r3, r2
 8014e5a:	4608      	mov	r0, r1
 8014e5c:	460b      	mov	r3, r1
 8014e5e:	fbb3 fcf2 	udiv	ip, r3, r2
 8014e62:	fb02 331c 	mls	r3, r2, ip, r3
 8014e66:	b29b      	uxth	r3, r3
 8014e68:	fb0e f303 	mul.w	r3, lr, r3
 8014e6c:	3101      	adds	r1, #1
 8014e6e:	f855 c003 	ldr.w	ip, [r5, r3]
 8014e72:	4564      	cmp	r4, ip
 8014e74:	bf08      	it	eq
 8014e76:	3001      	addeq	r0, #1
 8014e78:	b28b      	uxth	r3, r1
 8014e7a:	bf08      	it	eq
 8014e7c:	b280      	uxtheq	r0, r0
 8014e7e:	4293      	cmp	r3, r2
 8014e80:	d3ed      	bcc.n	8014e5e <get_available_free_slots+0x16>
 8014e82:	bd30      	pop	{r4, r5, pc}
 8014e84:	4610      	mov	r0, r2
 8014e86:	4770      	bx	lr

08014e88 <uxr_buffer_request_data>:
 8014e88:	b530      	push	{r4, r5, lr}
 8014e8a:	b095      	sub	sp, #84	; 0x54
 8014e8c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8014e90:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8014e92:	9303      	str	r3, [sp, #12]
 8014e94:	2200      	movs	r2, #0
 8014e96:	2d00      	cmp	r5, #0
 8014e98:	bf14      	ite	ne
 8014e9a:	2101      	movne	r1, #1
 8014e9c:	4611      	moveq	r1, r2
 8014e9e:	4604      	mov	r4, r0
 8014ea0:	f88d 301c 	strb.w	r3, [sp, #28]
 8014ea4:	f88d 201d 	strb.w	r2, [sp, #29]
 8014ea8:	f88d 201e 	strb.w	r2, [sp, #30]
 8014eac:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8014eb0:	d021      	beq.n	8014ef6 <uxr_buffer_request_data+0x6e>
 8014eb2:	682a      	ldr	r2, [r5, #0]
 8014eb4:	686b      	ldr	r3, [r5, #4]
 8014eb6:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
 8014eba:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8014ebe:	2210      	movs	r2, #16
 8014ec0:	2308      	movs	r3, #8
 8014ec2:	2100      	movs	r1, #0
 8014ec4:	e9cd 3100 	strd	r3, r1, [sp]
 8014ec8:	4620      	mov	r0, r4
 8014eca:	9905      	ldr	r1, [sp, #20]
 8014ecc:	ab0c      	add	r3, sp, #48	; 0x30
 8014ece:	f7f8 fea1 	bl	800dc14 <uxr_prepare_stream_to_write_submessage>
 8014ed2:	b918      	cbnz	r0, 8014edc <uxr_buffer_request_data+0x54>
 8014ed4:	4604      	mov	r4, r0
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	b015      	add	sp, #84	; 0x54
 8014eda:	bd30      	pop	{r4, r5, pc}
 8014edc:	9904      	ldr	r1, [sp, #16]
 8014ede:	aa06      	add	r2, sp, #24
 8014ee0:	4620      	mov	r0, r4
 8014ee2:	f7f8 ffcd 	bl	800de80 <uxr_init_base_object_request>
 8014ee6:	a906      	add	r1, sp, #24
 8014ee8:	4604      	mov	r4, r0
 8014eea:	a80c      	add	r0, sp, #48	; 0x30
 8014eec:	f7fa fac8 	bl	800f480 <uxr_serialize_READ_DATA_Payload>
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	b015      	add	sp, #84	; 0x54
 8014ef4:	bd30      	pop	{r4, r5, pc}
 8014ef6:	2208      	movs	r2, #8
 8014ef8:	e7e2      	b.n	8014ec0 <uxr_buffer_request_data+0x38>
 8014efa:	bf00      	nop

08014efc <uxr_buffer_cancel_data>:
 8014efc:	b510      	push	{r4, lr}
 8014efe:	b094      	sub	sp, #80	; 0x50
 8014f00:	2300      	movs	r3, #0
 8014f02:	9202      	str	r2, [sp, #8]
 8014f04:	9205      	str	r2, [sp, #20]
 8014f06:	9301      	str	r3, [sp, #4]
 8014f08:	2201      	movs	r2, #1
 8014f0a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014f0e:	f88d 301e 	strb.w	r3, [sp, #30]
 8014f12:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8014f16:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8014f1a:	2308      	movs	r3, #8
 8014f1c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8014f20:	9300      	str	r3, [sp, #0]
 8014f22:	2210      	movs	r2, #16
 8014f24:	ab0c      	add	r3, sp, #48	; 0x30
 8014f26:	4604      	mov	r4, r0
 8014f28:	9103      	str	r1, [sp, #12]
 8014f2a:	f7f8 fe73 	bl	800dc14 <uxr_prepare_stream_to_write_submessage>
 8014f2e:	b918      	cbnz	r0, 8014f38 <uxr_buffer_cancel_data+0x3c>
 8014f30:	4604      	mov	r4, r0
 8014f32:	4620      	mov	r0, r4
 8014f34:	b014      	add	sp, #80	; 0x50
 8014f36:	bd10      	pop	{r4, pc}
 8014f38:	9905      	ldr	r1, [sp, #20]
 8014f3a:	aa06      	add	r2, sp, #24
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	f7f8 ff9f 	bl	800de80 <uxr_init_base_object_request>
 8014f42:	a906      	add	r1, sp, #24
 8014f44:	4604      	mov	r4, r0
 8014f46:	a80c      	add	r0, sp, #48	; 0x30
 8014f48:	f7fa fa9a 	bl	800f480 <uxr_serialize_READ_DATA_Payload>
 8014f4c:	4620      	mov	r0, r4
 8014f4e:	b014      	add	sp, #80	; 0x50
 8014f50:	bd10      	pop	{r4, pc}
 8014f52:	bf00      	nop

08014f54 <read_submessage_format>:
 8014f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f58:	b095      	sub	sp, #84	; 0x54
 8014f5a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8014f5e:	b113      	cbz	r3, 8014f66 <read_submessage_format+0x12>
 8014f60:	b015      	add	sp, #84	; 0x54
 8014f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f66:	460c      	mov	r4, r1
 8014f68:	4615      	mov	r5, r2
 8014f6a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8014f6e:	4607      	mov	r7, r0
 8014f70:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014f72:	9004      	str	r0, [sp, #16]
 8014f74:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014f76:	9005      	str	r0, [sp, #20]
 8014f78:	1a52      	subs	r2, r2, r1
 8014f7a:	a80c      	add	r0, sp, #48	; 0x30
 8014f7c:	4699      	mov	r9, r3
 8014f7e:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8014f82:	f7f7 fc77 	bl	800c874 <ucdr_init_buffer>
 8014f86:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014f8a:	a80c      	add	r0, sp, #48	; 0x30
 8014f8c:	f7f7 fc46 	bl	800c81c <ucdr_set_on_full_buffer_callback>
 8014f90:	69e2      	ldr	r2, [r4, #28]
 8014f92:	b19a      	cbz	r2, 8014fbc <read_submessage_format+0x68>
 8014f94:	f1b8 0f07 	cmp.w	r8, #7
 8014f98:	f882 9014 	strb.w	r9, [r2, #20]
 8014f9c:	d040      	beq.n	8015020 <read_submessage_format+0xcc>
 8014f9e:	f1b8 0f08 	cmp.w	r8, #8
 8014fa2:	d02e      	beq.n	8015002 <read_submessage_format+0xae>
 8014fa4:	f1b8 0f06 	cmp.w	r8, #6
 8014fa8:	d011      	beq.n	8014fce <read_submessage_format+0x7a>
 8014faa:	2301      	movs	r3, #1
 8014fac:	7513      	strb	r3, [r2, #20]
 8014fae:	4629      	mov	r1, r5
 8014fb0:	4620      	mov	r0, r4
 8014fb2:	f7f7 fcaf 	bl	800c914 <ucdr_advance_buffer>
 8014fb6:	b015      	add	sp, #84	; 0x54
 8014fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fbc:	f1b8 0f07 	cmp.w	r8, #7
 8014fc0:	d02e      	beq.n	8015020 <read_submessage_format+0xcc>
 8014fc2:	f1b8 0f08 	cmp.w	r8, #8
 8014fc6:	d01c      	beq.n	8015002 <read_submessage_format+0xae>
 8014fc8:	f1b8 0f06 	cmp.w	r8, #6
 8014fcc:	d1ef      	bne.n	8014fae <read_submessage_format+0x5a>
 8014fce:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 8014fd2:	f1b8 0f00 	cmp.w	r8, #0
 8014fd6:	d011      	beq.n	8014ffc <read_submessage_format+0xa8>
 8014fd8:	ab0c      	add	r3, sp, #48	; 0x30
 8014fda:	e9cd 3500 	strd	r3, r5, [sp]
 8014fde:	2306      	movs	r3, #6
 8014fe0:	f88d 3016 	strb.w	r3, [sp, #22]
 8014fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014fe8:	9302      	str	r3, [sp, #8]
 8014fea:	4632      	mov	r2, r6
 8014fec:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014ff0:	4638      	mov	r0, r7
 8014ff2:	47c0      	blx	r8
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	69e2      	ldr	r2, [r4, #28]
 8014ff8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8014ffc:	2a00      	cmp	r2, #0
 8014ffe:	d1d4      	bne.n	8014faa <read_submessage_format+0x56>
 8015000:	e7d5      	b.n	8014fae <read_submessage_format+0x5a>
 8015002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015006:	2b00      	cmp	r3, #0
 8015008:	d0f8      	beq.n	8014ffc <read_submessage_format+0xa8>
 801500a:	a906      	add	r1, sp, #24
 801500c:	a80c      	add	r0, sp, #48	; 0x30
 801500e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8015012:	f7fa fafb 	bl	800f60c <uxr_deserialize_SampleIdentity>
 8015016:	b9a0      	cbnz	r0, 8015042 <read_submessage_format+0xee>
 8015018:	69e2      	ldr	r2, [r4, #28]
 801501a:	2a00      	cmp	r2, #0
 801501c:	d1c5      	bne.n	8014faa <read_submessage_format+0x56>
 801501e:	e7c6      	b.n	8014fae <read_submessage_format+0x5a>
 8015020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015024:	b13b      	cbz	r3, 8015036 <read_submessage_format+0xe2>
 8015026:	a906      	add	r1, sp, #24
 8015028:	a80c      	add	r0, sp, #48	; 0x30
 801502a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801502e:	f7f9 ffc1 	bl	800efb4 <uxr_deserialize_BaseObjectRequest>
 8015032:	bb60      	cbnz	r0, 801508e <read_submessage_format+0x13a>
 8015034:	69e2      	ldr	r2, [r4, #28]
 8015036:	68a3      	ldr	r3, [r4, #8]
 8015038:	442b      	add	r3, r5
 801503a:	60a3      	str	r3, [r4, #8]
 801503c:	2a00      	cmp	r2, #0
 801503e:	d1b4      	bne.n	8014faa <read_submessage_format+0x56>
 8015040:	e7b5      	b.n	8014fae <read_submessage_format+0x5a>
 8015042:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8015046:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015048:	1a52      	subs	r2, r2, r1
 801504a:	eba8 0803 	sub.w	r8, r8, r3
 801504e:	a80c      	add	r0, sp, #48	; 0x30
 8015050:	f7f7 fc10 	bl	800c874 <ucdr_init_buffer>
 8015054:	44a8      	add	r8, r5
 8015056:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801505a:	a80c      	add	r0, sp, #48	; 0x30
 801505c:	f7f7 fbde 	bl	800c81c <ucdr_set_on_full_buffer_callback>
 8015060:	fa1f f888 	uxth.w	r8, r8
 8015064:	ab0c      	add	r3, sp, #48	; 0x30
 8015066:	9300      	str	r3, [sp, #0]
 8015068:	f8cd 8004 	str.w	r8, [sp, #4]
 801506c:	2108      	movs	r1, #8
 801506e:	f88d 1016 	strb.w	r1, [sp, #22]
 8015072:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8015076:	9102      	str	r1, [sp, #8]
 8015078:	ab06      	add	r3, sp, #24
 801507a:	4632      	mov	r2, r6
 801507c:	9905      	ldr	r1, [sp, #20]
 801507e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 8015082:	4638      	mov	r0, r7
 8015084:	47b0      	blx	r6
 8015086:	2301      	movs	r3, #1
 8015088:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 801508c:	e7c4      	b.n	8015018 <read_submessage_format+0xc4>
 801508e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8015092:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015094:	1a52      	subs	r2, r2, r1
 8015096:	a80c      	add	r0, sp, #48	; 0x30
 8015098:	eba8 0803 	sub.w	r8, r8, r3
 801509c:	f7f7 fbea 	bl	800c874 <ucdr_init_buffer>
 80150a0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80150a4:	a80c      	add	r0, sp, #48	; 0x30
 80150a6:	f7f7 fbb9 	bl	800c81c <ucdr_set_on_full_buffer_callback>
 80150aa:	ab0c      	add	r3, sp, #48	; 0x30
 80150ac:	9300      	str	r3, [sp, #0]
 80150ae:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80150b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80150b6:	44a8      	add	r8, r5
 80150b8:	fa1f f888 	uxth.w	r8, r8
 80150bc:	f8cd 8004 	str.w	r8, [sp, #4]
 80150c0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80150c4:	2107      	movs	r1, #7
 80150c6:	f88d 1016 	strb.w	r1, [sp, #22]
 80150ca:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80150ce:	9102      	str	r1, [sp, #8]
 80150d0:	4632      	mov	r2, r6
 80150d2:	b29b      	uxth	r3, r3
 80150d4:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 80150d8:	9905      	ldr	r1, [sp, #20]
 80150da:	4638      	mov	r0, r7
 80150dc:	47b0      	blx	r6
 80150de:	2301      	movs	r3, #1
 80150e0:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80150e4:	e7a6      	b.n	8015034 <read_submessage_format+0xe0>
 80150e6:	bf00      	nop

080150e8 <uxr_seq_num_add>:
 80150e8:	4408      	add	r0, r1
 80150ea:	b280      	uxth	r0, r0
 80150ec:	4770      	bx	lr
 80150ee:	bf00      	nop

080150f0 <uxr_seq_num_sub>:
 80150f0:	1a40      	subs	r0, r0, r1
 80150f2:	b280      	uxth	r0, r0
 80150f4:	4770      	bx	lr
 80150f6:	bf00      	nop

080150f8 <uxr_seq_num_cmp>:
 80150f8:	4288      	cmp	r0, r1
 80150fa:	d011      	beq.n	8015120 <uxr_seq_num_cmp+0x28>
 80150fc:	d309      	bcc.n	8015112 <uxr_seq_num_cmp+0x1a>
 80150fe:	4288      	cmp	r0, r1
 8015100:	d910      	bls.n	8015124 <uxr_seq_num_cmp+0x2c>
 8015102:	1a40      	subs	r0, r0, r1
 8015104:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8015108:	bfd4      	ite	le
 801510a:	2001      	movle	r0, #1
 801510c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8015110:	4770      	bx	lr
 8015112:	1a0b      	subs	r3, r1, r0
 8015114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015118:	daf1      	bge.n	80150fe <uxr_seq_num_cmp+0x6>
 801511a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801511e:	4770      	bx	lr
 8015120:	2000      	movs	r0, #0
 8015122:	4770      	bx	lr
 8015124:	2001      	movs	r0, #1
 8015126:	4770      	bx	lr

08015128 <uxr_init_framing_io>:
 8015128:	2300      	movs	r3, #0
 801512a:	7041      	strb	r1, [r0, #1]
 801512c:	7003      	strb	r3, [r0, #0]
 801512e:	8583      	strh	r3, [r0, #44]	; 0x2c
 8015130:	4770      	bx	lr
 8015132:	bf00      	nop

08015134 <uxr_write_framed_msg>:
 8015134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015138:	4617      	mov	r7, r2
 801513a:	7842      	ldrb	r2, [r0, #1]
 801513c:	b083      	sub	sp, #12
 801513e:	460e      	mov	r6, r1
 8015140:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8015144:	469a      	mov	sl, r3
 8015146:	2901      	cmp	r1, #1
 8015148:	f04f 037e 	mov.w	r3, #126	; 0x7e
 801514c:	4604      	mov	r4, r0
 801514e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8015152:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8015156:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801515a:	f240 8137 	bls.w	80153cc <uxr_write_framed_msg+0x298>
 801515e:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8015162:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8015166:	2901      	cmp	r1, #1
 8015168:	f04f 0202 	mov.w	r2, #2
 801516c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015170:	f240 808f 	bls.w	8015292 <uxr_write_framed_msg+0x15e>
 8015174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015176:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801517a:	b2dd      	uxtb	r5, r3
 801517c:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8015180:	2203      	movs	r2, #3
 8015182:	2901      	cmp	r1, #1
 8015184:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015188:	f240 809a 	bls.w	80152c0 <uxr_write_framed_msg+0x18c>
 801518c:	18a1      	adds	r1, r4, r2
 801518e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015190:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8015194:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015198:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801519c:	3201      	adds	r2, #1
 801519e:	2801      	cmp	r0, #1
 80151a0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80151a4:	f240 80a0 	bls.w	80152e8 <uxr_write_framed_msg+0x1b4>
 80151a8:	18a0      	adds	r0, r4, r2
 80151aa:	3201      	adds	r2, #1
 80151ac:	b2d2      	uxtb	r2, r2
 80151ae:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80151b2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	f000 80a9 	beq.w	801530e <uxr_write_framed_msg+0x1da>
 80151bc:	f04f 0900 	mov.w	r9, #0
 80151c0:	46c8      	mov	r8, r9
 80151c2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80151c6:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80151ca:	2901      	cmp	r1, #1
 80151cc:	f240 80c3 	bls.w	8015356 <uxr_write_framed_msg+0x222>
 80151d0:	2a29      	cmp	r2, #41	; 0x29
 80151d2:	f200 809f 	bhi.w	8015314 <uxr_write_framed_msg+0x1e0>
 80151d6:	18a1      	adds	r1, r4, r2
 80151d8:	3201      	adds	r2, #1
 80151da:	b2d2      	uxtb	r2, r2
 80151dc:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80151e0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80151e4:	ea89 0303 	eor.w	r3, r9, r3
 80151e8:	498c      	ldr	r1, [pc, #560]	; (801541c <uxr_write_framed_msg+0x2e8>)
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	f108 0801 	add.w	r8, r8, #1
 80151f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80151f4:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80151f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151fa:	4543      	cmp	r3, r8
 80151fc:	d8e1      	bhi.n	80151c2 <uxr_write_framed_msg+0x8e>
 80151fe:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015202:	fa5f f889 	uxtb.w	r8, r9
 8015206:	9301      	str	r3, [sp, #4]
 8015208:	f04f 0900 	mov.w	r9, #0
 801520c:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8015210:	fa5f f18a 	uxtb.w	r1, sl
 8015214:	2901      	cmp	r1, #1
 8015216:	d921      	bls.n	801525c <uxr_write_framed_msg+0x128>
 8015218:	2a29      	cmp	r2, #41	; 0x29
 801521a:	f240 80af 	bls.w	801537c <uxr_write_framed_msg+0x248>
 801521e:	2500      	movs	r5, #0
 8015220:	e000      	b.n	8015224 <uxr_write_framed_msg+0xf0>
 8015222:	b160      	cbz	r0, 801523e <uxr_write_framed_msg+0x10a>
 8015224:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015228:	1b52      	subs	r2, r2, r5
 801522a:	465b      	mov	r3, fp
 801522c:	4421      	add	r1, r4
 801522e:	4638      	mov	r0, r7
 8015230:	47b0      	blx	r6
 8015232:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015236:	4405      	add	r5, r0
 8015238:	4295      	cmp	r5, r2
 801523a:	d3f2      	bcc.n	8015222 <uxr_write_framed_msg+0xee>
 801523c:	d003      	beq.n	8015246 <uxr_write_framed_msg+0x112>
 801523e:	2000      	movs	r0, #0
 8015240:	b003      	add	sp, #12
 8015242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015246:	fa5f f18a 	uxtb.w	r1, sl
 801524a:	f04f 0300 	mov.w	r3, #0
 801524e:	2901      	cmp	r1, #1
 8015250:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015254:	f04f 0200 	mov.w	r2, #0
 8015258:	f200 8090 	bhi.w	801537c <uxr_write_framed_msg+0x248>
 801525c:	1c51      	adds	r1, r2, #1
 801525e:	b2c9      	uxtb	r1, r1
 8015260:	2929      	cmp	r1, #41	; 0x29
 8015262:	d8dc      	bhi.n	801521e <uxr_write_framed_msg+0xea>
 8015264:	18a5      	adds	r5, r4, r2
 8015266:	4421      	add	r1, r4
 8015268:	3202      	adds	r2, #2
 801526a:	f088 0820 	eor.w	r8, r8, #32
 801526e:	4648      	mov	r0, r9
 8015270:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8015274:	b2d2      	uxtb	r2, r2
 8015276:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 801527a:	f04f 0901 	mov.w	r9, #1
 801527e:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8015282:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015286:	2800      	cmp	r0, #0
 8015288:	f040 8085 	bne.w	8015396 <uxr_write_framed_msg+0x262>
 801528c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015290:	e7bc      	b.n	801520c <uxr_write_framed_msg+0xd8>
 8015292:	4611      	mov	r1, r2
 8015294:	f04f 0c03 	mov.w	ip, #3
 8015298:	2204      	movs	r2, #4
 801529a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801529c:	4421      	add	r1, r4
 801529e:	b2dd      	uxtb	r5, r3
 80152a0:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 80152a4:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 80152a8:	44a4      	add	ip, r4
 80152aa:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 80152ae:	f080 0020 	eor.w	r0, r0, #32
 80152b2:	2901      	cmp	r1, #1
 80152b4:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 80152b8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80152bc:	f63f af66 	bhi.w	801518c <uxr_write_framed_msg+0x58>
 80152c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152c2:	18a0      	adds	r0, r4, r2
 80152c4:	f085 0520 	eor.w	r5, r5, #32
 80152c8:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80152cc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80152d0:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 80152d4:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 80152d8:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80152dc:	3202      	adds	r2, #2
 80152de:	2801      	cmp	r0, #1
 80152e0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80152e4:	f63f af60 	bhi.w	80151a8 <uxr_write_framed_msg+0x74>
 80152e8:	1c50      	adds	r0, r2, #1
 80152ea:	18a5      	adds	r5, r4, r2
 80152ec:	fa54 f080 	uxtab	r0, r4, r0
 80152f0:	3202      	adds	r2, #2
 80152f2:	f081 0120 	eor.w	r1, r1, #32
 80152f6:	b2d2      	uxtb	r2, r2
 80152f8:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80152fc:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8015300:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8015304:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015308:	2b00      	cmp	r3, #0
 801530a:	f47f af57 	bne.w	80151bc <uxr_write_framed_msg+0x88>
 801530e:	9301      	str	r3, [sp, #4]
 8015310:	4698      	mov	r8, r3
 8015312:	e779      	b.n	8015208 <uxr_write_framed_msg+0xd4>
 8015314:	2500      	movs	r5, #0
 8015316:	e001      	b.n	801531c <uxr_write_framed_msg+0x1e8>
 8015318:	2800      	cmp	r0, #0
 801531a:	d090      	beq.n	801523e <uxr_write_framed_msg+0x10a>
 801531c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015320:	1b52      	subs	r2, r2, r5
 8015322:	465b      	mov	r3, fp
 8015324:	4421      	add	r1, r4
 8015326:	4638      	mov	r0, r7
 8015328:	47b0      	blx	r6
 801532a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801532e:	4405      	add	r5, r0
 8015330:	4295      	cmp	r5, r2
 8015332:	d3f1      	bcc.n	8015318 <uxr_write_framed_msg+0x1e4>
 8015334:	d183      	bne.n	801523e <uxr_write_framed_msg+0x10a>
 8015336:	f04f 0300 	mov.w	r3, #0
 801533a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801533e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015340:	4543      	cmp	r3, r8
 8015342:	d964      	bls.n	801540e <uxr_write_framed_msg+0x2da>
 8015344:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015348:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801534c:	2901      	cmp	r1, #1
 801534e:	f04f 0200 	mov.w	r2, #0
 8015352:	f63f af3d 	bhi.w	80151d0 <uxr_write_framed_msg+0x9c>
 8015356:	1c51      	adds	r1, r2, #1
 8015358:	b2c9      	uxtb	r1, r1
 801535a:	2929      	cmp	r1, #41	; 0x29
 801535c:	d8da      	bhi.n	8015314 <uxr_write_framed_msg+0x1e0>
 801535e:	18a0      	adds	r0, r4, r2
 8015360:	4421      	add	r1, r4
 8015362:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8015366:	3202      	adds	r2, #2
 8015368:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 801536c:	b2d2      	uxtb	r2, r2
 801536e:	f083 0020 	eor.w	r0, r3, #32
 8015372:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8015376:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801537a:	e733      	b.n	80151e4 <uxr_write_framed_msg+0xb0>
 801537c:	18a1      	adds	r1, r4, r2
 801537e:	3201      	adds	r2, #1
 8015380:	4648      	mov	r0, r9
 8015382:	b2d2      	uxtb	r2, r2
 8015384:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8015388:	f04f 0901 	mov.w	r9, #1
 801538c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015390:	2800      	cmp	r0, #0
 8015392:	f43f af7b 	beq.w	801528c <uxr_write_framed_msg+0x158>
 8015396:	2500      	movs	r5, #0
 8015398:	e002      	b.n	80153a0 <uxr_write_framed_msg+0x26c>
 801539a:	2800      	cmp	r0, #0
 801539c:	f43f af4f 	beq.w	801523e <uxr_write_framed_msg+0x10a>
 80153a0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80153a4:	1b52      	subs	r2, r2, r5
 80153a6:	465b      	mov	r3, fp
 80153a8:	4421      	add	r1, r4
 80153aa:	4638      	mov	r0, r7
 80153ac:	47b0      	blx	r6
 80153ae:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80153b2:	4405      	add	r5, r0
 80153b4:	4295      	cmp	r5, r2
 80153b6:	d3f0      	bcc.n	801539a <uxr_write_framed_msg+0x266>
 80153b8:	f47f af41 	bne.w	801523e <uxr_write_framed_msg+0x10a>
 80153bc:	2300      	movs	r3, #0
 80153be:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80153c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153c4:	b298      	uxth	r0, r3
 80153c6:	b003      	add	sp, #12
 80153c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153cc:	217d      	movs	r1, #125	; 0x7d
 80153ce:	f082 0220 	eor.w	r2, r2, #32
 80153d2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 80153d6:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80153da:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 80153de:	2901      	cmp	r1, #1
 80153e0:	f04f 0203 	mov.w	r2, #3
 80153e4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80153e8:	d804      	bhi.n	80153f4 <uxr_write_framed_msg+0x2c0>
 80153ea:	4611      	mov	r1, r2
 80153ec:	f04f 0c04 	mov.w	ip, #4
 80153f0:	2205      	movs	r2, #5
 80153f2:	e752      	b.n	801529a <uxr_write_framed_msg+0x166>
 80153f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153f6:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80153fa:	b2dd      	uxtb	r5, r3
 80153fc:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8015400:	2204      	movs	r2, #4
 8015402:	2901      	cmp	r1, #1
 8015404:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015408:	f63f aec0 	bhi.w	801518c <uxr_write_framed_msg+0x58>
 801540c:	e758      	b.n	80152c0 <uxr_write_framed_msg+0x18c>
 801540e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015412:	fa5f f889 	uxtb.w	r8, r9
 8015416:	9301      	str	r3, [sp, #4]
 8015418:	2200      	movs	r2, #0
 801541a:	e6f5      	b.n	8015208 <uxr_write_framed_msg+0xd4>
 801541c:	08018518 	.word	0x08018518

08015420 <uxr_framing_read_transport>:
 8015420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015424:	4604      	mov	r4, r0
 8015426:	b083      	sub	sp, #12
 8015428:	461f      	mov	r7, r3
 801542a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801542e:	4689      	mov	r9, r1
 8015430:	4692      	mov	sl, r2
 8015432:	f7f8 fed3 	bl	800e1dc <uxr_millis>
 8015436:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801543a:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801543e:	42b3      	cmp	r3, r6
 8015440:	4680      	mov	r8, r0
 8015442:	d061      	beq.n	8015508 <uxr_framing_read_transport+0xe8>
 8015444:	d81c      	bhi.n	8015480 <uxr_framing_read_transport+0x60>
 8015446:	1e75      	subs	r5, r6, #1
 8015448:	1aed      	subs	r5, r5, r3
 801544a:	b2ed      	uxtb	r5, r5
 801544c:	2600      	movs	r6, #0
 801544e:	455d      	cmp	r5, fp
 8015450:	d81f      	bhi.n	8015492 <uxr_framing_read_transport+0x72>
 8015452:	19ab      	adds	r3, r5, r6
 8015454:	455b      	cmp	r3, fp
 8015456:	bf84      	itt	hi
 8015458:	ebab 0605 	subhi.w	r6, fp, r5
 801545c:	b2f6      	uxtbhi	r6, r6
 801545e:	b9ed      	cbnz	r5, 801549c <uxr_framing_read_transport+0x7c>
 8015460:	f04f 0b00 	mov.w	fp, #0
 8015464:	f7f8 feba 	bl	800e1dc <uxr_millis>
 8015468:	683b      	ldr	r3, [r7, #0]
 801546a:	eba0 0808 	sub.w	r8, r0, r8
 801546e:	eba3 0308 	sub.w	r3, r3, r8
 8015472:	4658      	mov	r0, fp
 8015474:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015478:	603b      	str	r3, [r7, #0]
 801547a:	b003      	add	sp, #12
 801547c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015480:	2e00      	cmp	r6, #0
 8015482:	d049      	beq.n	8015518 <uxr_framing_read_transport+0xf8>
 8015484:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8015488:	b2ed      	uxtb	r5, r5
 801548a:	3e01      	subs	r6, #1
 801548c:	455d      	cmp	r5, fp
 801548e:	b2f6      	uxtb	r6, r6
 8015490:	d9df      	bls.n	8015452 <uxr_framing_read_transport+0x32>
 8015492:	fa5f f58b 	uxtb.w	r5, fp
 8015496:	2600      	movs	r6, #0
 8015498:	2d00      	cmp	r5, #0
 801549a:	d0e1      	beq.n	8015460 <uxr_framing_read_transport+0x40>
 801549c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80154a0:	3102      	adds	r1, #2
 80154a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154a4:	9300      	str	r3, [sp, #0]
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	4421      	add	r1, r4
 80154aa:	462a      	mov	r2, r5
 80154ac:	4650      	mov	r0, sl
 80154ae:	47c8      	blx	r9
 80154b0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80154b4:	4a1a      	ldr	r2, [pc, #104]	; (8015520 <uxr_framing_read_transport+0x100>)
 80154b6:	4403      	add	r3, r0
 80154b8:	0859      	lsrs	r1, r3, #1
 80154ba:	fba2 2101 	umull	r2, r1, r2, r1
 80154be:	0889      	lsrs	r1, r1, #2
 80154c0:	222a      	movs	r2, #42	; 0x2a
 80154c2:	fb02 3111 	mls	r1, r2, r1, r3
 80154c6:	4683      	mov	fp, r0
 80154c8:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80154cc:	2800      	cmp	r0, #0
 80154ce:	d0c7      	beq.n	8015460 <uxr_framing_read_transport+0x40>
 80154d0:	42a8      	cmp	r0, r5
 80154d2:	d1c7      	bne.n	8015464 <uxr_framing_read_transport+0x44>
 80154d4:	2e00      	cmp	r6, #0
 80154d6:	d0c5      	beq.n	8015464 <uxr_framing_read_transport+0x44>
 80154d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154da:	9300      	str	r3, [sp, #0]
 80154dc:	3102      	adds	r1, #2
 80154de:	4632      	mov	r2, r6
 80154e0:	4421      	add	r1, r4
 80154e2:	2300      	movs	r3, #0
 80154e4:	4650      	mov	r0, sl
 80154e6:	47c8      	blx	r9
 80154e8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80154ec:	4a0c      	ldr	r2, [pc, #48]	; (8015520 <uxr_framing_read_transport+0x100>)
 80154ee:	180b      	adds	r3, r1, r0
 80154f0:	0859      	lsrs	r1, r3, #1
 80154f2:	fba2 1201 	umull	r1, r2, r2, r1
 80154f6:	0892      	lsrs	r2, r2, #2
 80154f8:	212a      	movs	r1, #42	; 0x2a
 80154fa:	fb01 3312 	mls	r3, r1, r2, r3
 80154fe:	eb00 0b05 	add.w	fp, r0, r5
 8015502:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8015506:	e7ad      	b.n	8015464 <uxr_framing_read_transport+0x44>
 8015508:	2600      	movs	r6, #0
 801550a:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 801550e:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8015510:	d9bf      	bls.n	8015492 <uxr_framing_read_transport+0x72>
 8015512:	2102      	movs	r1, #2
 8015514:	2529      	movs	r5, #41	; 0x29
 8015516:	e7c4      	b.n	80154a2 <uxr_framing_read_transport+0x82>
 8015518:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 801551c:	b2ed      	uxtb	r5, r5
 801551e:	e796      	b.n	801544e <uxr_framing_read_transport+0x2e>
 8015520:	30c30c31 	.word	0x30c30c31

08015524 <uxr_read_framed_msg>:
 8015524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015528:	461e      	mov	r6, r3
 801552a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801552e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8015532:	429d      	cmp	r5, r3
 8015534:	b083      	sub	sp, #12
 8015536:	4604      	mov	r4, r0
 8015538:	4688      	mov	r8, r1
 801553a:	4691      	mov	r9, r2
 801553c:	f000 8188 	beq.w	8015850 <uxr_read_framed_msg+0x32c>
 8015540:	7823      	ldrb	r3, [r4, #0]
 8015542:	4dc1      	ldr	r5, [pc, #772]	; (8015848 <uxr_read_framed_msg+0x324>)
 8015544:	4fc1      	ldr	r7, [pc, #772]	; (801584c <uxr_read_framed_msg+0x328>)
 8015546:	2b07      	cmp	r3, #7
 8015548:	d8fd      	bhi.n	8015546 <uxr_read_framed_msg+0x22>
 801554a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801554e:	0115      	.short	0x0115
 8015550:	00d600f6 	.word	0x00d600f6
 8015554:	009000b9 	.word	0x009000b9
 8015558:	0030004d 	.word	0x0030004d
 801555c:	0008      	.short	0x0008
 801555e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015562:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015566:	4299      	cmp	r1, r3
 8015568:	f000 814a 	beq.w	8015800 <uxr_read_framed_msg+0x2dc>
 801556c:	18e2      	adds	r2, r4, r3
 801556e:	7892      	ldrb	r2, [r2, #2]
 8015570:	2a7d      	cmp	r2, #125	; 0x7d
 8015572:	f000 8199 	beq.w	80158a8 <uxr_read_framed_msg+0x384>
 8015576:	3301      	adds	r3, #1
 8015578:	0858      	lsrs	r0, r3, #1
 801557a:	fba5 1000 	umull	r1, r0, r5, r0
 801557e:	0880      	lsrs	r0, r0, #2
 8015580:	212a      	movs	r1, #42	; 0x2a
 8015582:	fb01 3310 	mls	r3, r1, r0, r3
 8015586:	2a7e      	cmp	r2, #126	; 0x7e
 8015588:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801558c:	f000 8252 	beq.w	8015a34 <uxr_read_framed_msg+0x510>
 8015590:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015592:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8015594:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015598:	b29b      	uxth	r3, r3
 801559a:	2200      	movs	r2, #0
 801559c:	4299      	cmp	r1, r3
 801559e:	86a3      	strh	r3, [r4, #52]	; 0x34
 80155a0:	7022      	strb	r2, [r4, #0]
 80155a2:	f000 8179 	beq.w	8015898 <uxr_read_framed_msg+0x374>
 80155a6:	2000      	movs	r0, #0
 80155a8:	b003      	add	sp, #12
 80155aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ae:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80155b2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80155b6:	4299      	cmp	r1, r3
 80155b8:	f000 8131 	beq.w	801581e <uxr_read_framed_msg+0x2fa>
 80155bc:	18e2      	adds	r2, r4, r3
 80155be:	7890      	ldrb	r0, [r2, #2]
 80155c0:	287d      	cmp	r0, #125	; 0x7d
 80155c2:	f000 8190 	beq.w	80158e6 <uxr_read_framed_msg+0x3c2>
 80155c6:	3301      	adds	r3, #1
 80155c8:	085a      	lsrs	r2, r3, #1
 80155ca:	fba5 1202 	umull	r1, r2, r5, r2
 80155ce:	0892      	lsrs	r2, r2, #2
 80155d0:	212a      	movs	r1, #42	; 0x2a
 80155d2:	fb01 3312 	mls	r3, r1, r2, r3
 80155d6:	287e      	cmp	r0, #126	; 0x7e
 80155d8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80155dc:	f000 821a 	beq.w	8015a14 <uxr_read_framed_msg+0x4f0>
 80155e0:	2307      	movs	r3, #7
 80155e2:	86a0      	strh	r0, [r4, #52]	; 0x34
 80155e4:	7023      	strb	r3, [r4, #0]
 80155e6:	e7ae      	b.n	8015546 <uxr_read_framed_msg+0x22>
 80155e8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80155ea:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80155ee:	459e      	cmp	lr, r3
 80155f0:	d938      	bls.n	8015664 <uxr_read_framed_msg+0x140>
 80155f2:	ee07 8a90 	vmov	s15, r8
 80155f6:	212a      	movs	r1, #42	; 0x2a
 80155f8:	e020      	b.n	801563c <uxr_read_framed_msg+0x118>
 80155fa:	f89b c002 	ldrb.w	ip, [fp, #2]
 80155fe:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8015602:	f000 80d4 	beq.w	80157ae <uxr_read_framed_msg+0x28a>
 8015606:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801560a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801560e:	f000 8219 	beq.w	8015a44 <uxr_read_framed_msg+0x520>
 8015612:	f806 c003 	strb.w	ip, [r6, r3]
 8015616:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 801561a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801561c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015620:	ea8a 000c 	eor.w	r0, sl, ip
 8015624:	b2c0      	uxtb	r0, r0
 8015626:	3301      	adds	r3, #1
 8015628:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801562c:	b29b      	uxth	r3, r3
 801562e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8015632:	4573      	cmp	r3, lr
 8015634:	8663      	strh	r3, [r4, #50]	; 0x32
 8015636:	86e2      	strh	r2, [r4, #54]	; 0x36
 8015638:	f080 8120 	bcs.w	801587c <uxr_read_framed_msg+0x358>
 801563c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8015640:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8015644:	f100 0c01 	add.w	ip, r0, #1
 8015648:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801564c:	fba5 8202 	umull	r8, r2, r5, r2
 8015650:	0892      	lsrs	r2, r2, #2
 8015652:	4582      	cmp	sl, r0
 8015654:	eb04 0b00 	add.w	fp, r4, r0
 8015658:	fb01 c212 	mls	r2, r1, r2, ip
 801565c:	d1cd      	bne.n	80155fa <uxr_read_framed_msg+0xd6>
 801565e:	ee17 8a90 	vmov	r8, s15
 8015662:	459e      	cmp	lr, r3
 8015664:	f040 8111 	bne.w	801588a <uxr_read_framed_msg+0x366>
 8015668:	2306      	movs	r3, #6
 801566a:	7023      	strb	r3, [r4, #0]
 801566c:	e76b      	b.n	8015546 <uxr_read_framed_msg+0x22>
 801566e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015672:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015676:	4298      	cmp	r0, r3
 8015678:	f000 80c2 	beq.w	8015800 <uxr_read_framed_msg+0x2dc>
 801567c:	18e2      	adds	r2, r4, r3
 801567e:	7891      	ldrb	r1, [r2, #2]
 8015680:	297d      	cmp	r1, #125	; 0x7d
 8015682:	f000 814c 	beq.w	801591e <uxr_read_framed_msg+0x3fa>
 8015686:	3301      	adds	r3, #1
 8015688:	085a      	lsrs	r2, r3, #1
 801568a:	fba5 0202 	umull	r0, r2, r5, r2
 801568e:	0892      	lsrs	r2, r2, #2
 8015690:	202a      	movs	r0, #42	; 0x2a
 8015692:	fb00 3312 	mls	r3, r0, r2, r3
 8015696:	297e      	cmp	r1, #126	; 0x7e
 8015698:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801569c:	f000 81ca 	beq.w	8015a34 <uxr_read_framed_msg+0x510>
 80156a0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80156a2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80156a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80156a8:	b29b      	uxth	r3, r3
 80156aa:	2000      	movs	r0, #0
 80156ac:	428b      	cmp	r3, r1
 80156ae:	8623      	strh	r3, [r4, #48]	; 0x30
 80156b0:	8660      	strh	r0, [r4, #50]	; 0x32
 80156b2:	86e0      	strh	r0, [r4, #54]	; 0x36
 80156b4:	f240 80df 	bls.w	8015876 <uxr_read_framed_msg+0x352>
 80156b8:	7020      	strb	r0, [r4, #0]
 80156ba:	b003      	add	sp, #12
 80156bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156c0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80156c4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80156c8:	4299      	cmp	r1, r3
 80156ca:	f000 80a8 	beq.w	801581e <uxr_read_framed_msg+0x2fa>
 80156ce:	18e2      	adds	r2, r4, r3
 80156d0:	7890      	ldrb	r0, [r2, #2]
 80156d2:	287d      	cmp	r0, #125	; 0x7d
 80156d4:	f000 8164 	beq.w	80159a0 <uxr_read_framed_msg+0x47c>
 80156d8:	3301      	adds	r3, #1
 80156da:	085a      	lsrs	r2, r3, #1
 80156dc:	fba5 1202 	umull	r1, r2, r5, r2
 80156e0:	0892      	lsrs	r2, r2, #2
 80156e2:	212a      	movs	r1, #42	; 0x2a
 80156e4:	fb01 3312 	mls	r3, r1, r2, r3
 80156e8:	287e      	cmp	r0, #126	; 0x7e
 80156ea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80156ee:	f000 8191 	beq.w	8015a14 <uxr_read_framed_msg+0x4f0>
 80156f2:	2304      	movs	r3, #4
 80156f4:	8620      	strh	r0, [r4, #48]	; 0x30
 80156f6:	7023      	strb	r3, [r4, #0]
 80156f8:	e725      	b.n	8015546 <uxr_read_framed_msg+0x22>
 80156fa:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80156fe:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015702:	4290      	cmp	r0, r2
 8015704:	f000 80b3 	beq.w	801586e <uxr_read_framed_msg+0x34a>
 8015708:	18a3      	adds	r3, r4, r2
 801570a:	7899      	ldrb	r1, [r3, #2]
 801570c:	297d      	cmp	r1, #125	; 0x7d
 801570e:	f000 8164 	beq.w	80159da <uxr_read_framed_msg+0x4b6>
 8015712:	3201      	adds	r2, #1
 8015714:	0850      	lsrs	r0, r2, #1
 8015716:	fba5 3000 	umull	r3, r0, r5, r0
 801571a:	0880      	lsrs	r0, r0, #2
 801571c:	232a      	movs	r3, #42	; 0x2a
 801571e:	fb03 2210 	mls	r2, r3, r0, r2
 8015722:	297e      	cmp	r1, #126	; 0x7e
 8015724:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015728:	f000 8188 	beq.w	8015a3c <uxr_read_framed_msg+0x518>
 801572c:	7863      	ldrb	r3, [r4, #1]
 801572e:	428b      	cmp	r3, r1
 8015730:	bf0c      	ite	eq
 8015732:	2303      	moveq	r3, #3
 8015734:	2300      	movne	r3, #0
 8015736:	7023      	strb	r3, [r4, #0]
 8015738:	e705      	b.n	8015546 <uxr_read_framed_msg+0x22>
 801573a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801573e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015742:	2200      	movs	r2, #0
 8015744:	4299      	cmp	r1, r3
 8015746:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801574a:	d06c      	beq.n	8015826 <uxr_read_framed_msg+0x302>
 801574c:	18e2      	adds	r2, r4, r3
 801574e:	7890      	ldrb	r0, [r2, #2]
 8015750:	287d      	cmp	r0, #125	; 0x7d
 8015752:	f000 8101 	beq.w	8015958 <uxr_read_framed_msg+0x434>
 8015756:	3301      	adds	r3, #1
 8015758:	085a      	lsrs	r2, r3, #1
 801575a:	fba5 1202 	umull	r1, r2, r5, r2
 801575e:	0892      	lsrs	r2, r2, #2
 8015760:	212a      	movs	r1, #42	; 0x2a
 8015762:	fb01 3312 	mls	r3, r1, r2, r3
 8015766:	287e      	cmp	r0, #126	; 0x7e
 8015768:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801576c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015770:	d059      	beq.n	8015826 <uxr_read_framed_msg+0x302>
 8015772:	2302      	movs	r3, #2
 8015774:	7023      	strb	r3, [r4, #0]
 8015776:	e6e6      	b.n	8015546 <uxr_read_framed_msg+0x22>
 8015778:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801577c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015780:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8015784:	1c51      	adds	r1, r2, #1
 8015786:	084b      	lsrs	r3, r1, #1
 8015788:	fba5 c303 	umull	ip, r3, r5, r3
 801578c:	089b      	lsrs	r3, r3, #2
 801578e:	fb0e 1313 	mls	r3, lr, r3, r1
 8015792:	4592      	cmp	sl, r2
 8015794:	eb04 0002 	add.w	r0, r4, r2
 8015798:	b2da      	uxtb	r2, r3
 801579a:	f43f af04 	beq.w	80155a6 <uxr_read_framed_msg+0x82>
 801579e:	7883      	ldrb	r3, [r0, #2]
 80157a0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80157a4:	2b7e      	cmp	r3, #126	; 0x7e
 80157a6:	d1ed      	bne.n	8015784 <uxr_read_framed_msg+0x260>
 80157a8:	2301      	movs	r3, #1
 80157aa:	7023      	strb	r3, [r4, #0]
 80157ac:	e6cb      	b.n	8015546 <uxr_read_framed_msg+0x22>
 80157ae:	f100 0c01 	add.w	ip, r0, #1
 80157b2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80157b6:	fba5 8202 	umull	r8, r2, r5, r2
 80157ba:	0892      	lsrs	r2, r2, #2
 80157bc:	fb01 c212 	mls	r2, r1, r2, ip
 80157c0:	eb04 0c02 	add.w	ip, r4, r2
 80157c4:	b2d2      	uxtb	r2, r2
 80157c6:	4592      	cmp	sl, r2
 80157c8:	f100 0002 	add.w	r0, r0, #2
 80157cc:	f43f af47 	beq.w	801565e <uxr_read_framed_msg+0x13a>
 80157d0:	0842      	lsrs	r2, r0, #1
 80157d2:	f89c a002 	ldrb.w	sl, [ip, #2]
 80157d6:	fba5 8202 	umull	r8, r2, r5, r2
 80157da:	0892      	lsrs	r2, r2, #2
 80157dc:	fb01 0012 	mls	r0, r1, r2, r0
 80157e0:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 80157e4:	f08a 0c20 	eor.w	ip, sl, #32
 80157e8:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 80157ec:	f47f af11 	bne.w	8015612 <uxr_read_framed_msg+0xee>
 80157f0:	459e      	cmp	lr, r3
 80157f2:	ee17 8a90 	vmov	r8, s15
 80157f6:	f43f af37 	beq.w	8015668 <uxr_read_framed_msg+0x144>
 80157fa:	2301      	movs	r3, #1
 80157fc:	7023      	strb	r3, [r4, #0]
 80157fe:	e6a2      	b.n	8015546 <uxr_read_framed_msg+0x22>
 8015800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015802:	9300      	str	r3, [sp, #0]
 8015804:	2301      	movs	r3, #1
 8015806:	9301      	str	r3, [sp, #4]
 8015808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801580a:	464a      	mov	r2, r9
 801580c:	4641      	mov	r1, r8
 801580e:	4620      	mov	r0, r4
 8015810:	f7ff fe06 	bl	8015420 <uxr_framing_read_transport>
 8015814:	2800      	cmp	r0, #0
 8015816:	f43f aec6 	beq.w	80155a6 <uxr_read_framed_msg+0x82>
 801581a:	7823      	ldrb	r3, [r4, #0]
 801581c:	e693      	b.n	8015546 <uxr_read_framed_msg+0x22>
 801581e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015820:	9300      	str	r3, [sp, #0]
 8015822:	2302      	movs	r3, #2
 8015824:	e7ef      	b.n	8015806 <uxr_read_framed_msg+0x2e2>
 8015826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015828:	9300      	str	r3, [sp, #0]
 801582a:	2304      	movs	r3, #4
 801582c:	9301      	str	r3, [sp, #4]
 801582e:	464a      	mov	r2, r9
 8015830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015832:	4641      	mov	r1, r8
 8015834:	4620      	mov	r0, r4
 8015836:	f7ff fdf3 	bl	8015420 <uxr_framing_read_transport>
 801583a:	2800      	cmp	r0, #0
 801583c:	d1ed      	bne.n	801581a <uxr_read_framed_msg+0x2f6>
 801583e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015842:	2b7e      	cmp	r3, #126	; 0x7e
 8015844:	d0e9      	beq.n	801581a <uxr_read_framed_msg+0x2f6>
 8015846:	e6ae      	b.n	80155a6 <uxr_read_framed_msg+0x82>
 8015848:	30c30c31 	.word	0x30c30c31
 801584c:	08018518 	.word	0x08018518
 8015850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015852:	9300      	str	r3, [sp, #0]
 8015854:	2305      	movs	r3, #5
 8015856:	9301      	str	r3, [sp, #4]
 8015858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801585a:	f7ff fde1 	bl	8015420 <uxr_framing_read_transport>
 801585e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015862:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015866:	429a      	cmp	r2, r3
 8015868:	f43f ae9d 	beq.w	80155a6 <uxr_read_framed_msg+0x82>
 801586c:	e668      	b.n	8015540 <uxr_read_framed_msg+0x1c>
 801586e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015870:	9300      	str	r3, [sp, #0]
 8015872:	2303      	movs	r3, #3
 8015874:	e7c7      	b.n	8015806 <uxr_read_framed_msg+0x2e2>
 8015876:	2305      	movs	r3, #5
 8015878:	7023      	strb	r3, [r4, #0]
 801587a:	e664      	b.n	8015546 <uxr_read_framed_msg+0x22>
 801587c:	ee17 8a90 	vmov	r8, s15
 8015880:	f43f aef2 	beq.w	8015668 <uxr_read_framed_msg+0x144>
 8015884:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015888:	d08e      	beq.n	80157a8 <uxr_read_framed_msg+0x284>
 801588a:	ebae 0303 	sub.w	r3, lr, r3
 801588e:	3302      	adds	r3, #2
 8015890:	9301      	str	r3, [sp, #4]
 8015892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015894:	9300      	str	r3, [sp, #0]
 8015896:	e7b7      	b.n	8015808 <uxr_read_framed_msg+0x2e4>
 8015898:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801589a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801589e:	7013      	strb	r3, [r2, #0]
 80158a0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80158a2:	b003      	add	sp, #12
 80158a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158a8:	f103 0c01 	add.w	ip, r3, #1
 80158ac:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80158b0:	fba5 0202 	umull	r0, r2, r5, r2
 80158b4:	0892      	lsrs	r2, r2, #2
 80158b6:	202a      	movs	r0, #42	; 0x2a
 80158b8:	fb00 c212 	mls	r2, r0, r2, ip
 80158bc:	fa5f fc82 	uxtb.w	ip, r2
 80158c0:	4561      	cmp	r1, ip
 80158c2:	d09d      	beq.n	8015800 <uxr_read_framed_msg+0x2dc>
 80158c4:	3302      	adds	r3, #2
 80158c6:	4422      	add	r2, r4
 80158c8:	0859      	lsrs	r1, r3, #1
 80158ca:	7892      	ldrb	r2, [r2, #2]
 80158cc:	fba5 c101 	umull	ip, r1, r5, r1
 80158d0:	0889      	lsrs	r1, r1, #2
 80158d2:	fb00 3311 	mls	r3, r0, r1, r3
 80158d6:	2a7e      	cmp	r2, #126	; 0x7e
 80158d8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80158dc:	f000 80aa 	beq.w	8015a34 <uxr_read_framed_msg+0x510>
 80158e0:	f082 0220 	eor.w	r2, r2, #32
 80158e4:	e654      	b.n	8015590 <uxr_read_framed_msg+0x6c>
 80158e6:	1c58      	adds	r0, r3, #1
 80158e8:	0842      	lsrs	r2, r0, #1
 80158ea:	fba5 c202 	umull	ip, r2, r5, r2
 80158ee:	0892      	lsrs	r2, r2, #2
 80158f0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80158f4:	fb0c 0212 	mls	r2, ip, r2, r0
 80158f8:	b2d0      	uxtb	r0, r2
 80158fa:	4281      	cmp	r1, r0
 80158fc:	d08f      	beq.n	801581e <uxr_read_framed_msg+0x2fa>
 80158fe:	4422      	add	r2, r4
 8015900:	3302      	adds	r3, #2
 8015902:	7890      	ldrb	r0, [r2, #2]
 8015904:	085a      	lsrs	r2, r3, #1
 8015906:	fba5 1202 	umull	r1, r2, r5, r2
 801590a:	0892      	lsrs	r2, r2, #2
 801590c:	fb0c 3312 	mls	r3, ip, r2, r3
 8015910:	287e      	cmp	r0, #126	; 0x7e
 8015912:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015916:	d07d      	beq.n	8015a14 <uxr_read_framed_msg+0x4f0>
 8015918:	f080 0020 	eor.w	r0, r0, #32
 801591c:	e660      	b.n	80155e0 <uxr_read_framed_msg+0xbc>
 801591e:	1c59      	adds	r1, r3, #1
 8015920:	084a      	lsrs	r2, r1, #1
 8015922:	fba5 c202 	umull	ip, r2, r5, r2
 8015926:	0892      	lsrs	r2, r2, #2
 8015928:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801592c:	fb0c 1212 	mls	r2, ip, r2, r1
 8015930:	b2d1      	uxtb	r1, r2
 8015932:	4288      	cmp	r0, r1
 8015934:	f43f af64 	beq.w	8015800 <uxr_read_framed_msg+0x2dc>
 8015938:	4422      	add	r2, r4
 801593a:	3302      	adds	r3, #2
 801593c:	7891      	ldrb	r1, [r2, #2]
 801593e:	085a      	lsrs	r2, r3, #1
 8015940:	fba5 0202 	umull	r0, r2, r5, r2
 8015944:	0892      	lsrs	r2, r2, #2
 8015946:	fb0c 3312 	mls	r3, ip, r2, r3
 801594a:	297e      	cmp	r1, #126	; 0x7e
 801594c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015950:	d070      	beq.n	8015a34 <uxr_read_framed_msg+0x510>
 8015952:	f081 0120 	eor.w	r1, r1, #32
 8015956:	e6a3      	b.n	80156a0 <uxr_read_framed_msg+0x17c>
 8015958:	f103 0c01 	add.w	ip, r3, #1
 801595c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015960:	fba5 0202 	umull	r0, r2, r5, r2
 8015964:	0892      	lsrs	r2, r2, #2
 8015966:	202a      	movs	r0, #42	; 0x2a
 8015968:	fb00 c212 	mls	r2, r0, r2, ip
 801596c:	fa5f fc82 	uxtb.w	ip, r2
 8015970:	4561      	cmp	r1, ip
 8015972:	f43f af58 	beq.w	8015826 <uxr_read_framed_msg+0x302>
 8015976:	4422      	add	r2, r4
 8015978:	3302      	adds	r3, #2
 801597a:	7891      	ldrb	r1, [r2, #2]
 801597c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015980:	085a      	lsrs	r2, r3, #1
 8015982:	fba5 c202 	umull	ip, r2, r5, r2
 8015986:	0892      	lsrs	r2, r2, #2
 8015988:	fb00 3312 	mls	r3, r0, r2, r3
 801598c:	297e      	cmp	r1, #126	; 0x7e
 801598e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015992:	f43f af48 	beq.w	8015826 <uxr_read_framed_msg+0x302>
 8015996:	f081 0120 	eor.w	r1, r1, #32
 801599a:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801599e:	e6e8      	b.n	8015772 <uxr_read_framed_msg+0x24e>
 80159a0:	1c58      	adds	r0, r3, #1
 80159a2:	0842      	lsrs	r2, r0, #1
 80159a4:	fba5 c202 	umull	ip, r2, r5, r2
 80159a8:	0892      	lsrs	r2, r2, #2
 80159aa:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80159ae:	fb0c 0212 	mls	r2, ip, r2, r0
 80159b2:	b2d0      	uxtb	r0, r2
 80159b4:	4281      	cmp	r1, r0
 80159b6:	f43f af32 	beq.w	801581e <uxr_read_framed_msg+0x2fa>
 80159ba:	4422      	add	r2, r4
 80159bc:	3302      	adds	r3, #2
 80159be:	7890      	ldrb	r0, [r2, #2]
 80159c0:	085a      	lsrs	r2, r3, #1
 80159c2:	fba5 1202 	umull	r1, r2, r5, r2
 80159c6:	0892      	lsrs	r2, r2, #2
 80159c8:	fb0c 3312 	mls	r3, ip, r2, r3
 80159cc:	287e      	cmp	r0, #126	; 0x7e
 80159ce:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80159d2:	d01f      	beq.n	8015a14 <uxr_read_framed_msg+0x4f0>
 80159d4:	f080 0020 	eor.w	r0, r0, #32
 80159d8:	e68b      	b.n	80156f2 <uxr_read_framed_msg+0x1ce>
 80159da:	1c51      	adds	r1, r2, #1
 80159dc:	084b      	lsrs	r3, r1, #1
 80159de:	fba5 c303 	umull	ip, r3, r5, r3
 80159e2:	089b      	lsrs	r3, r3, #2
 80159e4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80159e8:	fb0c 1313 	mls	r3, ip, r3, r1
 80159ec:	b2d9      	uxtb	r1, r3
 80159ee:	4288      	cmp	r0, r1
 80159f0:	f43f af3d 	beq.w	801586e <uxr_read_framed_msg+0x34a>
 80159f4:	3202      	adds	r2, #2
 80159f6:	4423      	add	r3, r4
 80159f8:	0850      	lsrs	r0, r2, #1
 80159fa:	789b      	ldrb	r3, [r3, #2]
 80159fc:	fba5 1000 	umull	r1, r0, r5, r0
 8015a00:	0880      	lsrs	r0, r0, #2
 8015a02:	fb0c 2210 	mls	r2, ip, r0, r2
 8015a06:	2b7e      	cmp	r3, #126	; 0x7e
 8015a08:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015a0c:	d016      	beq.n	8015a3c <uxr_read_framed_msg+0x518>
 8015a0e:	f083 0120 	eor.w	r1, r3, #32
 8015a12:	e68b      	b.n	801572c <uxr_read_framed_msg+0x208>
 8015a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a16:	9300      	str	r3, [sp, #0]
 8015a18:	2302      	movs	r3, #2
 8015a1a:	9301      	str	r3, [sp, #4]
 8015a1c:	464a      	mov	r2, r9
 8015a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a20:	4641      	mov	r1, r8
 8015a22:	4620      	mov	r0, r4
 8015a24:	f7ff fcfc 	bl	8015420 <uxr_framing_read_transport>
 8015a28:	2800      	cmp	r0, #0
 8015a2a:	f47f aef6 	bne.w	801581a <uxr_read_framed_msg+0x2f6>
 8015a2e:	2301      	movs	r3, #1
 8015a30:	7023      	strb	r3, [r4, #0]
 8015a32:	e588      	b.n	8015546 <uxr_read_framed_msg+0x22>
 8015a34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a36:	9300      	str	r3, [sp, #0]
 8015a38:	2301      	movs	r3, #1
 8015a3a:	e7ee      	b.n	8015a1a <uxr_read_framed_msg+0x4f6>
 8015a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a3e:	9300      	str	r3, [sp, #0]
 8015a40:	2303      	movs	r3, #3
 8015a42:	e7ea      	b.n	8015a1a <uxr_read_framed_msg+0x4f6>
 8015a44:	ee17 8a90 	vmov	r8, s15
 8015a48:	e6ae      	b.n	80157a8 <uxr_read_framed_msg+0x284>
 8015a4a:	bf00      	nop

08015a4c <rcl_get_default_domain_id>:
 8015a4c:	b530      	push	{r4, r5, lr}
 8015a4e:	b083      	sub	sp, #12
 8015a50:	2300      	movs	r3, #0
 8015a52:	9300      	str	r3, [sp, #0]
 8015a54:	b1d0      	cbz	r0, 8015a8c <rcl_get_default_domain_id+0x40>
 8015a56:	4604      	mov	r4, r0
 8015a58:	4669      	mov	r1, sp
 8015a5a:	4815      	ldr	r0, [pc, #84]	; (8015ab0 <rcl_get_default_domain_id+0x64>)
 8015a5c:	f7fc fc2c 	bl	80122b8 <rcutils_get_env>
 8015a60:	4602      	mov	r2, r0
 8015a62:	b110      	cbz	r0, 8015a6a <rcl_get_default_domain_id+0x1e>
 8015a64:	2001      	movs	r0, #1
 8015a66:	b003      	add	sp, #12
 8015a68:	bd30      	pop	{r4, r5, pc}
 8015a6a:	9b00      	ldr	r3, [sp, #0]
 8015a6c:	b18b      	cbz	r3, 8015a92 <rcl_get_default_domain_id+0x46>
 8015a6e:	7818      	ldrb	r0, [r3, #0]
 8015a70:	2800      	cmp	r0, #0
 8015a72:	d0f8      	beq.n	8015a66 <rcl_get_default_domain_id+0x1a>
 8015a74:	a901      	add	r1, sp, #4
 8015a76:	4618      	mov	r0, r3
 8015a78:	9201      	str	r2, [sp, #4]
 8015a7a:	f000 fe73 	bl	8016764 <strtoul>
 8015a7e:	4605      	mov	r5, r0
 8015a80:	b150      	cbz	r0, 8015a98 <rcl_get_default_domain_id+0x4c>
 8015a82:	1c43      	adds	r3, r0, #1
 8015a84:	d00d      	beq.n	8015aa2 <rcl_get_default_domain_id+0x56>
 8015a86:	6025      	str	r5, [r4, #0]
 8015a88:	2000      	movs	r0, #0
 8015a8a:	e7ec      	b.n	8015a66 <rcl_get_default_domain_id+0x1a>
 8015a8c:	200b      	movs	r0, #11
 8015a8e:	b003      	add	sp, #12
 8015a90:	bd30      	pop	{r4, r5, pc}
 8015a92:	4618      	mov	r0, r3
 8015a94:	b003      	add	sp, #12
 8015a96:	bd30      	pop	{r4, r5, pc}
 8015a98:	9b01      	ldr	r3, [sp, #4]
 8015a9a:	781b      	ldrb	r3, [r3, #0]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d0f2      	beq.n	8015a86 <rcl_get_default_domain_id+0x3a>
 8015aa0:	e7e0      	b.n	8015a64 <rcl_get_default_domain_id+0x18>
 8015aa2:	f001 f8ab 	bl	8016bfc <__errno>
 8015aa6:	6803      	ldr	r3, [r0, #0]
 8015aa8:	2b22      	cmp	r3, #34	; 0x22
 8015aaa:	d1ec      	bne.n	8015a86 <rcl_get_default_domain_id+0x3a>
 8015aac:	e7da      	b.n	8015a64 <rcl_get_default_domain_id+0x18>
 8015aae:	bf00      	nop
 8015ab0:	08018718 	.word	0x08018718

08015ab4 <rcl_expand_topic_name>:
 8015ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ab8:	b08b      	sub	sp, #44	; 0x2c
 8015aba:	9306      	str	r3, [sp, #24]
 8015abc:	2800      	cmp	r0, #0
 8015abe:	f000 80ad 	beq.w	8015c1c <rcl_expand_topic_name+0x168>
 8015ac2:	460e      	mov	r6, r1
 8015ac4:	2900      	cmp	r1, #0
 8015ac6:	f000 80a9 	beq.w	8015c1c <rcl_expand_topic_name+0x168>
 8015aca:	4617      	mov	r7, r2
 8015acc:	2a00      	cmp	r2, #0
 8015ace:	f000 80a5 	beq.w	8015c1c <rcl_expand_topic_name+0x168>
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	f000 80a2 	beq.w	8015c1c <rcl_expand_topic_name+0x168>
 8015ad8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	f000 809e 	beq.w	8015c1c <rcl_expand_topic_name+0x168>
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	a909      	add	r1, sp, #36	; 0x24
 8015ae4:	4680      	mov	r8, r0
 8015ae6:	f000 f9fb 	bl	8015ee0 <rcl_validate_topic_name>
 8015aea:	4604      	mov	r4, r0
 8015aec:	2800      	cmp	r0, #0
 8015aee:	f040 8096 	bne.w	8015c1e <rcl_expand_topic_name+0x16a>
 8015af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	f040 809a 	bne.w	8015c2e <rcl_expand_topic_name+0x17a>
 8015afa:	4602      	mov	r2, r0
 8015afc:	a909      	add	r1, sp, #36	; 0x24
 8015afe:	4630      	mov	r0, r6
 8015b00:	f7fd f838 	bl	8012b74 <rmw_validate_node_name>
 8015b04:	2800      	cmp	r0, #0
 8015b06:	f040 808e 	bne.w	8015c26 <rcl_expand_topic_name+0x172>
 8015b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b0c:	2a00      	cmp	r2, #0
 8015b0e:	f040 8093 	bne.w	8015c38 <rcl_expand_topic_name+0x184>
 8015b12:	a909      	add	r1, sp, #36	; 0x24
 8015b14:	4638      	mov	r0, r7
 8015b16:	f7fd f80f 	bl	8012b38 <rmw_validate_namespace>
 8015b1a:	2800      	cmp	r0, #0
 8015b1c:	f040 8083 	bne.w	8015c26 <rcl_expand_topic_name+0x172>
 8015b20:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015b22:	2c00      	cmp	r4, #0
 8015b24:	f040 80ed 	bne.w	8015d02 <rcl_expand_topic_name+0x24e>
 8015b28:	217b      	movs	r1, #123	; 0x7b
 8015b2a:	4640      	mov	r0, r8
 8015b2c:	f000 ffda 	bl	8016ae4 <strchr>
 8015b30:	f898 3000 	ldrb.w	r3, [r8]
 8015b34:	2b2f      	cmp	r3, #47	; 0x2f
 8015b36:	4605      	mov	r5, r0
 8015b38:	f000 809e 	beq.w	8015c78 <rcl_expand_topic_name+0x1c4>
 8015b3c:	2b7e      	cmp	r3, #126	; 0x7e
 8015b3e:	f040 80a2 	bne.w	8015c86 <rcl_expand_topic_name+0x1d2>
 8015b42:	4638      	mov	r0, r7
 8015b44:	f7ea fb56 	bl	80001f4 <strlen>
 8015b48:	4a82      	ldr	r2, [pc, #520]	; (8015d54 <rcl_expand_topic_name+0x2a0>)
 8015b4a:	4b83      	ldr	r3, [pc, #524]	; (8015d58 <rcl_expand_topic_name+0x2a4>)
 8015b4c:	2801      	cmp	r0, #1
 8015b4e:	bf18      	it	ne
 8015b50:	4613      	movne	r3, r2
 8015b52:	9302      	str	r3, [sp, #8]
 8015b54:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015b56:	9300      	str	r3, [sp, #0]
 8015b58:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8015b5c:	f108 0301 	add.w	r3, r8, #1
 8015b60:	9305      	str	r3, [sp, #20]
 8015b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015b66:	9301      	str	r3, [sp, #4]
 8015b68:	ab14      	add	r3, sp, #80	; 0x50
 8015b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015b6c:	f7fc fbcc 	bl	8012308 <rcutils_format_string_limit>
 8015b70:	4682      	mov	sl, r0
 8015b72:	2800      	cmp	r0, #0
 8015b74:	f000 80c7 	beq.w	8015d06 <rcl_expand_topic_name+0x252>
 8015b78:	2d00      	cmp	r5, #0
 8015b7a:	f000 80a2 	beq.w	8015cc2 <rcl_expand_topic_name+0x20e>
 8015b7e:	217b      	movs	r1, #123	; 0x7b
 8015b80:	f000 ffb0 	bl	8016ae4 <strchr>
 8015b84:	46d1      	mov	r9, sl
 8015b86:	4605      	mov	r5, r0
 8015b88:	9407      	str	r4, [sp, #28]
 8015b8a:	46d3      	mov	fp, sl
 8015b8c:	464c      	mov	r4, r9
 8015b8e:	2d00      	cmp	r5, #0
 8015b90:	f000 80be 	beq.w	8015d10 <rcl_expand_topic_name+0x25c>
 8015b94:	217d      	movs	r1, #125	; 0x7d
 8015b96:	4620      	mov	r0, r4
 8015b98:	f000 ffa4 	bl	8016ae4 <strchr>
 8015b9c:	eba0 0905 	sub.w	r9, r0, r5
 8015ba0:	f109 0a01 	add.w	sl, r9, #1
 8015ba4:	486d      	ldr	r0, [pc, #436]	; (8015d5c <rcl_expand_topic_name+0x2a8>)
 8015ba6:	4652      	mov	r2, sl
 8015ba8:	4629      	mov	r1, r5
 8015baa:	f000 ffa8 	bl	8016afe <strncmp>
 8015bae:	2800      	cmp	r0, #0
 8015bb0:	d067      	beq.n	8015c82 <rcl_expand_topic_name+0x1ce>
 8015bb2:	486b      	ldr	r0, [pc, #428]	; (8015d60 <rcl_expand_topic_name+0x2ac>)
 8015bb4:	4652      	mov	r2, sl
 8015bb6:	4629      	mov	r1, r5
 8015bb8:	f000 ffa1 	bl	8016afe <strncmp>
 8015bbc:	b130      	cbz	r0, 8015bcc <rcl_expand_topic_name+0x118>
 8015bbe:	4869      	ldr	r0, [pc, #420]	; (8015d64 <rcl_expand_topic_name+0x2b0>)
 8015bc0:	4652      	mov	r2, sl
 8015bc2:	4629      	mov	r1, r5
 8015bc4:	f000 ff9b 	bl	8016afe <strncmp>
 8015bc8:	2800      	cmp	r0, #0
 8015bca:	d137      	bne.n	8015c3c <rcl_expand_topic_name+0x188>
 8015bcc:	46b9      	mov	r9, r7
 8015bce:	ab16      	add	r3, sp, #88	; 0x58
 8015bd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015bd4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015bd8:	ab14      	add	r3, sp, #80	; 0x50
 8015bda:	4628      	mov	r0, r5
 8015bdc:	cb0c      	ldmia	r3, {r2, r3}
 8015bde:	4651      	mov	r1, sl
 8015be0:	f7fc fcce 	bl	8012580 <rcutils_strndup>
 8015be4:	4605      	mov	r5, r0
 8015be6:	2800      	cmp	r0, #0
 8015be8:	f000 809c 	beq.w	8015d24 <rcl_expand_topic_name+0x270>
 8015bec:	464a      	mov	r2, r9
 8015bee:	4620      	mov	r0, r4
 8015bf0:	ab14      	add	r3, sp, #80	; 0x50
 8015bf2:	4629      	mov	r1, r5
 8015bf4:	f7fc fbc2 	bl	801237c <rcutils_repl_str>
 8015bf8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015bfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bfc:	4604      	mov	r4, r0
 8015bfe:	4628      	mov	r0, r5
 8015c00:	4798      	blx	r3
 8015c02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015c06:	4658      	mov	r0, fp
 8015c08:	4798      	blx	r3
 8015c0a:	2c00      	cmp	r4, #0
 8015c0c:	d07b      	beq.n	8015d06 <rcl_expand_topic_name+0x252>
 8015c0e:	217b      	movs	r1, #123	; 0x7b
 8015c10:	4620      	mov	r0, r4
 8015c12:	f000 ff67 	bl	8016ae4 <strchr>
 8015c16:	46a3      	mov	fp, r4
 8015c18:	4605      	mov	r5, r0
 8015c1a:	e7b8      	b.n	8015b8e <rcl_expand_topic_name+0xda>
 8015c1c:	240b      	movs	r4, #11
 8015c1e:	4620      	mov	r0, r4
 8015c20:	b00b      	add	sp, #44	; 0x2c
 8015c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c26:	f7f9 fda9 	bl	800f77c <rcl_convert_rmw_ret_to_rcl_ret>
 8015c2a:	4604      	mov	r4, r0
 8015c2c:	e7f7      	b.n	8015c1e <rcl_expand_topic_name+0x16a>
 8015c2e:	2467      	movs	r4, #103	; 0x67
 8015c30:	4620      	mov	r0, r4
 8015c32:	b00b      	add	sp, #44	; 0x2c
 8015c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c38:	24c9      	movs	r4, #201	; 0xc9
 8015c3a:	e7f0      	b.n	8015c1e <rcl_expand_topic_name+0x16a>
 8015c3c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8015c40:	9806      	ldr	r0, [sp, #24]
 8015c42:	1c69      	adds	r1, r5, #1
 8015c44:	f7fc fdb6 	bl	80127b4 <rcutils_string_map_getn>
 8015c48:	4681      	mov	r9, r0
 8015c4a:	2800      	cmp	r0, #0
 8015c4c:	d1bf      	bne.n	8015bce <rcl_expand_topic_name+0x11a>
 8015c4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c50:	aa16      	add	r2, sp, #88	; 0x58
 8015c52:	6018      	str	r0, [r3, #0]
 8015c54:	ca07      	ldmia	r2, {r0, r1, r2}
 8015c56:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015c5a:	ab14      	add	r3, sp, #80	; 0x50
 8015c5c:	cb0c      	ldmia	r3, {r2, r3}
 8015c5e:	4651      	mov	r1, sl
 8015c60:	4628      	mov	r0, r5
 8015c62:	f7fc fc8d 	bl	8012580 <rcutils_strndup>
 8015c66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015c68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c6a:	4798      	blx	r3
 8015c6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015c70:	4658      	mov	r0, fp
 8015c72:	2469      	movs	r4, #105	; 0x69
 8015c74:	4798      	blx	r3
 8015c76:	e7d2      	b.n	8015c1e <rcl_expand_topic_name+0x16a>
 8015c78:	2800      	cmp	r0, #0
 8015c7a:	d05b      	beq.n	8015d34 <rcl_expand_topic_name+0x280>
 8015c7c:	46c1      	mov	r9, r8
 8015c7e:	46a2      	mov	sl, r4
 8015c80:	e782      	b.n	8015b88 <rcl_expand_topic_name+0xd4>
 8015c82:	46b1      	mov	r9, r6
 8015c84:	e7a3      	b.n	8015bce <rcl_expand_topic_name+0x11a>
 8015c86:	2800      	cmp	r0, #0
 8015c88:	d1f8      	bne.n	8015c7c <rcl_expand_topic_name+0x1c8>
 8015c8a:	4638      	mov	r0, r7
 8015c8c:	f7ea fab2 	bl	80001f4 <strlen>
 8015c90:	4a35      	ldr	r2, [pc, #212]	; (8015d68 <rcl_expand_topic_name+0x2b4>)
 8015c92:	4b36      	ldr	r3, [pc, #216]	; (8015d6c <rcl_expand_topic_name+0x2b8>)
 8015c94:	f8cd 8010 	str.w	r8, [sp, #16]
 8015c98:	2801      	cmp	r0, #1
 8015c9a:	bf18      	it	ne
 8015c9c:	4613      	movne	r3, r2
 8015c9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015ca2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8015ca6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015ca8:	9703      	str	r7, [sp, #12]
 8015caa:	9200      	str	r2, [sp, #0]
 8015cac:	ab14      	add	r3, sp, #80	; 0x50
 8015cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015cb0:	f7fc fb2a 	bl	8012308 <rcutils_format_string_limit>
 8015cb4:	4682      	mov	sl, r0
 8015cb6:	4653      	mov	r3, sl
 8015cb8:	b32b      	cbz	r3, 8015d06 <rcl_expand_topic_name+0x252>
 8015cba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015cbc:	f8c3 a000 	str.w	sl, [r3]
 8015cc0:	e7ad      	b.n	8015c1e <rcl_expand_topic_name+0x16a>
 8015cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8015cc6:	2b2f      	cmp	r3, #47	; 0x2f
 8015cc8:	d0f7      	beq.n	8015cba <rcl_expand_topic_name+0x206>
 8015cca:	4638      	mov	r0, r7
 8015ccc:	f7ea fa92 	bl	80001f4 <strlen>
 8015cd0:	4a25      	ldr	r2, [pc, #148]	; (8015d68 <rcl_expand_topic_name+0x2b4>)
 8015cd2:	4b26      	ldr	r3, [pc, #152]	; (8015d6c <rcl_expand_topic_name+0x2b8>)
 8015cd4:	f8cd a010 	str.w	sl, [sp, #16]
 8015cd8:	2801      	cmp	r0, #1
 8015cda:	bf18      	it	ne
 8015cdc:	4613      	movne	r3, r2
 8015cde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015ce2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8015ce6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015ce8:	9703      	str	r7, [sp, #12]
 8015cea:	9200      	str	r2, [sp, #0]
 8015cec:	ab14      	add	r3, sp, #80	; 0x50
 8015cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015cf0:	f7fc fb0a 	bl	8012308 <rcutils_format_string_limit>
 8015cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015cf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015cf8:	4605      	mov	r5, r0
 8015cfa:	4650      	mov	r0, sl
 8015cfc:	4798      	blx	r3
 8015cfe:	46aa      	mov	sl, r5
 8015d00:	e7d9      	b.n	8015cb6 <rcl_expand_topic_name+0x202>
 8015d02:	24ca      	movs	r4, #202	; 0xca
 8015d04:	e78b      	b.n	8015c1e <rcl_expand_topic_name+0x16a>
 8015d06:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015d08:	2300      	movs	r3, #0
 8015d0a:	6013      	str	r3, [r2, #0]
 8015d0c:	240a      	movs	r4, #10
 8015d0e:	e786      	b.n	8015c1e <rcl_expand_topic_name+0x16a>
 8015d10:	465b      	mov	r3, fp
 8015d12:	9c07      	ldr	r4, [sp, #28]
 8015d14:	46da      	mov	sl, fp
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d1d3      	bne.n	8015cc2 <rcl_expand_topic_name+0x20e>
 8015d1a:	f898 3000 	ldrb.w	r3, [r8]
 8015d1e:	2b2f      	cmp	r3, #47	; 0x2f
 8015d20:	d0cb      	beq.n	8015cba <rcl_expand_topic_name+0x206>
 8015d22:	e7b2      	b.n	8015c8a <rcl_expand_topic_name+0x1d6>
 8015d24:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 8015d28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d2a:	6015      	str	r5, [r2, #0]
 8015d2c:	4658      	mov	r0, fp
 8015d2e:	4798      	blx	r3
 8015d30:	240a      	movs	r4, #10
 8015d32:	e774      	b.n	8015c1e <rcl_expand_topic_name+0x16a>
 8015d34:	ab17      	add	r3, sp, #92	; 0x5c
 8015d36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d3a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015d3e:	ab14      	add	r3, sp, #80	; 0x50
 8015d40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015d42:	4640      	mov	r0, r8
 8015d44:	f7fc fbfa 	bl	801253c <rcutils_strdup>
 8015d48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015d4a:	2800      	cmp	r0, #0
 8015d4c:	6018      	str	r0, [r3, #0]
 8015d4e:	bf08      	it	eq
 8015d50:	240a      	moveq	r4, #10
 8015d52:	e764      	b.n	8015c1e <rcl_expand_topic_name+0x16a>
 8015d54:	08018728 	.word	0x08018728
 8015d58:	08017ce0 	.word	0x08017ce0
 8015d5c:	08018730 	.word	0x08018730
 8015d60:	08018738 	.word	0x08018738
 8015d64:	08018740 	.word	0x08018740
 8015d68:	08017f6c 	.word	0x08017f6c
 8015d6c:	08017cf0 	.word	0x08017cf0

08015d70 <rcl_get_default_topic_name_substitutions>:
 8015d70:	2800      	cmp	r0, #0
 8015d72:	bf0c      	ite	eq
 8015d74:	200b      	moveq	r0, #11
 8015d76:	2000      	movne	r0, #0
 8015d78:	4770      	bx	lr
 8015d7a:	bf00      	nop

08015d7c <rcl_get_zero_initialized_guard_condition>:
 8015d7c:	4a03      	ldr	r2, [pc, #12]	; (8015d8c <rcl_get_zero_initialized_guard_condition+0x10>)
 8015d7e:	4603      	mov	r3, r0
 8015d80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d84:	e883 0003 	stmia.w	r3, {r0, r1}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	4770      	bx	lr
 8015d8c:	0801874c 	.word	0x0801874c

08015d90 <rcl_guard_condition_init_from_rmw>:
 8015d90:	b082      	sub	sp, #8
 8015d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d96:	b086      	sub	sp, #24
 8015d98:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015d9c:	4604      	mov	r4, r0
 8015d9e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8015da2:	460e      	mov	r6, r1
 8015da4:	4617      	mov	r7, r2
 8015da6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015daa:	f10d 0e04 	add.w	lr, sp, #4
 8015dae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015db2:	f8dc 3000 	ldr.w	r3, [ip]
 8015db6:	f8ce 3000 	str.w	r3, [lr]
 8015dba:	a801      	add	r0, sp, #4
 8015dbc:	f7f4 fde8 	bl	800a990 <rcutils_allocator_is_valid>
 8015dc0:	b350      	cbz	r0, 8015e18 <rcl_guard_condition_init_from_rmw+0x88>
 8015dc2:	b34c      	cbz	r4, 8015e18 <rcl_guard_condition_init_from_rmw+0x88>
 8015dc4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015dc8:	f1b8 0f00 	cmp.w	r8, #0
 8015dcc:	d11e      	bne.n	8015e0c <rcl_guard_condition_init_from_rmw+0x7c>
 8015dce:	b31f      	cbz	r7, 8015e18 <rcl_guard_condition_init_from_rmw+0x88>
 8015dd0:	4638      	mov	r0, r7
 8015dd2:	f7f9 fcf1 	bl	800f7b8 <rcl_context_is_valid>
 8015dd6:	b328      	cbz	r0, 8015e24 <rcl_guard_condition_init_from_rmw+0x94>
 8015dd8:	9b01      	ldr	r3, [sp, #4]
 8015dda:	9905      	ldr	r1, [sp, #20]
 8015ddc:	201c      	movs	r0, #28
 8015dde:	4798      	blx	r3
 8015de0:	4605      	mov	r5, r0
 8015de2:	6060      	str	r0, [r4, #4]
 8015de4:	b358      	cbz	r0, 8015e3e <rcl_guard_condition_init_from_rmw+0xae>
 8015de6:	b1fe      	cbz	r6, 8015e28 <rcl_guard_condition_init_from_rmw+0x98>
 8015de8:	6006      	str	r6, [r0, #0]
 8015dea:	f880 8004 	strb.w	r8, [r0, #4]
 8015dee:	ac01      	add	r4, sp, #4
 8015df0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015df2:	f105 0c08 	add.w	ip, r5, #8
 8015df6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015dfa:	6823      	ldr	r3, [r4, #0]
 8015dfc:	f8cc 3000 	str.w	r3, [ip]
 8015e00:	2000      	movs	r0, #0
 8015e02:	b006      	add	sp, #24
 8015e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e08:	b002      	add	sp, #8
 8015e0a:	4770      	bx	lr
 8015e0c:	2064      	movs	r0, #100	; 0x64
 8015e0e:	b006      	add	sp, #24
 8015e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e14:	b002      	add	sp, #8
 8015e16:	4770      	bx	lr
 8015e18:	200b      	movs	r0, #11
 8015e1a:	b006      	add	sp, #24
 8015e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e20:	b002      	add	sp, #8
 8015e22:	4770      	bx	lr
 8015e24:	2065      	movs	r0, #101	; 0x65
 8015e26:	e7f2      	b.n	8015e0e <rcl_guard_condition_init_from_rmw+0x7e>
 8015e28:	6838      	ldr	r0, [r7, #0]
 8015e2a:	3028      	adds	r0, #40	; 0x28
 8015e2c:	f000 fa3a 	bl	80162a4 <rmw_create_guard_condition>
 8015e30:	6028      	str	r0, [r5, #0]
 8015e32:	6865      	ldr	r5, [r4, #4]
 8015e34:	682e      	ldr	r6, [r5, #0]
 8015e36:	b126      	cbz	r6, 8015e42 <rcl_guard_condition_init_from_rmw+0xb2>
 8015e38:	2301      	movs	r3, #1
 8015e3a:	712b      	strb	r3, [r5, #4]
 8015e3c:	e7d7      	b.n	8015dee <rcl_guard_condition_init_from_rmw+0x5e>
 8015e3e:	200a      	movs	r0, #10
 8015e40:	e7e5      	b.n	8015e0e <rcl_guard_condition_init_from_rmw+0x7e>
 8015e42:	4628      	mov	r0, r5
 8015e44:	9b02      	ldr	r3, [sp, #8]
 8015e46:	9905      	ldr	r1, [sp, #20]
 8015e48:	4798      	blx	r3
 8015e4a:	6066      	str	r6, [r4, #4]
 8015e4c:	2001      	movs	r0, #1
 8015e4e:	e7de      	b.n	8015e0e <rcl_guard_condition_init_from_rmw+0x7e>

08015e50 <rcl_guard_condition_fini>:
 8015e50:	b570      	push	{r4, r5, r6, lr}
 8015e52:	b082      	sub	sp, #8
 8015e54:	b1f0      	cbz	r0, 8015e94 <rcl_guard_condition_fini+0x44>
 8015e56:	6843      	ldr	r3, [r0, #4]
 8015e58:	4604      	mov	r4, r0
 8015e5a:	b163      	cbz	r3, 8015e76 <rcl_guard_condition_fini+0x26>
 8015e5c:	6818      	ldr	r0, [r3, #0]
 8015e5e:	68de      	ldr	r6, [r3, #12]
 8015e60:	6999      	ldr	r1, [r3, #24]
 8015e62:	b160      	cbz	r0, 8015e7e <rcl_guard_condition_fini+0x2e>
 8015e64:	791d      	ldrb	r5, [r3, #4]
 8015e66:	b965      	cbnz	r5, 8015e82 <rcl_guard_condition_fini+0x32>
 8015e68:	4618      	mov	r0, r3
 8015e6a:	47b0      	blx	r6
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	4628      	mov	r0, r5
 8015e70:	6063      	str	r3, [r4, #4]
 8015e72:	b002      	add	sp, #8
 8015e74:	bd70      	pop	{r4, r5, r6, pc}
 8015e76:	461d      	mov	r5, r3
 8015e78:	4628      	mov	r0, r5
 8015e7a:	b002      	add	sp, #8
 8015e7c:	bd70      	pop	{r4, r5, r6, pc}
 8015e7e:	4605      	mov	r5, r0
 8015e80:	e7f2      	b.n	8015e68 <rcl_guard_condition_fini+0x18>
 8015e82:	9101      	str	r1, [sp, #4]
 8015e84:	f000 fa22 	bl	80162cc <rmw_destroy_guard_condition>
 8015e88:	1e05      	subs	r5, r0, #0
 8015e8a:	6863      	ldr	r3, [r4, #4]
 8015e8c:	9901      	ldr	r1, [sp, #4]
 8015e8e:	bf18      	it	ne
 8015e90:	2501      	movne	r5, #1
 8015e92:	e7e9      	b.n	8015e68 <rcl_guard_condition_fini+0x18>
 8015e94:	250b      	movs	r5, #11
 8015e96:	4628      	mov	r0, r5
 8015e98:	b002      	add	sp, #8
 8015e9a:	bd70      	pop	{r4, r5, r6, pc}

08015e9c <rcl_guard_condition_get_default_options>:
 8015e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e9e:	b087      	sub	sp, #28
 8015ea0:	4606      	mov	r6, r0
 8015ea2:	4668      	mov	r0, sp
 8015ea4:	f7f4 fd66 	bl	800a974 <rcutils_get_default_allocator>
 8015ea8:	4b09      	ldr	r3, [pc, #36]	; (8015ed0 <rcl_guard_condition_get_default_options+0x34>)
 8015eaa:	46ee      	mov	lr, sp
 8015eac:	469c      	mov	ip, r3
 8015eae:	461d      	mov	r5, r3
 8015eb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015eb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015eba:	4634      	mov	r4, r6
 8015ebc:	f8de 7000 	ldr.w	r7, [lr]
 8015ec0:	f8cc 7000 	str.w	r7, [ip]
 8015ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015ec6:	4630      	mov	r0, r6
 8015ec8:	6027      	str	r7, [r4, #0]
 8015eca:	b007      	add	sp, #28
 8015ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ece:	bf00      	nop
 8015ed0:	2000dc54 	.word	0x2000dc54

08015ed4 <rcl_guard_condition_get_rmw_handle>:
 8015ed4:	b110      	cbz	r0, 8015edc <rcl_guard_condition_get_rmw_handle+0x8>
 8015ed6:	6840      	ldr	r0, [r0, #4]
 8015ed8:	b100      	cbz	r0, 8015edc <rcl_guard_condition_get_rmw_handle+0x8>
 8015eda:	6800      	ldr	r0, [r0, #0]
 8015edc:	4770      	bx	lr
 8015ede:	bf00      	nop

08015ee0 <rcl_validate_topic_name>:
 8015ee0:	2800      	cmp	r0, #0
 8015ee2:	d07a      	beq.n	8015fda <rcl_validate_topic_name+0xfa>
 8015ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ee8:	460e      	mov	r6, r1
 8015eea:	2900      	cmp	r1, #0
 8015eec:	d07c      	beq.n	8015fe8 <rcl_validate_topic_name+0x108>
 8015eee:	4617      	mov	r7, r2
 8015ef0:	4605      	mov	r5, r0
 8015ef2:	f7ea f97f 	bl	80001f4 <strlen>
 8015ef6:	b1b0      	cbz	r0, 8015f26 <rcl_validate_topic_name+0x46>
 8015ef8:	f895 9000 	ldrb.w	r9, [r5]
 8015efc:	f8df c180 	ldr.w	ip, [pc, #384]	; 8016080 <rcl_validate_topic_name+0x1a0>
 8015f00:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015f04:	f013 0304 	ands.w	r3, r3, #4
 8015f08:	d169      	bne.n	8015fde <rcl_validate_topic_name+0xfe>
 8015f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8015f0e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015f12:	2a2f      	cmp	r2, #47	; 0x2f
 8015f14:	d10e      	bne.n	8015f34 <rcl_validate_topic_name+0x54>
 8015f16:	2202      	movs	r2, #2
 8015f18:	6032      	str	r2, [r6, #0]
 8015f1a:	b36f      	cbz	r7, 8015f78 <rcl_validate_topic_name+0x98>
 8015f1c:	f8c7 8000 	str.w	r8, [r7]
 8015f20:	4618      	mov	r0, r3
 8015f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f26:	2301      	movs	r3, #1
 8015f28:	6033      	str	r3, [r6, #0]
 8015f2a:	b32f      	cbz	r7, 8015f78 <rcl_validate_topic_name+0x98>
 8015f2c:	2000      	movs	r0, #0
 8015f2e:	6038      	str	r0, [r7, #0]
 8015f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f34:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8015f38:	461c      	mov	r4, r3
 8015f3a:	4619      	mov	r1, r3
 8015f3c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015f40:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015f44:	f1be 0f09 	cmp.w	lr, #9
 8015f48:	d919      	bls.n	8015f7e <rcl_validate_topic_name+0x9e>
 8015f4a:	f022 0e20 	bic.w	lr, r2, #32
 8015f4e:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8015f52:	f1be 0f19 	cmp.w	lr, #25
 8015f56:	d912      	bls.n	8015f7e <rcl_validate_topic_name+0x9e>
 8015f58:	2a5f      	cmp	r2, #95	; 0x5f
 8015f5a:	d019      	beq.n	8015f90 <rcl_validate_topic_name+0xb0>
 8015f5c:	2a2f      	cmp	r2, #47	; 0x2f
 8015f5e:	d051      	beq.n	8016004 <rcl_validate_topic_name+0x124>
 8015f60:	2a7e      	cmp	r2, #126	; 0x7e
 8015f62:	d048      	beq.n	8015ff6 <rcl_validate_topic_name+0x116>
 8015f64:	2a7b      	cmp	r2, #123	; 0x7b
 8015f66:	d054      	beq.n	8016012 <rcl_validate_topic_name+0x132>
 8015f68:	2a7d      	cmp	r2, #125	; 0x7d
 8015f6a:	d161      	bne.n	8016030 <rcl_validate_topic_name+0x150>
 8015f6c:	2c00      	cmp	r4, #0
 8015f6e:	d155      	bne.n	801601c <rcl_validate_topic_name+0x13c>
 8015f70:	2305      	movs	r3, #5
 8015f72:	6033      	str	r3, [r6, #0]
 8015f74:	b107      	cbz	r7, 8015f78 <rcl_validate_topic_name+0x98>
 8015f76:	6039      	str	r1, [r7, #0]
 8015f78:	2000      	movs	r0, #0
 8015f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f7e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015f82:	0752      	lsls	r2, r2, #29
 8015f84:	d504      	bpl.n	8015f90 <rcl_validate_topic_name+0xb0>
 8015f86:	b11c      	cbz	r4, 8015f90 <rcl_validate_topic_name+0xb0>
 8015f88:	b111      	cbz	r1, 8015f90 <rcl_validate_topic_name+0xb0>
 8015f8a:	1e4a      	subs	r2, r1, #1
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	d02d      	beq.n	8015fec <rcl_validate_topic_name+0x10c>
 8015f90:	3101      	adds	r1, #1
 8015f92:	4288      	cmp	r0, r1
 8015f94:	d1d2      	bne.n	8015f3c <rcl_validate_topic_name+0x5c>
 8015f96:	2c00      	cmp	r4, #0
 8015f98:	d145      	bne.n	8016026 <rcl_validate_topic_name+0x146>
 8015f9a:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8015f9e:	d04f      	beq.n	8016040 <rcl_validate_topic_name+0x160>
 8015fa0:	4620      	mov	r0, r4
 8015fa2:	2301      	movs	r3, #1
 8015fa4:	e006      	b.n	8015fb4 <rcl_validate_topic_name+0xd4>
 8015fa6:	428b      	cmp	r3, r1
 8015fa8:	f105 0501 	add.w	r5, r5, #1
 8015fac:	f103 0201 	add.w	r2, r3, #1
 8015fb0:	d236      	bcs.n	8016020 <rcl_validate_topic_name+0x140>
 8015fb2:	4613      	mov	r3, r2
 8015fb4:	4580      	cmp	r8, r0
 8015fb6:	f100 0001 	add.w	r0, r0, #1
 8015fba:	d0f4      	beq.n	8015fa6 <rcl_validate_topic_name+0xc6>
 8015fbc:	782a      	ldrb	r2, [r5, #0]
 8015fbe:	2a2f      	cmp	r2, #47	; 0x2f
 8015fc0:	d1f1      	bne.n	8015fa6 <rcl_validate_topic_name+0xc6>
 8015fc2:	786a      	ldrb	r2, [r5, #1]
 8015fc4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015fc8:	0754      	lsls	r4, r2, #29
 8015fca:	d5ec      	bpl.n	8015fa6 <rcl_validate_topic_name+0xc6>
 8015fcc:	2204      	movs	r2, #4
 8015fce:	6032      	str	r2, [r6, #0]
 8015fd0:	2f00      	cmp	r7, #0
 8015fd2:	d0d1      	beq.n	8015f78 <rcl_validate_topic_name+0x98>
 8015fd4:	603b      	str	r3, [r7, #0]
 8015fd6:	2000      	movs	r0, #0
 8015fd8:	e7aa      	b.n	8015f30 <rcl_validate_topic_name+0x50>
 8015fda:	200b      	movs	r0, #11
 8015fdc:	4770      	bx	lr
 8015fde:	2304      	movs	r3, #4
 8015fe0:	6033      	str	r3, [r6, #0]
 8015fe2:	2f00      	cmp	r7, #0
 8015fe4:	d1a2      	bne.n	8015f2c <rcl_validate_topic_name+0x4c>
 8015fe6:	e7c7      	b.n	8015f78 <rcl_validate_topic_name+0x98>
 8015fe8:	200b      	movs	r0, #11
 8015fea:	e7a1      	b.n	8015f30 <rcl_validate_topic_name+0x50>
 8015fec:	2309      	movs	r3, #9
 8015fee:	6033      	str	r3, [r6, #0]
 8015ff0:	2f00      	cmp	r7, #0
 8015ff2:	d1c0      	bne.n	8015f76 <rcl_validate_topic_name+0x96>
 8015ff4:	e7c0      	b.n	8015f78 <rcl_validate_topic_name+0x98>
 8015ff6:	2900      	cmp	r1, #0
 8015ff8:	d0ca      	beq.n	8015f90 <rcl_validate_topic_name+0xb0>
 8015ffa:	2306      	movs	r3, #6
 8015ffc:	6033      	str	r3, [r6, #0]
 8015ffe:	2f00      	cmp	r7, #0
 8016000:	d1b9      	bne.n	8015f76 <rcl_validate_topic_name+0x96>
 8016002:	e7b9      	b.n	8015f78 <rcl_validate_topic_name+0x98>
 8016004:	2c00      	cmp	r4, #0
 8016006:	d0c3      	beq.n	8015f90 <rcl_validate_topic_name+0xb0>
 8016008:	2308      	movs	r3, #8
 801600a:	6033      	str	r3, [r6, #0]
 801600c:	2f00      	cmp	r7, #0
 801600e:	d1b2      	bne.n	8015f76 <rcl_validate_topic_name+0x96>
 8016010:	e7b2      	b.n	8015f78 <rcl_validate_topic_name+0x98>
 8016012:	2c00      	cmp	r4, #0
 8016014:	d1f8      	bne.n	8016008 <rcl_validate_topic_name+0x128>
 8016016:	460b      	mov	r3, r1
 8016018:	2401      	movs	r4, #1
 801601a:	e7b9      	b.n	8015f90 <rcl_validate_topic_name+0xb0>
 801601c:	2400      	movs	r4, #0
 801601e:	e7b7      	b.n	8015f90 <rcl_validate_topic_name+0xb0>
 8016020:	2000      	movs	r0, #0
 8016022:	6030      	str	r0, [r6, #0]
 8016024:	e784      	b.n	8015f30 <rcl_validate_topic_name+0x50>
 8016026:	2205      	movs	r2, #5
 8016028:	6032      	str	r2, [r6, #0]
 801602a:	2f00      	cmp	r7, #0
 801602c:	d1d2      	bne.n	8015fd4 <rcl_validate_topic_name+0xf4>
 801602e:	e7a3      	b.n	8015f78 <rcl_validate_topic_name+0x98>
 8016030:	2c00      	cmp	r4, #0
 8016032:	bf14      	ite	ne
 8016034:	2308      	movne	r3, #8
 8016036:	2303      	moveq	r3, #3
 8016038:	6033      	str	r3, [r6, #0]
 801603a:	2f00      	cmp	r7, #0
 801603c:	d19b      	bne.n	8015f76 <rcl_validate_topic_name+0x96>
 801603e:	e79b      	b.n	8015f78 <rcl_validate_topic_name+0x98>
 8016040:	2301      	movs	r3, #1
 8016042:	e00a      	b.n	801605a <rcl_validate_topic_name+0x17a>
 8016044:	2c01      	cmp	r4, #1
 8016046:	d013      	beq.n	8016070 <rcl_validate_topic_name+0x190>
 8016048:	4299      	cmp	r1, r3
 801604a:	f104 0401 	add.w	r4, r4, #1
 801604e:	f105 0501 	add.w	r5, r5, #1
 8016052:	f103 0201 	add.w	r2, r3, #1
 8016056:	d9e3      	bls.n	8016020 <rcl_validate_topic_name+0x140>
 8016058:	4613      	mov	r3, r2
 801605a:	45a0      	cmp	r8, r4
 801605c:	d0f4      	beq.n	8016048 <rcl_validate_topic_name+0x168>
 801605e:	782a      	ldrb	r2, [r5, #0]
 8016060:	2a2f      	cmp	r2, #47	; 0x2f
 8016062:	d1ef      	bne.n	8016044 <rcl_validate_topic_name+0x164>
 8016064:	786a      	ldrb	r2, [r5, #1]
 8016066:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801606a:	0752      	lsls	r2, r2, #29
 801606c:	d5ec      	bpl.n	8016048 <rcl_validate_topic_name+0x168>
 801606e:	e7ad      	b.n	8015fcc <rcl_validate_topic_name+0xec>
 8016070:	2307      	movs	r3, #7
 8016072:	6033      	str	r3, [r6, #0]
 8016074:	2f00      	cmp	r7, #0
 8016076:	f43f af7f 	beq.w	8015f78 <rcl_validate_topic_name+0x98>
 801607a:	603c      	str	r4, [r7, #0]
 801607c:	2000      	movs	r0, #0
 801607e:	e757      	b.n	8015f30 <rcl_validate_topic_name+0x50>
 8016080:	080187c4 	.word	0x080187c4

08016084 <rcutils_string_array_fini>:
 8016084:	b320      	cbz	r0, 80160d0 <rcutils_string_array_fini+0x4c>
 8016086:	b570      	push	{r4, r5, r6, lr}
 8016088:	4604      	mov	r4, r0
 801608a:	6840      	ldr	r0, [r0, #4]
 801608c:	b1d8      	cbz	r0, 80160c6 <rcutils_string_array_fini+0x42>
 801608e:	f104 0008 	add.w	r0, r4, #8
 8016092:	f7f4 fc7d 	bl	800a990 <rcutils_allocator_is_valid>
 8016096:	b1b8      	cbz	r0, 80160c8 <rcutils_string_array_fini+0x44>
 8016098:	6823      	ldr	r3, [r4, #0]
 801609a:	b1bb      	cbz	r3, 80160cc <rcutils_string_array_fini+0x48>
 801609c:	2500      	movs	r5, #0
 801609e:	6860      	ldr	r0, [r4, #4]
 80160a0:	462e      	mov	r6, r5
 80160a2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80160a6:	68e3      	ldr	r3, [r4, #12]
 80160a8:	69a1      	ldr	r1, [r4, #24]
 80160aa:	4798      	blx	r3
 80160ac:	e9d4 3000 	ldrd	r3, r0, [r4]
 80160b0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80160b4:	3501      	adds	r5, #1
 80160b6:	429d      	cmp	r5, r3
 80160b8:	d3f3      	bcc.n	80160a2 <rcutils_string_array_fini+0x1e>
 80160ba:	68e3      	ldr	r3, [r4, #12]
 80160bc:	69a1      	ldr	r1, [r4, #24]
 80160be:	4798      	blx	r3
 80160c0:	2000      	movs	r0, #0
 80160c2:	e9c4 0000 	strd	r0, r0, [r4]
 80160c6:	bd70      	pop	{r4, r5, r6, pc}
 80160c8:	200b      	movs	r0, #11
 80160ca:	bd70      	pop	{r4, r5, r6, pc}
 80160cc:	6860      	ldr	r0, [r4, #4]
 80160ce:	e7f4      	b.n	80160ba <rcutils_string_array_fini+0x36>
 80160d0:	200b      	movs	r0, #11
 80160d2:	4770      	bx	lr

080160d4 <on_status>:
 80160d4:	b082      	sub	sp, #8
 80160d6:	b002      	add	sp, #8
 80160d8:	4770      	bx	lr
 80160da:	bf00      	nop

080160dc <on_topic>:
 80160dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160e0:	4a22      	ldr	r2, [pc, #136]	; (801616c <on_topic+0x90>)
 80160e2:	b094      	sub	sp, #80	; 0x50
 80160e4:	6812      	ldr	r2, [r2, #0]
 80160e6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80160e8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80160ec:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 80160f0:	b3c2      	cbz	r2, 8016164 <on_topic+0x88>
 80160f2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80160f6:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80160fa:	e001      	b.n	8016100 <on_topic+0x24>
 80160fc:	6852      	ldr	r2, [r2, #4]
 80160fe:	b38a      	cbz	r2, 8016164 <on_topic+0x88>
 8016100:	6894      	ldr	r4, [r2, #8]
 8016102:	8aa3      	ldrh	r3, [r4, #20]
 8016104:	428b      	cmp	r3, r1
 8016106:	d1f9      	bne.n	80160fc <on_topic+0x20>
 8016108:	7da3      	ldrb	r3, [r4, #22]
 801610a:	4283      	cmp	r3, r0
 801610c:	d1f6      	bne.n	80160fc <on_topic+0x20>
 801610e:	2248      	movs	r2, #72	; 0x48
 8016110:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016114:	4668      	mov	r0, sp
 8016116:	f000 fda6 	bl	8016c66 <memcpy>
 801611a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801611e:	cb0c      	ldmia	r3, {r2, r3}
 8016120:	4620      	mov	r0, r4
 8016122:	f7f5 f865 	bl	800b1f0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016126:	4607      	mov	r7, r0
 8016128:	b1e0      	cbz	r0, 8016164 <on_topic+0x88>
 801612a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801612e:	4632      	mov	r2, r6
 8016130:	4628      	mov	r0, r5
 8016132:	f108 0110 	add.w	r1, r8, #16
 8016136:	f7fd ffc9 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 801613a:	b930      	cbnz	r0, 801614a <on_topic+0x6e>
 801613c:	480c      	ldr	r0, [pc, #48]	; (8016170 <on_topic+0x94>)
 801613e:	4639      	mov	r1, r7
 8016140:	b014      	add	sp, #80	; 0x50
 8016142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016146:	f7fc bd83 	b.w	8012c50 <put_memory>
 801614a:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801614e:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 8016152:	f7fd feab 	bl	8013eac <rmw_uros_epoch_nanos>
 8016156:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801615a:	2305      	movs	r3, #5
 801615c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016160:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8016164:	b014      	add	sp, #80	; 0x50
 8016166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801616a:	bf00      	nop
 801616c:	2000dab4 	.word	0x2000dab4
 8016170:	2000daa4 	.word	0x2000daa4

08016174 <on_request>:
 8016174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016178:	4823      	ldr	r0, [pc, #140]	; (8016208 <on_request+0x94>)
 801617a:	b094      	sub	sp, #80	; 0x50
 801617c:	6800      	ldr	r0, [r0, #0]
 801617e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8016180:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8016184:	9113      	str	r1, [sp, #76]	; 0x4c
 8016186:	2800      	cmp	r0, #0
 8016188:	d03b      	beq.n	8016202 <on_request+0x8e>
 801618a:	461d      	mov	r5, r3
 801618c:	e001      	b.n	8016192 <on_request+0x1e>
 801618e:	6840      	ldr	r0, [r0, #4]
 8016190:	b3b8      	cbz	r0, 8016202 <on_request+0x8e>
 8016192:	6884      	ldr	r4, [r0, #8]
 8016194:	8b21      	ldrh	r1, [r4, #24]
 8016196:	4291      	cmp	r1, r2
 8016198:	d1f9      	bne.n	801618e <on_request+0x1a>
 801619a:	2248      	movs	r2, #72	; 0x48
 801619c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80161a0:	4668      	mov	r0, sp
 80161a2:	f000 fd60 	bl	8016c66 <memcpy>
 80161a6:	f104 0320 	add.w	r3, r4, #32
 80161aa:	cb0c      	ldmia	r3, {r2, r3}
 80161ac:	4620      	mov	r0, r4
 80161ae:	f7f5 f81f 	bl	800b1f0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80161b2:	4680      	mov	r8, r0
 80161b4:	b328      	cbz	r0, 8016202 <on_request+0x8e>
 80161b6:	4638      	mov	r0, r7
 80161b8:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80161bc:	4632      	mov	r2, r6
 80161be:	f107 0110 	add.w	r1, r7, #16
 80161c2:	f7fd ff83 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 80161c6:	b930      	cbnz	r0, 80161d6 <on_request+0x62>
 80161c8:	4810      	ldr	r0, [pc, #64]	; (801620c <on_request+0x98>)
 80161ca:	4641      	mov	r1, r8
 80161cc:	b014      	add	sp, #80	; 0x50
 80161ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161d2:	f7fc bd3d 	b.w	8012c50 <put_memory>
 80161d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80161d8:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 80161dc:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 80161e0:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 80161e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80161e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80161ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 80161f0:	f7fd fe5c 	bl	8013eac <rmw_uros_epoch_nanos>
 80161f4:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80161f8:	2303      	movs	r3, #3
 80161fa:	e942 0102 	strd	r0, r1, [r2, #-8]
 80161fe:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8016202:	b014      	add	sp, #80	; 0x50
 8016204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016208:	2000da84 	.word	0x2000da84
 801620c:	2000daa4 	.word	0x2000daa4

08016210 <on_reply>:
 8016210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016214:	4821      	ldr	r0, [pc, #132]	; (801629c <on_reply+0x8c>)
 8016216:	b094      	sub	sp, #80	; 0x50
 8016218:	6800      	ldr	r0, [r0, #0]
 801621a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801621c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8016220:	9113      	str	r1, [sp, #76]	; 0x4c
 8016222:	b3b8      	cbz	r0, 8016294 <on_reply+0x84>
 8016224:	461d      	mov	r5, r3
 8016226:	e001      	b.n	801622c <on_reply+0x1c>
 8016228:	6840      	ldr	r0, [r0, #4]
 801622a:	b398      	cbz	r0, 8016294 <on_reply+0x84>
 801622c:	6884      	ldr	r4, [r0, #8]
 801622e:	8b21      	ldrh	r1, [r4, #24]
 8016230:	4291      	cmp	r1, r2
 8016232:	d1f9      	bne.n	8016228 <on_reply+0x18>
 8016234:	2248      	movs	r2, #72	; 0x48
 8016236:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801623a:	4668      	mov	r0, sp
 801623c:	f000 fd13 	bl	8016c66 <memcpy>
 8016240:	f104 0320 	add.w	r3, r4, #32
 8016244:	cb0c      	ldmia	r3, {r2, r3}
 8016246:	4620      	mov	r0, r4
 8016248:	f7f4 ffd2 	bl	800b1f0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801624c:	4680      	mov	r8, r0
 801624e:	b308      	cbz	r0, 8016294 <on_reply+0x84>
 8016250:	4638      	mov	r0, r7
 8016252:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016256:	4632      	mov	r2, r6
 8016258:	f107 0110 	add.w	r1, r7, #16
 801625c:	f7fd ff36 	bl	80140cc <ucdr_deserialize_array_uint8_t>
 8016260:	b930      	cbnz	r0, 8016270 <on_reply+0x60>
 8016262:	480f      	ldr	r0, [pc, #60]	; (80162a0 <on_reply+0x90>)
 8016264:	4641      	mov	r1, r8
 8016266:	b014      	add	sp, #80	; 0x50
 8016268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801626c:	f7fc bcf0 	b.w	8012c50 <put_memory>
 8016270:	2200      	movs	r2, #0
 8016272:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 8016276:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 801627a:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 801627e:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 8016282:	f7fd fe13 	bl	8013eac <rmw_uros_epoch_nanos>
 8016286:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801628a:	2304      	movs	r3, #4
 801628c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016290:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8016294:	b014      	add	sp, #80	; 0x50
 8016296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801629a:	bf00      	nop
 801629c:	20009198 	.word	0x20009198
 80162a0:	2000daa4 	.word	0x2000daa4

080162a4 <rmw_create_guard_condition>:
 80162a4:	b538      	push	{r3, r4, r5, lr}
 80162a6:	4605      	mov	r5, r0
 80162a8:	4807      	ldr	r0, [pc, #28]	; (80162c8 <rmw_create_guard_condition+0x24>)
 80162aa:	f7fc fcc1 	bl	8012c30 <get_memory>
 80162ae:	b148      	cbz	r0, 80162c4 <rmw_create_guard_condition+0x20>
 80162b0:	6884      	ldr	r4, [r0, #8]
 80162b2:	2300      	movs	r3, #0
 80162b4:	7423      	strb	r3, [r4, #16]
 80162b6:	61e5      	str	r5, [r4, #28]
 80162b8:	f7fc fd22 	bl	8012d00 <rmw_get_implementation_identifier>
 80162bc:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80162c0:	f104 0014 	add.w	r0, r4, #20
 80162c4:	bd38      	pop	{r3, r4, r5, pc}
 80162c6:	bf00      	nop
 80162c8:	2000da44 	.word	0x2000da44

080162cc <rmw_destroy_guard_condition>:
 80162cc:	b508      	push	{r3, lr}
 80162ce:	4b08      	ldr	r3, [pc, #32]	; (80162f0 <rmw_destroy_guard_condition+0x24>)
 80162d0:	6819      	ldr	r1, [r3, #0]
 80162d2:	b911      	cbnz	r1, 80162da <rmw_destroy_guard_condition+0xe>
 80162d4:	e00a      	b.n	80162ec <rmw_destroy_guard_condition+0x20>
 80162d6:	6849      	ldr	r1, [r1, #4]
 80162d8:	b141      	cbz	r1, 80162ec <rmw_destroy_guard_condition+0x20>
 80162da:	688b      	ldr	r3, [r1, #8]
 80162dc:	3314      	adds	r3, #20
 80162de:	4298      	cmp	r0, r3
 80162e0:	d1f9      	bne.n	80162d6 <rmw_destroy_guard_condition+0xa>
 80162e2:	4803      	ldr	r0, [pc, #12]	; (80162f0 <rmw_destroy_guard_condition+0x24>)
 80162e4:	f7fc fcb4 	bl	8012c50 <put_memory>
 80162e8:	2000      	movs	r0, #0
 80162ea:	bd08      	pop	{r3, pc}
 80162ec:	2001      	movs	r0, #1
 80162ee:	bd08      	pop	{r3, pc}
 80162f0:	2000da44 	.word	0x2000da44

080162f4 <calloc>:
 80162f4:	4b02      	ldr	r3, [pc, #8]	; (8016300 <calloc+0xc>)
 80162f6:	460a      	mov	r2, r1
 80162f8:	4601      	mov	r1, r0
 80162fa:	6818      	ldr	r0, [r3, #0]
 80162fc:	f000 b802 	b.w	8016304 <_calloc_r>
 8016300:	20000190 	.word	0x20000190

08016304 <_calloc_r>:
 8016304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016306:	fba1 2402 	umull	r2, r4, r1, r2
 801630a:	b94c      	cbnz	r4, 8016320 <_calloc_r+0x1c>
 801630c:	4611      	mov	r1, r2
 801630e:	9201      	str	r2, [sp, #4]
 8016310:	f000 f886 	bl	8016420 <_malloc_r>
 8016314:	9a01      	ldr	r2, [sp, #4]
 8016316:	4605      	mov	r5, r0
 8016318:	b930      	cbnz	r0, 8016328 <_calloc_r+0x24>
 801631a:	4628      	mov	r0, r5
 801631c:	b003      	add	sp, #12
 801631e:	bd30      	pop	{r4, r5, pc}
 8016320:	220c      	movs	r2, #12
 8016322:	6002      	str	r2, [r0, #0]
 8016324:	2500      	movs	r5, #0
 8016326:	e7f8      	b.n	801631a <_calloc_r+0x16>
 8016328:	4621      	mov	r1, r4
 801632a:	f000 fbd3 	bl	8016ad4 <memset>
 801632e:	e7f4      	b.n	801631a <_calloc_r+0x16>

08016330 <getenv>:
 8016330:	b507      	push	{r0, r1, r2, lr}
 8016332:	4b04      	ldr	r3, [pc, #16]	; (8016344 <getenv+0x14>)
 8016334:	4601      	mov	r1, r0
 8016336:	aa01      	add	r2, sp, #4
 8016338:	6818      	ldr	r0, [r3, #0]
 801633a:	f000 f805 	bl	8016348 <_findenv_r>
 801633e:	b003      	add	sp, #12
 8016340:	f85d fb04 	ldr.w	pc, [sp], #4
 8016344:	20000190 	.word	0x20000190

08016348 <_findenv_r>:
 8016348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801634c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80163bc <_findenv_r+0x74>
 8016350:	4607      	mov	r7, r0
 8016352:	4689      	mov	r9, r1
 8016354:	4616      	mov	r6, r2
 8016356:	f000 fcb3 	bl	8016cc0 <__env_lock>
 801635a:	f8da 4000 	ldr.w	r4, [sl]
 801635e:	b134      	cbz	r4, 801636e <_findenv_r+0x26>
 8016360:	464b      	mov	r3, r9
 8016362:	4698      	mov	r8, r3
 8016364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016368:	b13a      	cbz	r2, 801637a <_findenv_r+0x32>
 801636a:	2a3d      	cmp	r2, #61	; 0x3d
 801636c:	d1f9      	bne.n	8016362 <_findenv_r+0x1a>
 801636e:	4638      	mov	r0, r7
 8016370:	f000 fcac 	bl	8016ccc <__env_unlock>
 8016374:	2000      	movs	r0, #0
 8016376:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801637a:	eba8 0809 	sub.w	r8, r8, r9
 801637e:	46a3      	mov	fp, r4
 8016380:	f854 0b04 	ldr.w	r0, [r4], #4
 8016384:	2800      	cmp	r0, #0
 8016386:	d0f2      	beq.n	801636e <_findenv_r+0x26>
 8016388:	4642      	mov	r2, r8
 801638a:	4649      	mov	r1, r9
 801638c:	f000 fbb7 	bl	8016afe <strncmp>
 8016390:	2800      	cmp	r0, #0
 8016392:	d1f4      	bne.n	801637e <_findenv_r+0x36>
 8016394:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016398:	eb03 0508 	add.w	r5, r3, r8
 801639c:	f813 3008 	ldrb.w	r3, [r3, r8]
 80163a0:	2b3d      	cmp	r3, #61	; 0x3d
 80163a2:	d1ec      	bne.n	801637e <_findenv_r+0x36>
 80163a4:	f8da 3000 	ldr.w	r3, [sl]
 80163a8:	ebab 0303 	sub.w	r3, fp, r3
 80163ac:	109b      	asrs	r3, r3, #2
 80163ae:	4638      	mov	r0, r7
 80163b0:	6033      	str	r3, [r6, #0]
 80163b2:	f000 fc8b 	bl	8016ccc <__env_unlock>
 80163b6:	1c68      	adds	r0, r5, #1
 80163b8:	e7dd      	b.n	8016376 <_findenv_r+0x2e>
 80163ba:	bf00      	nop
 80163bc:	20000000 	.word	0x20000000

080163c0 <malloc>:
 80163c0:	4b02      	ldr	r3, [pc, #8]	; (80163cc <malloc+0xc>)
 80163c2:	4601      	mov	r1, r0
 80163c4:	6818      	ldr	r0, [r3, #0]
 80163c6:	f000 b82b 	b.w	8016420 <_malloc_r>
 80163ca:	bf00      	nop
 80163cc:	20000190 	.word	0x20000190

080163d0 <free>:
 80163d0:	4b02      	ldr	r3, [pc, #8]	; (80163dc <free+0xc>)
 80163d2:	4601      	mov	r1, r0
 80163d4:	6818      	ldr	r0, [r3, #0]
 80163d6:	f000 bc7f 	b.w	8016cd8 <_free_r>
 80163da:	bf00      	nop
 80163dc:	20000190 	.word	0x20000190

080163e0 <sbrk_aligned>:
 80163e0:	b570      	push	{r4, r5, r6, lr}
 80163e2:	4e0e      	ldr	r6, [pc, #56]	; (801641c <sbrk_aligned+0x3c>)
 80163e4:	460c      	mov	r4, r1
 80163e6:	6831      	ldr	r1, [r6, #0]
 80163e8:	4605      	mov	r5, r0
 80163ea:	b911      	cbnz	r1, 80163f2 <sbrk_aligned+0x12>
 80163ec:	f000 fbe4 	bl	8016bb8 <_sbrk_r>
 80163f0:	6030      	str	r0, [r6, #0]
 80163f2:	4621      	mov	r1, r4
 80163f4:	4628      	mov	r0, r5
 80163f6:	f000 fbdf 	bl	8016bb8 <_sbrk_r>
 80163fa:	1c43      	adds	r3, r0, #1
 80163fc:	d00a      	beq.n	8016414 <sbrk_aligned+0x34>
 80163fe:	1cc4      	adds	r4, r0, #3
 8016400:	f024 0403 	bic.w	r4, r4, #3
 8016404:	42a0      	cmp	r0, r4
 8016406:	d007      	beq.n	8016418 <sbrk_aligned+0x38>
 8016408:	1a21      	subs	r1, r4, r0
 801640a:	4628      	mov	r0, r5
 801640c:	f000 fbd4 	bl	8016bb8 <_sbrk_r>
 8016410:	3001      	adds	r0, #1
 8016412:	d101      	bne.n	8016418 <sbrk_aligned+0x38>
 8016414:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016418:	4620      	mov	r0, r4
 801641a:	bd70      	pop	{r4, r5, r6, pc}
 801641c:	2000dc6c 	.word	0x2000dc6c

08016420 <_malloc_r>:
 8016420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016424:	1ccd      	adds	r5, r1, #3
 8016426:	f025 0503 	bic.w	r5, r5, #3
 801642a:	3508      	adds	r5, #8
 801642c:	2d0c      	cmp	r5, #12
 801642e:	bf38      	it	cc
 8016430:	250c      	movcc	r5, #12
 8016432:	2d00      	cmp	r5, #0
 8016434:	4607      	mov	r7, r0
 8016436:	db01      	blt.n	801643c <_malloc_r+0x1c>
 8016438:	42a9      	cmp	r1, r5
 801643a:	d905      	bls.n	8016448 <_malloc_r+0x28>
 801643c:	230c      	movs	r3, #12
 801643e:	603b      	str	r3, [r7, #0]
 8016440:	2600      	movs	r6, #0
 8016442:	4630      	mov	r0, r6
 8016444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016448:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801651c <_malloc_r+0xfc>
 801644c:	f000 f868 	bl	8016520 <__malloc_lock>
 8016450:	f8d8 3000 	ldr.w	r3, [r8]
 8016454:	461c      	mov	r4, r3
 8016456:	bb5c      	cbnz	r4, 80164b0 <_malloc_r+0x90>
 8016458:	4629      	mov	r1, r5
 801645a:	4638      	mov	r0, r7
 801645c:	f7ff ffc0 	bl	80163e0 <sbrk_aligned>
 8016460:	1c43      	adds	r3, r0, #1
 8016462:	4604      	mov	r4, r0
 8016464:	d155      	bne.n	8016512 <_malloc_r+0xf2>
 8016466:	f8d8 4000 	ldr.w	r4, [r8]
 801646a:	4626      	mov	r6, r4
 801646c:	2e00      	cmp	r6, #0
 801646e:	d145      	bne.n	80164fc <_malloc_r+0xdc>
 8016470:	2c00      	cmp	r4, #0
 8016472:	d048      	beq.n	8016506 <_malloc_r+0xe6>
 8016474:	6823      	ldr	r3, [r4, #0]
 8016476:	4631      	mov	r1, r6
 8016478:	4638      	mov	r0, r7
 801647a:	eb04 0903 	add.w	r9, r4, r3
 801647e:	f000 fb9b 	bl	8016bb8 <_sbrk_r>
 8016482:	4581      	cmp	r9, r0
 8016484:	d13f      	bne.n	8016506 <_malloc_r+0xe6>
 8016486:	6821      	ldr	r1, [r4, #0]
 8016488:	1a6d      	subs	r5, r5, r1
 801648a:	4629      	mov	r1, r5
 801648c:	4638      	mov	r0, r7
 801648e:	f7ff ffa7 	bl	80163e0 <sbrk_aligned>
 8016492:	3001      	adds	r0, #1
 8016494:	d037      	beq.n	8016506 <_malloc_r+0xe6>
 8016496:	6823      	ldr	r3, [r4, #0]
 8016498:	442b      	add	r3, r5
 801649a:	6023      	str	r3, [r4, #0]
 801649c:	f8d8 3000 	ldr.w	r3, [r8]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d038      	beq.n	8016516 <_malloc_r+0xf6>
 80164a4:	685a      	ldr	r2, [r3, #4]
 80164a6:	42a2      	cmp	r2, r4
 80164a8:	d12b      	bne.n	8016502 <_malloc_r+0xe2>
 80164aa:	2200      	movs	r2, #0
 80164ac:	605a      	str	r2, [r3, #4]
 80164ae:	e00f      	b.n	80164d0 <_malloc_r+0xb0>
 80164b0:	6822      	ldr	r2, [r4, #0]
 80164b2:	1b52      	subs	r2, r2, r5
 80164b4:	d41f      	bmi.n	80164f6 <_malloc_r+0xd6>
 80164b6:	2a0b      	cmp	r2, #11
 80164b8:	d917      	bls.n	80164ea <_malloc_r+0xca>
 80164ba:	1961      	adds	r1, r4, r5
 80164bc:	42a3      	cmp	r3, r4
 80164be:	6025      	str	r5, [r4, #0]
 80164c0:	bf18      	it	ne
 80164c2:	6059      	strne	r1, [r3, #4]
 80164c4:	6863      	ldr	r3, [r4, #4]
 80164c6:	bf08      	it	eq
 80164c8:	f8c8 1000 	streq.w	r1, [r8]
 80164cc:	5162      	str	r2, [r4, r5]
 80164ce:	604b      	str	r3, [r1, #4]
 80164d0:	4638      	mov	r0, r7
 80164d2:	f104 060b 	add.w	r6, r4, #11
 80164d6:	f000 f829 	bl	801652c <__malloc_unlock>
 80164da:	f026 0607 	bic.w	r6, r6, #7
 80164de:	1d23      	adds	r3, r4, #4
 80164e0:	1af2      	subs	r2, r6, r3
 80164e2:	d0ae      	beq.n	8016442 <_malloc_r+0x22>
 80164e4:	1b9b      	subs	r3, r3, r6
 80164e6:	50a3      	str	r3, [r4, r2]
 80164e8:	e7ab      	b.n	8016442 <_malloc_r+0x22>
 80164ea:	42a3      	cmp	r3, r4
 80164ec:	6862      	ldr	r2, [r4, #4]
 80164ee:	d1dd      	bne.n	80164ac <_malloc_r+0x8c>
 80164f0:	f8c8 2000 	str.w	r2, [r8]
 80164f4:	e7ec      	b.n	80164d0 <_malloc_r+0xb0>
 80164f6:	4623      	mov	r3, r4
 80164f8:	6864      	ldr	r4, [r4, #4]
 80164fa:	e7ac      	b.n	8016456 <_malloc_r+0x36>
 80164fc:	4634      	mov	r4, r6
 80164fe:	6876      	ldr	r6, [r6, #4]
 8016500:	e7b4      	b.n	801646c <_malloc_r+0x4c>
 8016502:	4613      	mov	r3, r2
 8016504:	e7cc      	b.n	80164a0 <_malloc_r+0x80>
 8016506:	230c      	movs	r3, #12
 8016508:	603b      	str	r3, [r7, #0]
 801650a:	4638      	mov	r0, r7
 801650c:	f000 f80e 	bl	801652c <__malloc_unlock>
 8016510:	e797      	b.n	8016442 <_malloc_r+0x22>
 8016512:	6025      	str	r5, [r4, #0]
 8016514:	e7dc      	b.n	80164d0 <_malloc_r+0xb0>
 8016516:	605b      	str	r3, [r3, #4]
 8016518:	deff      	udf	#255	; 0xff
 801651a:	bf00      	nop
 801651c:	2000dc68 	.word	0x2000dc68

08016520 <__malloc_lock>:
 8016520:	4801      	ldr	r0, [pc, #4]	; (8016528 <__malloc_lock+0x8>)
 8016522:	f000 bb96 	b.w	8016c52 <__retarget_lock_acquire_recursive>
 8016526:	bf00      	nop
 8016528:	2000ddb1 	.word	0x2000ddb1

0801652c <__malloc_unlock>:
 801652c:	4801      	ldr	r0, [pc, #4]	; (8016534 <__malloc_unlock+0x8>)
 801652e:	f000 bb91 	b.w	8016c54 <__retarget_lock_release_recursive>
 8016532:	bf00      	nop
 8016534:	2000ddb1 	.word	0x2000ddb1

08016538 <srand>:
 8016538:	b538      	push	{r3, r4, r5, lr}
 801653a:	4b10      	ldr	r3, [pc, #64]	; (801657c <srand+0x44>)
 801653c:	681d      	ldr	r5, [r3, #0]
 801653e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016540:	4604      	mov	r4, r0
 8016542:	b9b3      	cbnz	r3, 8016572 <srand+0x3a>
 8016544:	2018      	movs	r0, #24
 8016546:	f7ff ff3b 	bl	80163c0 <malloc>
 801654a:	4602      	mov	r2, r0
 801654c:	6328      	str	r0, [r5, #48]	; 0x30
 801654e:	b920      	cbnz	r0, 801655a <srand+0x22>
 8016550:	4b0b      	ldr	r3, [pc, #44]	; (8016580 <srand+0x48>)
 8016552:	480c      	ldr	r0, [pc, #48]	; (8016584 <srand+0x4c>)
 8016554:	2146      	movs	r1, #70	; 0x46
 8016556:	f000 fb95 	bl	8016c84 <__assert_func>
 801655a:	490b      	ldr	r1, [pc, #44]	; (8016588 <srand+0x50>)
 801655c:	4b0b      	ldr	r3, [pc, #44]	; (801658c <srand+0x54>)
 801655e:	e9c0 1300 	strd	r1, r3, [r0]
 8016562:	4b0b      	ldr	r3, [pc, #44]	; (8016590 <srand+0x58>)
 8016564:	6083      	str	r3, [r0, #8]
 8016566:	230b      	movs	r3, #11
 8016568:	8183      	strh	r3, [r0, #12]
 801656a:	2100      	movs	r1, #0
 801656c:	2001      	movs	r0, #1
 801656e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016572:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016574:	2200      	movs	r2, #0
 8016576:	611c      	str	r4, [r3, #16]
 8016578:	615a      	str	r2, [r3, #20]
 801657a:	bd38      	pop	{r3, r4, r5, pc}
 801657c:	20000190 	.word	0x20000190
 8016580:	08018754 	.word	0x08018754
 8016584:	0801876b 	.word	0x0801876b
 8016588:	abcd330e 	.word	0xabcd330e
 801658c:	e66d1234 	.word	0xe66d1234
 8016590:	0005deec 	.word	0x0005deec

08016594 <rand>:
 8016594:	4b16      	ldr	r3, [pc, #88]	; (80165f0 <rand+0x5c>)
 8016596:	b510      	push	{r4, lr}
 8016598:	681c      	ldr	r4, [r3, #0]
 801659a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801659c:	b9b3      	cbnz	r3, 80165cc <rand+0x38>
 801659e:	2018      	movs	r0, #24
 80165a0:	f7ff ff0e 	bl	80163c0 <malloc>
 80165a4:	4602      	mov	r2, r0
 80165a6:	6320      	str	r0, [r4, #48]	; 0x30
 80165a8:	b920      	cbnz	r0, 80165b4 <rand+0x20>
 80165aa:	4b12      	ldr	r3, [pc, #72]	; (80165f4 <rand+0x60>)
 80165ac:	4812      	ldr	r0, [pc, #72]	; (80165f8 <rand+0x64>)
 80165ae:	2152      	movs	r1, #82	; 0x52
 80165b0:	f000 fb68 	bl	8016c84 <__assert_func>
 80165b4:	4911      	ldr	r1, [pc, #68]	; (80165fc <rand+0x68>)
 80165b6:	4b12      	ldr	r3, [pc, #72]	; (8016600 <rand+0x6c>)
 80165b8:	e9c0 1300 	strd	r1, r3, [r0]
 80165bc:	4b11      	ldr	r3, [pc, #68]	; (8016604 <rand+0x70>)
 80165be:	6083      	str	r3, [r0, #8]
 80165c0:	230b      	movs	r3, #11
 80165c2:	8183      	strh	r3, [r0, #12]
 80165c4:	2100      	movs	r1, #0
 80165c6:	2001      	movs	r0, #1
 80165c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80165cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80165ce:	480e      	ldr	r0, [pc, #56]	; (8016608 <rand+0x74>)
 80165d0:	690b      	ldr	r3, [r1, #16]
 80165d2:	694c      	ldr	r4, [r1, #20]
 80165d4:	4a0d      	ldr	r2, [pc, #52]	; (801660c <rand+0x78>)
 80165d6:	4358      	muls	r0, r3
 80165d8:	fb02 0004 	mla	r0, r2, r4, r0
 80165dc:	fba3 3202 	umull	r3, r2, r3, r2
 80165e0:	3301      	adds	r3, #1
 80165e2:	eb40 0002 	adc.w	r0, r0, r2
 80165e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80165ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80165ee:	bd10      	pop	{r4, pc}
 80165f0:	20000190 	.word	0x20000190
 80165f4:	08018754 	.word	0x08018754
 80165f8:	0801876b 	.word	0x0801876b
 80165fc:	abcd330e 	.word	0xabcd330e
 8016600:	e66d1234 	.word	0xe66d1234
 8016604:	0005deec 	.word	0x0005deec
 8016608:	5851f42d 	.word	0x5851f42d
 801660c:	4c957f2d 	.word	0x4c957f2d

08016610 <realloc>:
 8016610:	4b02      	ldr	r3, [pc, #8]	; (801661c <realloc+0xc>)
 8016612:	460a      	mov	r2, r1
 8016614:	4601      	mov	r1, r0
 8016616:	6818      	ldr	r0, [r3, #0]
 8016618:	f000 b802 	b.w	8016620 <_realloc_r>
 801661c:	20000190 	.word	0x20000190

08016620 <_realloc_r>:
 8016620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016624:	4680      	mov	r8, r0
 8016626:	4614      	mov	r4, r2
 8016628:	460e      	mov	r6, r1
 801662a:	b921      	cbnz	r1, 8016636 <_realloc_r+0x16>
 801662c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016630:	4611      	mov	r1, r2
 8016632:	f7ff bef5 	b.w	8016420 <_malloc_r>
 8016636:	b92a      	cbnz	r2, 8016644 <_realloc_r+0x24>
 8016638:	f000 fb4e 	bl	8016cd8 <_free_r>
 801663c:	4625      	mov	r5, r4
 801663e:	4628      	mov	r0, r5
 8016640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016644:	f000 fb94 	bl	8016d70 <_malloc_usable_size_r>
 8016648:	4284      	cmp	r4, r0
 801664a:	4607      	mov	r7, r0
 801664c:	d802      	bhi.n	8016654 <_realloc_r+0x34>
 801664e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016652:	d812      	bhi.n	801667a <_realloc_r+0x5a>
 8016654:	4621      	mov	r1, r4
 8016656:	4640      	mov	r0, r8
 8016658:	f7ff fee2 	bl	8016420 <_malloc_r>
 801665c:	4605      	mov	r5, r0
 801665e:	2800      	cmp	r0, #0
 8016660:	d0ed      	beq.n	801663e <_realloc_r+0x1e>
 8016662:	42bc      	cmp	r4, r7
 8016664:	4622      	mov	r2, r4
 8016666:	4631      	mov	r1, r6
 8016668:	bf28      	it	cs
 801666a:	463a      	movcs	r2, r7
 801666c:	f000 fafb 	bl	8016c66 <memcpy>
 8016670:	4631      	mov	r1, r6
 8016672:	4640      	mov	r0, r8
 8016674:	f000 fb30 	bl	8016cd8 <_free_r>
 8016678:	e7e1      	b.n	801663e <_realloc_r+0x1e>
 801667a:	4635      	mov	r5, r6
 801667c:	e7df      	b.n	801663e <_realloc_r+0x1e>
	...

08016680 <_strtoul_l.constprop.0>:
 8016680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016684:	4f36      	ldr	r7, [pc, #216]	; (8016760 <_strtoul_l.constprop.0+0xe0>)
 8016686:	4686      	mov	lr, r0
 8016688:	460d      	mov	r5, r1
 801668a:	4628      	mov	r0, r5
 801668c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016690:	5d3e      	ldrb	r6, [r7, r4]
 8016692:	f016 0608 	ands.w	r6, r6, #8
 8016696:	d1f8      	bne.n	801668a <_strtoul_l.constprop.0+0xa>
 8016698:	2c2d      	cmp	r4, #45	; 0x2d
 801669a:	d130      	bne.n	80166fe <_strtoul_l.constprop.0+0x7e>
 801669c:	782c      	ldrb	r4, [r5, #0]
 801669e:	2601      	movs	r6, #1
 80166a0:	1c85      	adds	r5, r0, #2
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d057      	beq.n	8016756 <_strtoul_l.constprop.0+0xd6>
 80166a6:	2b10      	cmp	r3, #16
 80166a8:	d109      	bne.n	80166be <_strtoul_l.constprop.0+0x3e>
 80166aa:	2c30      	cmp	r4, #48	; 0x30
 80166ac:	d107      	bne.n	80166be <_strtoul_l.constprop.0+0x3e>
 80166ae:	7828      	ldrb	r0, [r5, #0]
 80166b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80166b4:	2858      	cmp	r0, #88	; 0x58
 80166b6:	d149      	bne.n	801674c <_strtoul_l.constprop.0+0xcc>
 80166b8:	786c      	ldrb	r4, [r5, #1]
 80166ba:	2310      	movs	r3, #16
 80166bc:	3502      	adds	r5, #2
 80166be:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80166c2:	2700      	movs	r7, #0
 80166c4:	fbb8 f8f3 	udiv	r8, r8, r3
 80166c8:	fb03 f908 	mul.w	r9, r3, r8
 80166cc:	ea6f 0909 	mvn.w	r9, r9
 80166d0:	4638      	mov	r0, r7
 80166d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80166d6:	f1bc 0f09 	cmp.w	ip, #9
 80166da:	d815      	bhi.n	8016708 <_strtoul_l.constprop.0+0x88>
 80166dc:	4664      	mov	r4, ip
 80166de:	42a3      	cmp	r3, r4
 80166e0:	dd23      	ble.n	801672a <_strtoul_l.constprop.0+0xaa>
 80166e2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80166e6:	d007      	beq.n	80166f8 <_strtoul_l.constprop.0+0x78>
 80166e8:	4580      	cmp	r8, r0
 80166ea:	d31b      	bcc.n	8016724 <_strtoul_l.constprop.0+0xa4>
 80166ec:	d101      	bne.n	80166f2 <_strtoul_l.constprop.0+0x72>
 80166ee:	45a1      	cmp	r9, r4
 80166f0:	db18      	blt.n	8016724 <_strtoul_l.constprop.0+0xa4>
 80166f2:	fb00 4003 	mla	r0, r0, r3, r4
 80166f6:	2701      	movs	r7, #1
 80166f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80166fc:	e7e9      	b.n	80166d2 <_strtoul_l.constprop.0+0x52>
 80166fe:	2c2b      	cmp	r4, #43	; 0x2b
 8016700:	bf04      	itt	eq
 8016702:	782c      	ldrbeq	r4, [r5, #0]
 8016704:	1c85      	addeq	r5, r0, #2
 8016706:	e7cc      	b.n	80166a2 <_strtoul_l.constprop.0+0x22>
 8016708:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801670c:	f1bc 0f19 	cmp.w	ip, #25
 8016710:	d801      	bhi.n	8016716 <_strtoul_l.constprop.0+0x96>
 8016712:	3c37      	subs	r4, #55	; 0x37
 8016714:	e7e3      	b.n	80166de <_strtoul_l.constprop.0+0x5e>
 8016716:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801671a:	f1bc 0f19 	cmp.w	ip, #25
 801671e:	d804      	bhi.n	801672a <_strtoul_l.constprop.0+0xaa>
 8016720:	3c57      	subs	r4, #87	; 0x57
 8016722:	e7dc      	b.n	80166de <_strtoul_l.constprop.0+0x5e>
 8016724:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016728:	e7e6      	b.n	80166f8 <_strtoul_l.constprop.0+0x78>
 801672a:	1c7b      	adds	r3, r7, #1
 801672c:	d106      	bne.n	801673c <_strtoul_l.constprop.0+0xbc>
 801672e:	2322      	movs	r3, #34	; 0x22
 8016730:	f8ce 3000 	str.w	r3, [lr]
 8016734:	4638      	mov	r0, r7
 8016736:	b932      	cbnz	r2, 8016746 <_strtoul_l.constprop.0+0xc6>
 8016738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801673c:	b106      	cbz	r6, 8016740 <_strtoul_l.constprop.0+0xc0>
 801673e:	4240      	negs	r0, r0
 8016740:	2a00      	cmp	r2, #0
 8016742:	d0f9      	beq.n	8016738 <_strtoul_l.constprop.0+0xb8>
 8016744:	b107      	cbz	r7, 8016748 <_strtoul_l.constprop.0+0xc8>
 8016746:	1e69      	subs	r1, r5, #1
 8016748:	6011      	str	r1, [r2, #0]
 801674a:	e7f5      	b.n	8016738 <_strtoul_l.constprop.0+0xb8>
 801674c:	2430      	movs	r4, #48	; 0x30
 801674e:	2b00      	cmp	r3, #0
 8016750:	d1b5      	bne.n	80166be <_strtoul_l.constprop.0+0x3e>
 8016752:	2308      	movs	r3, #8
 8016754:	e7b3      	b.n	80166be <_strtoul_l.constprop.0+0x3e>
 8016756:	2c30      	cmp	r4, #48	; 0x30
 8016758:	d0a9      	beq.n	80166ae <_strtoul_l.constprop.0+0x2e>
 801675a:	230a      	movs	r3, #10
 801675c:	e7af      	b.n	80166be <_strtoul_l.constprop.0+0x3e>
 801675e:	bf00      	nop
 8016760:	080187c4 	.word	0x080187c4

08016764 <strtoul>:
 8016764:	4613      	mov	r3, r2
 8016766:	460a      	mov	r2, r1
 8016768:	4601      	mov	r1, r0
 801676a:	4802      	ldr	r0, [pc, #8]	; (8016774 <strtoul+0x10>)
 801676c:	6800      	ldr	r0, [r0, #0]
 801676e:	f7ff bf87 	b.w	8016680 <_strtoul_l.constprop.0>
 8016772:	bf00      	nop
 8016774:	20000190 	.word	0x20000190

08016778 <std>:
 8016778:	2300      	movs	r3, #0
 801677a:	b510      	push	{r4, lr}
 801677c:	4604      	mov	r4, r0
 801677e:	e9c0 3300 	strd	r3, r3, [r0]
 8016782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016786:	6083      	str	r3, [r0, #8]
 8016788:	8181      	strh	r1, [r0, #12]
 801678a:	6643      	str	r3, [r0, #100]	; 0x64
 801678c:	81c2      	strh	r2, [r0, #14]
 801678e:	6183      	str	r3, [r0, #24]
 8016790:	4619      	mov	r1, r3
 8016792:	2208      	movs	r2, #8
 8016794:	305c      	adds	r0, #92	; 0x5c
 8016796:	f000 f99d 	bl	8016ad4 <memset>
 801679a:	4b0d      	ldr	r3, [pc, #52]	; (80167d0 <std+0x58>)
 801679c:	6263      	str	r3, [r4, #36]	; 0x24
 801679e:	4b0d      	ldr	r3, [pc, #52]	; (80167d4 <std+0x5c>)
 80167a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80167a2:	4b0d      	ldr	r3, [pc, #52]	; (80167d8 <std+0x60>)
 80167a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80167a6:	4b0d      	ldr	r3, [pc, #52]	; (80167dc <std+0x64>)
 80167a8:	6323      	str	r3, [r4, #48]	; 0x30
 80167aa:	4b0d      	ldr	r3, [pc, #52]	; (80167e0 <std+0x68>)
 80167ac:	6224      	str	r4, [r4, #32]
 80167ae:	429c      	cmp	r4, r3
 80167b0:	d006      	beq.n	80167c0 <std+0x48>
 80167b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80167b6:	4294      	cmp	r4, r2
 80167b8:	d002      	beq.n	80167c0 <std+0x48>
 80167ba:	33d0      	adds	r3, #208	; 0xd0
 80167bc:	429c      	cmp	r4, r3
 80167be:	d105      	bne.n	80167cc <std+0x54>
 80167c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80167c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167c8:	f000 ba42 	b.w	8016c50 <__retarget_lock_init_recursive>
 80167cc:	bd10      	pop	{r4, pc}
 80167ce:	bf00      	nop
 80167d0:	08016989 	.word	0x08016989
 80167d4:	080169ab 	.word	0x080169ab
 80167d8:	080169e3 	.word	0x080169e3
 80167dc:	08016a07 	.word	0x08016a07
 80167e0:	2000dc70 	.word	0x2000dc70

080167e4 <stdio_exit_handler>:
 80167e4:	4a02      	ldr	r2, [pc, #8]	; (80167f0 <stdio_exit_handler+0xc>)
 80167e6:	4903      	ldr	r1, [pc, #12]	; (80167f4 <stdio_exit_handler+0x10>)
 80167e8:	4803      	ldr	r0, [pc, #12]	; (80167f8 <stdio_exit_handler+0x14>)
 80167ea:	f000 b869 	b.w	80168c0 <_fwalk_sglue>
 80167ee:	bf00      	nop
 80167f0:	20000138 	.word	0x20000138
 80167f4:	080176e5 	.word	0x080176e5
 80167f8:	20000144 	.word	0x20000144

080167fc <cleanup_stdio>:
 80167fc:	6841      	ldr	r1, [r0, #4]
 80167fe:	4b0c      	ldr	r3, [pc, #48]	; (8016830 <cleanup_stdio+0x34>)
 8016800:	4299      	cmp	r1, r3
 8016802:	b510      	push	{r4, lr}
 8016804:	4604      	mov	r4, r0
 8016806:	d001      	beq.n	801680c <cleanup_stdio+0x10>
 8016808:	f000 ff6c 	bl	80176e4 <_fflush_r>
 801680c:	68a1      	ldr	r1, [r4, #8]
 801680e:	4b09      	ldr	r3, [pc, #36]	; (8016834 <cleanup_stdio+0x38>)
 8016810:	4299      	cmp	r1, r3
 8016812:	d002      	beq.n	801681a <cleanup_stdio+0x1e>
 8016814:	4620      	mov	r0, r4
 8016816:	f000 ff65 	bl	80176e4 <_fflush_r>
 801681a:	68e1      	ldr	r1, [r4, #12]
 801681c:	4b06      	ldr	r3, [pc, #24]	; (8016838 <cleanup_stdio+0x3c>)
 801681e:	4299      	cmp	r1, r3
 8016820:	d004      	beq.n	801682c <cleanup_stdio+0x30>
 8016822:	4620      	mov	r0, r4
 8016824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016828:	f000 bf5c 	b.w	80176e4 <_fflush_r>
 801682c:	bd10      	pop	{r4, pc}
 801682e:	bf00      	nop
 8016830:	2000dc70 	.word	0x2000dc70
 8016834:	2000dcd8 	.word	0x2000dcd8
 8016838:	2000dd40 	.word	0x2000dd40

0801683c <global_stdio_init.part.0>:
 801683c:	b510      	push	{r4, lr}
 801683e:	4b0b      	ldr	r3, [pc, #44]	; (801686c <global_stdio_init.part.0+0x30>)
 8016840:	4c0b      	ldr	r4, [pc, #44]	; (8016870 <global_stdio_init.part.0+0x34>)
 8016842:	4a0c      	ldr	r2, [pc, #48]	; (8016874 <global_stdio_init.part.0+0x38>)
 8016844:	601a      	str	r2, [r3, #0]
 8016846:	4620      	mov	r0, r4
 8016848:	2200      	movs	r2, #0
 801684a:	2104      	movs	r1, #4
 801684c:	f7ff ff94 	bl	8016778 <std>
 8016850:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016854:	2201      	movs	r2, #1
 8016856:	2109      	movs	r1, #9
 8016858:	f7ff ff8e 	bl	8016778 <std>
 801685c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016860:	2202      	movs	r2, #2
 8016862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016866:	2112      	movs	r1, #18
 8016868:	f7ff bf86 	b.w	8016778 <std>
 801686c:	2000dda8 	.word	0x2000dda8
 8016870:	2000dc70 	.word	0x2000dc70
 8016874:	080167e5 	.word	0x080167e5

08016878 <__sfp_lock_acquire>:
 8016878:	4801      	ldr	r0, [pc, #4]	; (8016880 <__sfp_lock_acquire+0x8>)
 801687a:	f000 b9ea 	b.w	8016c52 <__retarget_lock_acquire_recursive>
 801687e:	bf00      	nop
 8016880:	2000ddb2 	.word	0x2000ddb2

08016884 <__sfp_lock_release>:
 8016884:	4801      	ldr	r0, [pc, #4]	; (801688c <__sfp_lock_release+0x8>)
 8016886:	f000 b9e5 	b.w	8016c54 <__retarget_lock_release_recursive>
 801688a:	bf00      	nop
 801688c:	2000ddb2 	.word	0x2000ddb2

08016890 <__sinit>:
 8016890:	b510      	push	{r4, lr}
 8016892:	4604      	mov	r4, r0
 8016894:	f7ff fff0 	bl	8016878 <__sfp_lock_acquire>
 8016898:	6a23      	ldr	r3, [r4, #32]
 801689a:	b11b      	cbz	r3, 80168a4 <__sinit+0x14>
 801689c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168a0:	f7ff bff0 	b.w	8016884 <__sfp_lock_release>
 80168a4:	4b04      	ldr	r3, [pc, #16]	; (80168b8 <__sinit+0x28>)
 80168a6:	6223      	str	r3, [r4, #32]
 80168a8:	4b04      	ldr	r3, [pc, #16]	; (80168bc <__sinit+0x2c>)
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d1f5      	bne.n	801689c <__sinit+0xc>
 80168b0:	f7ff ffc4 	bl	801683c <global_stdio_init.part.0>
 80168b4:	e7f2      	b.n	801689c <__sinit+0xc>
 80168b6:	bf00      	nop
 80168b8:	080167fd 	.word	0x080167fd
 80168bc:	2000dda8 	.word	0x2000dda8

080168c0 <_fwalk_sglue>:
 80168c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168c4:	4607      	mov	r7, r0
 80168c6:	4688      	mov	r8, r1
 80168c8:	4614      	mov	r4, r2
 80168ca:	2600      	movs	r6, #0
 80168cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80168d0:	f1b9 0901 	subs.w	r9, r9, #1
 80168d4:	d505      	bpl.n	80168e2 <_fwalk_sglue+0x22>
 80168d6:	6824      	ldr	r4, [r4, #0]
 80168d8:	2c00      	cmp	r4, #0
 80168da:	d1f7      	bne.n	80168cc <_fwalk_sglue+0xc>
 80168dc:	4630      	mov	r0, r6
 80168de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168e2:	89ab      	ldrh	r3, [r5, #12]
 80168e4:	2b01      	cmp	r3, #1
 80168e6:	d907      	bls.n	80168f8 <_fwalk_sglue+0x38>
 80168e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80168ec:	3301      	adds	r3, #1
 80168ee:	d003      	beq.n	80168f8 <_fwalk_sglue+0x38>
 80168f0:	4629      	mov	r1, r5
 80168f2:	4638      	mov	r0, r7
 80168f4:	47c0      	blx	r8
 80168f6:	4306      	orrs	r6, r0
 80168f8:	3568      	adds	r5, #104	; 0x68
 80168fa:	e7e9      	b.n	80168d0 <_fwalk_sglue+0x10>

080168fc <iprintf>:
 80168fc:	b40f      	push	{r0, r1, r2, r3}
 80168fe:	b507      	push	{r0, r1, r2, lr}
 8016900:	4906      	ldr	r1, [pc, #24]	; (801691c <iprintf+0x20>)
 8016902:	ab04      	add	r3, sp, #16
 8016904:	6808      	ldr	r0, [r1, #0]
 8016906:	f853 2b04 	ldr.w	r2, [r3], #4
 801690a:	6881      	ldr	r1, [r0, #8]
 801690c:	9301      	str	r3, [sp, #4]
 801690e:	f000 fbb9 	bl	8017084 <_vfiprintf_r>
 8016912:	b003      	add	sp, #12
 8016914:	f85d eb04 	ldr.w	lr, [sp], #4
 8016918:	b004      	add	sp, #16
 801691a:	4770      	bx	lr
 801691c:	20000190 	.word	0x20000190

08016920 <sniprintf>:
 8016920:	b40c      	push	{r2, r3}
 8016922:	b530      	push	{r4, r5, lr}
 8016924:	4b17      	ldr	r3, [pc, #92]	; (8016984 <sniprintf+0x64>)
 8016926:	1e0c      	subs	r4, r1, #0
 8016928:	681d      	ldr	r5, [r3, #0]
 801692a:	b09d      	sub	sp, #116	; 0x74
 801692c:	da08      	bge.n	8016940 <sniprintf+0x20>
 801692e:	238b      	movs	r3, #139	; 0x8b
 8016930:	602b      	str	r3, [r5, #0]
 8016932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016936:	b01d      	add	sp, #116	; 0x74
 8016938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801693c:	b002      	add	sp, #8
 801693e:	4770      	bx	lr
 8016940:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016944:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016948:	bf14      	ite	ne
 801694a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801694e:	4623      	moveq	r3, r4
 8016950:	9304      	str	r3, [sp, #16]
 8016952:	9307      	str	r3, [sp, #28]
 8016954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016958:	9002      	str	r0, [sp, #8]
 801695a:	9006      	str	r0, [sp, #24]
 801695c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016960:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016962:	ab21      	add	r3, sp, #132	; 0x84
 8016964:	a902      	add	r1, sp, #8
 8016966:	4628      	mov	r0, r5
 8016968:	9301      	str	r3, [sp, #4]
 801696a:	f000 fa63 	bl	8016e34 <_svfiprintf_r>
 801696e:	1c43      	adds	r3, r0, #1
 8016970:	bfbc      	itt	lt
 8016972:	238b      	movlt	r3, #139	; 0x8b
 8016974:	602b      	strlt	r3, [r5, #0]
 8016976:	2c00      	cmp	r4, #0
 8016978:	d0dd      	beq.n	8016936 <sniprintf+0x16>
 801697a:	9b02      	ldr	r3, [sp, #8]
 801697c:	2200      	movs	r2, #0
 801697e:	701a      	strb	r2, [r3, #0]
 8016980:	e7d9      	b.n	8016936 <sniprintf+0x16>
 8016982:	bf00      	nop
 8016984:	20000190 	.word	0x20000190

08016988 <__sread>:
 8016988:	b510      	push	{r4, lr}
 801698a:	460c      	mov	r4, r1
 801698c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016990:	f000 f900 	bl	8016b94 <_read_r>
 8016994:	2800      	cmp	r0, #0
 8016996:	bfab      	itete	ge
 8016998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801699a:	89a3      	ldrhlt	r3, [r4, #12]
 801699c:	181b      	addge	r3, r3, r0
 801699e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80169a2:	bfac      	ite	ge
 80169a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80169a6:	81a3      	strhlt	r3, [r4, #12]
 80169a8:	bd10      	pop	{r4, pc}

080169aa <__swrite>:
 80169aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169ae:	461f      	mov	r7, r3
 80169b0:	898b      	ldrh	r3, [r1, #12]
 80169b2:	05db      	lsls	r3, r3, #23
 80169b4:	4605      	mov	r5, r0
 80169b6:	460c      	mov	r4, r1
 80169b8:	4616      	mov	r6, r2
 80169ba:	d505      	bpl.n	80169c8 <__swrite+0x1e>
 80169bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169c0:	2302      	movs	r3, #2
 80169c2:	2200      	movs	r2, #0
 80169c4:	f000 f8d4 	bl	8016b70 <_lseek_r>
 80169c8:	89a3      	ldrh	r3, [r4, #12]
 80169ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80169d2:	81a3      	strh	r3, [r4, #12]
 80169d4:	4632      	mov	r2, r6
 80169d6:	463b      	mov	r3, r7
 80169d8:	4628      	mov	r0, r5
 80169da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169de:	f000 b8fb 	b.w	8016bd8 <_write_r>

080169e2 <__sseek>:
 80169e2:	b510      	push	{r4, lr}
 80169e4:	460c      	mov	r4, r1
 80169e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169ea:	f000 f8c1 	bl	8016b70 <_lseek_r>
 80169ee:	1c43      	adds	r3, r0, #1
 80169f0:	89a3      	ldrh	r3, [r4, #12]
 80169f2:	bf15      	itete	ne
 80169f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80169f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80169fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80169fe:	81a3      	strheq	r3, [r4, #12]
 8016a00:	bf18      	it	ne
 8016a02:	81a3      	strhne	r3, [r4, #12]
 8016a04:	bd10      	pop	{r4, pc}

08016a06 <__sclose>:
 8016a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a0a:	f000 b8a1 	b.w	8016b50 <_close_r>

08016a0e <_vsniprintf_r>:
 8016a0e:	b530      	push	{r4, r5, lr}
 8016a10:	4614      	mov	r4, r2
 8016a12:	2c00      	cmp	r4, #0
 8016a14:	b09b      	sub	sp, #108	; 0x6c
 8016a16:	4605      	mov	r5, r0
 8016a18:	461a      	mov	r2, r3
 8016a1a:	da05      	bge.n	8016a28 <_vsniprintf_r+0x1a>
 8016a1c:	238b      	movs	r3, #139	; 0x8b
 8016a1e:	6003      	str	r3, [r0, #0]
 8016a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a24:	b01b      	add	sp, #108	; 0x6c
 8016a26:	bd30      	pop	{r4, r5, pc}
 8016a28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016a2c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016a30:	bf14      	ite	ne
 8016a32:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8016a36:	4623      	moveq	r3, r4
 8016a38:	9302      	str	r3, [sp, #8]
 8016a3a:	9305      	str	r3, [sp, #20]
 8016a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a40:	9100      	str	r1, [sp, #0]
 8016a42:	9104      	str	r1, [sp, #16]
 8016a44:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016a48:	4669      	mov	r1, sp
 8016a4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016a4c:	f000 f9f2 	bl	8016e34 <_svfiprintf_r>
 8016a50:	1c43      	adds	r3, r0, #1
 8016a52:	bfbc      	itt	lt
 8016a54:	238b      	movlt	r3, #139	; 0x8b
 8016a56:	602b      	strlt	r3, [r5, #0]
 8016a58:	2c00      	cmp	r4, #0
 8016a5a:	d0e3      	beq.n	8016a24 <_vsniprintf_r+0x16>
 8016a5c:	9b00      	ldr	r3, [sp, #0]
 8016a5e:	2200      	movs	r2, #0
 8016a60:	701a      	strb	r2, [r3, #0]
 8016a62:	e7df      	b.n	8016a24 <_vsniprintf_r+0x16>

08016a64 <vsniprintf>:
 8016a64:	b507      	push	{r0, r1, r2, lr}
 8016a66:	9300      	str	r3, [sp, #0]
 8016a68:	4613      	mov	r3, r2
 8016a6a:	460a      	mov	r2, r1
 8016a6c:	4601      	mov	r1, r0
 8016a6e:	4803      	ldr	r0, [pc, #12]	; (8016a7c <vsniprintf+0x18>)
 8016a70:	6800      	ldr	r0, [r0, #0]
 8016a72:	f7ff ffcc 	bl	8016a0e <_vsniprintf_r>
 8016a76:	b003      	add	sp, #12
 8016a78:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a7c:	20000190 	.word	0x20000190

08016a80 <memcmp>:
 8016a80:	b510      	push	{r4, lr}
 8016a82:	3901      	subs	r1, #1
 8016a84:	4402      	add	r2, r0
 8016a86:	4290      	cmp	r0, r2
 8016a88:	d101      	bne.n	8016a8e <memcmp+0xe>
 8016a8a:	2000      	movs	r0, #0
 8016a8c:	e005      	b.n	8016a9a <memcmp+0x1a>
 8016a8e:	7803      	ldrb	r3, [r0, #0]
 8016a90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016a94:	42a3      	cmp	r3, r4
 8016a96:	d001      	beq.n	8016a9c <memcmp+0x1c>
 8016a98:	1b18      	subs	r0, r3, r4
 8016a9a:	bd10      	pop	{r4, pc}
 8016a9c:	3001      	adds	r0, #1
 8016a9e:	e7f2      	b.n	8016a86 <memcmp+0x6>

08016aa0 <memmove>:
 8016aa0:	4288      	cmp	r0, r1
 8016aa2:	b510      	push	{r4, lr}
 8016aa4:	eb01 0402 	add.w	r4, r1, r2
 8016aa8:	d902      	bls.n	8016ab0 <memmove+0x10>
 8016aaa:	4284      	cmp	r4, r0
 8016aac:	4623      	mov	r3, r4
 8016aae:	d807      	bhi.n	8016ac0 <memmove+0x20>
 8016ab0:	1e43      	subs	r3, r0, #1
 8016ab2:	42a1      	cmp	r1, r4
 8016ab4:	d008      	beq.n	8016ac8 <memmove+0x28>
 8016ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016abe:	e7f8      	b.n	8016ab2 <memmove+0x12>
 8016ac0:	4402      	add	r2, r0
 8016ac2:	4601      	mov	r1, r0
 8016ac4:	428a      	cmp	r2, r1
 8016ac6:	d100      	bne.n	8016aca <memmove+0x2a>
 8016ac8:	bd10      	pop	{r4, pc}
 8016aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016ad2:	e7f7      	b.n	8016ac4 <memmove+0x24>

08016ad4 <memset>:
 8016ad4:	4402      	add	r2, r0
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	4293      	cmp	r3, r2
 8016ada:	d100      	bne.n	8016ade <memset+0xa>
 8016adc:	4770      	bx	lr
 8016ade:	f803 1b01 	strb.w	r1, [r3], #1
 8016ae2:	e7f9      	b.n	8016ad8 <memset+0x4>

08016ae4 <strchr>:
 8016ae4:	b2c9      	uxtb	r1, r1
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016aec:	b11a      	cbz	r2, 8016af6 <strchr+0x12>
 8016aee:	428a      	cmp	r2, r1
 8016af0:	d1f9      	bne.n	8016ae6 <strchr+0x2>
 8016af2:	4618      	mov	r0, r3
 8016af4:	4770      	bx	lr
 8016af6:	2900      	cmp	r1, #0
 8016af8:	bf18      	it	ne
 8016afa:	2300      	movne	r3, #0
 8016afc:	e7f9      	b.n	8016af2 <strchr+0xe>

08016afe <strncmp>:
 8016afe:	b510      	push	{r4, lr}
 8016b00:	b16a      	cbz	r2, 8016b1e <strncmp+0x20>
 8016b02:	3901      	subs	r1, #1
 8016b04:	1884      	adds	r4, r0, r2
 8016b06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d103      	bne.n	8016b1a <strncmp+0x1c>
 8016b12:	42a0      	cmp	r0, r4
 8016b14:	d001      	beq.n	8016b1a <strncmp+0x1c>
 8016b16:	2a00      	cmp	r2, #0
 8016b18:	d1f5      	bne.n	8016b06 <strncmp+0x8>
 8016b1a:	1ad0      	subs	r0, r2, r3
 8016b1c:	bd10      	pop	{r4, pc}
 8016b1e:	4610      	mov	r0, r2
 8016b20:	e7fc      	b.n	8016b1c <strncmp+0x1e>

08016b22 <strstr>:
 8016b22:	780a      	ldrb	r2, [r1, #0]
 8016b24:	b570      	push	{r4, r5, r6, lr}
 8016b26:	b96a      	cbnz	r2, 8016b44 <strstr+0x22>
 8016b28:	bd70      	pop	{r4, r5, r6, pc}
 8016b2a:	429a      	cmp	r2, r3
 8016b2c:	d109      	bne.n	8016b42 <strstr+0x20>
 8016b2e:	460c      	mov	r4, r1
 8016b30:	4605      	mov	r5, r0
 8016b32:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d0f6      	beq.n	8016b28 <strstr+0x6>
 8016b3a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016b3e:	429e      	cmp	r6, r3
 8016b40:	d0f7      	beq.n	8016b32 <strstr+0x10>
 8016b42:	3001      	adds	r0, #1
 8016b44:	7803      	ldrb	r3, [r0, #0]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d1ef      	bne.n	8016b2a <strstr+0x8>
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	e7ec      	b.n	8016b28 <strstr+0x6>
	...

08016b50 <_close_r>:
 8016b50:	b538      	push	{r3, r4, r5, lr}
 8016b52:	4d06      	ldr	r5, [pc, #24]	; (8016b6c <_close_r+0x1c>)
 8016b54:	2300      	movs	r3, #0
 8016b56:	4604      	mov	r4, r0
 8016b58:	4608      	mov	r0, r1
 8016b5a:	602b      	str	r3, [r5, #0]
 8016b5c:	f7eb fae3 	bl	8002126 <_close>
 8016b60:	1c43      	adds	r3, r0, #1
 8016b62:	d102      	bne.n	8016b6a <_close_r+0x1a>
 8016b64:	682b      	ldr	r3, [r5, #0]
 8016b66:	b103      	cbz	r3, 8016b6a <_close_r+0x1a>
 8016b68:	6023      	str	r3, [r4, #0]
 8016b6a:	bd38      	pop	{r3, r4, r5, pc}
 8016b6c:	2000ddac 	.word	0x2000ddac

08016b70 <_lseek_r>:
 8016b70:	b538      	push	{r3, r4, r5, lr}
 8016b72:	4d07      	ldr	r5, [pc, #28]	; (8016b90 <_lseek_r+0x20>)
 8016b74:	4604      	mov	r4, r0
 8016b76:	4608      	mov	r0, r1
 8016b78:	4611      	mov	r1, r2
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	602a      	str	r2, [r5, #0]
 8016b7e:	461a      	mov	r2, r3
 8016b80:	f7eb faf8 	bl	8002174 <_lseek>
 8016b84:	1c43      	adds	r3, r0, #1
 8016b86:	d102      	bne.n	8016b8e <_lseek_r+0x1e>
 8016b88:	682b      	ldr	r3, [r5, #0]
 8016b8a:	b103      	cbz	r3, 8016b8e <_lseek_r+0x1e>
 8016b8c:	6023      	str	r3, [r4, #0]
 8016b8e:	bd38      	pop	{r3, r4, r5, pc}
 8016b90:	2000ddac 	.word	0x2000ddac

08016b94 <_read_r>:
 8016b94:	b538      	push	{r3, r4, r5, lr}
 8016b96:	4d07      	ldr	r5, [pc, #28]	; (8016bb4 <_read_r+0x20>)
 8016b98:	4604      	mov	r4, r0
 8016b9a:	4608      	mov	r0, r1
 8016b9c:	4611      	mov	r1, r2
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	602a      	str	r2, [r5, #0]
 8016ba2:	461a      	mov	r2, r3
 8016ba4:	f7eb fa86 	bl	80020b4 <_read>
 8016ba8:	1c43      	adds	r3, r0, #1
 8016baa:	d102      	bne.n	8016bb2 <_read_r+0x1e>
 8016bac:	682b      	ldr	r3, [r5, #0]
 8016bae:	b103      	cbz	r3, 8016bb2 <_read_r+0x1e>
 8016bb0:	6023      	str	r3, [r4, #0]
 8016bb2:	bd38      	pop	{r3, r4, r5, pc}
 8016bb4:	2000ddac 	.word	0x2000ddac

08016bb8 <_sbrk_r>:
 8016bb8:	b538      	push	{r3, r4, r5, lr}
 8016bba:	4d06      	ldr	r5, [pc, #24]	; (8016bd4 <_sbrk_r+0x1c>)
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	4604      	mov	r4, r0
 8016bc0:	4608      	mov	r0, r1
 8016bc2:	602b      	str	r3, [r5, #0]
 8016bc4:	f7eb fae4 	bl	8002190 <_sbrk>
 8016bc8:	1c43      	adds	r3, r0, #1
 8016bca:	d102      	bne.n	8016bd2 <_sbrk_r+0x1a>
 8016bcc:	682b      	ldr	r3, [r5, #0]
 8016bce:	b103      	cbz	r3, 8016bd2 <_sbrk_r+0x1a>
 8016bd0:	6023      	str	r3, [r4, #0]
 8016bd2:	bd38      	pop	{r3, r4, r5, pc}
 8016bd4:	2000ddac 	.word	0x2000ddac

08016bd8 <_write_r>:
 8016bd8:	b538      	push	{r3, r4, r5, lr}
 8016bda:	4d07      	ldr	r5, [pc, #28]	; (8016bf8 <_write_r+0x20>)
 8016bdc:	4604      	mov	r4, r0
 8016bde:	4608      	mov	r0, r1
 8016be0:	4611      	mov	r1, r2
 8016be2:	2200      	movs	r2, #0
 8016be4:	602a      	str	r2, [r5, #0]
 8016be6:	461a      	mov	r2, r3
 8016be8:	f7eb fa81 	bl	80020ee <_write>
 8016bec:	1c43      	adds	r3, r0, #1
 8016bee:	d102      	bne.n	8016bf6 <_write_r+0x1e>
 8016bf0:	682b      	ldr	r3, [r5, #0]
 8016bf2:	b103      	cbz	r3, 8016bf6 <_write_r+0x1e>
 8016bf4:	6023      	str	r3, [r4, #0]
 8016bf6:	bd38      	pop	{r3, r4, r5, pc}
 8016bf8:	2000ddac 	.word	0x2000ddac

08016bfc <__errno>:
 8016bfc:	4b01      	ldr	r3, [pc, #4]	; (8016c04 <__errno+0x8>)
 8016bfe:	6818      	ldr	r0, [r3, #0]
 8016c00:	4770      	bx	lr
 8016c02:	bf00      	nop
 8016c04:	20000190 	.word	0x20000190

08016c08 <__libc_init_array>:
 8016c08:	b570      	push	{r4, r5, r6, lr}
 8016c0a:	4d0d      	ldr	r5, [pc, #52]	; (8016c40 <__libc_init_array+0x38>)
 8016c0c:	4c0d      	ldr	r4, [pc, #52]	; (8016c44 <__libc_init_array+0x3c>)
 8016c0e:	1b64      	subs	r4, r4, r5
 8016c10:	10a4      	asrs	r4, r4, #2
 8016c12:	2600      	movs	r6, #0
 8016c14:	42a6      	cmp	r6, r4
 8016c16:	d109      	bne.n	8016c2c <__libc_init_array+0x24>
 8016c18:	4d0b      	ldr	r5, [pc, #44]	; (8016c48 <__libc_init_array+0x40>)
 8016c1a:	4c0c      	ldr	r4, [pc, #48]	; (8016c4c <__libc_init_array+0x44>)
 8016c1c:	f000 ff02 	bl	8017a24 <_init>
 8016c20:	1b64      	subs	r4, r4, r5
 8016c22:	10a4      	asrs	r4, r4, #2
 8016c24:	2600      	movs	r6, #0
 8016c26:	42a6      	cmp	r6, r4
 8016c28:	d105      	bne.n	8016c36 <__libc_init_array+0x2e>
 8016c2a:	bd70      	pop	{r4, r5, r6, pc}
 8016c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c30:	4798      	blx	r3
 8016c32:	3601      	adds	r6, #1
 8016c34:	e7ee      	b.n	8016c14 <__libc_init_array+0xc>
 8016c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c3a:	4798      	blx	r3
 8016c3c:	3601      	adds	r6, #1
 8016c3e:	e7f2      	b.n	8016c26 <__libc_init_array+0x1e>
 8016c40:	0801893c 	.word	0x0801893c
 8016c44:	0801893c 	.word	0x0801893c
 8016c48:	0801893c 	.word	0x0801893c
 8016c4c:	08018948 	.word	0x08018948

08016c50 <__retarget_lock_init_recursive>:
 8016c50:	4770      	bx	lr

08016c52 <__retarget_lock_acquire_recursive>:
 8016c52:	4770      	bx	lr

08016c54 <__retarget_lock_release_recursive>:
 8016c54:	4770      	bx	lr

08016c56 <strcpy>:
 8016c56:	4603      	mov	r3, r0
 8016c58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c5c:	f803 2b01 	strb.w	r2, [r3], #1
 8016c60:	2a00      	cmp	r2, #0
 8016c62:	d1f9      	bne.n	8016c58 <strcpy+0x2>
 8016c64:	4770      	bx	lr

08016c66 <memcpy>:
 8016c66:	440a      	add	r2, r1
 8016c68:	4291      	cmp	r1, r2
 8016c6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016c6e:	d100      	bne.n	8016c72 <memcpy+0xc>
 8016c70:	4770      	bx	lr
 8016c72:	b510      	push	{r4, lr}
 8016c74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016c7c:	4291      	cmp	r1, r2
 8016c7e:	d1f9      	bne.n	8016c74 <memcpy+0xe>
 8016c80:	bd10      	pop	{r4, pc}
	...

08016c84 <__assert_func>:
 8016c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016c86:	4614      	mov	r4, r2
 8016c88:	461a      	mov	r2, r3
 8016c8a:	4b09      	ldr	r3, [pc, #36]	; (8016cb0 <__assert_func+0x2c>)
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	4605      	mov	r5, r0
 8016c90:	68d8      	ldr	r0, [r3, #12]
 8016c92:	b14c      	cbz	r4, 8016ca8 <__assert_func+0x24>
 8016c94:	4b07      	ldr	r3, [pc, #28]	; (8016cb4 <__assert_func+0x30>)
 8016c96:	9100      	str	r1, [sp, #0]
 8016c98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016c9c:	4906      	ldr	r1, [pc, #24]	; (8016cb8 <__assert_func+0x34>)
 8016c9e:	462b      	mov	r3, r5
 8016ca0:	f000 fd48 	bl	8017734 <fiprintf>
 8016ca4:	f000 fdee 	bl	8017884 <abort>
 8016ca8:	4b04      	ldr	r3, [pc, #16]	; (8016cbc <__assert_func+0x38>)
 8016caa:	461c      	mov	r4, r3
 8016cac:	e7f3      	b.n	8016c96 <__assert_func+0x12>
 8016cae:	bf00      	nop
 8016cb0:	20000190 	.word	0x20000190
 8016cb4:	080188c4 	.word	0x080188c4
 8016cb8:	080188d1 	.word	0x080188d1
 8016cbc:	080188ff 	.word	0x080188ff

08016cc0 <__env_lock>:
 8016cc0:	4801      	ldr	r0, [pc, #4]	; (8016cc8 <__env_lock+0x8>)
 8016cc2:	f7ff bfc6 	b.w	8016c52 <__retarget_lock_acquire_recursive>
 8016cc6:	bf00      	nop
 8016cc8:	2000ddb0 	.word	0x2000ddb0

08016ccc <__env_unlock>:
 8016ccc:	4801      	ldr	r0, [pc, #4]	; (8016cd4 <__env_unlock+0x8>)
 8016cce:	f7ff bfc1 	b.w	8016c54 <__retarget_lock_release_recursive>
 8016cd2:	bf00      	nop
 8016cd4:	2000ddb0 	.word	0x2000ddb0

08016cd8 <_free_r>:
 8016cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016cda:	2900      	cmp	r1, #0
 8016cdc:	d044      	beq.n	8016d68 <_free_r+0x90>
 8016cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ce2:	9001      	str	r0, [sp, #4]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8016cea:	bfb8      	it	lt
 8016cec:	18e4      	addlt	r4, r4, r3
 8016cee:	f7ff fc17 	bl	8016520 <__malloc_lock>
 8016cf2:	4a1e      	ldr	r2, [pc, #120]	; (8016d6c <_free_r+0x94>)
 8016cf4:	9801      	ldr	r0, [sp, #4]
 8016cf6:	6813      	ldr	r3, [r2, #0]
 8016cf8:	b933      	cbnz	r3, 8016d08 <_free_r+0x30>
 8016cfa:	6063      	str	r3, [r4, #4]
 8016cfc:	6014      	str	r4, [r2, #0]
 8016cfe:	b003      	add	sp, #12
 8016d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d04:	f7ff bc12 	b.w	801652c <__malloc_unlock>
 8016d08:	42a3      	cmp	r3, r4
 8016d0a:	d908      	bls.n	8016d1e <_free_r+0x46>
 8016d0c:	6825      	ldr	r5, [r4, #0]
 8016d0e:	1961      	adds	r1, r4, r5
 8016d10:	428b      	cmp	r3, r1
 8016d12:	bf01      	itttt	eq
 8016d14:	6819      	ldreq	r1, [r3, #0]
 8016d16:	685b      	ldreq	r3, [r3, #4]
 8016d18:	1949      	addeq	r1, r1, r5
 8016d1a:	6021      	streq	r1, [r4, #0]
 8016d1c:	e7ed      	b.n	8016cfa <_free_r+0x22>
 8016d1e:	461a      	mov	r2, r3
 8016d20:	685b      	ldr	r3, [r3, #4]
 8016d22:	b10b      	cbz	r3, 8016d28 <_free_r+0x50>
 8016d24:	42a3      	cmp	r3, r4
 8016d26:	d9fa      	bls.n	8016d1e <_free_r+0x46>
 8016d28:	6811      	ldr	r1, [r2, #0]
 8016d2a:	1855      	adds	r5, r2, r1
 8016d2c:	42a5      	cmp	r5, r4
 8016d2e:	d10b      	bne.n	8016d48 <_free_r+0x70>
 8016d30:	6824      	ldr	r4, [r4, #0]
 8016d32:	4421      	add	r1, r4
 8016d34:	1854      	adds	r4, r2, r1
 8016d36:	42a3      	cmp	r3, r4
 8016d38:	6011      	str	r1, [r2, #0]
 8016d3a:	d1e0      	bne.n	8016cfe <_free_r+0x26>
 8016d3c:	681c      	ldr	r4, [r3, #0]
 8016d3e:	685b      	ldr	r3, [r3, #4]
 8016d40:	6053      	str	r3, [r2, #4]
 8016d42:	440c      	add	r4, r1
 8016d44:	6014      	str	r4, [r2, #0]
 8016d46:	e7da      	b.n	8016cfe <_free_r+0x26>
 8016d48:	d902      	bls.n	8016d50 <_free_r+0x78>
 8016d4a:	230c      	movs	r3, #12
 8016d4c:	6003      	str	r3, [r0, #0]
 8016d4e:	e7d6      	b.n	8016cfe <_free_r+0x26>
 8016d50:	6825      	ldr	r5, [r4, #0]
 8016d52:	1961      	adds	r1, r4, r5
 8016d54:	428b      	cmp	r3, r1
 8016d56:	bf04      	itt	eq
 8016d58:	6819      	ldreq	r1, [r3, #0]
 8016d5a:	685b      	ldreq	r3, [r3, #4]
 8016d5c:	6063      	str	r3, [r4, #4]
 8016d5e:	bf04      	itt	eq
 8016d60:	1949      	addeq	r1, r1, r5
 8016d62:	6021      	streq	r1, [r4, #0]
 8016d64:	6054      	str	r4, [r2, #4]
 8016d66:	e7ca      	b.n	8016cfe <_free_r+0x26>
 8016d68:	b003      	add	sp, #12
 8016d6a:	bd30      	pop	{r4, r5, pc}
 8016d6c:	2000dc68 	.word	0x2000dc68

08016d70 <_malloc_usable_size_r>:
 8016d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d74:	1f18      	subs	r0, r3, #4
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	bfbc      	itt	lt
 8016d7a:	580b      	ldrlt	r3, [r1, r0]
 8016d7c:	18c0      	addlt	r0, r0, r3
 8016d7e:	4770      	bx	lr

08016d80 <__ssputs_r>:
 8016d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d84:	688e      	ldr	r6, [r1, #8]
 8016d86:	461f      	mov	r7, r3
 8016d88:	42be      	cmp	r6, r7
 8016d8a:	680b      	ldr	r3, [r1, #0]
 8016d8c:	4682      	mov	sl, r0
 8016d8e:	460c      	mov	r4, r1
 8016d90:	4690      	mov	r8, r2
 8016d92:	d82c      	bhi.n	8016dee <__ssputs_r+0x6e>
 8016d94:	898a      	ldrh	r2, [r1, #12]
 8016d96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016d9a:	d026      	beq.n	8016dea <__ssputs_r+0x6a>
 8016d9c:	6965      	ldr	r5, [r4, #20]
 8016d9e:	6909      	ldr	r1, [r1, #16]
 8016da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016da4:	eba3 0901 	sub.w	r9, r3, r1
 8016da8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016dac:	1c7b      	adds	r3, r7, #1
 8016dae:	444b      	add	r3, r9
 8016db0:	106d      	asrs	r5, r5, #1
 8016db2:	429d      	cmp	r5, r3
 8016db4:	bf38      	it	cc
 8016db6:	461d      	movcc	r5, r3
 8016db8:	0553      	lsls	r3, r2, #21
 8016dba:	d527      	bpl.n	8016e0c <__ssputs_r+0x8c>
 8016dbc:	4629      	mov	r1, r5
 8016dbe:	f7ff fb2f 	bl	8016420 <_malloc_r>
 8016dc2:	4606      	mov	r6, r0
 8016dc4:	b360      	cbz	r0, 8016e20 <__ssputs_r+0xa0>
 8016dc6:	6921      	ldr	r1, [r4, #16]
 8016dc8:	464a      	mov	r2, r9
 8016dca:	f7ff ff4c 	bl	8016c66 <memcpy>
 8016dce:	89a3      	ldrh	r3, [r4, #12]
 8016dd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016dd8:	81a3      	strh	r3, [r4, #12]
 8016dda:	6126      	str	r6, [r4, #16]
 8016ddc:	6165      	str	r5, [r4, #20]
 8016dde:	444e      	add	r6, r9
 8016de0:	eba5 0509 	sub.w	r5, r5, r9
 8016de4:	6026      	str	r6, [r4, #0]
 8016de6:	60a5      	str	r5, [r4, #8]
 8016de8:	463e      	mov	r6, r7
 8016dea:	42be      	cmp	r6, r7
 8016dec:	d900      	bls.n	8016df0 <__ssputs_r+0x70>
 8016dee:	463e      	mov	r6, r7
 8016df0:	6820      	ldr	r0, [r4, #0]
 8016df2:	4632      	mov	r2, r6
 8016df4:	4641      	mov	r1, r8
 8016df6:	f7ff fe53 	bl	8016aa0 <memmove>
 8016dfa:	68a3      	ldr	r3, [r4, #8]
 8016dfc:	1b9b      	subs	r3, r3, r6
 8016dfe:	60a3      	str	r3, [r4, #8]
 8016e00:	6823      	ldr	r3, [r4, #0]
 8016e02:	4433      	add	r3, r6
 8016e04:	6023      	str	r3, [r4, #0]
 8016e06:	2000      	movs	r0, #0
 8016e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e0c:	462a      	mov	r2, r5
 8016e0e:	f7ff fc07 	bl	8016620 <_realloc_r>
 8016e12:	4606      	mov	r6, r0
 8016e14:	2800      	cmp	r0, #0
 8016e16:	d1e0      	bne.n	8016dda <__ssputs_r+0x5a>
 8016e18:	6921      	ldr	r1, [r4, #16]
 8016e1a:	4650      	mov	r0, sl
 8016e1c:	f7ff ff5c 	bl	8016cd8 <_free_r>
 8016e20:	230c      	movs	r3, #12
 8016e22:	f8ca 3000 	str.w	r3, [sl]
 8016e26:	89a3      	ldrh	r3, [r4, #12]
 8016e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e2c:	81a3      	strh	r3, [r4, #12]
 8016e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e32:	e7e9      	b.n	8016e08 <__ssputs_r+0x88>

08016e34 <_svfiprintf_r>:
 8016e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e38:	4698      	mov	r8, r3
 8016e3a:	898b      	ldrh	r3, [r1, #12]
 8016e3c:	061b      	lsls	r3, r3, #24
 8016e3e:	b09d      	sub	sp, #116	; 0x74
 8016e40:	4607      	mov	r7, r0
 8016e42:	460d      	mov	r5, r1
 8016e44:	4614      	mov	r4, r2
 8016e46:	d50e      	bpl.n	8016e66 <_svfiprintf_r+0x32>
 8016e48:	690b      	ldr	r3, [r1, #16]
 8016e4a:	b963      	cbnz	r3, 8016e66 <_svfiprintf_r+0x32>
 8016e4c:	2140      	movs	r1, #64	; 0x40
 8016e4e:	f7ff fae7 	bl	8016420 <_malloc_r>
 8016e52:	6028      	str	r0, [r5, #0]
 8016e54:	6128      	str	r0, [r5, #16]
 8016e56:	b920      	cbnz	r0, 8016e62 <_svfiprintf_r+0x2e>
 8016e58:	230c      	movs	r3, #12
 8016e5a:	603b      	str	r3, [r7, #0]
 8016e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e60:	e0d0      	b.n	8017004 <_svfiprintf_r+0x1d0>
 8016e62:	2340      	movs	r3, #64	; 0x40
 8016e64:	616b      	str	r3, [r5, #20]
 8016e66:	2300      	movs	r3, #0
 8016e68:	9309      	str	r3, [sp, #36]	; 0x24
 8016e6a:	2320      	movs	r3, #32
 8016e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e74:	2330      	movs	r3, #48	; 0x30
 8016e76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801701c <_svfiprintf_r+0x1e8>
 8016e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e7e:	f04f 0901 	mov.w	r9, #1
 8016e82:	4623      	mov	r3, r4
 8016e84:	469a      	mov	sl, r3
 8016e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e8a:	b10a      	cbz	r2, 8016e90 <_svfiprintf_r+0x5c>
 8016e8c:	2a25      	cmp	r2, #37	; 0x25
 8016e8e:	d1f9      	bne.n	8016e84 <_svfiprintf_r+0x50>
 8016e90:	ebba 0b04 	subs.w	fp, sl, r4
 8016e94:	d00b      	beq.n	8016eae <_svfiprintf_r+0x7a>
 8016e96:	465b      	mov	r3, fp
 8016e98:	4622      	mov	r2, r4
 8016e9a:	4629      	mov	r1, r5
 8016e9c:	4638      	mov	r0, r7
 8016e9e:	f7ff ff6f 	bl	8016d80 <__ssputs_r>
 8016ea2:	3001      	adds	r0, #1
 8016ea4:	f000 80a9 	beq.w	8016ffa <_svfiprintf_r+0x1c6>
 8016ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016eaa:	445a      	add	r2, fp
 8016eac:	9209      	str	r2, [sp, #36]	; 0x24
 8016eae:	f89a 3000 	ldrb.w	r3, [sl]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	f000 80a1 	beq.w	8016ffa <_svfiprintf_r+0x1c6>
 8016eb8:	2300      	movs	r3, #0
 8016eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ec2:	f10a 0a01 	add.w	sl, sl, #1
 8016ec6:	9304      	str	r3, [sp, #16]
 8016ec8:	9307      	str	r3, [sp, #28]
 8016eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ece:	931a      	str	r3, [sp, #104]	; 0x68
 8016ed0:	4654      	mov	r4, sl
 8016ed2:	2205      	movs	r2, #5
 8016ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ed8:	4850      	ldr	r0, [pc, #320]	; (801701c <_svfiprintf_r+0x1e8>)
 8016eda:	f7e9 f999 	bl	8000210 <memchr>
 8016ede:	9a04      	ldr	r2, [sp, #16]
 8016ee0:	b9d8      	cbnz	r0, 8016f1a <_svfiprintf_r+0xe6>
 8016ee2:	06d0      	lsls	r0, r2, #27
 8016ee4:	bf44      	itt	mi
 8016ee6:	2320      	movmi	r3, #32
 8016ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016eec:	0711      	lsls	r1, r2, #28
 8016eee:	bf44      	itt	mi
 8016ef0:	232b      	movmi	r3, #43	; 0x2b
 8016ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8016efa:	2b2a      	cmp	r3, #42	; 0x2a
 8016efc:	d015      	beq.n	8016f2a <_svfiprintf_r+0xf6>
 8016efe:	9a07      	ldr	r2, [sp, #28]
 8016f00:	4654      	mov	r4, sl
 8016f02:	2000      	movs	r0, #0
 8016f04:	f04f 0c0a 	mov.w	ip, #10
 8016f08:	4621      	mov	r1, r4
 8016f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f0e:	3b30      	subs	r3, #48	; 0x30
 8016f10:	2b09      	cmp	r3, #9
 8016f12:	d94d      	bls.n	8016fb0 <_svfiprintf_r+0x17c>
 8016f14:	b1b0      	cbz	r0, 8016f44 <_svfiprintf_r+0x110>
 8016f16:	9207      	str	r2, [sp, #28]
 8016f18:	e014      	b.n	8016f44 <_svfiprintf_r+0x110>
 8016f1a:	eba0 0308 	sub.w	r3, r0, r8
 8016f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8016f22:	4313      	orrs	r3, r2
 8016f24:	9304      	str	r3, [sp, #16]
 8016f26:	46a2      	mov	sl, r4
 8016f28:	e7d2      	b.n	8016ed0 <_svfiprintf_r+0x9c>
 8016f2a:	9b03      	ldr	r3, [sp, #12]
 8016f2c:	1d19      	adds	r1, r3, #4
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	9103      	str	r1, [sp, #12]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	bfbb      	ittet	lt
 8016f36:	425b      	neglt	r3, r3
 8016f38:	f042 0202 	orrlt.w	r2, r2, #2
 8016f3c:	9307      	strge	r3, [sp, #28]
 8016f3e:	9307      	strlt	r3, [sp, #28]
 8016f40:	bfb8      	it	lt
 8016f42:	9204      	strlt	r2, [sp, #16]
 8016f44:	7823      	ldrb	r3, [r4, #0]
 8016f46:	2b2e      	cmp	r3, #46	; 0x2e
 8016f48:	d10c      	bne.n	8016f64 <_svfiprintf_r+0x130>
 8016f4a:	7863      	ldrb	r3, [r4, #1]
 8016f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8016f4e:	d134      	bne.n	8016fba <_svfiprintf_r+0x186>
 8016f50:	9b03      	ldr	r3, [sp, #12]
 8016f52:	1d1a      	adds	r2, r3, #4
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	9203      	str	r2, [sp, #12]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	bfb8      	it	lt
 8016f5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016f60:	3402      	adds	r4, #2
 8016f62:	9305      	str	r3, [sp, #20]
 8016f64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801702c <_svfiprintf_r+0x1f8>
 8016f68:	7821      	ldrb	r1, [r4, #0]
 8016f6a:	2203      	movs	r2, #3
 8016f6c:	4650      	mov	r0, sl
 8016f6e:	f7e9 f94f 	bl	8000210 <memchr>
 8016f72:	b138      	cbz	r0, 8016f84 <_svfiprintf_r+0x150>
 8016f74:	9b04      	ldr	r3, [sp, #16]
 8016f76:	eba0 000a 	sub.w	r0, r0, sl
 8016f7a:	2240      	movs	r2, #64	; 0x40
 8016f7c:	4082      	lsls	r2, r0
 8016f7e:	4313      	orrs	r3, r2
 8016f80:	3401      	adds	r4, #1
 8016f82:	9304      	str	r3, [sp, #16]
 8016f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f88:	4825      	ldr	r0, [pc, #148]	; (8017020 <_svfiprintf_r+0x1ec>)
 8016f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016f8e:	2206      	movs	r2, #6
 8016f90:	f7e9 f93e 	bl	8000210 <memchr>
 8016f94:	2800      	cmp	r0, #0
 8016f96:	d038      	beq.n	801700a <_svfiprintf_r+0x1d6>
 8016f98:	4b22      	ldr	r3, [pc, #136]	; (8017024 <_svfiprintf_r+0x1f0>)
 8016f9a:	bb1b      	cbnz	r3, 8016fe4 <_svfiprintf_r+0x1b0>
 8016f9c:	9b03      	ldr	r3, [sp, #12]
 8016f9e:	3307      	adds	r3, #7
 8016fa0:	f023 0307 	bic.w	r3, r3, #7
 8016fa4:	3308      	adds	r3, #8
 8016fa6:	9303      	str	r3, [sp, #12]
 8016fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016faa:	4433      	add	r3, r6
 8016fac:	9309      	str	r3, [sp, #36]	; 0x24
 8016fae:	e768      	b.n	8016e82 <_svfiprintf_r+0x4e>
 8016fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8016fb4:	460c      	mov	r4, r1
 8016fb6:	2001      	movs	r0, #1
 8016fb8:	e7a6      	b.n	8016f08 <_svfiprintf_r+0xd4>
 8016fba:	2300      	movs	r3, #0
 8016fbc:	3401      	adds	r4, #1
 8016fbe:	9305      	str	r3, [sp, #20]
 8016fc0:	4619      	mov	r1, r3
 8016fc2:	f04f 0c0a 	mov.w	ip, #10
 8016fc6:	4620      	mov	r0, r4
 8016fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016fcc:	3a30      	subs	r2, #48	; 0x30
 8016fce:	2a09      	cmp	r2, #9
 8016fd0:	d903      	bls.n	8016fda <_svfiprintf_r+0x1a6>
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d0c6      	beq.n	8016f64 <_svfiprintf_r+0x130>
 8016fd6:	9105      	str	r1, [sp, #20]
 8016fd8:	e7c4      	b.n	8016f64 <_svfiprintf_r+0x130>
 8016fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8016fde:	4604      	mov	r4, r0
 8016fe0:	2301      	movs	r3, #1
 8016fe2:	e7f0      	b.n	8016fc6 <_svfiprintf_r+0x192>
 8016fe4:	ab03      	add	r3, sp, #12
 8016fe6:	9300      	str	r3, [sp, #0]
 8016fe8:	462a      	mov	r2, r5
 8016fea:	4b0f      	ldr	r3, [pc, #60]	; (8017028 <_svfiprintf_r+0x1f4>)
 8016fec:	a904      	add	r1, sp, #16
 8016fee:	4638      	mov	r0, r7
 8016ff0:	f3af 8000 	nop.w
 8016ff4:	1c42      	adds	r2, r0, #1
 8016ff6:	4606      	mov	r6, r0
 8016ff8:	d1d6      	bne.n	8016fa8 <_svfiprintf_r+0x174>
 8016ffa:	89ab      	ldrh	r3, [r5, #12]
 8016ffc:	065b      	lsls	r3, r3, #25
 8016ffe:	f53f af2d 	bmi.w	8016e5c <_svfiprintf_r+0x28>
 8017002:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017004:	b01d      	add	sp, #116	; 0x74
 8017006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801700a:	ab03      	add	r3, sp, #12
 801700c:	9300      	str	r3, [sp, #0]
 801700e:	462a      	mov	r2, r5
 8017010:	4b05      	ldr	r3, [pc, #20]	; (8017028 <_svfiprintf_r+0x1f4>)
 8017012:	a904      	add	r1, sp, #16
 8017014:	4638      	mov	r0, r7
 8017016:	f000 f9bd 	bl	8017394 <_printf_i>
 801701a:	e7eb      	b.n	8016ff4 <_svfiprintf_r+0x1c0>
 801701c:	08018900 	.word	0x08018900
 8017020:	0801890a 	.word	0x0801890a
 8017024:	00000000 	.word	0x00000000
 8017028:	08016d81 	.word	0x08016d81
 801702c:	08018906 	.word	0x08018906

08017030 <__sfputc_r>:
 8017030:	6893      	ldr	r3, [r2, #8]
 8017032:	3b01      	subs	r3, #1
 8017034:	2b00      	cmp	r3, #0
 8017036:	b410      	push	{r4}
 8017038:	6093      	str	r3, [r2, #8]
 801703a:	da08      	bge.n	801704e <__sfputc_r+0x1e>
 801703c:	6994      	ldr	r4, [r2, #24]
 801703e:	42a3      	cmp	r3, r4
 8017040:	db01      	blt.n	8017046 <__sfputc_r+0x16>
 8017042:	290a      	cmp	r1, #10
 8017044:	d103      	bne.n	801704e <__sfputc_r+0x1e>
 8017046:	f85d 4b04 	ldr.w	r4, [sp], #4
 801704a:	f000 bb85 	b.w	8017758 <__swbuf_r>
 801704e:	6813      	ldr	r3, [r2, #0]
 8017050:	1c58      	adds	r0, r3, #1
 8017052:	6010      	str	r0, [r2, #0]
 8017054:	7019      	strb	r1, [r3, #0]
 8017056:	4608      	mov	r0, r1
 8017058:	f85d 4b04 	ldr.w	r4, [sp], #4
 801705c:	4770      	bx	lr

0801705e <__sfputs_r>:
 801705e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017060:	4606      	mov	r6, r0
 8017062:	460f      	mov	r7, r1
 8017064:	4614      	mov	r4, r2
 8017066:	18d5      	adds	r5, r2, r3
 8017068:	42ac      	cmp	r4, r5
 801706a:	d101      	bne.n	8017070 <__sfputs_r+0x12>
 801706c:	2000      	movs	r0, #0
 801706e:	e007      	b.n	8017080 <__sfputs_r+0x22>
 8017070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017074:	463a      	mov	r2, r7
 8017076:	4630      	mov	r0, r6
 8017078:	f7ff ffda 	bl	8017030 <__sfputc_r>
 801707c:	1c43      	adds	r3, r0, #1
 801707e:	d1f3      	bne.n	8017068 <__sfputs_r+0xa>
 8017080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017084 <_vfiprintf_r>:
 8017084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017088:	460d      	mov	r5, r1
 801708a:	b09d      	sub	sp, #116	; 0x74
 801708c:	4614      	mov	r4, r2
 801708e:	4698      	mov	r8, r3
 8017090:	4606      	mov	r6, r0
 8017092:	b118      	cbz	r0, 801709c <_vfiprintf_r+0x18>
 8017094:	6a03      	ldr	r3, [r0, #32]
 8017096:	b90b      	cbnz	r3, 801709c <_vfiprintf_r+0x18>
 8017098:	f7ff fbfa 	bl	8016890 <__sinit>
 801709c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801709e:	07d9      	lsls	r1, r3, #31
 80170a0:	d405      	bmi.n	80170ae <_vfiprintf_r+0x2a>
 80170a2:	89ab      	ldrh	r3, [r5, #12]
 80170a4:	059a      	lsls	r2, r3, #22
 80170a6:	d402      	bmi.n	80170ae <_vfiprintf_r+0x2a>
 80170a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80170aa:	f7ff fdd2 	bl	8016c52 <__retarget_lock_acquire_recursive>
 80170ae:	89ab      	ldrh	r3, [r5, #12]
 80170b0:	071b      	lsls	r3, r3, #28
 80170b2:	d501      	bpl.n	80170b8 <_vfiprintf_r+0x34>
 80170b4:	692b      	ldr	r3, [r5, #16]
 80170b6:	b99b      	cbnz	r3, 80170e0 <_vfiprintf_r+0x5c>
 80170b8:	4629      	mov	r1, r5
 80170ba:	4630      	mov	r0, r6
 80170bc:	f000 fb8a 	bl	80177d4 <__swsetup_r>
 80170c0:	b170      	cbz	r0, 80170e0 <_vfiprintf_r+0x5c>
 80170c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80170c4:	07dc      	lsls	r4, r3, #31
 80170c6:	d504      	bpl.n	80170d2 <_vfiprintf_r+0x4e>
 80170c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170cc:	b01d      	add	sp, #116	; 0x74
 80170ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d2:	89ab      	ldrh	r3, [r5, #12]
 80170d4:	0598      	lsls	r0, r3, #22
 80170d6:	d4f7      	bmi.n	80170c8 <_vfiprintf_r+0x44>
 80170d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80170da:	f7ff fdbb 	bl	8016c54 <__retarget_lock_release_recursive>
 80170de:	e7f3      	b.n	80170c8 <_vfiprintf_r+0x44>
 80170e0:	2300      	movs	r3, #0
 80170e2:	9309      	str	r3, [sp, #36]	; 0x24
 80170e4:	2320      	movs	r3, #32
 80170e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80170ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80170ee:	2330      	movs	r3, #48	; 0x30
 80170f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80172a4 <_vfiprintf_r+0x220>
 80170f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80170f8:	f04f 0901 	mov.w	r9, #1
 80170fc:	4623      	mov	r3, r4
 80170fe:	469a      	mov	sl, r3
 8017100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017104:	b10a      	cbz	r2, 801710a <_vfiprintf_r+0x86>
 8017106:	2a25      	cmp	r2, #37	; 0x25
 8017108:	d1f9      	bne.n	80170fe <_vfiprintf_r+0x7a>
 801710a:	ebba 0b04 	subs.w	fp, sl, r4
 801710e:	d00b      	beq.n	8017128 <_vfiprintf_r+0xa4>
 8017110:	465b      	mov	r3, fp
 8017112:	4622      	mov	r2, r4
 8017114:	4629      	mov	r1, r5
 8017116:	4630      	mov	r0, r6
 8017118:	f7ff ffa1 	bl	801705e <__sfputs_r>
 801711c:	3001      	adds	r0, #1
 801711e:	f000 80a9 	beq.w	8017274 <_vfiprintf_r+0x1f0>
 8017122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017124:	445a      	add	r2, fp
 8017126:	9209      	str	r2, [sp, #36]	; 0x24
 8017128:	f89a 3000 	ldrb.w	r3, [sl]
 801712c:	2b00      	cmp	r3, #0
 801712e:	f000 80a1 	beq.w	8017274 <_vfiprintf_r+0x1f0>
 8017132:	2300      	movs	r3, #0
 8017134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801713c:	f10a 0a01 	add.w	sl, sl, #1
 8017140:	9304      	str	r3, [sp, #16]
 8017142:	9307      	str	r3, [sp, #28]
 8017144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017148:	931a      	str	r3, [sp, #104]	; 0x68
 801714a:	4654      	mov	r4, sl
 801714c:	2205      	movs	r2, #5
 801714e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017152:	4854      	ldr	r0, [pc, #336]	; (80172a4 <_vfiprintf_r+0x220>)
 8017154:	f7e9 f85c 	bl	8000210 <memchr>
 8017158:	9a04      	ldr	r2, [sp, #16]
 801715a:	b9d8      	cbnz	r0, 8017194 <_vfiprintf_r+0x110>
 801715c:	06d1      	lsls	r1, r2, #27
 801715e:	bf44      	itt	mi
 8017160:	2320      	movmi	r3, #32
 8017162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017166:	0713      	lsls	r3, r2, #28
 8017168:	bf44      	itt	mi
 801716a:	232b      	movmi	r3, #43	; 0x2b
 801716c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017170:	f89a 3000 	ldrb.w	r3, [sl]
 8017174:	2b2a      	cmp	r3, #42	; 0x2a
 8017176:	d015      	beq.n	80171a4 <_vfiprintf_r+0x120>
 8017178:	9a07      	ldr	r2, [sp, #28]
 801717a:	4654      	mov	r4, sl
 801717c:	2000      	movs	r0, #0
 801717e:	f04f 0c0a 	mov.w	ip, #10
 8017182:	4621      	mov	r1, r4
 8017184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017188:	3b30      	subs	r3, #48	; 0x30
 801718a:	2b09      	cmp	r3, #9
 801718c:	d94d      	bls.n	801722a <_vfiprintf_r+0x1a6>
 801718e:	b1b0      	cbz	r0, 80171be <_vfiprintf_r+0x13a>
 8017190:	9207      	str	r2, [sp, #28]
 8017192:	e014      	b.n	80171be <_vfiprintf_r+0x13a>
 8017194:	eba0 0308 	sub.w	r3, r0, r8
 8017198:	fa09 f303 	lsl.w	r3, r9, r3
 801719c:	4313      	orrs	r3, r2
 801719e:	9304      	str	r3, [sp, #16]
 80171a0:	46a2      	mov	sl, r4
 80171a2:	e7d2      	b.n	801714a <_vfiprintf_r+0xc6>
 80171a4:	9b03      	ldr	r3, [sp, #12]
 80171a6:	1d19      	adds	r1, r3, #4
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	9103      	str	r1, [sp, #12]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	bfbb      	ittet	lt
 80171b0:	425b      	neglt	r3, r3
 80171b2:	f042 0202 	orrlt.w	r2, r2, #2
 80171b6:	9307      	strge	r3, [sp, #28]
 80171b8:	9307      	strlt	r3, [sp, #28]
 80171ba:	bfb8      	it	lt
 80171bc:	9204      	strlt	r2, [sp, #16]
 80171be:	7823      	ldrb	r3, [r4, #0]
 80171c0:	2b2e      	cmp	r3, #46	; 0x2e
 80171c2:	d10c      	bne.n	80171de <_vfiprintf_r+0x15a>
 80171c4:	7863      	ldrb	r3, [r4, #1]
 80171c6:	2b2a      	cmp	r3, #42	; 0x2a
 80171c8:	d134      	bne.n	8017234 <_vfiprintf_r+0x1b0>
 80171ca:	9b03      	ldr	r3, [sp, #12]
 80171cc:	1d1a      	adds	r2, r3, #4
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	9203      	str	r2, [sp, #12]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	bfb8      	it	lt
 80171d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80171da:	3402      	adds	r4, #2
 80171dc:	9305      	str	r3, [sp, #20]
 80171de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80172b4 <_vfiprintf_r+0x230>
 80171e2:	7821      	ldrb	r1, [r4, #0]
 80171e4:	2203      	movs	r2, #3
 80171e6:	4650      	mov	r0, sl
 80171e8:	f7e9 f812 	bl	8000210 <memchr>
 80171ec:	b138      	cbz	r0, 80171fe <_vfiprintf_r+0x17a>
 80171ee:	9b04      	ldr	r3, [sp, #16]
 80171f0:	eba0 000a 	sub.w	r0, r0, sl
 80171f4:	2240      	movs	r2, #64	; 0x40
 80171f6:	4082      	lsls	r2, r0
 80171f8:	4313      	orrs	r3, r2
 80171fa:	3401      	adds	r4, #1
 80171fc:	9304      	str	r3, [sp, #16]
 80171fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017202:	4829      	ldr	r0, [pc, #164]	; (80172a8 <_vfiprintf_r+0x224>)
 8017204:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017208:	2206      	movs	r2, #6
 801720a:	f7e9 f801 	bl	8000210 <memchr>
 801720e:	2800      	cmp	r0, #0
 8017210:	d03f      	beq.n	8017292 <_vfiprintf_r+0x20e>
 8017212:	4b26      	ldr	r3, [pc, #152]	; (80172ac <_vfiprintf_r+0x228>)
 8017214:	bb1b      	cbnz	r3, 801725e <_vfiprintf_r+0x1da>
 8017216:	9b03      	ldr	r3, [sp, #12]
 8017218:	3307      	adds	r3, #7
 801721a:	f023 0307 	bic.w	r3, r3, #7
 801721e:	3308      	adds	r3, #8
 8017220:	9303      	str	r3, [sp, #12]
 8017222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017224:	443b      	add	r3, r7
 8017226:	9309      	str	r3, [sp, #36]	; 0x24
 8017228:	e768      	b.n	80170fc <_vfiprintf_r+0x78>
 801722a:	fb0c 3202 	mla	r2, ip, r2, r3
 801722e:	460c      	mov	r4, r1
 8017230:	2001      	movs	r0, #1
 8017232:	e7a6      	b.n	8017182 <_vfiprintf_r+0xfe>
 8017234:	2300      	movs	r3, #0
 8017236:	3401      	adds	r4, #1
 8017238:	9305      	str	r3, [sp, #20]
 801723a:	4619      	mov	r1, r3
 801723c:	f04f 0c0a 	mov.w	ip, #10
 8017240:	4620      	mov	r0, r4
 8017242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017246:	3a30      	subs	r2, #48	; 0x30
 8017248:	2a09      	cmp	r2, #9
 801724a:	d903      	bls.n	8017254 <_vfiprintf_r+0x1d0>
 801724c:	2b00      	cmp	r3, #0
 801724e:	d0c6      	beq.n	80171de <_vfiprintf_r+0x15a>
 8017250:	9105      	str	r1, [sp, #20]
 8017252:	e7c4      	b.n	80171de <_vfiprintf_r+0x15a>
 8017254:	fb0c 2101 	mla	r1, ip, r1, r2
 8017258:	4604      	mov	r4, r0
 801725a:	2301      	movs	r3, #1
 801725c:	e7f0      	b.n	8017240 <_vfiprintf_r+0x1bc>
 801725e:	ab03      	add	r3, sp, #12
 8017260:	9300      	str	r3, [sp, #0]
 8017262:	462a      	mov	r2, r5
 8017264:	4b12      	ldr	r3, [pc, #72]	; (80172b0 <_vfiprintf_r+0x22c>)
 8017266:	a904      	add	r1, sp, #16
 8017268:	4630      	mov	r0, r6
 801726a:	f3af 8000 	nop.w
 801726e:	4607      	mov	r7, r0
 8017270:	1c78      	adds	r0, r7, #1
 8017272:	d1d6      	bne.n	8017222 <_vfiprintf_r+0x19e>
 8017274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017276:	07d9      	lsls	r1, r3, #31
 8017278:	d405      	bmi.n	8017286 <_vfiprintf_r+0x202>
 801727a:	89ab      	ldrh	r3, [r5, #12]
 801727c:	059a      	lsls	r2, r3, #22
 801727e:	d402      	bmi.n	8017286 <_vfiprintf_r+0x202>
 8017280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017282:	f7ff fce7 	bl	8016c54 <__retarget_lock_release_recursive>
 8017286:	89ab      	ldrh	r3, [r5, #12]
 8017288:	065b      	lsls	r3, r3, #25
 801728a:	f53f af1d 	bmi.w	80170c8 <_vfiprintf_r+0x44>
 801728e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017290:	e71c      	b.n	80170cc <_vfiprintf_r+0x48>
 8017292:	ab03      	add	r3, sp, #12
 8017294:	9300      	str	r3, [sp, #0]
 8017296:	462a      	mov	r2, r5
 8017298:	4b05      	ldr	r3, [pc, #20]	; (80172b0 <_vfiprintf_r+0x22c>)
 801729a:	a904      	add	r1, sp, #16
 801729c:	4630      	mov	r0, r6
 801729e:	f000 f879 	bl	8017394 <_printf_i>
 80172a2:	e7e4      	b.n	801726e <_vfiprintf_r+0x1ea>
 80172a4:	08018900 	.word	0x08018900
 80172a8:	0801890a 	.word	0x0801890a
 80172ac:	00000000 	.word	0x00000000
 80172b0:	0801705f 	.word	0x0801705f
 80172b4:	08018906 	.word	0x08018906

080172b8 <_printf_common>:
 80172b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172bc:	4616      	mov	r6, r2
 80172be:	4699      	mov	r9, r3
 80172c0:	688a      	ldr	r2, [r1, #8]
 80172c2:	690b      	ldr	r3, [r1, #16]
 80172c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80172c8:	4293      	cmp	r3, r2
 80172ca:	bfb8      	it	lt
 80172cc:	4613      	movlt	r3, r2
 80172ce:	6033      	str	r3, [r6, #0]
 80172d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80172d4:	4607      	mov	r7, r0
 80172d6:	460c      	mov	r4, r1
 80172d8:	b10a      	cbz	r2, 80172de <_printf_common+0x26>
 80172da:	3301      	adds	r3, #1
 80172dc:	6033      	str	r3, [r6, #0]
 80172de:	6823      	ldr	r3, [r4, #0]
 80172e0:	0699      	lsls	r1, r3, #26
 80172e2:	bf42      	ittt	mi
 80172e4:	6833      	ldrmi	r3, [r6, #0]
 80172e6:	3302      	addmi	r3, #2
 80172e8:	6033      	strmi	r3, [r6, #0]
 80172ea:	6825      	ldr	r5, [r4, #0]
 80172ec:	f015 0506 	ands.w	r5, r5, #6
 80172f0:	d106      	bne.n	8017300 <_printf_common+0x48>
 80172f2:	f104 0a19 	add.w	sl, r4, #25
 80172f6:	68e3      	ldr	r3, [r4, #12]
 80172f8:	6832      	ldr	r2, [r6, #0]
 80172fa:	1a9b      	subs	r3, r3, r2
 80172fc:	42ab      	cmp	r3, r5
 80172fe:	dc26      	bgt.n	801734e <_printf_common+0x96>
 8017300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017304:	1e13      	subs	r3, r2, #0
 8017306:	6822      	ldr	r2, [r4, #0]
 8017308:	bf18      	it	ne
 801730a:	2301      	movne	r3, #1
 801730c:	0692      	lsls	r2, r2, #26
 801730e:	d42b      	bmi.n	8017368 <_printf_common+0xb0>
 8017310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017314:	4649      	mov	r1, r9
 8017316:	4638      	mov	r0, r7
 8017318:	47c0      	blx	r8
 801731a:	3001      	adds	r0, #1
 801731c:	d01e      	beq.n	801735c <_printf_common+0xa4>
 801731e:	6823      	ldr	r3, [r4, #0]
 8017320:	6922      	ldr	r2, [r4, #16]
 8017322:	f003 0306 	and.w	r3, r3, #6
 8017326:	2b04      	cmp	r3, #4
 8017328:	bf02      	ittt	eq
 801732a:	68e5      	ldreq	r5, [r4, #12]
 801732c:	6833      	ldreq	r3, [r6, #0]
 801732e:	1aed      	subeq	r5, r5, r3
 8017330:	68a3      	ldr	r3, [r4, #8]
 8017332:	bf0c      	ite	eq
 8017334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017338:	2500      	movne	r5, #0
 801733a:	4293      	cmp	r3, r2
 801733c:	bfc4      	itt	gt
 801733e:	1a9b      	subgt	r3, r3, r2
 8017340:	18ed      	addgt	r5, r5, r3
 8017342:	2600      	movs	r6, #0
 8017344:	341a      	adds	r4, #26
 8017346:	42b5      	cmp	r5, r6
 8017348:	d11a      	bne.n	8017380 <_printf_common+0xc8>
 801734a:	2000      	movs	r0, #0
 801734c:	e008      	b.n	8017360 <_printf_common+0xa8>
 801734e:	2301      	movs	r3, #1
 8017350:	4652      	mov	r2, sl
 8017352:	4649      	mov	r1, r9
 8017354:	4638      	mov	r0, r7
 8017356:	47c0      	blx	r8
 8017358:	3001      	adds	r0, #1
 801735a:	d103      	bne.n	8017364 <_printf_common+0xac>
 801735c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017364:	3501      	adds	r5, #1
 8017366:	e7c6      	b.n	80172f6 <_printf_common+0x3e>
 8017368:	18e1      	adds	r1, r4, r3
 801736a:	1c5a      	adds	r2, r3, #1
 801736c:	2030      	movs	r0, #48	; 0x30
 801736e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017372:	4422      	add	r2, r4
 8017374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801737c:	3302      	adds	r3, #2
 801737e:	e7c7      	b.n	8017310 <_printf_common+0x58>
 8017380:	2301      	movs	r3, #1
 8017382:	4622      	mov	r2, r4
 8017384:	4649      	mov	r1, r9
 8017386:	4638      	mov	r0, r7
 8017388:	47c0      	blx	r8
 801738a:	3001      	adds	r0, #1
 801738c:	d0e6      	beq.n	801735c <_printf_common+0xa4>
 801738e:	3601      	adds	r6, #1
 8017390:	e7d9      	b.n	8017346 <_printf_common+0x8e>
	...

08017394 <_printf_i>:
 8017394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017398:	7e0f      	ldrb	r7, [r1, #24]
 801739a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801739c:	2f78      	cmp	r7, #120	; 0x78
 801739e:	4691      	mov	r9, r2
 80173a0:	4680      	mov	r8, r0
 80173a2:	460c      	mov	r4, r1
 80173a4:	469a      	mov	sl, r3
 80173a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80173aa:	d807      	bhi.n	80173bc <_printf_i+0x28>
 80173ac:	2f62      	cmp	r7, #98	; 0x62
 80173ae:	d80a      	bhi.n	80173c6 <_printf_i+0x32>
 80173b0:	2f00      	cmp	r7, #0
 80173b2:	f000 80d4 	beq.w	801755e <_printf_i+0x1ca>
 80173b6:	2f58      	cmp	r7, #88	; 0x58
 80173b8:	f000 80c0 	beq.w	801753c <_printf_i+0x1a8>
 80173bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80173c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80173c4:	e03a      	b.n	801743c <_printf_i+0xa8>
 80173c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80173ca:	2b15      	cmp	r3, #21
 80173cc:	d8f6      	bhi.n	80173bc <_printf_i+0x28>
 80173ce:	a101      	add	r1, pc, #4	; (adr r1, 80173d4 <_printf_i+0x40>)
 80173d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80173d4:	0801742d 	.word	0x0801742d
 80173d8:	08017441 	.word	0x08017441
 80173dc:	080173bd 	.word	0x080173bd
 80173e0:	080173bd 	.word	0x080173bd
 80173e4:	080173bd 	.word	0x080173bd
 80173e8:	080173bd 	.word	0x080173bd
 80173ec:	08017441 	.word	0x08017441
 80173f0:	080173bd 	.word	0x080173bd
 80173f4:	080173bd 	.word	0x080173bd
 80173f8:	080173bd 	.word	0x080173bd
 80173fc:	080173bd 	.word	0x080173bd
 8017400:	08017545 	.word	0x08017545
 8017404:	0801746d 	.word	0x0801746d
 8017408:	080174ff 	.word	0x080174ff
 801740c:	080173bd 	.word	0x080173bd
 8017410:	080173bd 	.word	0x080173bd
 8017414:	08017567 	.word	0x08017567
 8017418:	080173bd 	.word	0x080173bd
 801741c:	0801746d 	.word	0x0801746d
 8017420:	080173bd 	.word	0x080173bd
 8017424:	080173bd 	.word	0x080173bd
 8017428:	08017507 	.word	0x08017507
 801742c:	682b      	ldr	r3, [r5, #0]
 801742e:	1d1a      	adds	r2, r3, #4
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	602a      	str	r2, [r5, #0]
 8017434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801743c:	2301      	movs	r3, #1
 801743e:	e09f      	b.n	8017580 <_printf_i+0x1ec>
 8017440:	6820      	ldr	r0, [r4, #0]
 8017442:	682b      	ldr	r3, [r5, #0]
 8017444:	0607      	lsls	r7, r0, #24
 8017446:	f103 0104 	add.w	r1, r3, #4
 801744a:	6029      	str	r1, [r5, #0]
 801744c:	d501      	bpl.n	8017452 <_printf_i+0xbe>
 801744e:	681e      	ldr	r6, [r3, #0]
 8017450:	e003      	b.n	801745a <_printf_i+0xc6>
 8017452:	0646      	lsls	r6, r0, #25
 8017454:	d5fb      	bpl.n	801744e <_printf_i+0xba>
 8017456:	f9b3 6000 	ldrsh.w	r6, [r3]
 801745a:	2e00      	cmp	r6, #0
 801745c:	da03      	bge.n	8017466 <_printf_i+0xd2>
 801745e:	232d      	movs	r3, #45	; 0x2d
 8017460:	4276      	negs	r6, r6
 8017462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017466:	485a      	ldr	r0, [pc, #360]	; (80175d0 <_printf_i+0x23c>)
 8017468:	230a      	movs	r3, #10
 801746a:	e012      	b.n	8017492 <_printf_i+0xfe>
 801746c:	682b      	ldr	r3, [r5, #0]
 801746e:	6820      	ldr	r0, [r4, #0]
 8017470:	1d19      	adds	r1, r3, #4
 8017472:	6029      	str	r1, [r5, #0]
 8017474:	0605      	lsls	r5, r0, #24
 8017476:	d501      	bpl.n	801747c <_printf_i+0xe8>
 8017478:	681e      	ldr	r6, [r3, #0]
 801747a:	e002      	b.n	8017482 <_printf_i+0xee>
 801747c:	0641      	lsls	r1, r0, #25
 801747e:	d5fb      	bpl.n	8017478 <_printf_i+0xe4>
 8017480:	881e      	ldrh	r6, [r3, #0]
 8017482:	4853      	ldr	r0, [pc, #332]	; (80175d0 <_printf_i+0x23c>)
 8017484:	2f6f      	cmp	r7, #111	; 0x6f
 8017486:	bf0c      	ite	eq
 8017488:	2308      	moveq	r3, #8
 801748a:	230a      	movne	r3, #10
 801748c:	2100      	movs	r1, #0
 801748e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017492:	6865      	ldr	r5, [r4, #4]
 8017494:	60a5      	str	r5, [r4, #8]
 8017496:	2d00      	cmp	r5, #0
 8017498:	bfa2      	ittt	ge
 801749a:	6821      	ldrge	r1, [r4, #0]
 801749c:	f021 0104 	bicge.w	r1, r1, #4
 80174a0:	6021      	strge	r1, [r4, #0]
 80174a2:	b90e      	cbnz	r6, 80174a8 <_printf_i+0x114>
 80174a4:	2d00      	cmp	r5, #0
 80174a6:	d04b      	beq.n	8017540 <_printf_i+0x1ac>
 80174a8:	4615      	mov	r5, r2
 80174aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80174ae:	fb03 6711 	mls	r7, r3, r1, r6
 80174b2:	5dc7      	ldrb	r7, [r0, r7]
 80174b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80174b8:	4637      	mov	r7, r6
 80174ba:	42bb      	cmp	r3, r7
 80174bc:	460e      	mov	r6, r1
 80174be:	d9f4      	bls.n	80174aa <_printf_i+0x116>
 80174c0:	2b08      	cmp	r3, #8
 80174c2:	d10b      	bne.n	80174dc <_printf_i+0x148>
 80174c4:	6823      	ldr	r3, [r4, #0]
 80174c6:	07de      	lsls	r6, r3, #31
 80174c8:	d508      	bpl.n	80174dc <_printf_i+0x148>
 80174ca:	6923      	ldr	r3, [r4, #16]
 80174cc:	6861      	ldr	r1, [r4, #4]
 80174ce:	4299      	cmp	r1, r3
 80174d0:	bfde      	ittt	le
 80174d2:	2330      	movle	r3, #48	; 0x30
 80174d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80174d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80174dc:	1b52      	subs	r2, r2, r5
 80174de:	6122      	str	r2, [r4, #16]
 80174e0:	f8cd a000 	str.w	sl, [sp]
 80174e4:	464b      	mov	r3, r9
 80174e6:	aa03      	add	r2, sp, #12
 80174e8:	4621      	mov	r1, r4
 80174ea:	4640      	mov	r0, r8
 80174ec:	f7ff fee4 	bl	80172b8 <_printf_common>
 80174f0:	3001      	adds	r0, #1
 80174f2:	d14a      	bne.n	801758a <_printf_i+0x1f6>
 80174f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174f8:	b004      	add	sp, #16
 80174fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174fe:	6823      	ldr	r3, [r4, #0]
 8017500:	f043 0320 	orr.w	r3, r3, #32
 8017504:	6023      	str	r3, [r4, #0]
 8017506:	4833      	ldr	r0, [pc, #204]	; (80175d4 <_printf_i+0x240>)
 8017508:	2778      	movs	r7, #120	; 0x78
 801750a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801750e:	6823      	ldr	r3, [r4, #0]
 8017510:	6829      	ldr	r1, [r5, #0]
 8017512:	061f      	lsls	r7, r3, #24
 8017514:	f851 6b04 	ldr.w	r6, [r1], #4
 8017518:	d402      	bmi.n	8017520 <_printf_i+0x18c>
 801751a:	065f      	lsls	r7, r3, #25
 801751c:	bf48      	it	mi
 801751e:	b2b6      	uxthmi	r6, r6
 8017520:	07df      	lsls	r7, r3, #31
 8017522:	bf48      	it	mi
 8017524:	f043 0320 	orrmi.w	r3, r3, #32
 8017528:	6029      	str	r1, [r5, #0]
 801752a:	bf48      	it	mi
 801752c:	6023      	strmi	r3, [r4, #0]
 801752e:	b91e      	cbnz	r6, 8017538 <_printf_i+0x1a4>
 8017530:	6823      	ldr	r3, [r4, #0]
 8017532:	f023 0320 	bic.w	r3, r3, #32
 8017536:	6023      	str	r3, [r4, #0]
 8017538:	2310      	movs	r3, #16
 801753a:	e7a7      	b.n	801748c <_printf_i+0xf8>
 801753c:	4824      	ldr	r0, [pc, #144]	; (80175d0 <_printf_i+0x23c>)
 801753e:	e7e4      	b.n	801750a <_printf_i+0x176>
 8017540:	4615      	mov	r5, r2
 8017542:	e7bd      	b.n	80174c0 <_printf_i+0x12c>
 8017544:	682b      	ldr	r3, [r5, #0]
 8017546:	6826      	ldr	r6, [r4, #0]
 8017548:	6961      	ldr	r1, [r4, #20]
 801754a:	1d18      	adds	r0, r3, #4
 801754c:	6028      	str	r0, [r5, #0]
 801754e:	0635      	lsls	r5, r6, #24
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	d501      	bpl.n	8017558 <_printf_i+0x1c4>
 8017554:	6019      	str	r1, [r3, #0]
 8017556:	e002      	b.n	801755e <_printf_i+0x1ca>
 8017558:	0670      	lsls	r0, r6, #25
 801755a:	d5fb      	bpl.n	8017554 <_printf_i+0x1c0>
 801755c:	8019      	strh	r1, [r3, #0]
 801755e:	2300      	movs	r3, #0
 8017560:	6123      	str	r3, [r4, #16]
 8017562:	4615      	mov	r5, r2
 8017564:	e7bc      	b.n	80174e0 <_printf_i+0x14c>
 8017566:	682b      	ldr	r3, [r5, #0]
 8017568:	1d1a      	adds	r2, r3, #4
 801756a:	602a      	str	r2, [r5, #0]
 801756c:	681d      	ldr	r5, [r3, #0]
 801756e:	6862      	ldr	r2, [r4, #4]
 8017570:	2100      	movs	r1, #0
 8017572:	4628      	mov	r0, r5
 8017574:	f7e8 fe4c 	bl	8000210 <memchr>
 8017578:	b108      	cbz	r0, 801757e <_printf_i+0x1ea>
 801757a:	1b40      	subs	r0, r0, r5
 801757c:	6060      	str	r0, [r4, #4]
 801757e:	6863      	ldr	r3, [r4, #4]
 8017580:	6123      	str	r3, [r4, #16]
 8017582:	2300      	movs	r3, #0
 8017584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017588:	e7aa      	b.n	80174e0 <_printf_i+0x14c>
 801758a:	6923      	ldr	r3, [r4, #16]
 801758c:	462a      	mov	r2, r5
 801758e:	4649      	mov	r1, r9
 8017590:	4640      	mov	r0, r8
 8017592:	47d0      	blx	sl
 8017594:	3001      	adds	r0, #1
 8017596:	d0ad      	beq.n	80174f4 <_printf_i+0x160>
 8017598:	6823      	ldr	r3, [r4, #0]
 801759a:	079b      	lsls	r3, r3, #30
 801759c:	d413      	bmi.n	80175c6 <_printf_i+0x232>
 801759e:	68e0      	ldr	r0, [r4, #12]
 80175a0:	9b03      	ldr	r3, [sp, #12]
 80175a2:	4298      	cmp	r0, r3
 80175a4:	bfb8      	it	lt
 80175a6:	4618      	movlt	r0, r3
 80175a8:	e7a6      	b.n	80174f8 <_printf_i+0x164>
 80175aa:	2301      	movs	r3, #1
 80175ac:	4632      	mov	r2, r6
 80175ae:	4649      	mov	r1, r9
 80175b0:	4640      	mov	r0, r8
 80175b2:	47d0      	blx	sl
 80175b4:	3001      	adds	r0, #1
 80175b6:	d09d      	beq.n	80174f4 <_printf_i+0x160>
 80175b8:	3501      	adds	r5, #1
 80175ba:	68e3      	ldr	r3, [r4, #12]
 80175bc:	9903      	ldr	r1, [sp, #12]
 80175be:	1a5b      	subs	r3, r3, r1
 80175c0:	42ab      	cmp	r3, r5
 80175c2:	dcf2      	bgt.n	80175aa <_printf_i+0x216>
 80175c4:	e7eb      	b.n	801759e <_printf_i+0x20a>
 80175c6:	2500      	movs	r5, #0
 80175c8:	f104 0619 	add.w	r6, r4, #25
 80175cc:	e7f5      	b.n	80175ba <_printf_i+0x226>
 80175ce:	bf00      	nop
 80175d0:	08018911 	.word	0x08018911
 80175d4:	08018922 	.word	0x08018922

080175d8 <__sflush_r>:
 80175d8:	898a      	ldrh	r2, [r1, #12]
 80175da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175de:	4605      	mov	r5, r0
 80175e0:	0710      	lsls	r0, r2, #28
 80175e2:	460c      	mov	r4, r1
 80175e4:	d458      	bmi.n	8017698 <__sflush_r+0xc0>
 80175e6:	684b      	ldr	r3, [r1, #4]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	dc05      	bgt.n	80175f8 <__sflush_r+0x20>
 80175ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	dc02      	bgt.n	80175f8 <__sflush_r+0x20>
 80175f2:	2000      	movs	r0, #0
 80175f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80175fa:	2e00      	cmp	r6, #0
 80175fc:	d0f9      	beq.n	80175f2 <__sflush_r+0x1a>
 80175fe:	2300      	movs	r3, #0
 8017600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017604:	682f      	ldr	r7, [r5, #0]
 8017606:	6a21      	ldr	r1, [r4, #32]
 8017608:	602b      	str	r3, [r5, #0]
 801760a:	d032      	beq.n	8017672 <__sflush_r+0x9a>
 801760c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801760e:	89a3      	ldrh	r3, [r4, #12]
 8017610:	075a      	lsls	r2, r3, #29
 8017612:	d505      	bpl.n	8017620 <__sflush_r+0x48>
 8017614:	6863      	ldr	r3, [r4, #4]
 8017616:	1ac0      	subs	r0, r0, r3
 8017618:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801761a:	b10b      	cbz	r3, 8017620 <__sflush_r+0x48>
 801761c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801761e:	1ac0      	subs	r0, r0, r3
 8017620:	2300      	movs	r3, #0
 8017622:	4602      	mov	r2, r0
 8017624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017626:	6a21      	ldr	r1, [r4, #32]
 8017628:	4628      	mov	r0, r5
 801762a:	47b0      	blx	r6
 801762c:	1c43      	adds	r3, r0, #1
 801762e:	89a3      	ldrh	r3, [r4, #12]
 8017630:	d106      	bne.n	8017640 <__sflush_r+0x68>
 8017632:	6829      	ldr	r1, [r5, #0]
 8017634:	291d      	cmp	r1, #29
 8017636:	d82b      	bhi.n	8017690 <__sflush_r+0xb8>
 8017638:	4a29      	ldr	r2, [pc, #164]	; (80176e0 <__sflush_r+0x108>)
 801763a:	410a      	asrs	r2, r1
 801763c:	07d6      	lsls	r6, r2, #31
 801763e:	d427      	bmi.n	8017690 <__sflush_r+0xb8>
 8017640:	2200      	movs	r2, #0
 8017642:	6062      	str	r2, [r4, #4]
 8017644:	04d9      	lsls	r1, r3, #19
 8017646:	6922      	ldr	r2, [r4, #16]
 8017648:	6022      	str	r2, [r4, #0]
 801764a:	d504      	bpl.n	8017656 <__sflush_r+0x7e>
 801764c:	1c42      	adds	r2, r0, #1
 801764e:	d101      	bne.n	8017654 <__sflush_r+0x7c>
 8017650:	682b      	ldr	r3, [r5, #0]
 8017652:	b903      	cbnz	r3, 8017656 <__sflush_r+0x7e>
 8017654:	6560      	str	r0, [r4, #84]	; 0x54
 8017656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017658:	602f      	str	r7, [r5, #0]
 801765a:	2900      	cmp	r1, #0
 801765c:	d0c9      	beq.n	80175f2 <__sflush_r+0x1a>
 801765e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017662:	4299      	cmp	r1, r3
 8017664:	d002      	beq.n	801766c <__sflush_r+0x94>
 8017666:	4628      	mov	r0, r5
 8017668:	f7ff fb36 	bl	8016cd8 <_free_r>
 801766c:	2000      	movs	r0, #0
 801766e:	6360      	str	r0, [r4, #52]	; 0x34
 8017670:	e7c0      	b.n	80175f4 <__sflush_r+0x1c>
 8017672:	2301      	movs	r3, #1
 8017674:	4628      	mov	r0, r5
 8017676:	47b0      	blx	r6
 8017678:	1c41      	adds	r1, r0, #1
 801767a:	d1c8      	bne.n	801760e <__sflush_r+0x36>
 801767c:	682b      	ldr	r3, [r5, #0]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d0c5      	beq.n	801760e <__sflush_r+0x36>
 8017682:	2b1d      	cmp	r3, #29
 8017684:	d001      	beq.n	801768a <__sflush_r+0xb2>
 8017686:	2b16      	cmp	r3, #22
 8017688:	d101      	bne.n	801768e <__sflush_r+0xb6>
 801768a:	602f      	str	r7, [r5, #0]
 801768c:	e7b1      	b.n	80175f2 <__sflush_r+0x1a>
 801768e:	89a3      	ldrh	r3, [r4, #12]
 8017690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017694:	81a3      	strh	r3, [r4, #12]
 8017696:	e7ad      	b.n	80175f4 <__sflush_r+0x1c>
 8017698:	690f      	ldr	r7, [r1, #16]
 801769a:	2f00      	cmp	r7, #0
 801769c:	d0a9      	beq.n	80175f2 <__sflush_r+0x1a>
 801769e:	0793      	lsls	r3, r2, #30
 80176a0:	680e      	ldr	r6, [r1, #0]
 80176a2:	bf08      	it	eq
 80176a4:	694b      	ldreq	r3, [r1, #20]
 80176a6:	600f      	str	r7, [r1, #0]
 80176a8:	bf18      	it	ne
 80176aa:	2300      	movne	r3, #0
 80176ac:	eba6 0807 	sub.w	r8, r6, r7
 80176b0:	608b      	str	r3, [r1, #8]
 80176b2:	f1b8 0f00 	cmp.w	r8, #0
 80176b6:	dd9c      	ble.n	80175f2 <__sflush_r+0x1a>
 80176b8:	6a21      	ldr	r1, [r4, #32]
 80176ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80176bc:	4643      	mov	r3, r8
 80176be:	463a      	mov	r2, r7
 80176c0:	4628      	mov	r0, r5
 80176c2:	47b0      	blx	r6
 80176c4:	2800      	cmp	r0, #0
 80176c6:	dc06      	bgt.n	80176d6 <__sflush_r+0xfe>
 80176c8:	89a3      	ldrh	r3, [r4, #12]
 80176ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176ce:	81a3      	strh	r3, [r4, #12]
 80176d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80176d4:	e78e      	b.n	80175f4 <__sflush_r+0x1c>
 80176d6:	4407      	add	r7, r0
 80176d8:	eba8 0800 	sub.w	r8, r8, r0
 80176dc:	e7e9      	b.n	80176b2 <__sflush_r+0xda>
 80176de:	bf00      	nop
 80176e0:	dfbffffe 	.word	0xdfbffffe

080176e4 <_fflush_r>:
 80176e4:	b538      	push	{r3, r4, r5, lr}
 80176e6:	690b      	ldr	r3, [r1, #16]
 80176e8:	4605      	mov	r5, r0
 80176ea:	460c      	mov	r4, r1
 80176ec:	b913      	cbnz	r3, 80176f4 <_fflush_r+0x10>
 80176ee:	2500      	movs	r5, #0
 80176f0:	4628      	mov	r0, r5
 80176f2:	bd38      	pop	{r3, r4, r5, pc}
 80176f4:	b118      	cbz	r0, 80176fe <_fflush_r+0x1a>
 80176f6:	6a03      	ldr	r3, [r0, #32]
 80176f8:	b90b      	cbnz	r3, 80176fe <_fflush_r+0x1a>
 80176fa:	f7ff f8c9 	bl	8016890 <__sinit>
 80176fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d0f3      	beq.n	80176ee <_fflush_r+0xa>
 8017706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017708:	07d0      	lsls	r0, r2, #31
 801770a:	d404      	bmi.n	8017716 <_fflush_r+0x32>
 801770c:	0599      	lsls	r1, r3, #22
 801770e:	d402      	bmi.n	8017716 <_fflush_r+0x32>
 8017710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017712:	f7ff fa9e 	bl	8016c52 <__retarget_lock_acquire_recursive>
 8017716:	4628      	mov	r0, r5
 8017718:	4621      	mov	r1, r4
 801771a:	f7ff ff5d 	bl	80175d8 <__sflush_r>
 801771e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017720:	07da      	lsls	r2, r3, #31
 8017722:	4605      	mov	r5, r0
 8017724:	d4e4      	bmi.n	80176f0 <_fflush_r+0xc>
 8017726:	89a3      	ldrh	r3, [r4, #12]
 8017728:	059b      	lsls	r3, r3, #22
 801772a:	d4e1      	bmi.n	80176f0 <_fflush_r+0xc>
 801772c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801772e:	f7ff fa91 	bl	8016c54 <__retarget_lock_release_recursive>
 8017732:	e7dd      	b.n	80176f0 <_fflush_r+0xc>

08017734 <fiprintf>:
 8017734:	b40e      	push	{r1, r2, r3}
 8017736:	b503      	push	{r0, r1, lr}
 8017738:	4601      	mov	r1, r0
 801773a:	ab03      	add	r3, sp, #12
 801773c:	4805      	ldr	r0, [pc, #20]	; (8017754 <fiprintf+0x20>)
 801773e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017742:	6800      	ldr	r0, [r0, #0]
 8017744:	9301      	str	r3, [sp, #4]
 8017746:	f7ff fc9d 	bl	8017084 <_vfiprintf_r>
 801774a:	b002      	add	sp, #8
 801774c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017750:	b003      	add	sp, #12
 8017752:	4770      	bx	lr
 8017754:	20000190 	.word	0x20000190

08017758 <__swbuf_r>:
 8017758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801775a:	460e      	mov	r6, r1
 801775c:	4614      	mov	r4, r2
 801775e:	4605      	mov	r5, r0
 8017760:	b118      	cbz	r0, 801776a <__swbuf_r+0x12>
 8017762:	6a03      	ldr	r3, [r0, #32]
 8017764:	b90b      	cbnz	r3, 801776a <__swbuf_r+0x12>
 8017766:	f7ff f893 	bl	8016890 <__sinit>
 801776a:	69a3      	ldr	r3, [r4, #24]
 801776c:	60a3      	str	r3, [r4, #8]
 801776e:	89a3      	ldrh	r3, [r4, #12]
 8017770:	071a      	lsls	r2, r3, #28
 8017772:	d525      	bpl.n	80177c0 <__swbuf_r+0x68>
 8017774:	6923      	ldr	r3, [r4, #16]
 8017776:	b31b      	cbz	r3, 80177c0 <__swbuf_r+0x68>
 8017778:	6823      	ldr	r3, [r4, #0]
 801777a:	6922      	ldr	r2, [r4, #16]
 801777c:	1a98      	subs	r0, r3, r2
 801777e:	6963      	ldr	r3, [r4, #20]
 8017780:	b2f6      	uxtb	r6, r6
 8017782:	4283      	cmp	r3, r0
 8017784:	4637      	mov	r7, r6
 8017786:	dc04      	bgt.n	8017792 <__swbuf_r+0x3a>
 8017788:	4621      	mov	r1, r4
 801778a:	4628      	mov	r0, r5
 801778c:	f7ff ffaa 	bl	80176e4 <_fflush_r>
 8017790:	b9e0      	cbnz	r0, 80177cc <__swbuf_r+0x74>
 8017792:	68a3      	ldr	r3, [r4, #8]
 8017794:	3b01      	subs	r3, #1
 8017796:	60a3      	str	r3, [r4, #8]
 8017798:	6823      	ldr	r3, [r4, #0]
 801779a:	1c5a      	adds	r2, r3, #1
 801779c:	6022      	str	r2, [r4, #0]
 801779e:	701e      	strb	r6, [r3, #0]
 80177a0:	6962      	ldr	r2, [r4, #20]
 80177a2:	1c43      	adds	r3, r0, #1
 80177a4:	429a      	cmp	r2, r3
 80177a6:	d004      	beq.n	80177b2 <__swbuf_r+0x5a>
 80177a8:	89a3      	ldrh	r3, [r4, #12]
 80177aa:	07db      	lsls	r3, r3, #31
 80177ac:	d506      	bpl.n	80177bc <__swbuf_r+0x64>
 80177ae:	2e0a      	cmp	r6, #10
 80177b0:	d104      	bne.n	80177bc <__swbuf_r+0x64>
 80177b2:	4621      	mov	r1, r4
 80177b4:	4628      	mov	r0, r5
 80177b6:	f7ff ff95 	bl	80176e4 <_fflush_r>
 80177ba:	b938      	cbnz	r0, 80177cc <__swbuf_r+0x74>
 80177bc:	4638      	mov	r0, r7
 80177be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177c0:	4621      	mov	r1, r4
 80177c2:	4628      	mov	r0, r5
 80177c4:	f000 f806 	bl	80177d4 <__swsetup_r>
 80177c8:	2800      	cmp	r0, #0
 80177ca:	d0d5      	beq.n	8017778 <__swbuf_r+0x20>
 80177cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80177d0:	e7f4      	b.n	80177bc <__swbuf_r+0x64>
	...

080177d4 <__swsetup_r>:
 80177d4:	b538      	push	{r3, r4, r5, lr}
 80177d6:	4b2a      	ldr	r3, [pc, #168]	; (8017880 <__swsetup_r+0xac>)
 80177d8:	4605      	mov	r5, r0
 80177da:	6818      	ldr	r0, [r3, #0]
 80177dc:	460c      	mov	r4, r1
 80177de:	b118      	cbz	r0, 80177e8 <__swsetup_r+0x14>
 80177e0:	6a03      	ldr	r3, [r0, #32]
 80177e2:	b90b      	cbnz	r3, 80177e8 <__swsetup_r+0x14>
 80177e4:	f7ff f854 	bl	8016890 <__sinit>
 80177e8:	89a3      	ldrh	r3, [r4, #12]
 80177ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80177ee:	0718      	lsls	r0, r3, #28
 80177f0:	d422      	bmi.n	8017838 <__swsetup_r+0x64>
 80177f2:	06d9      	lsls	r1, r3, #27
 80177f4:	d407      	bmi.n	8017806 <__swsetup_r+0x32>
 80177f6:	2309      	movs	r3, #9
 80177f8:	602b      	str	r3, [r5, #0]
 80177fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80177fe:	81a3      	strh	r3, [r4, #12]
 8017800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017804:	e034      	b.n	8017870 <__swsetup_r+0x9c>
 8017806:	0758      	lsls	r0, r3, #29
 8017808:	d512      	bpl.n	8017830 <__swsetup_r+0x5c>
 801780a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801780c:	b141      	cbz	r1, 8017820 <__swsetup_r+0x4c>
 801780e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017812:	4299      	cmp	r1, r3
 8017814:	d002      	beq.n	801781c <__swsetup_r+0x48>
 8017816:	4628      	mov	r0, r5
 8017818:	f7ff fa5e 	bl	8016cd8 <_free_r>
 801781c:	2300      	movs	r3, #0
 801781e:	6363      	str	r3, [r4, #52]	; 0x34
 8017820:	89a3      	ldrh	r3, [r4, #12]
 8017822:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017826:	81a3      	strh	r3, [r4, #12]
 8017828:	2300      	movs	r3, #0
 801782a:	6063      	str	r3, [r4, #4]
 801782c:	6923      	ldr	r3, [r4, #16]
 801782e:	6023      	str	r3, [r4, #0]
 8017830:	89a3      	ldrh	r3, [r4, #12]
 8017832:	f043 0308 	orr.w	r3, r3, #8
 8017836:	81a3      	strh	r3, [r4, #12]
 8017838:	6923      	ldr	r3, [r4, #16]
 801783a:	b94b      	cbnz	r3, 8017850 <__swsetup_r+0x7c>
 801783c:	89a3      	ldrh	r3, [r4, #12]
 801783e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017846:	d003      	beq.n	8017850 <__swsetup_r+0x7c>
 8017848:	4621      	mov	r1, r4
 801784a:	4628      	mov	r0, r5
 801784c:	f000 f847 	bl	80178de <__smakebuf_r>
 8017850:	89a0      	ldrh	r0, [r4, #12]
 8017852:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017856:	f010 0301 	ands.w	r3, r0, #1
 801785a:	d00a      	beq.n	8017872 <__swsetup_r+0x9e>
 801785c:	2300      	movs	r3, #0
 801785e:	60a3      	str	r3, [r4, #8]
 8017860:	6963      	ldr	r3, [r4, #20]
 8017862:	425b      	negs	r3, r3
 8017864:	61a3      	str	r3, [r4, #24]
 8017866:	6923      	ldr	r3, [r4, #16]
 8017868:	b943      	cbnz	r3, 801787c <__swsetup_r+0xa8>
 801786a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801786e:	d1c4      	bne.n	80177fa <__swsetup_r+0x26>
 8017870:	bd38      	pop	{r3, r4, r5, pc}
 8017872:	0781      	lsls	r1, r0, #30
 8017874:	bf58      	it	pl
 8017876:	6963      	ldrpl	r3, [r4, #20]
 8017878:	60a3      	str	r3, [r4, #8]
 801787a:	e7f4      	b.n	8017866 <__swsetup_r+0x92>
 801787c:	2000      	movs	r0, #0
 801787e:	e7f7      	b.n	8017870 <__swsetup_r+0x9c>
 8017880:	20000190 	.word	0x20000190

08017884 <abort>:
 8017884:	b508      	push	{r3, lr}
 8017886:	2006      	movs	r0, #6
 8017888:	f000 f88e 	bl	80179a8 <raise>
 801788c:	2001      	movs	r0, #1
 801788e:	f7ea fc07 	bl	80020a0 <_exit>

08017892 <__swhatbuf_r>:
 8017892:	b570      	push	{r4, r5, r6, lr}
 8017894:	460c      	mov	r4, r1
 8017896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801789a:	2900      	cmp	r1, #0
 801789c:	b096      	sub	sp, #88	; 0x58
 801789e:	4615      	mov	r5, r2
 80178a0:	461e      	mov	r6, r3
 80178a2:	da0d      	bge.n	80178c0 <__swhatbuf_r+0x2e>
 80178a4:	89a3      	ldrh	r3, [r4, #12]
 80178a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80178aa:	f04f 0100 	mov.w	r1, #0
 80178ae:	bf0c      	ite	eq
 80178b0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80178b4:	2340      	movne	r3, #64	; 0x40
 80178b6:	2000      	movs	r0, #0
 80178b8:	6031      	str	r1, [r6, #0]
 80178ba:	602b      	str	r3, [r5, #0]
 80178bc:	b016      	add	sp, #88	; 0x58
 80178be:	bd70      	pop	{r4, r5, r6, pc}
 80178c0:	466a      	mov	r2, sp
 80178c2:	f000 f879 	bl	80179b8 <_fstat_r>
 80178c6:	2800      	cmp	r0, #0
 80178c8:	dbec      	blt.n	80178a4 <__swhatbuf_r+0x12>
 80178ca:	9901      	ldr	r1, [sp, #4]
 80178cc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80178d0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80178d4:	4259      	negs	r1, r3
 80178d6:	4159      	adcs	r1, r3
 80178d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80178dc:	e7eb      	b.n	80178b6 <__swhatbuf_r+0x24>

080178de <__smakebuf_r>:
 80178de:	898b      	ldrh	r3, [r1, #12]
 80178e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80178e2:	079d      	lsls	r5, r3, #30
 80178e4:	4606      	mov	r6, r0
 80178e6:	460c      	mov	r4, r1
 80178e8:	d507      	bpl.n	80178fa <__smakebuf_r+0x1c>
 80178ea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80178ee:	6023      	str	r3, [r4, #0]
 80178f0:	6123      	str	r3, [r4, #16]
 80178f2:	2301      	movs	r3, #1
 80178f4:	6163      	str	r3, [r4, #20]
 80178f6:	b002      	add	sp, #8
 80178f8:	bd70      	pop	{r4, r5, r6, pc}
 80178fa:	ab01      	add	r3, sp, #4
 80178fc:	466a      	mov	r2, sp
 80178fe:	f7ff ffc8 	bl	8017892 <__swhatbuf_r>
 8017902:	9900      	ldr	r1, [sp, #0]
 8017904:	4605      	mov	r5, r0
 8017906:	4630      	mov	r0, r6
 8017908:	f7fe fd8a 	bl	8016420 <_malloc_r>
 801790c:	b948      	cbnz	r0, 8017922 <__smakebuf_r+0x44>
 801790e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017912:	059a      	lsls	r2, r3, #22
 8017914:	d4ef      	bmi.n	80178f6 <__smakebuf_r+0x18>
 8017916:	f023 0303 	bic.w	r3, r3, #3
 801791a:	f043 0302 	orr.w	r3, r3, #2
 801791e:	81a3      	strh	r3, [r4, #12]
 8017920:	e7e3      	b.n	80178ea <__smakebuf_r+0xc>
 8017922:	89a3      	ldrh	r3, [r4, #12]
 8017924:	6020      	str	r0, [r4, #0]
 8017926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801792a:	81a3      	strh	r3, [r4, #12]
 801792c:	9b00      	ldr	r3, [sp, #0]
 801792e:	6163      	str	r3, [r4, #20]
 8017930:	9b01      	ldr	r3, [sp, #4]
 8017932:	6120      	str	r0, [r4, #16]
 8017934:	b15b      	cbz	r3, 801794e <__smakebuf_r+0x70>
 8017936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801793a:	4630      	mov	r0, r6
 801793c:	f000 f84e 	bl	80179dc <_isatty_r>
 8017940:	b128      	cbz	r0, 801794e <__smakebuf_r+0x70>
 8017942:	89a3      	ldrh	r3, [r4, #12]
 8017944:	f023 0303 	bic.w	r3, r3, #3
 8017948:	f043 0301 	orr.w	r3, r3, #1
 801794c:	81a3      	strh	r3, [r4, #12]
 801794e:	89a3      	ldrh	r3, [r4, #12]
 8017950:	431d      	orrs	r5, r3
 8017952:	81a5      	strh	r5, [r4, #12]
 8017954:	e7cf      	b.n	80178f6 <__smakebuf_r+0x18>

08017956 <_raise_r>:
 8017956:	291f      	cmp	r1, #31
 8017958:	b538      	push	{r3, r4, r5, lr}
 801795a:	4604      	mov	r4, r0
 801795c:	460d      	mov	r5, r1
 801795e:	d904      	bls.n	801796a <_raise_r+0x14>
 8017960:	2316      	movs	r3, #22
 8017962:	6003      	str	r3, [r0, #0]
 8017964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017968:	bd38      	pop	{r3, r4, r5, pc}
 801796a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801796c:	b112      	cbz	r2, 8017974 <_raise_r+0x1e>
 801796e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017972:	b94b      	cbnz	r3, 8017988 <_raise_r+0x32>
 8017974:	4620      	mov	r0, r4
 8017976:	f000 f853 	bl	8017a20 <_getpid_r>
 801797a:	462a      	mov	r2, r5
 801797c:	4601      	mov	r1, r0
 801797e:	4620      	mov	r0, r4
 8017980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017984:	f000 b83a 	b.w	80179fc <_kill_r>
 8017988:	2b01      	cmp	r3, #1
 801798a:	d00a      	beq.n	80179a2 <_raise_r+0x4c>
 801798c:	1c59      	adds	r1, r3, #1
 801798e:	d103      	bne.n	8017998 <_raise_r+0x42>
 8017990:	2316      	movs	r3, #22
 8017992:	6003      	str	r3, [r0, #0]
 8017994:	2001      	movs	r0, #1
 8017996:	e7e7      	b.n	8017968 <_raise_r+0x12>
 8017998:	2400      	movs	r4, #0
 801799a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801799e:	4628      	mov	r0, r5
 80179a0:	4798      	blx	r3
 80179a2:	2000      	movs	r0, #0
 80179a4:	e7e0      	b.n	8017968 <_raise_r+0x12>
	...

080179a8 <raise>:
 80179a8:	4b02      	ldr	r3, [pc, #8]	; (80179b4 <raise+0xc>)
 80179aa:	4601      	mov	r1, r0
 80179ac:	6818      	ldr	r0, [r3, #0]
 80179ae:	f7ff bfd2 	b.w	8017956 <_raise_r>
 80179b2:	bf00      	nop
 80179b4:	20000190 	.word	0x20000190

080179b8 <_fstat_r>:
 80179b8:	b538      	push	{r3, r4, r5, lr}
 80179ba:	4d07      	ldr	r5, [pc, #28]	; (80179d8 <_fstat_r+0x20>)
 80179bc:	2300      	movs	r3, #0
 80179be:	4604      	mov	r4, r0
 80179c0:	4608      	mov	r0, r1
 80179c2:	4611      	mov	r1, r2
 80179c4:	602b      	str	r3, [r5, #0]
 80179c6:	f7ea fbba 	bl	800213e <_fstat>
 80179ca:	1c43      	adds	r3, r0, #1
 80179cc:	d102      	bne.n	80179d4 <_fstat_r+0x1c>
 80179ce:	682b      	ldr	r3, [r5, #0]
 80179d0:	b103      	cbz	r3, 80179d4 <_fstat_r+0x1c>
 80179d2:	6023      	str	r3, [r4, #0]
 80179d4:	bd38      	pop	{r3, r4, r5, pc}
 80179d6:	bf00      	nop
 80179d8:	2000ddac 	.word	0x2000ddac

080179dc <_isatty_r>:
 80179dc:	b538      	push	{r3, r4, r5, lr}
 80179de:	4d06      	ldr	r5, [pc, #24]	; (80179f8 <_isatty_r+0x1c>)
 80179e0:	2300      	movs	r3, #0
 80179e2:	4604      	mov	r4, r0
 80179e4:	4608      	mov	r0, r1
 80179e6:	602b      	str	r3, [r5, #0]
 80179e8:	f7ea fbb9 	bl	800215e <_isatty>
 80179ec:	1c43      	adds	r3, r0, #1
 80179ee:	d102      	bne.n	80179f6 <_isatty_r+0x1a>
 80179f0:	682b      	ldr	r3, [r5, #0]
 80179f2:	b103      	cbz	r3, 80179f6 <_isatty_r+0x1a>
 80179f4:	6023      	str	r3, [r4, #0]
 80179f6:	bd38      	pop	{r3, r4, r5, pc}
 80179f8:	2000ddac 	.word	0x2000ddac

080179fc <_kill_r>:
 80179fc:	b538      	push	{r3, r4, r5, lr}
 80179fe:	4d07      	ldr	r5, [pc, #28]	; (8017a1c <_kill_r+0x20>)
 8017a00:	2300      	movs	r3, #0
 8017a02:	4604      	mov	r4, r0
 8017a04:	4608      	mov	r0, r1
 8017a06:	4611      	mov	r1, r2
 8017a08:	602b      	str	r3, [r5, #0]
 8017a0a:	f7ea fb39 	bl	8002080 <_kill>
 8017a0e:	1c43      	adds	r3, r0, #1
 8017a10:	d102      	bne.n	8017a18 <_kill_r+0x1c>
 8017a12:	682b      	ldr	r3, [r5, #0]
 8017a14:	b103      	cbz	r3, 8017a18 <_kill_r+0x1c>
 8017a16:	6023      	str	r3, [r4, #0]
 8017a18:	bd38      	pop	{r3, r4, r5, pc}
 8017a1a:	bf00      	nop
 8017a1c:	2000ddac 	.word	0x2000ddac

08017a20 <_getpid_r>:
 8017a20:	f7ea bb26 	b.w	8002070 <_getpid>

08017a24 <_init>:
 8017a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a26:	bf00      	nop
 8017a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a2a:	bc08      	pop	{r3}
 8017a2c:	469e      	mov	lr, r3
 8017a2e:	4770      	bx	lr

08017a30 <_fini>:
 8017a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a32:	bf00      	nop
 8017a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a36:	bc08      	pop	{r3}
 8017a38:	469e      	mov	lr, r3
 8017a3a:	4770      	bx	lr
