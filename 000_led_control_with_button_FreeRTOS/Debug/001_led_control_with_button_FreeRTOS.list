
001_led_control_with_button_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005408  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800563c  0800563c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800563c  0800563c  0001563c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005644  08005644  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005644  08005644  00015644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005648  08005648  00015648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800564c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c0  20000010  0800565c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049d0  0800565c  000249d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012178  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d6f  00000000  00000000  000321fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00034f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b87  00000000  00000000  00035e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d11  00000000  00000000  00036a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d43  00000000  00000000  00039718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f64f  00000000  00000000  0004a45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d84  00000000  00000000  000d9aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000dd830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005590 	.word	0x08005590

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005590 	.word	0x08005590

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	user_led_init();
 80004e0:	f000 fab4 	bl	8000a4c <user_led_init>
	user_button_init();
 80004e4:	f000 fa64 	bl	80009b0 <user_button_init>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e8:	f000 fb6a 	bl	8000bc0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ec:	f000 f826 	bl	800053c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f0:	f000 f8b6 	bl	8000660 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004f4:	f000 f88a 	bl	800060c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80004f8:	f002 fadc 	bl	8002ab4 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of readButtonState */
	readButtonStateHandle = osThreadNew(readButtonStateTask, NULL,
 80004fc:	4a09      	ldr	r2, [pc, #36]	; (8000524 <main+0x48>)
 80004fe:	2100      	movs	r1, #0
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <main+0x4c>)
 8000502:	f002 fb21 	bl	8002b48 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a08      	ldr	r2, [pc, #32]	; (800052c <main+0x50>)
 800050a:	6013      	str	r3, [r2, #0]
			&readButtonState_attributes);

	/* creation of ledFlashh */
	ledFlashhHandle = osThreadNew(ledFlashTask, NULL, &ledFlashh_attributes);
 800050c:	4a08      	ldr	r2, [pc, #32]	; (8000530 <main+0x54>)
 800050e:	2100      	movs	r1, #0
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x58>)
 8000512:	f002 fb19 	bl	8002b48 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a07      	ldr	r2, [pc, #28]	; (8000538 <main+0x5c>)
 800051a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800051c:	f002 faee 	bl	8002afc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000520:	e7fe      	b.n	8000520 <main+0x44>
 8000522:	bf00      	nop
 8000524:	080055dc 	.word	0x080055dc
 8000528:	080006b1 	.word	0x080006b1
 800052c:	20000070 	.word	0x20000070
 8000530:	08005600 	.word	0x08005600
 8000534:	080006f1 	.word	0x080006f1
 8000538:	20000074 	.word	0x20000074

0800053c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 ffe6 	bl	800551c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b27      	ldr	r3, [pc, #156]	; (8000604 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a26      	ldr	r2, [pc, #152]	; (8000604 <SystemClock_Config+0xc8>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b24      	ldr	r3, [pc, #144]	; (8000604 <SystemClock_Config+0xc8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b21      	ldr	r3, [pc, #132]	; (8000608 <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a20      	ldr	r2, [pc, #128]	; (8000608 <SystemClock_Config+0xcc>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <SystemClock_Config+0xcc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fe97 	bl	80012f4 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x94>
		Error_Handler();
 80005cc:	f000 f904 	bl	80007d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2103      	movs	r1, #3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f8f9 	bl	80017e4 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc0>
		Error_Handler();
 80005f8:	f000 f8ee 	bl	80007d8 <Error_Handler>
	}
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	; 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_USART2_UART_Init+0x50>)
 8000614:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800061c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000632:	220c      	movs	r2, #12
 8000634:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000644:	f001 faee 	bl	8001c24 <HAL_UART_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800064e:	f000 f8c3 	bl	80007d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000002c 	.word	0x2000002c
 800065c:	40004400 	.word	0x40004400

08000660 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_GPIO_Init+0x4c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <MX_GPIO_Init+0x4c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <readButtonStateTask>:
 * @brief  Function implementing the readButtonState thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_readButtonStateTask */
void readButtonStateTask(void *argument) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if (1 == user_button_get_state()) {
 80006b8:	f000 f9b6 	bl	8000a28 <user_button_get_state>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d1fa      	bne.n	80006b8 <readButtonStateTask+0x8>
			while (1 == user_button_get_state()) {
 80006c2:	e005      	b.n	80006d0 <readButtonStateTask+0x20>
				buttonCount++;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <readButtonStateTask+0x3c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <readButtonStateTask+0x3c>)
 80006ce:	701a      	strb	r2, [r3, #0]
			while (1 == user_button_get_state()) {
 80006d0:	f000 f9aa 	bl	8000a28 <user_button_get_state>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d0f4      	beq.n	80006c4 <readButtonStateTask+0x14>
			}

			if (buttonCount == 5) {
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <readButtonStateTask+0x3c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b05      	cmp	r3, #5
 80006e0:	d1ea      	bne.n	80006b8 <readButtonStateTask+0x8>
				buttonCount = 0;
 80006e2:	4b02      	ldr	r3, [pc, #8]	; (80006ec <readButtonStateTask+0x3c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
		if (1 == user_button_get_state()) {
 80006e8:	e7e6      	b.n	80006b8 <readButtonStateTask+0x8>
 80006ea:	bf00      	nop
 80006ec:	20000078 	.word	0x20000078

080006f0 <ledFlashTask>:
 * @brief Function implementing the ledFlashh thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ledFlashTask */
void ledFlashTask(void *argument) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ledFlashTask */
	/* Infinite loop */
	for (;;) {
		if (buttonCount == 0) { // butun ledleri sondur
 80006f8:	4b36      	ldr	r3, [pc, #216]	; (80007d4 <ledFlashTask+0xe4>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d10e      	bne.n	800071e <ledFlashTask+0x2e>
			for (int i = 12; i < 16; i++) {
 8000700:	230c      	movs	r3, #12
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	e007      	b.n	8000716 <ledFlashTask+0x26>
				user_led_off(i);
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fa28 	bl	8000b60 <user_led_off>
			for (int i = 12; i < 16; i++) {
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	3301      	adds	r3, #1
 8000714:	61fb      	str	r3, [r7, #28]
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	2b0f      	cmp	r3, #15
 800071a:	ddf4      	ble.n	8000706 <ledFlashTask+0x16>
 800071c:	e7ec      	b.n	80006f8 <ledFlashTask+0x8>
			}

		} else if (buttonCount == 1) { // ledleri 1 saniye yak sondur
 800071e:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <ledFlashTask+0xe4>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d112      	bne.n	800074c <ledFlashTask+0x5c>
			for (int i = 12; i < 16; i++) {
 8000726:	230c      	movs	r3, #12
 8000728:	61bb      	str	r3, [r7, #24]
 800072a:	e007      	b.n	800073c <ledFlashTask+0x4c>
				user_led_toggle(i);
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fa2d 	bl	8000b90 <user_led_toggle>
			for (int i = 12; i < 16; i++) {
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	3301      	adds	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	2b0f      	cmp	r3, #15
 8000740:	ddf4      	ble.n	800072c <ledFlashTask+0x3c>
			}
			vTaskDelay(1000);
 8000742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000746:	f003 fa07 	bl	8003b58 <vTaskDelay>
 800074a:	e7d5      	b.n	80006f8 <ledFlashTask+0x8>
		} else if (buttonCount == 2) { // ledleri 750 ms yak sondur
 800074c:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <ledFlashTask+0xe4>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b02      	cmp	r3, #2
 8000752:	d112      	bne.n	800077a <ledFlashTask+0x8a>
			for (int i = 12; i < 16; i++) {
 8000754:	230c      	movs	r3, #12
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	e007      	b.n	800076a <ledFlashTask+0x7a>
				user_led_toggle(i);
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fa16 	bl	8000b90 <user_led_toggle>
			for (int i = 12; i < 16; i++) {
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	2b0f      	cmp	r3, #15
 800076e:	ddf4      	ble.n	800075a <ledFlashTask+0x6a>
			}
			vTaskDelay(750);
 8000770:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000774:	f003 f9f0 	bl	8003b58 <vTaskDelay>
 8000778:	e7be      	b.n	80006f8 <ledFlashTask+0x8>
		} else if (buttonCount == 3) { // ledleri 500 saniye yak sondur
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <ledFlashTask+0xe4>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d112      	bne.n	80007a8 <ledFlashTask+0xb8>
			for (int i = 12; i < 16; i++) {
 8000782:	230c      	movs	r3, #12
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	e007      	b.n	8000798 <ledFlashTask+0xa8>
				user_led_toggle(i);
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f9ff 	bl	8000b90 <user_led_toggle>
			for (int i = 12; i < 16; i++) {
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	3301      	adds	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	2b0f      	cmp	r3, #15
 800079c:	ddf4      	ble.n	8000788 <ledFlashTask+0x98>
			}
			vTaskDelay(500);
 800079e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a2:	f003 f9d9 	bl	8003b58 <vTaskDelay>
 80007a6:	e7a7      	b.n	80006f8 <ledFlashTask+0x8>
		} else if (buttonCount == 4) { // ledleri 250 ms yak sondur
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <ledFlashTask+0xe4>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	d1a3      	bne.n	80006f8 <ledFlashTask+0x8>
			for (int i = 12; i < 16; i++) {
 80007b0:	230c      	movs	r3, #12
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	e007      	b.n	80007c6 <ledFlashTask+0xd6>
				user_led_toggle(i);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f9e8 	bl	8000b90 <user_led_toggle>
			for (int i = 12; i < 16; i++) {
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3301      	adds	r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2b0f      	cmp	r3, #15
 80007ca:	ddf4      	ble.n	80007b6 <ledFlashTask+0xc6>
			}
			vTaskDelay(250);
 80007cc:	20fa      	movs	r0, #250	; 0xfa
 80007ce:	f003 f9c3 	bl	8003b58 <vTaskDelay>
		if (buttonCount == 0) { // butun ledleri sondur
 80007d2:	e791      	b.n	80006f8 <ledFlashTask+0x8>
 80007d4:	20000078 	.word	0x20000078

080007d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_MspInit+0x54>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a11      	ldr	r2, [pc, #68]	; (8000838 <HAL_MspInit+0x54>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <HAL_MspInit+0x54>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_MspInit+0x54>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <HAL_MspInit+0x54>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_MspInit+0x54>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	210f      	movs	r1, #15
 8000826:	f06f 0001 	mvn.w	r0, #1
 800082a:	f000 fb16 	bl	8000e5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a1d      	ldr	r2, [pc, #116]	; (80008d0 <HAL_UART_MspInit+0x94>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d133      	bne.n	80008c6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <HAL_UART_MspInit+0x98>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <HAL_UART_MspInit+0x98>)
 8000868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <HAL_UART_MspInit+0x98>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <HAL_UART_MspInit+0x98>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <HAL_UART_MspInit+0x98>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_UART_MspInit+0x98>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000896:	230c      	movs	r3, #12
 8000898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a6:	2307      	movs	r3, #7
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <HAL_UART_MspInit+0x9c>)
 80008b2:	f000 fb9b 	bl	8000fec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2105      	movs	r1, #5
 80008ba:	2026      	movs	r0, #38	; 0x26
 80008bc:	f000 facd 	bl	8000e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c0:	2026      	movs	r0, #38	; 0x26
 80008c2:	f000 fae6 	bl	8000e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40004400 	.word	0x40004400
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <NMI_Handler+0x4>

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <MemManage_Handler+0x4>

080008ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090c:	f000 f9aa 	bl	8000c64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000910:	f003 fd9e 	bl	8004450 <xTaskGetSchedulerState>
 8000914:	4603      	mov	r3, r0
 8000916:	2b01      	cmp	r3, #1
 8000918:	d001      	beq.n	800091e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800091a:	f004 fb85 	bl	8005028 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <USART2_IRQHandler+0x10>)
 800092a:	f001 f9c9 	bl	8001cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000002c 	.word	0x2000002c

08000938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <SystemInit+0x20>)
 800093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <SystemInit+0x20>)
 8000944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800095c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000994 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000962:	490e      	ldr	r1, [pc, #56]	; (800099c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000964:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000978:	4c0b      	ldr	r4, [pc, #44]	; (80009a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000986:	f7ff ffd7 	bl	8000938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098a:	f004 fdcf 	bl	800552c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098e:	f7ff fda5 	bl	80004dc <main>
  bx  lr    
 8000992:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009a0:	0800564c 	.word	0x0800564c
  ldr r2, =_sbss
 80009a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009a8:	200049d0 	.word	0x200049d0

080009ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC_IRQHandler>
	...

080009b0 <user_button_init>:
 */

#include "stm32f4xx_hal.h"
#include <stdint.h>

void user_button_init(){
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	// PA0

	// SET clock  (RCC_AHB1ENR)
	RCC->AHB1ENR |= (1<<0);
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <user_button_init+0x70>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <user_button_init+0x70>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6313      	str	r3, [r2, #48]	; 0x30

	// select pin mode 00 for input Moder0(10) (GPIOx_MODER)
	GPIOA->MODER &= ~(1<<0);
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <user_button_init+0x74>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <user_button_init+0x74>)
 80009c6:	f023 0301 	bic.w	r3, r3, #1
 80009ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<1);
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <user_button_init+0x74>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <user_button_init+0x74>)
 80009d2:	f023 0302 	bic.w	r3, r3, #2
 80009d6:	6013      	str	r3, [r2, #0]

	// select output type (GPIOx_OTYPER) OT0(0) push-pull
	GPIOA->OTYPER &= ~(1<<0);
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <user_button_init+0x74>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <user_button_init+0x74>)
 80009de:	f023 0301 	bic.w	r3, r3, #1
 80009e2:	6053      	str	r3, [r2, #4]

	// select speed  01 medium (GPIOx_OSPEEDR)    OSPEEDR0(10)
	GPIOA->OSPEEDR |= (1<<0);
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <user_button_init+0x74>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <user_button_init+0x74>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR &= ~(1<<1);
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <user_button_init+0x74>)
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <user_button_init+0x74>)
 80009f6:	f023 0302 	bic.w	r3, r3, #2
 80009fa:	6093      	str	r3, [r2, #8]

	// select pull-up/down 00 (GPIOx_PUPDR)  PUPDR0(10)
	GPIOA->PUPDR &= ~(1<<0);
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <user_button_init+0x74>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <user_button_init+0x74>)
 8000a02:	f023 0301 	bic.w	r3, r3, #1
 8000a06:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1<<1);
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <user_button_init+0x74>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <user_button_init+0x74>)
 8000a0e:	f023 0302 	bic.w	r3, r3, #2
 8000a12:	60d3      	str	r3, [r2, #12]


}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000

08000a28 <user_button_get_state>:

int32_t user_button_get_state(){
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
	if((GPIOA->IDR &(1<<0) )==1){
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <user_button_get_state+0x20>)
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d101      	bne.n	8000a3c <user_button_get_state+0x14>
		return 1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e000      	b.n	8000a3e <user_button_get_state+0x16>
	}else{
		return 0;
 8000a3c:	2300      	movs	r3, #0
	}

}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	40020000 	.word	0x40020000

08000a4c <user_led_init>:
 *      Author: meric
 */
#include "stm32f4xx_hal.h"
#include <stdint.h>

void user_led_init(void){
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0


	// enable CLOCK for GPIOD  SET 3. pin
	RCC->AHB1ENR |= (1<<3);
 8000a50:	4b41      	ldr	r3, [pc, #260]	; (8000b58 <user_led_init+0x10c>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a40      	ldr	r2, [pc, #256]	; (8000b58 <user_led_init+0x10c>)
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30

	// for OUTPUT 01   MODER 12,13,14,15  (GPIOx_MODER)

	GPIOD->MODER |= (1<<24);  //green
 8000a5c:	4b3f      	ldr	r3, [pc, #252]	; (8000b5c <user_led_init+0x110>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a3e      	ldr	r2, [pc, #248]	; (8000b5c <user_led_init+0x110>)
 8000a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a66:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<25); //green
 8000a68:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <user_led_init+0x110>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a3b      	ldr	r2, [pc, #236]	; (8000b5c <user_led_init+0x110>)
 8000a6e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000a72:	6013      	str	r3, [r2, #0]

	GPIOD->MODER |= (1<<26);  //orange
 8000a74:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <user_led_init+0x110>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a38      	ldr	r2, [pc, #224]	; (8000b5c <user_led_init+0x110>)
 8000a7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a7e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<27); //orange
 8000a80:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <user_led_init+0x110>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a35      	ldr	r2, [pc, #212]	; (8000b5c <user_led_init+0x110>)
 8000a86:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000a8a:	6013      	str	r3, [r2, #0]

	GPIOD->MODER |= (1<<28);  //red
 8000a8c:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <user_led_init+0x110>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a32      	ldr	r2, [pc, #200]	; (8000b5c <user_led_init+0x110>)
 8000a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a96:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<29); //red
 8000a98:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <user_led_init+0x110>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a2f      	ldr	r2, [pc, #188]	; (8000b5c <user_led_init+0x110>)
 8000a9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000aa2:	6013      	str	r3, [r2, #0]

	GPIOD->MODER |= (1<<30);  //blue
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <user_led_init+0x110>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a2c      	ldr	r2, [pc, #176]	; (8000b5c <user_led_init+0x110>)
 8000aaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000aae:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<31); //blue
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <user_led_init+0x110>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a29      	ldr	r2, [pc, #164]	; (8000b5c <user_led_init+0x110>)
 8000ab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	6013      	str	r3, [r2, #0]

	// select output type  0: Output push-pull (GPIOx_OTYPER)

	GPIOD->OTYPER &=~(1<<12);
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <user_led_init+0x110>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <user_led_init+0x110>)
 8000ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ac6:	6053      	str	r3, [r2, #4]
	GPIOD->OTYPER &=~(1<<13);
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <user_led_init+0x110>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	4a23      	ldr	r2, [pc, #140]	; (8000b5c <user_led_init+0x110>)
 8000ace:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ad2:	6053      	str	r3, [r2, #4]
	GPIOD->OTYPER &=~(1<<14);
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <user_led_init+0x110>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <user_led_init+0x110>)
 8000ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ade:	6053      	str	r3, [r2, #4]
	GPIOD->OTYPER &=~(1<<15);
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <user_led_init+0x110>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <user_led_init+0x110>)
 8000ae6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000aea:	6053      	str	r3, [r2, #4]

	// select speed MEDİUM 01  (GPIOx_OSPEEDR)

	GPIOD->OSPEEDR |= (1<<24);  //green
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <user_led_init+0x110>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <user_led_init+0x110>)
 8000af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000af6:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR &= ~(1<<25); //green
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <user_led_init+0x110>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <user_led_init+0x110>)
 8000afe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000b02:	6093      	str	r3, [r2, #8]

	GPIOD->OSPEEDR |= (1<<26);  //orange
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <user_led_init+0x110>)
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <user_led_init+0x110>)
 8000b0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b0e:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR &= ~(1<<27); //orange
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <user_led_init+0x110>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <user_led_init+0x110>)
 8000b16:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000b1a:	6093      	str	r3, [r2, #8]

	GPIOD->OSPEEDR |= (1<<28);  //red
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <user_led_init+0x110>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <user_led_init+0x110>)
 8000b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b26:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR &= ~(1<<29); //red
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <user_led_init+0x110>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <user_led_init+0x110>)
 8000b2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000b32:	6093      	str	r3, [r2, #8]

	GPIOD->OSPEEDR |= (1<<30);  //blue
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <user_led_init+0x110>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <user_led_init+0x110>)
 8000b3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b3e:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR &= ~(1<<31); //blue
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <user_led_init+0x110>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <user_led_init+0x110>)
 8000b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	6093      	str	r3, [r2, #8]



}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020c00 	.word	0x40020c00

08000b60 <user_led_off>:
	}


}

void user_led_off(uint8_t led_pin ){
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
	if(11<led_pin <16){
	GPIOD->ODR &=~(1<<led_pin);
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <user_led_off+0x2c>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	79fa      	ldrb	r2, [r7, #7]
 8000b70:	2101      	movs	r1, #1
 8000b72:	fa01 f202 	lsl.w	r2, r1, r2
 8000b76:	43d2      	mvns	r2, r2
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <user_led_off+0x2c>)
 8000b7c:	400b      	ands	r3, r1
 8000b7e:	6153      	str	r3, [r2, #20]
	}
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40020c00 	.word	0x40020c00

08000b90 <user_led_toggle>:

void user_led_toggle(uint8_t led_pin){
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	if(11<led_pin <16){
	GPIOD->ODR ^= (1<<led_pin);
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <user_led_toggle+0x2c>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <user_led_toggle+0x2c>)
 8000baa:	404b      	eors	r3, r1
 8000bac:	6153      	str	r3, [r2, #20]
	}
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40020c00 	.word	0x40020c00

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <HAL_Init+0x40>)
 8000bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_Init+0x40>)
 8000bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_Init+0x40>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f92b 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fdf6 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023c00 	.word	0x40023c00

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f943 	bl	8000eae <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	f000 f90b 	bl	8000e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	2000007c 	.word	0x2000007c

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	2000007c 	.word	0x2000007c

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4907      	ldr	r1, [pc, #28]	; (8000d40 <__NVIC_EnableIRQ+0x38>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	; (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	; (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
         );
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	; 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e24:	f7ff ff8e 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff29 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6c:	f7ff ff3e 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff ff8e 	bl	8000d98 <NVIC_EncodePriority>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff5d 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff31 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffa2 	bl	8000e00 <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff feda 	bl	8000c8c <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d008      	beq.n	8000ef8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e052      	b.n	8000f9e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0216 	bic.w	r2, r2, #22
 8000f06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	695a      	ldr	r2, [r3, #20]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f16:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d103      	bne.n	8000f28 <HAL_DMA_Abort+0x62>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d007      	beq.n	8000f38 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0208 	bic.w	r2, r2, #8
 8000f36:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f48:	e013      	b.n	8000f72 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f4a:	f7ff fe9f 	bl	8000c8c <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b05      	cmp	r3, #5
 8000f56:	d90c      	bls.n	8000f72 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2203      	movs	r2, #3
 8000f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e015      	b.n	8000f9e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1e4      	bne.n	8000f4a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f84:	223f      	movs	r2, #63	; 0x3f
 8000f86:	409a      	lsls	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d004      	beq.n	8000fc4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e00c      	b.n	8000fde <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0201 	bic.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	e159      	b.n	80012bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 8148 	bne.w	80012b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d005      	beq.n	800103e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103a:	2b02      	cmp	r3, #2
 800103c:	d130      	bne.n	80010a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	f003 0201 	and.w	r2, r3, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d017      	beq.n	80010dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d123      	bne.n	8001130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	69b9      	ldr	r1, [r7, #24]
 800112c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0203 	and.w	r2, r3, #3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80a2 	beq.w	80012b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b57      	ldr	r3, [pc, #348]	; (80012d4 <HAL_GPIO_Init+0x2e8>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a56      	ldr	r2, [pc, #344]	; (80012d4 <HAL_GPIO_Init+0x2e8>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b54      	ldr	r3, [pc, #336]	; (80012d4 <HAL_GPIO_Init+0x2e8>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800118e:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <HAL_GPIO_Init+0x2ec>)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a49      	ldr	r2, [pc, #292]	; (80012dc <HAL_GPIO_Init+0x2f0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d019      	beq.n	80011ee <HAL_GPIO_Init+0x202>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a48      	ldr	r2, [pc, #288]	; (80012e0 <HAL_GPIO_Init+0x2f4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x1fe>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a47      	ldr	r2, [pc, #284]	; (80012e4 <HAL_GPIO_Init+0x2f8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <HAL_GPIO_Init+0x1fa>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a46      	ldr	r2, [pc, #280]	; (80012e8 <HAL_GPIO_Init+0x2fc>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x1f6>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a45      	ldr	r2, [pc, #276]	; (80012ec <HAL_GPIO_Init+0x300>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_GPIO_Init+0x1f2>
 80011da:	2304      	movs	r3, #4
 80011dc:	e008      	b.n	80011f0 <HAL_GPIO_Init+0x204>
 80011de:	2307      	movs	r3, #7
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x204>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x204>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x204>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x204>
 80011ee:	2300      	movs	r3, #0
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	f002 0203 	and.w	r2, r2, #3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x2ec>)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120e:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <HAL_GPIO_Init+0x304>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001232:	4a2f      	ldr	r2, [pc, #188]	; (80012f0 <HAL_GPIO_Init+0x304>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_GPIO_Init+0x304>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800125c:	4a24      	ldr	r2, [pc, #144]	; (80012f0 <HAL_GPIO_Init+0x304>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <HAL_GPIO_Init+0x304>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001286:	4a1a      	ldr	r2, [pc, #104]	; (80012f0 <HAL_GPIO_Init+0x304>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_GPIO_Init+0x304>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b0:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <HAL_GPIO_Init+0x304>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	f67f aea2 	bls.w	8001008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40013c00 	.word	0x40013c00

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e267      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d075      	beq.n	80013fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001312:	4b88      	ldr	r3, [pc, #544]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b04      	cmp	r3, #4
 800131c:	d00c      	beq.n	8001338 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131e:	4b85      	ldr	r3, [pc, #532]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001326:	2b08      	cmp	r3, #8
 8001328:	d112      	bne.n	8001350 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132a:	4b82      	ldr	r3, [pc, #520]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001336:	d10b      	bne.n	8001350 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	4b7e      	ldr	r3, [pc, #504]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d05b      	beq.n	80013fc <HAL_RCC_OscConfig+0x108>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d157      	bne.n	80013fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e242      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d106      	bne.n	8001368 <HAL_RCC_OscConfig+0x74>
 800135a:	4b76      	ldr	r3, [pc, #472]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a75      	ldr	r2, [pc, #468]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e01d      	b.n	80013a4 <HAL_RCC_OscConfig+0xb0>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x98>
 8001372:	4b70      	ldr	r3, [pc, #448]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6f      	ldr	r2, [pc, #444]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b6d      	ldr	r3, [pc, #436]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6c      	ldr	r2, [pc, #432]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0xb0>
 800138c:	4b69      	ldr	r3, [pc, #420]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a68      	ldr	r2, [pc, #416]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b66      	ldr	r3, [pc, #408]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a65      	ldr	r2, [pc, #404]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc6e 	bl	8000c8c <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fc6a 	bl	8000c8c <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e207      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b5b      	ldr	r3, [pc, #364]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xc0>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc5a 	bl	8000c8c <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fc56 	bl	8000c8c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1f3      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	4b51      	ldr	r3, [pc, #324]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0xe8>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d063      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140a:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800141e:	2b08      	cmp	r3, #8
 8001420:	d11c      	bne.n	800145c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001422:	4b44      	ldr	r3, [pc, #272]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	4b41      	ldr	r3, [pc, #260]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x152>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d001      	beq.n	8001446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e1c7      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001446:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4937      	ldr	r1, [pc, #220]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	e03a      	b.n	80014d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	4b34      	ldr	r3, [pc, #208]	; (8001538 <HAL_RCC_OscConfig+0x244>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff fc0f 	bl	8000c8c <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff fc0b 	bl	8000c8c <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e1a8      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4925      	ldr	r1, [pc, #148]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_OscConfig+0x244>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fbee 	bl	8000c8c <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff fbea 	bl	8000c8c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e187      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d036      	beq.n	800154c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d016      	beq.n	8001514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_RCC_OscConfig+0x248>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ec:	f7ff fbce 	bl	8000c8c <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff fbca 	bl	8000c8c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e167      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x200>
 8001512:	e01b      	b.n	800154c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_RCC_OscConfig+0x248>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fbb7 	bl	8000c8c <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	e00e      	b.n	8001540 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001522:	f7ff fbb3 	bl	8000c8c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d907      	bls.n	8001540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e150      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
 8001534:	40023800 	.word	0x40023800
 8001538:	42470000 	.word	0x42470000
 800153c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001540:	4b88      	ldr	r3, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ea      	bne.n	8001522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 8097 	beq.w	8001688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155e:	4b81      	ldr	r3, [pc, #516]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10f      	bne.n	800158a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	4b7d      	ldr	r3, [pc, #500]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a7c      	ldr	r2, [pc, #496]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b7a      	ldr	r3, [pc, #488]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001586:	2301      	movs	r3, #1
 8001588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158a:	4b77      	ldr	r3, [pc, #476]	; (8001768 <HAL_RCC_OscConfig+0x474>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d118      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001596:	4b74      	ldr	r3, [pc, #464]	; (8001768 <HAL_RCC_OscConfig+0x474>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a73      	ldr	r2, [pc, #460]	; (8001768 <HAL_RCC_OscConfig+0x474>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fb73 	bl	8000c8c <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015aa:	f7ff fb6f 	bl	8000c8c <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e10c      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <HAL_RCC_OscConfig+0x474>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x2ea>
 80015d0:	4b64      	ldr	r3, [pc, #400]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a63      	ldr	r2, [pc, #396]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	e01c      	b.n	8001618 <HAL_RCC_OscConfig+0x324>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b05      	cmp	r3, #5
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x30c>
 80015e6:	4b5f      	ldr	r3, [pc, #380]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ea:	4a5e      	ldr	r2, [pc, #376]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6713      	str	r3, [r2, #112]	; 0x70
 80015f2:	4b5c      	ldr	r3, [pc, #368]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	4a5b      	ldr	r2, [pc, #364]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6713      	str	r3, [r2, #112]	; 0x70
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0x324>
 8001600:	4b58      	ldr	r3, [pc, #352]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001604:	4a57      	ldr	r2, [pc, #348]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	6713      	str	r3, [r2, #112]	; 0x70
 800160c:	4b55      	ldr	r3, [pc, #340]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	4a54      	ldr	r2, [pc, #336]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d015      	beq.n	800164c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fb34 	bl	8000c8c <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff fb30 	bl	8000c8c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e0cb      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163e:	4b49      	ldr	r3, [pc, #292]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0ee      	beq.n	8001628 <HAL_RCC_OscConfig+0x334>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff fb1e 	bl	8000c8c <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7ff fb1a 	bl	8000c8c <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e0b5      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166a:	4b3e      	ldr	r3, [pc, #248]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1ee      	bne.n	8001654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167c:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	4a38      	ldr	r2, [pc, #224]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001686:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a1 	beq.w	80017d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001692:	4b34      	ldr	r3, [pc, #208]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b08      	cmp	r3, #8
 800169c:	d05c      	beq.n	8001758 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d141      	bne.n	800172a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_RCC_OscConfig+0x478>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff faee 	bl	8000c8c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff faea 	bl	8000c8c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e087      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	019b      	lsls	r3, r3, #6
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	085b      	lsrs	r3, r3, #1
 80016ea:	3b01      	subs	r3, #1
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	061b      	lsls	r3, r3, #24
 80016f6:	491b      	ldr	r1, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x478>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fac3 	bl	8000c8c <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff fabf 	bl	8000c8c <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e05c      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x416>
 8001728:	e054      	b.n	80017d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_RCC_OscConfig+0x478>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff faac 	bl	8000c8c <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff faa8 	bl	8000c8c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e045      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x444>
 8001756:	e03d      	b.n	80017d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d107      	bne.n	8001770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e038      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
 8001764:	40023800 	.word	0x40023800
 8001768:	40007000 	.word	0x40007000
 800176c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_RCC_OscConfig+0x4ec>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d028      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d121      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d11a      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017a0:	4013      	ands	r3, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d111      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	3b01      	subs	r3, #1
 80017ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0cc      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f8:	4b68      	ldr	r3, [pc, #416]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d90c      	bls.n	8001820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b65      	ldr	r3, [pc, #404]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b63      	ldr	r3, [pc, #396]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0b8      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001838:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4a58      	ldr	r2, [pc, #352]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001842:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800185a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800185c:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	494d      	ldr	r1, [pc, #308]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d044      	beq.n	8001904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d119      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e07f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d003      	beq.n	80018a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a2:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e06f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e067      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f023 0203 	bic.w	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4934      	ldr	r1, [pc, #208]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d4:	f7ff f9da 	bl	8000c8c <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018dc:	f7ff f9d6 	bl	8000c8c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e04f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 020c 	and.w	r2, r3, #12
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	429a      	cmp	r2, r3
 8001902:	d1eb      	bne.n	80018dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d20c      	bcs.n	800192c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e032      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4916      	ldr	r1, [pc, #88]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d009      	beq.n	800196a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	490e      	ldr	r1, [pc, #56]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800196a:	f000 f821 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 800196e:	4602      	mov	r2, r0
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	490a      	ldr	r1, [pc, #40]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	5ccb      	ldrb	r3, [r1, r3]
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f93a 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023c00 	.word	0x40023c00
 80019a0:	40023800 	.word	0x40023800
 80019a4:	08005624 	.word	0x08005624
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b4:	b094      	sub	sp, #80	; 0x50
 80019b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	647b      	str	r3, [r7, #68]	; 0x44
 80019bc:	2300      	movs	r3, #0
 80019be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019c0:	2300      	movs	r3, #0
 80019c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c8:	4b79      	ldr	r3, [pc, #484]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d00d      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x40>
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	f200 80e1 	bhi.w	8001b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x34>
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d003      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0x3a>
 80019e2:	e0db      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e4:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019e8:	e0db      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ea:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x208>)
 80019ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ee:	e0d8      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f0:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019fa:	4b6d      	ldr	r3, [pc, #436]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d063      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a06:	4b6a      	ldr	r3, [pc, #424]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a22:	4622      	mov	r2, r4
 8001a24:	462b      	mov	r3, r5
 8001a26:	f04f 0000 	mov.w	r0, #0
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	0159      	lsls	r1, r3, #5
 8001a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a34:	0150      	lsls	r0, r2, #5
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	1a51      	subs	r1, r2, r1
 8001a3e:	6139      	str	r1, [r7, #16]
 8001a40:	4629      	mov	r1, r5
 8001a42:	eb63 0301 	sbc.w	r3, r3, r1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a54:	4659      	mov	r1, fp
 8001a56:	018b      	lsls	r3, r1, #6
 8001a58:	4651      	mov	r1, sl
 8001a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a5e:	4651      	mov	r1, sl
 8001a60:	018a      	lsls	r2, r1, #6
 8001a62:	4651      	mov	r1, sl
 8001a64:	ebb2 0801 	subs.w	r8, r2, r1
 8001a68:	4659      	mov	r1, fp
 8001a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a82:	4690      	mov	r8, r2
 8001a84:	4699      	mov	r9, r3
 8001a86:	4623      	mov	r3, r4
 8001a88:	eb18 0303 	adds.w	r3, r8, r3
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	462b      	mov	r3, r5
 8001a90:	eb49 0303 	adc.w	r3, r9, r3
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	024b      	lsls	r3, r1, #9
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aac:	4621      	mov	r1, r4
 8001aae:	024a      	lsls	r2, r1, #9
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ac0:	f7fe fb8e 	bl	80001e0 <__aeabi_uldivmod>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4613      	mov	r3, r2
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001acc:	e058      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	099b      	lsrs	r3, r3, #6
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	4611      	mov	r1, r2
 8001ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ade:	623b      	str	r3, [r7, #32]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ae8:	4642      	mov	r2, r8
 8001aea:	464b      	mov	r3, r9
 8001aec:	f04f 0000 	mov.w	r0, #0
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	0159      	lsls	r1, r3, #5
 8001af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001afa:	0150      	lsls	r0, r2, #5
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4641      	mov	r1, r8
 8001b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b06:	4649      	mov	r1, r9
 8001b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b20:	ebb2 040a 	subs.w	r4, r2, sl
 8001b24:	eb63 050b 	sbc.w	r5, r3, fp
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	00eb      	lsls	r3, r5, #3
 8001b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b36:	00e2      	lsls	r2, r4, #3
 8001b38:	4614      	mov	r4, r2
 8001b3a:	461d      	mov	r5, r3
 8001b3c:	4643      	mov	r3, r8
 8001b3e:	18e3      	adds	r3, r4, r3
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	464b      	mov	r3, r9
 8001b44:	eb45 0303 	adc.w	r3, r5, r3
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b56:	4629      	mov	r1, r5
 8001b58:	028b      	lsls	r3, r1, #10
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b60:	4621      	mov	r1, r4
 8001b62:	028a      	lsls	r2, r1, #10
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	61fa      	str	r2, [r7, #28]
 8001b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b74:	f7fe fb34 	bl	80001e0 <__aeabi_uldivmod>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b9a:	e002      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3750      	adds	r7, #80	; 0x50
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	00f42400 	.word	0x00f42400
 8001bb8:	007a1200 	.word	0x007a1200

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bd8:	f7ff fff0 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0a9b      	lsrs	r3, r3, #10
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4903      	ldr	r1, [pc, #12]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	08005634 	.word	0x08005634

08001bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c00:	f7ff ffdc 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0b5b      	lsrs	r3, r3, #13
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	08005634 	.word	0x08005634

08001c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e03f      	b.n	8001cb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe fdf6 	bl	800083c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2224      	movs	r2, #36	; 0x24
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fc7b 	bl	8002564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0ba      	sub	sp, #232	; 0xe8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10f      	bne.n	8001d26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <HAL_UART_IRQHandler+0x66>
 8001d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fb65 	bl	80023ee <UART_Receive_IT>
      return;
 8001d24:	e256      	b.n	80021d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80de 	beq.w	8001eec <HAL_UART_IRQHandler+0x22c>
 8001d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d106      	bne.n	8001d4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80d1 	beq.w	8001eec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_UART_IRQHandler+0xae>
 8001d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_UART_IRQHandler+0xd2>
 8001d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f043 0202 	orr.w	r2, r3, #2
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <HAL_UART_IRQHandler+0xf6>
 8001d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f043 0204 	orr.w	r2, r3, #4
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d011      	beq.n	8001de6 <HAL_UART_IRQHandler+0x126>
 8001dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d105      	bne.n	8001dda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f043 0208 	orr.w	r2, r3, #8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 81ed 	beq.w	80021ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <HAL_UART_IRQHandler+0x14e>
 8001dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 faf0 	bl	80023ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e18:	2b40      	cmp	r3, #64	; 0x40
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d103      	bne.n	8001e3a <HAL_UART_IRQHandler+0x17a>
 8001e32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d04f      	beq.n	8001eda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f9f8 	bl	8002230 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4a:	2b40      	cmp	r3, #64	; 0x40
 8001e4c:	d141      	bne.n	8001ed2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3314      	adds	r3, #20
 8001e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e5c:	e853 3f00 	ldrex	r3, [r3]
 8001e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3314      	adds	r3, #20
 8001e76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001e7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001e86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001e8a:	e841 2300 	strex	r3, r2, [r1]
 8001e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1d9      	bne.n	8001e4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d013      	beq.n	8001eca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea6:	4a7d      	ldr	r2, [pc, #500]	; (800209c <HAL_UART_IRQHandler+0x3dc>)
 8001ea8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f879 	bl	8000fa6 <HAL_DMA_Abort_IT>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d016      	beq.n	8001ee8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec8:	e00e      	b.n	8001ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f99a 	bl	8002204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed0:	e00a      	b.n	8001ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f996 	bl	8002204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed8:	e006      	b.n	8001ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f992 	bl	8002204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001ee6:	e170      	b.n	80021ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ee8:	bf00      	nop
    return;
 8001eea:	e16e      	b.n	80021ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	f040 814a 	bne.w	800218a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8143 	beq.w	800218a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 813c 	beq.w	800218a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f32:	2b40      	cmp	r3, #64	; 0x40
 8001f34:	f040 80b4 	bne.w	80020a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8140 	beq.w	80021ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001f56:	429a      	cmp	r2, r3
 8001f58:	f080 8139 	bcs.w	80021ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001f62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f6e:	f000 8088 	beq.w	8002082 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	330c      	adds	r3, #12
 8001f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f80:	e853 3f00 	ldrex	r3, [r3]
 8001f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	330c      	adds	r3, #12
 8001f9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001f9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fae:	e841 2300 	strex	r3, r2, [r1]
 8001fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1d9      	bne.n	8001f72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3314      	adds	r3, #20
 8001fc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc8:	e853 3f00 	ldrex	r3, [r3]
 8001fcc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	3314      	adds	r3, #20
 8001fde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fe2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001fea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001fee:	e841 2300 	strex	r3, r2, [r1]
 8001ff2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e1      	bne.n	8001fbe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3314      	adds	r3, #20
 8002000:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002004:	e853 3f00 	ldrex	r3, [r3]
 8002008:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800200a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3314      	adds	r3, #20
 800201a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800201e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002020:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002022:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002024:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002026:	e841 2300 	strex	r3, r2, [r1]
 800202a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800202c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e3      	bne.n	8001ffa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	330c      	adds	r3, #12
 8002046:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800204a:	e853 3f00 	ldrex	r3, [r3]
 800204e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002052:	f023 0310 	bic.w	r3, r3, #16
 8002056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	330c      	adds	r3, #12
 8002060:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002064:	65ba      	str	r2, [r7, #88]	; 0x58
 8002066:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002068:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800206a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800206c:	e841 2300 	strex	r3, r2, [r1]
 8002070:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1e3      	bne.n	8002040 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe ff22 	bl	8000ec6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800208a:	b29b      	uxth	r3, r3
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	b29b      	uxth	r3, r3
 8002090:	4619      	mov	r1, r3
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8c0 	bl	8002218 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002098:	e099      	b.n	80021ce <HAL_UART_IRQHandler+0x50e>
 800209a:	bf00      	nop
 800209c:	080022f7 	.word	0x080022f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 808b 	beq.w	80021d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80020bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8086 	beq.w	80021d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	330c      	adds	r3, #12
 80020cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d0:	e853 3f00 	ldrex	r3, [r3]
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80020d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80020dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	330c      	adds	r3, #12
 80020e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80020ea:	647a      	str	r2, [r7, #68]	; 0x44
 80020ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020f2:	e841 2300 	strex	r3, r2, [r1]
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80020f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1e3      	bne.n	80020c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3314      	adds	r3, #20
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	e853 3f00 	ldrex	r3, [r3]
 800210c:	623b      	str	r3, [r7, #32]
   return(result);
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3314      	adds	r3, #20
 800211e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002122:	633a      	str	r2, [r7, #48]	; 0x30
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800212a:	e841 2300 	strex	r3, r2, [r1]
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1e3      	bne.n	80020fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	330c      	adds	r3, #12
 800214a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	e853 3f00 	ldrex	r3, [r3]
 8002152:	60fb      	str	r3, [r7, #12]
   return(result);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0310 	bic.w	r3, r3, #16
 800215a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	330c      	adds	r3, #12
 8002164:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002168:	61fa      	str	r2, [r7, #28]
 800216a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216c:	69b9      	ldr	r1, [r7, #24]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	e841 2300 	strex	r3, r2, [r1]
 8002174:	617b      	str	r3, [r7, #20]
   return(result);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e3      	bne.n	8002144 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800217c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002180:	4619      	mov	r1, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f848 	bl	8002218 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002188:	e023      	b.n	80021d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800218a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	2b00      	cmp	r3, #0
 8002194:	d009      	beq.n	80021aa <HAL_UART_IRQHandler+0x4ea>
 8002196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f8bb 	bl	800231e <UART_Transmit_IT>
    return;
 80021a8:	e014      	b.n	80021d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00e      	beq.n	80021d4 <HAL_UART_IRQHandler+0x514>
 80021b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8fb 	bl	80023be <UART_EndTransmit_IT>
    return;
 80021c8:	e004      	b.n	80021d4 <HAL_UART_IRQHandler+0x514>
    return;
 80021ca:	bf00      	nop
 80021cc:	e002      	b.n	80021d4 <HAL_UART_IRQHandler+0x514>
      return;
 80021ce:	bf00      	nop
 80021d0:	e000      	b.n	80021d4 <HAL_UART_IRQHandler+0x514>
      return;
 80021d2:	bf00      	nop
  }
}
 80021d4:	37e8      	adds	r7, #232	; 0xe8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop

080021dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002230:	b480      	push	{r7}
 8002232:	b095      	sub	sp, #84	; 0x54
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002242:	e853 3f00 	ldrex	r3, [r3]
 8002246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800224e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	330c      	adds	r3, #12
 8002256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002258:	643a      	str	r2, [r7, #64]	; 0x40
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800225c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800225e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002260:	e841 2300 	strex	r3, r2, [r1]
 8002264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e5      	bne.n	8002238 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3314      	adds	r3, #20
 8002272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	e853 3f00 	ldrex	r3, [r3]
 800227a:	61fb      	str	r3, [r7, #28]
   return(result);
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	64bb      	str	r3, [r7, #72]	; 0x48
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3314      	adds	r3, #20
 800228a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800228c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002294:	e841 2300 	strex	r3, r2, [r1]
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e5      	bne.n	800226c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d119      	bne.n	80022dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	330c      	adds	r3, #12
 80022ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	e853 3f00 	ldrex	r3, [r3]
 80022b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f023 0310 	bic.w	r3, r3, #16
 80022be:	647b      	str	r3, [r7, #68]	; 0x44
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	330c      	adds	r3, #12
 80022c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022c8:	61ba      	str	r2, [r7, #24]
 80022ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022cc:	6979      	ldr	r1, [r7, #20]
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	e841 2300 	strex	r3, r2, [r1]
 80022d4:	613b      	str	r3, [r7, #16]
   return(result);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e5      	bne.n	80022a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022ea:	bf00      	nop
 80022ec:	3754      	adds	r7, #84	; 0x54
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f7ff ff77 	bl	8002204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b21      	cmp	r3, #33	; 0x21
 8002330:	d13e      	bne.n	80023b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233a:	d114      	bne.n	8002366 <UART_Transmit_IT+0x48>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d110      	bne.n	8002366 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002358:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	1c9a      	adds	r2, r3, #2
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	621a      	str	r2, [r3, #32]
 8002364:	e008      	b.n	8002378 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	1c59      	adds	r1, r3, #1
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6211      	str	r1, [r2, #32]
 8002370:	781a      	ldrb	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29b      	uxth	r3, r3
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4619      	mov	r1, r3
 8002386:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10f      	bne.n	80023ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800239a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
  }
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff fefc 	bl	80021dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b08c      	sub	sp, #48	; 0x30
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b22      	cmp	r3, #34	; 0x22
 8002400:	f040 80ab 	bne.w	800255a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240c:	d117      	bne.n	800243e <UART_Receive_IT+0x50>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d113      	bne.n	800243e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002416:	2300      	movs	r3, #0
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	b29b      	uxth	r3, r3
 8002428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242c:	b29a      	uxth	r2, r3
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002430:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	1c9a      	adds	r2, r3, #2
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	; 0x28
 800243c:	e026      	b.n	800248c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002444:	2300      	movs	r3, #0
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002450:	d007      	beq.n	8002462 <UART_Receive_IT+0x74>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10a      	bne.n	8002470 <UART_Receive_IT+0x82>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e008      	b.n	8002482 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800247c:	b2da      	uxtb	r2, r3
 800247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002480:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29b      	uxth	r3, r3
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	4619      	mov	r1, r3
 800249a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800249c:	2b00      	cmp	r3, #0
 800249e:	d15a      	bne.n	8002556 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0220 	bic.w	r2, r2, #32
 80024ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d135      	bne.n	800254c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	330c      	adds	r3, #12
 80024ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	e853 3f00 	ldrex	r3, [r3]
 80024f4:	613b      	str	r3, [r7, #16]
   return(result);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f023 0310 	bic.w	r3, r3, #16
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	330c      	adds	r3, #12
 8002504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002506:	623a      	str	r2, [r7, #32]
 8002508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250a:	69f9      	ldr	r1, [r7, #28]
 800250c:	6a3a      	ldr	r2, [r7, #32]
 800250e:	e841 2300 	strex	r3, r2, [r1]
 8002512:	61bb      	str	r3, [r7, #24]
   return(result);
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1e5      	bne.n	80024e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b10      	cmp	r3, #16
 8002526:	d10a      	bne.n	800253e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fe67 	bl	8002218 <HAL_UARTEx_RxEventCallback>
 800254a:	e002      	b.n	8002552 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff fe4f 	bl	80021f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e002      	b.n	800255c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e000      	b.n	800255c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800255a:	2302      	movs	r3, #2
  }
}
 800255c:	4618      	mov	r0, r3
 800255e:	3730      	adds	r7, #48	; 0x30
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002568:	b0c0      	sub	sp, #256	; 0x100
 800256a:	af00      	add	r7, sp, #0
 800256c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800257c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002580:	68d9      	ldr	r1, [r3, #12]
 8002582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	ea40 0301 	orr.w	r3, r0, r1
 800258c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	431a      	orrs	r2, r3
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025bc:	f021 010c 	bic.w	r1, r1, #12
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025ca:	430b      	orrs	r3, r1
 80025cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025de:	6999      	ldr	r1, [r3, #24]
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	ea40 0301 	orr.w	r3, r0, r1
 80025ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4b8f      	ldr	r3, [pc, #572]	; (8002830 <UART_SetConfig+0x2cc>)
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d005      	beq.n	8002604 <UART_SetConfig+0xa0>
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4b8d      	ldr	r3, [pc, #564]	; (8002834 <UART_SetConfig+0x2d0>)
 8002600:	429a      	cmp	r2, r3
 8002602:	d104      	bne.n	800260e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002604:	f7ff fafa 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 8002608:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800260c:	e003      	b.n	8002616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800260e:	f7ff fae1 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8002612:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002620:	f040 810c 	bne.w	800283c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002628:	2200      	movs	r2, #0
 800262a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800262e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002636:	4622      	mov	r2, r4
 8002638:	462b      	mov	r3, r5
 800263a:	1891      	adds	r1, r2, r2
 800263c:	65b9      	str	r1, [r7, #88]	; 0x58
 800263e:	415b      	adcs	r3, r3
 8002640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002646:	4621      	mov	r1, r4
 8002648:	eb12 0801 	adds.w	r8, r2, r1
 800264c:	4629      	mov	r1, r5
 800264e:	eb43 0901 	adc.w	r9, r3, r1
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800265e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002666:	4690      	mov	r8, r2
 8002668:	4699      	mov	r9, r3
 800266a:	4623      	mov	r3, r4
 800266c:	eb18 0303 	adds.w	r3, r8, r3
 8002670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002674:	462b      	mov	r3, r5
 8002676:	eb49 0303 	adc.w	r3, r9, r3
 800267a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800267e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800268a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800268e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002692:	460b      	mov	r3, r1
 8002694:	18db      	adds	r3, r3, r3
 8002696:	653b      	str	r3, [r7, #80]	; 0x50
 8002698:	4613      	mov	r3, r2
 800269a:	eb42 0303 	adc.w	r3, r2, r3
 800269e:	657b      	str	r3, [r7, #84]	; 0x54
 80026a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026a8:	f7fd fd9a 	bl	80001e0 <__aeabi_uldivmod>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4b61      	ldr	r3, [pc, #388]	; (8002838 <UART_SetConfig+0x2d4>)
 80026b2:	fba3 2302 	umull	r2, r3, r3, r2
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	011c      	lsls	r4, r3, #4
 80026ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026be:	2200      	movs	r2, #0
 80026c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026cc:	4642      	mov	r2, r8
 80026ce:	464b      	mov	r3, r9
 80026d0:	1891      	adds	r1, r2, r2
 80026d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80026d4:	415b      	adcs	r3, r3
 80026d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026dc:	4641      	mov	r1, r8
 80026de:	eb12 0a01 	adds.w	sl, r2, r1
 80026e2:	4649      	mov	r1, r9
 80026e4:	eb43 0b01 	adc.w	fp, r3, r1
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026fc:	4692      	mov	sl, r2
 80026fe:	469b      	mov	fp, r3
 8002700:	4643      	mov	r3, r8
 8002702:	eb1a 0303 	adds.w	r3, sl, r3
 8002706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800270a:	464b      	mov	r3, r9
 800270c:	eb4b 0303 	adc.w	r3, fp, r3
 8002710:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002720:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002728:	460b      	mov	r3, r1
 800272a:	18db      	adds	r3, r3, r3
 800272c:	643b      	str	r3, [r7, #64]	; 0x40
 800272e:	4613      	mov	r3, r2
 8002730:	eb42 0303 	adc.w	r3, r2, r3
 8002734:	647b      	str	r3, [r7, #68]	; 0x44
 8002736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800273a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800273e:	f7fd fd4f 	bl	80001e0 <__aeabi_uldivmod>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4611      	mov	r1, r2
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <UART_SetConfig+0x2d4>)
 800274a:	fba3 2301 	umull	r2, r3, r3, r1
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	2264      	movs	r2, #100	; 0x64
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	1acb      	subs	r3, r1, r3
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800275e:	4b36      	ldr	r3, [pc, #216]	; (8002838 <UART_SetConfig+0x2d4>)
 8002760:	fba3 2302 	umull	r2, r3, r3, r2
 8002764:	095b      	lsrs	r3, r3, #5
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800276c:	441c      	add	r4, r3
 800276e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002772:	2200      	movs	r2, #0
 8002774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002778:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800277c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002780:	4642      	mov	r2, r8
 8002782:	464b      	mov	r3, r9
 8002784:	1891      	adds	r1, r2, r2
 8002786:	63b9      	str	r1, [r7, #56]	; 0x38
 8002788:	415b      	adcs	r3, r3
 800278a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800278c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002790:	4641      	mov	r1, r8
 8002792:	1851      	adds	r1, r2, r1
 8002794:	6339      	str	r1, [r7, #48]	; 0x30
 8002796:	4649      	mov	r1, r9
 8002798:	414b      	adcs	r3, r1
 800279a:	637b      	str	r3, [r7, #52]	; 0x34
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027a8:	4659      	mov	r1, fp
 80027aa:	00cb      	lsls	r3, r1, #3
 80027ac:	4651      	mov	r1, sl
 80027ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b2:	4651      	mov	r1, sl
 80027b4:	00ca      	lsls	r2, r1, #3
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	4642      	mov	r2, r8
 80027be:	189b      	adds	r3, r3, r2
 80027c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027c4:	464b      	mov	r3, r9
 80027c6:	460a      	mov	r2, r1
 80027c8:	eb42 0303 	adc.w	r3, r2, r3
 80027cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027e4:	460b      	mov	r3, r1
 80027e6:	18db      	adds	r3, r3, r3
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ea:	4613      	mov	r3, r2
 80027ec:	eb42 0303 	adc.w	r3, r2, r3
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027fa:	f7fd fcf1 	bl	80001e0 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <UART_SetConfig+0x2d4>)
 8002804:	fba3 1302 	umull	r1, r3, r3, r2
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	2164      	movs	r1, #100	; 0x64
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	3332      	adds	r3, #50	; 0x32
 8002816:	4a08      	ldr	r2, [pc, #32]	; (8002838 <UART_SetConfig+0x2d4>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	f003 0207 	and.w	r2, r3, #7
 8002822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4422      	add	r2, r4
 800282a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800282c:	e106      	b.n	8002a3c <UART_SetConfig+0x4d8>
 800282e:	bf00      	nop
 8002830:	40011000 	.word	0x40011000
 8002834:	40011400 	.word	0x40011400
 8002838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800283c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002840:	2200      	movs	r2, #0
 8002842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002846:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800284a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800284e:	4642      	mov	r2, r8
 8002850:	464b      	mov	r3, r9
 8002852:	1891      	adds	r1, r2, r2
 8002854:	6239      	str	r1, [r7, #32]
 8002856:	415b      	adcs	r3, r3
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
 800285a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800285e:	4641      	mov	r1, r8
 8002860:	1854      	adds	r4, r2, r1
 8002862:	4649      	mov	r1, r9
 8002864:	eb43 0501 	adc.w	r5, r3, r1
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	00eb      	lsls	r3, r5, #3
 8002872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002876:	00e2      	lsls	r2, r4, #3
 8002878:	4614      	mov	r4, r2
 800287a:	461d      	mov	r5, r3
 800287c:	4643      	mov	r3, r8
 800287e:	18e3      	adds	r3, r4, r3
 8002880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002884:	464b      	mov	r3, r9
 8002886:	eb45 0303 	adc.w	r3, r5, r3
 800288a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800289a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028aa:	4629      	mov	r1, r5
 80028ac:	008b      	lsls	r3, r1, #2
 80028ae:	4621      	mov	r1, r4
 80028b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028b4:	4621      	mov	r1, r4
 80028b6:	008a      	lsls	r2, r1, #2
 80028b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028bc:	f7fd fc90 	bl	80001e0 <__aeabi_uldivmod>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4b60      	ldr	r3, [pc, #384]	; (8002a48 <UART_SetConfig+0x4e4>)
 80028c6:	fba3 2302 	umull	r2, r3, r3, r2
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	011c      	lsls	r4, r3, #4
 80028ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028d2:	2200      	movs	r2, #0
 80028d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028e0:	4642      	mov	r2, r8
 80028e2:	464b      	mov	r3, r9
 80028e4:	1891      	adds	r1, r2, r2
 80028e6:	61b9      	str	r1, [r7, #24]
 80028e8:	415b      	adcs	r3, r3
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f0:	4641      	mov	r1, r8
 80028f2:	1851      	adds	r1, r2, r1
 80028f4:	6139      	str	r1, [r7, #16]
 80028f6:	4649      	mov	r1, r9
 80028f8:	414b      	adcs	r3, r1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002908:	4659      	mov	r1, fp
 800290a:	00cb      	lsls	r3, r1, #3
 800290c:	4651      	mov	r1, sl
 800290e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002912:	4651      	mov	r1, sl
 8002914:	00ca      	lsls	r2, r1, #3
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	4603      	mov	r3, r0
 800291c:	4642      	mov	r2, r8
 800291e:	189b      	adds	r3, r3, r2
 8002920:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002924:	464b      	mov	r3, r9
 8002926:	460a      	mov	r2, r1
 8002928:	eb42 0303 	adc.w	r3, r2, r3
 800292c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	67bb      	str	r3, [r7, #120]	; 0x78
 800293a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002948:	4649      	mov	r1, r9
 800294a:	008b      	lsls	r3, r1, #2
 800294c:	4641      	mov	r1, r8
 800294e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002952:	4641      	mov	r1, r8
 8002954:	008a      	lsls	r2, r1, #2
 8002956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800295a:	f7fd fc41 	bl	80001e0 <__aeabi_uldivmod>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4611      	mov	r1, r2
 8002964:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <UART_SetConfig+0x4e4>)
 8002966:	fba3 2301 	umull	r2, r3, r3, r1
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	2264      	movs	r2, #100	; 0x64
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	1acb      	subs	r3, r1, r3
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	3332      	adds	r3, #50	; 0x32
 8002978:	4a33      	ldr	r2, [pc, #204]	; (8002a48 <UART_SetConfig+0x4e4>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002984:	441c      	add	r4, r3
 8002986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800298a:	2200      	movs	r2, #0
 800298c:	673b      	str	r3, [r7, #112]	; 0x70
 800298e:	677a      	str	r2, [r7, #116]	; 0x74
 8002990:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002994:	4642      	mov	r2, r8
 8002996:	464b      	mov	r3, r9
 8002998:	1891      	adds	r1, r2, r2
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	415b      	adcs	r3, r3
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a4:	4641      	mov	r1, r8
 80029a6:	1851      	adds	r1, r2, r1
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	4649      	mov	r1, r9
 80029ac:	414b      	adcs	r3, r1
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029bc:	4659      	mov	r1, fp
 80029be:	00cb      	lsls	r3, r1, #3
 80029c0:	4651      	mov	r1, sl
 80029c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029c6:	4651      	mov	r1, sl
 80029c8:	00ca      	lsls	r2, r1, #3
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	4642      	mov	r2, r8
 80029d2:	189b      	adds	r3, r3, r2
 80029d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80029d6:	464b      	mov	r3, r9
 80029d8:	460a      	mov	r2, r1
 80029da:	eb42 0303 	adc.w	r3, r2, r3
 80029de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	663b      	str	r3, [r7, #96]	; 0x60
 80029ea:	667a      	str	r2, [r7, #100]	; 0x64
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029f8:	4649      	mov	r1, r9
 80029fa:	008b      	lsls	r3, r1, #2
 80029fc:	4641      	mov	r1, r8
 80029fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a02:	4641      	mov	r1, r8
 8002a04:	008a      	lsls	r2, r1, #2
 8002a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a0a:	f7fd fbe9 	bl	80001e0 <__aeabi_uldivmod>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <UART_SetConfig+0x4e4>)
 8002a14:	fba3 1302 	umull	r1, r3, r3, r2
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	2164      	movs	r1, #100	; 0x64
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	3332      	adds	r3, #50	; 0x32
 8002a26:	4a08      	ldr	r2, [pc, #32]	; (8002a48 <UART_SetConfig+0x4e4>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	f003 020f 	and.w	r2, r3, #15
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4422      	add	r2, r4
 8002a3a:	609a      	str	r2, [r3, #8]
}
 8002a3c:	bf00      	nop
 8002a3e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a42:	46bd      	mov	sp, r7
 8002a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a48:	51eb851f 	.word	0x51eb851f

08002a4c <__NVIC_SetPriority>:
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	db0a      	blt.n	8002a76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	490c      	ldr	r1, [pc, #48]	; (8002a98 <__NVIC_SetPriority+0x4c>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	0112      	lsls	r2, r2, #4
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a74:	e00a      	b.n	8002a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4908      	ldr	r1, [pc, #32]	; (8002a9c <__NVIC_SetPriority+0x50>)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	3b04      	subs	r3, #4
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	440b      	add	r3, r1
 8002a8a:	761a      	strb	r2, [r3, #24]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000e100 	.word	0xe000e100
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	f06f 0004 	mvn.w	r0, #4
 8002aaa:	f7ff ffcf 	bl	8002a4c <__NVIC_SetPriority>
#endif
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aba:	f3ef 8305 	mrs	r3, IPSR
 8002abe:	603b      	str	r3, [r7, #0]
  return(result);
 8002ac0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002ac6:	f06f 0305 	mvn.w	r3, #5
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	e00c      	b.n	8002ae8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <osKernelInitialize+0x44>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <osKernelInitialize+0x44>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	e002      	b.n	8002ae8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ae6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ae8:	687b      	ldr	r3, [r7, #4]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000080 	.word	0x20000080

08002afc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b02:	f3ef 8305 	mrs	r3, IPSR
 8002b06:	603b      	str	r3, [r7, #0]
  return(result);
 8002b08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002b0e:	f06f 0305 	mvn.w	r3, #5
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	e010      	b.n	8002b38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <osKernelStart+0x48>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d109      	bne.n	8002b32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002b1e:	f7ff ffbf 	bl	8002aa0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <osKernelStart+0x48>)
 8002b24:	2202      	movs	r2, #2
 8002b26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b28:	f001 f84a 	bl	8003bc0 <vTaskStartScheduler>
      stat = osOK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	e002      	b.n	8002b38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000080 	.word	0x20000080

08002b48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08e      	sub	sp, #56	; 0x38
 8002b4c:	af04      	add	r7, sp, #16
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b58:	f3ef 8305 	mrs	r3, IPSR
 8002b5c:	617b      	str	r3, [r7, #20]
  return(result);
 8002b5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d17e      	bne.n	8002c62 <osThreadNew+0x11a>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d07b      	beq.n	8002c62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b6e:	2318      	movs	r3, #24
 8002b70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d045      	beq.n	8002c0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <osThreadNew+0x48>
        name = attr->name;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <osThreadNew+0x6e>
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b38      	cmp	r3, #56	; 0x38
 8002ba8:	d805      	bhi.n	8002bb6 <osThreadNew+0x6e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <osThreadNew+0x72>
        return (NULL);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e054      	b.n	8002c64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00e      	beq.n	8002bf0 <osThreadNew+0xa8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b5b      	cmp	r3, #91	; 0x5b
 8002bd8:	d90a      	bls.n	8002bf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <osThreadNew+0xa8>
        mem = 1;
 8002bea:	2301      	movs	r3, #1
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	e010      	b.n	8002c12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10c      	bne.n	8002c12 <osThreadNew+0xca>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d108      	bne.n	8002c12 <osThreadNew+0xca>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d104      	bne.n	8002c12 <osThreadNew+0xca>
          mem = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	e001      	b.n	8002c12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d110      	bne.n	8002c3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c20:	9202      	str	r2, [sp, #8]
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	6a3a      	ldr	r2, [r7, #32]
 8002c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fdf0 	bl	8003814 <xTaskCreateStatic>
 8002c34:	4603      	mov	r3, r0
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	e013      	b.n	8002c62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d110      	bne.n	8002c62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	f107 0310 	add.w	r3, r7, #16
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fe3b 	bl	80038ce <xTaskCreate>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d001      	beq.n	8002c62 <osThreadNew+0x11a>
            hTask = NULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c62:	693b      	ldr	r3, [r7, #16]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3728      	adds	r7, #40	; 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <vApplicationGetIdleTaskMemory+0x2c>)
 8002c7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <vApplicationGetIdleTaskMemory+0x30>)
 8002c82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	601a      	str	r2, [r3, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000084 	.word	0x20000084
 8002c9c:	200000e0 	.word	0x200000e0

08002ca0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a07      	ldr	r2, [pc, #28]	; (8002ccc <vApplicationGetTimerTaskMemory+0x2c>)
 8002cb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4a06      	ldr	r2, [pc, #24]	; (8002cd0 <vApplicationGetTimerTaskMemory+0x30>)
 8002cb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cbe:	601a      	str	r2, [r3, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	200002e0 	.word	0x200002e0
 8002cd0:	2000033c 	.word	0x2000033c

08002cd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f103 0208 	add.w	r2, r3, #8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f103 0208 	add.w	r2, r3, #8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f103 0208 	add.w	r2, r3, #8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d8c:	d103      	bne.n	8002d96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e00c      	b.n	8002db0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3308      	adds	r3, #8
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	e002      	b.n	8002da4 <vListInsert+0x2e>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d2f6      	bcs.n	8002d9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	601a      	str	r2, [r3, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6892      	ldr	r2, [r2, #8]
 8002dfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6852      	ldr	r2, [r2, #4]
 8002e08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d103      	bne.n	8002e1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	1e5a      	subs	r2, r3, #1
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e66:	f002 f84d 	bl	8004f04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	68f9      	ldr	r1, [r7, #12]
 8002e74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	3b01      	subs	r3, #1
 8002e98:	68f9      	ldr	r1, [r7, #12]
 8002e9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	441a      	add	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	22ff      	movs	r2, #255	; 0xff
 8002eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	22ff      	movs	r2, #255	; 0xff
 8002eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d114      	bne.n	8002ee6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01a      	beq.n	8002efa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3310      	adds	r3, #16
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 f903 	bl	80040d4 <xTaskRemoveFromEventList>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d012      	beq.n	8002efa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <xQueueGenericReset+0xcc>)
 8002ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	e009      	b.n	8002efa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3310      	adds	r3, #16
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fef2 	bl	8002cd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3324      	adds	r3, #36	; 0x24
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff feed 	bl	8002cd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002efa:	f002 f833 	bl	8004f64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002efe:	2301      	movs	r3, #1
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08e      	sub	sp, #56	; 0x38
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f4e:	bf00      	nop
 8002f50:	e7fe      	b.n	8002f50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <xQueueGenericCreateStatic+0x52>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <xQueueGenericCreateStatic+0x56>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <xQueueGenericCreateStatic+0x58>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	623b      	str	r3, [r7, #32]
}
 8002f7a:	bf00      	nop
 8002f7c:	e7fe      	b.n	8002f7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d102      	bne.n	8002f8a <xQueueGenericCreateStatic+0x7e>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <xQueueGenericCreateStatic+0x82>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <xQueueGenericCreateStatic+0x84>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	61fb      	str	r3, [r7, #28]
}
 8002fa6:	bf00      	nop
 8002fa8:	e7fe      	b.n	8002fa8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002faa:	2350      	movs	r3, #80	; 0x50
 8002fac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b50      	cmp	r3, #80	; 0x50
 8002fb2:	d00a      	beq.n	8002fca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	61bb      	str	r3, [r7, #24]
}
 8002fc6:	bf00      	nop
 8002fc8:	e7fe      	b.n	8002fc8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002fca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fde:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f805 	bl	8002ffc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3730      	adds	r7, #48	; 0x30
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d103      	bne.n	8003018 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e002      	b.n	800301e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800302a:	2101      	movs	r1, #1
 800302c:	69b8      	ldr	r0, [r7, #24]
 800302e:	f7ff ff05 	bl	8002e3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08e      	sub	sp, #56	; 0x38
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003052:	2300      	movs	r3, #0
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <xQueueGenericSend+0x32>
	__asm volatile
 8003060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003072:	bf00      	nop
 8003074:	e7fe      	b.n	8003074 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d103      	bne.n	8003084 <xQueueGenericSend+0x40>
 800307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <xQueueGenericSend+0x44>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <xQueueGenericSend+0x46>
 8003088:	2300      	movs	r3, #0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10a      	bne.n	80030a4 <xQueueGenericSend+0x60>
	__asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030a0:	bf00      	nop
 80030a2:	e7fe      	b.n	80030a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d103      	bne.n	80030b2 <xQueueGenericSend+0x6e>
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <xQueueGenericSend+0x72>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <xQueueGenericSend+0x74>
 80030b6:	2300      	movs	r3, #0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10a      	bne.n	80030d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	623b      	str	r3, [r7, #32]
}
 80030ce:	bf00      	nop
 80030d0:	e7fe      	b.n	80030d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030d2:	f001 f9bd 	bl	8004450 <xTaskGetSchedulerState>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <xQueueGenericSend+0x9e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <xQueueGenericSend+0xa2>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <xQueueGenericSend+0xa4>
 80030e6:	2300      	movs	r3, #0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <xQueueGenericSend+0xbe>
	__asm volatile
 80030ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	61fb      	str	r3, [r7, #28]
}
 80030fe:	bf00      	nop
 8003100:	e7fe      	b.n	8003100 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003102:	f001 feff 	bl	8004f04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310e:	429a      	cmp	r2, r3
 8003110:	d302      	bcc.n	8003118 <xQueueGenericSend+0xd4>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d129      	bne.n	800316c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800311e:	f000 fa0b 	bl	8003538 <prvCopyDataToQueue>
 8003122:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	3324      	adds	r3, #36	; 0x24
 8003130:	4618      	mov	r0, r3
 8003132:	f000 ffcf 	bl	80040d4 <xTaskRemoveFromEventList>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d013      	beq.n	8003164 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800313c:	4b3f      	ldr	r3, [pc, #252]	; (800323c <xQueueGenericSend+0x1f8>)
 800313e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	e00a      	b.n	8003164 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003154:	4b39      	ldr	r3, [pc, #228]	; (800323c <xQueueGenericSend+0x1f8>)
 8003156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003164:	f001 fefe 	bl	8004f64 <vPortExitCritical>
				return pdPASS;
 8003168:	2301      	movs	r3, #1
 800316a:	e063      	b.n	8003234 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d103      	bne.n	800317a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003172:	f001 fef7 	bl	8004f64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003176:	2300      	movs	r3, #0
 8003178:	e05c      	b.n	8003234 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800317a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317c:	2b00      	cmp	r3, #0
 800317e:	d106      	bne.n	800318e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4618      	mov	r0, r3
 8003186:	f001 f809 	bl	800419c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800318a:	2301      	movs	r3, #1
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800318e:	f001 fee9 	bl	8004f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003192:	f000 fd7b 	bl	8003c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003196:	f001 feb5 	bl	8004f04 <vPortEnterCritical>
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031a0:	b25b      	sxtb	r3, r3
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031a6:	d103      	bne.n	80031b0 <xQueueGenericSend+0x16c>
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031b6:	b25b      	sxtb	r3, r3
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031bc:	d103      	bne.n	80031c6 <xQueueGenericSend+0x182>
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031c6:	f001 fecd 	bl	8004f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031ca:	1d3a      	adds	r2, r7, #4
 80031cc:	f107 0314 	add.w	r3, r7, #20
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fff8 	bl	80041c8 <xTaskCheckForTimeOut>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d124      	bne.n	8003228 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031e0:	f000 faa2 	bl	8003728 <prvIsQueueFull>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d018      	beq.n	800321c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	3310      	adds	r3, #16
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 ff1e 	bl	8004034 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031fa:	f000 fa2d 	bl	8003658 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031fe:	f000 fd53 	bl	8003ca8 <xTaskResumeAll>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	f47f af7c 	bne.w	8003102 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <xQueueGenericSend+0x1f8>)
 800320c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	e772      	b.n	8003102 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800321c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800321e:	f000 fa1b 	bl	8003658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003222:	f000 fd41 	bl	8003ca8 <xTaskResumeAll>
 8003226:	e76c      	b.n	8003102 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800322a:	f000 fa15 	bl	8003658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800322e:	f000 fd3b 	bl	8003ca8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003232:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003234:	4618      	mov	r0, r3
 8003236:	3738      	adds	r7, #56	; 0x38
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	e000ed04 	.word	0xe000ed04

08003240 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b090      	sub	sp, #64	; 0x40
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d103      	bne.n	800327c <xQueueGenericSendFromISR+0x3c>
 8003274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <xQueueGenericSendFromISR+0x40>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <xQueueGenericSendFromISR+0x42>
 8003280:	2300      	movs	r3, #0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003298:	bf00      	nop
 800329a:	e7fe      	b.n	800329a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d103      	bne.n	80032aa <xQueueGenericSendFromISR+0x6a>
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <xQueueGenericSendFromISR+0x6e>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <xQueueGenericSendFromISR+0x70>
 80032ae:	2300      	movs	r3, #0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10a      	bne.n	80032ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	623b      	str	r3, [r7, #32]
}
 80032c6:	bf00      	nop
 80032c8:	e7fe      	b.n	80032c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032ca:	f001 fefd 	bl	80050c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032ce:	f3ef 8211 	mrs	r2, BASEPRI
 80032d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d6:	f383 8811 	msr	BASEPRI, r3
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	61fa      	str	r2, [r7, #28]
 80032e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d302      	bcc.n	80032fc <xQueueGenericSendFromISR+0xbc>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d12f      	bne.n	800335c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003312:	f000 f911 	bl	8003538 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003316:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800331e:	d112      	bne.n	8003346 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2b00      	cmp	r3, #0
 8003326:	d016      	beq.n	8003356 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332a:	3324      	adds	r3, #36	; 0x24
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fed1 	bl	80040d4 <xTaskRemoveFromEventList>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00e      	beq.n	8003356 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00b      	beq.n	8003356 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e007      	b.n	8003356 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003346:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800334a:	3301      	adds	r3, #1
 800334c:	b2db      	uxtb	r3, r3
 800334e:	b25a      	sxtb	r2, r3
 8003350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003356:	2301      	movs	r3, #1
 8003358:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800335a:	e001      	b.n	8003360 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800335c:	2300      	movs	r3, #0
 800335e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003362:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800336a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800336c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800336e:	4618      	mov	r0, r3
 8003370:	3740      	adds	r7, #64	; 0x40
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08c      	sub	sp, #48	; 0x30
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003384:	2300      	movs	r3, #0
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <xQueueReceive+0x30>
	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	623b      	str	r3, [r7, #32]
}
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d103      	bne.n	80033b6 <xQueueReceive+0x3e>
 80033ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <xQueueReceive+0x42>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <xQueueReceive+0x44>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <xQueueReceive+0x5e>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	61fb      	str	r3, [r7, #28]
}
 80033d2:	bf00      	nop
 80033d4:	e7fe      	b.n	80033d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033d6:	f001 f83b 	bl	8004450 <xTaskGetSchedulerState>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <xQueueReceive+0x6e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <xQueueReceive+0x72>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <xQueueReceive+0x74>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <xQueueReceive+0x8e>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	61bb      	str	r3, [r7, #24]
}
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003406:	f001 fd7d 	bl	8004f04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01f      	beq.n	8003456 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800341a:	f000 f8f7 	bl	800360c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	1e5a      	subs	r2, r3, #1
 8003422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003424:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00f      	beq.n	800344e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	3310      	adds	r3, #16
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fe4e 	bl	80040d4 <xTaskRemoveFromEventList>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d007      	beq.n	800344e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800343e:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <xQueueReceive+0x1bc>)
 8003440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800344e:	f001 fd89 	bl	8004f64 <vPortExitCritical>
				return pdPASS;
 8003452:	2301      	movs	r3, #1
 8003454:	e069      	b.n	800352a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800345c:	f001 fd82 	bl	8004f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003460:	2300      	movs	r3, #0
 8003462:	e062      	b.n	800352a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800346a:	f107 0310 	add.w	r3, r7, #16
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fe94 	bl	800419c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003474:	2301      	movs	r3, #1
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003478:	f001 fd74 	bl	8004f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800347c:	f000 fc06 	bl	8003c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003480:	f001 fd40 	bl	8004f04 <vPortEnterCritical>
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800348a:	b25b      	sxtb	r3, r3
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003490:	d103      	bne.n	800349a <xQueueReceive+0x122>
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a6:	d103      	bne.n	80034b0 <xQueueReceive+0x138>
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034b0:	f001 fd58 	bl	8004f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034b4:	1d3a      	adds	r2, r7, #4
 80034b6:	f107 0310 	add.w	r3, r7, #16
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fe83 	bl	80041c8 <xTaskCheckForTimeOut>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d123      	bne.n	8003510 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ca:	f000 f917 	bl	80036fc <prvIsQueueEmpty>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d017      	beq.n	8003504 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	3324      	adds	r3, #36	; 0x24
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fda9 	bl	8004034 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034e4:	f000 f8b8 	bl	8003658 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034e8:	f000 fbde 	bl	8003ca8 <xTaskResumeAll>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d189      	bne.n	8003406 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <xQueueReceive+0x1bc>)
 80034f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	e780      	b.n	8003406 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003506:	f000 f8a7 	bl	8003658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800350a:	f000 fbcd 	bl	8003ca8 <xTaskResumeAll>
 800350e:	e77a      	b.n	8003406 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003512:	f000 f8a1 	bl	8003658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003516:	f000 fbc7 	bl	8003ca8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800351a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800351c:	f000 f8ee 	bl	80036fc <prvIsQueueEmpty>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	f43f af6f 	beq.w	8003406 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003528:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800352a:	4618      	mov	r0, r3
 800352c:	3730      	adds	r7, #48	; 0x30
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10d      	bne.n	8003572 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d14d      	bne.n	80035fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	4618      	mov	r0, r3
 8003564:	f000 ff92 	bl	800448c <xTaskPriorityDisinherit>
 8003568:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	e043      	b.n	80035fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d119      	bne.n	80035ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6858      	ldr	r0, [r3, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	461a      	mov	r2, r3
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	f001 fff6 	bl	8005574 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	441a      	add	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d32b      	bcc.n	80035fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	e026      	b.n	80035fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	68d8      	ldr	r0, [r3, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	461a      	mov	r2, r3
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	f001 ffdc 	bl	8005574 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	425b      	negs	r3, r3
 80035c6:	441a      	add	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d207      	bcs.n	80035e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	425b      	negs	r3, r3
 80035e2:	441a      	add	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d105      	bne.n	80035fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003602:	697b      	ldr	r3, [r7, #20]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d018      	beq.n	8003650 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	441a      	add	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	429a      	cmp	r2, r3
 8003636:	d303      	bcc.n	8003640 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68d9      	ldr	r1, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	461a      	mov	r2, r3
 800364a:	6838      	ldr	r0, [r7, #0]
 800364c:	f001 ff92 	bl	8005574 <memcpy>
	}
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003660:	f001 fc50 	bl	8004f04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800366a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800366c:	e011      	b.n	8003692 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3324      	adds	r3, #36	; 0x24
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fd2a 	bl	80040d4 <xTaskRemoveFromEventList>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003686:	f000 fe01 	bl	800428c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	3b01      	subs	r3, #1
 800368e:	b2db      	uxtb	r3, r3
 8003690:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003696:	2b00      	cmp	r3, #0
 8003698:	dce9      	bgt.n	800366e <prvUnlockQueue+0x16>
 800369a:	e000      	b.n	800369e <prvUnlockQueue+0x46>
					break;
 800369c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	22ff      	movs	r2, #255	; 0xff
 80036a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036a6:	f001 fc5d 	bl	8004f64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036aa:	f001 fc2b 	bl	8004f04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036b6:	e011      	b.n	80036dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d012      	beq.n	80036e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3310      	adds	r3, #16
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fd05 	bl	80040d4 <xTaskRemoveFromEventList>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036d0:	f000 fddc 	bl	800428c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036d4:	7bbb      	ldrb	r3, [r7, #14]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	dce9      	bgt.n	80036b8 <prvUnlockQueue+0x60>
 80036e4:	e000      	b.n	80036e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	22ff      	movs	r2, #255	; 0xff
 80036ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036f0:	f001 fc38 	bl	8004f64 <vPortExitCritical>
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003704:	f001 fbfe 	bl	8004f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003710:	2301      	movs	r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e001      	b.n	800371a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800371a:	f001 fc23 	bl	8004f64 <vPortExitCritical>

	return xReturn;
 800371e:	68fb      	ldr	r3, [r7, #12]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003730:	f001 fbe8 	bl	8004f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	429a      	cmp	r2, r3
 800373e:	d102      	bne.n	8003746 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003740:	2301      	movs	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e001      	b.n	800374a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800374a:	f001 fc0b 	bl	8004f64 <vPortExitCritical>

	return xReturn;
 800374e:	68fb      	ldr	r3, [r7, #12]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e014      	b.n	8003792 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003768:	4a0f      	ldr	r2, [pc, #60]	; (80037a8 <vQueueAddToRegistry+0x50>)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10b      	bne.n	800378c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003774:	490c      	ldr	r1, [pc, #48]	; (80037a8 <vQueueAddToRegistry+0x50>)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800377e:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <vQueueAddToRegistry+0x50>)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800378a:	e006      	b.n	800379a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3301      	adds	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b07      	cmp	r3, #7
 8003796:	d9e7      	bls.n	8003768 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	2000073c 	.word	0x2000073c

080037ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037bc:	f001 fba2 	bl	8004f04 <vPortEnterCritical>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037cc:	d103      	bne.n	80037d6 <vQueueWaitForMessageRestricted+0x2a>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037dc:	b25b      	sxtb	r3, r3
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037e2:	d103      	bne.n	80037ec <vQueueWaitForMessageRestricted+0x40>
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037ec:	f001 fbba 	bl	8004f64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3324      	adds	r3, #36	; 0x24
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fc3b 	bl	800407c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003806:	6978      	ldr	r0, [r7, #20]
 8003808:	f7ff ff26 	bl	8003658 <prvUnlockQueue>
	}
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08e      	sub	sp, #56	; 0x38
 8003818:	af04      	add	r7, sp, #16
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	623b      	str	r3, [r7, #32]
}
 800383a:	bf00      	nop
 800383c:	e7fe      	b.n	800383c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <xTaskCreateStatic+0x46>
	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	61fb      	str	r3, [r7, #28]
}
 8003856:	bf00      	nop
 8003858:	e7fe      	b.n	8003858 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800385a:	235c      	movs	r3, #92	; 0x5c
 800385c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b5c      	cmp	r3, #92	; 0x5c
 8003862:	d00a      	beq.n	800387a <xTaskCreateStatic+0x66>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	61bb      	str	r3, [r7, #24]
}
 8003876:	bf00      	nop
 8003878:	e7fe      	b.n	8003878 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800387a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01e      	beq.n	80038c0 <xTaskCreateStatic+0xac>
 8003882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01b      	beq.n	80038c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003890:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	2202      	movs	r2, #2
 8003896:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800389a:	2300      	movs	r3, #0
 800389c:	9303      	str	r3, [sp, #12]
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	9302      	str	r3, [sp, #8]
 80038a2:	f107 0314 	add.w	r3, r7, #20
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f850 	bl	8003958 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ba:	f000 f8dd 	bl	8003a78 <prvAddNewTaskToReadyList>
 80038be:	e001      	b.n	80038c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038c4:	697b      	ldr	r3, [r7, #20]
	}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3728      	adds	r7, #40	; 0x28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b08c      	sub	sp, #48	; 0x30
 80038d2:	af04      	add	r7, sp, #16
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4613      	mov	r3, r2
 80038dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 fc30 	bl	8005148 <pvPortMalloc>
 80038e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00e      	beq.n	800390e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038f0:	205c      	movs	r0, #92	; 0x5c
 80038f2:	f001 fc29 	bl	8005148 <pvPortMalloc>
 80038f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
 8003904:	e005      	b.n	8003912 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003906:	6978      	ldr	r0, [r7, #20]
 8003908:	f001 fcea 	bl	80052e0 <vPortFree>
 800390c:	e001      	b.n	8003912 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003920:	88fa      	ldrh	r2, [r7, #6]
 8003922:	2300      	movs	r3, #0
 8003924:	9303      	str	r3, [sp, #12]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	9302      	str	r3, [sp, #8]
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f80e 	bl	8003958 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800393c:	69f8      	ldr	r0, [r7, #28]
 800393e:	f000 f89b 	bl	8003a78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003942:	2301      	movs	r3, #1
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	e002      	b.n	800394e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800394c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800394e:	69bb      	ldr	r3, [r7, #24]
	}
 8003950:	4618      	mov	r0, r3
 8003952:	3720      	adds	r7, #32
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	461a      	mov	r2, r3
 8003970:	21a5      	movs	r1, #165	; 0xa5
 8003972:	f001 fdd3 	bl	800551c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003980:	3b01      	subs	r3, #1
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f023 0307 	bic.w	r3, r3, #7
 800398e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	617b      	str	r3, [r7, #20]
}
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01f      	beq.n	80039f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	e012      	b.n	80039e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	7819      	ldrb	r1, [r3, #0]
 80039c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	3334      	adds	r3, #52	; 0x34
 80039cc:	460a      	mov	r2, r1
 80039ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	3301      	adds	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b0f      	cmp	r3, #15
 80039e6:	d9e9      	bls.n	80039bc <prvInitialiseNewTask+0x64>
 80039e8:	e000      	b.n	80039ec <prvInitialiseNewTask+0x94>
			{
				break;
 80039ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f4:	e003      	b.n	80039fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2b37      	cmp	r3, #55	; 0x37
 8003a02:	d901      	bls.n	8003a08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a04:	2337      	movs	r3, #55	; 0x37
 8003a06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	2200      	movs	r2, #0
 8003a18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff f978 	bl	8002d14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	3318      	adds	r3, #24
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff f973 	bl	8002d14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	2200      	movs	r2, #0
 8003a48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	69b8      	ldr	r0, [r7, #24]
 8003a58:	f001 f928 	bl	8004cac <pxPortInitialiseStack>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a6e:	bf00      	nop
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a80:	f001 fa40 	bl	8004f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a84:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <prvAddNewTaskToReadyList+0xc4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	4a2c      	ldr	r2, [pc, #176]	; (8003b3c <prvAddNewTaskToReadyList+0xc4>)
 8003a8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a8e:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <prvAddNewTaskToReadyList+0xc8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a96:	4a2a      	ldr	r2, [pc, #168]	; (8003b40 <prvAddNewTaskToReadyList+0xc8>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a9c:	4b27      	ldr	r3, [pc, #156]	; (8003b3c <prvAddNewTaskToReadyList+0xc4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d110      	bne.n	8003ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003aa4:	f000 fc16 	bl	80042d4 <prvInitialiseTaskLists>
 8003aa8:	e00d      	b.n	8003ac6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003aaa:	4b26      	ldr	r3, [pc, #152]	; (8003b44 <prvAddNewTaskToReadyList+0xcc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ab2:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <prvAddNewTaskToReadyList+0xc8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d802      	bhi.n	8003ac6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ac0:	4a1f      	ldr	r2, [pc, #124]	; (8003b40 <prvAddNewTaskToReadyList+0xc8>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <prvAddNewTaskToReadyList+0xd0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3301      	adds	r3, #1
 8003acc:	4a1e      	ldr	r2, [pc, #120]	; (8003b48 <prvAddNewTaskToReadyList+0xd0>)
 8003ace:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <prvAddNewTaskToReadyList+0xd0>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <prvAddNewTaskToReadyList+0xd4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d903      	bls.n	8003aec <prvAddNewTaskToReadyList+0x74>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	4a18      	ldr	r2, [pc, #96]	; (8003b4c <prvAddNewTaskToReadyList+0xd4>)
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <prvAddNewTaskToReadyList+0xd8>)
 8003afa:	441a      	add	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f7ff f913 	bl	8002d2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b08:	f001 fa2c 	bl	8004f64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b0c:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <prvAddNewTaskToReadyList+0xcc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00e      	beq.n	8003b32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <prvAddNewTaskToReadyList+0xc8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d207      	bcs.n	8003b32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <prvAddNewTaskToReadyList+0xdc>)
 8003b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000c50 	.word	0x20000c50
 8003b40:	2000077c 	.word	0x2000077c
 8003b44:	20000c5c 	.word	0x20000c5c
 8003b48:	20000c6c 	.word	0x20000c6c
 8003b4c:	20000c58 	.word	0x20000c58
 8003b50:	20000780 	.word	0x20000780
 8003b54:	e000ed04 	.word	0xe000ed04

08003b58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d017      	beq.n	8003b9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <vTaskDelay+0x60>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <vTaskDelay+0x30>
	__asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	60bb      	str	r3, [r7, #8]
}
 8003b84:	bf00      	nop
 8003b86:	e7fe      	b.n	8003b86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b88:	f000 f880 	bl	8003c8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fcea 	bl	8004568 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b94:	f000 f888 	bl	8003ca8 <xTaskResumeAll>
 8003b98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d107      	bne.n	8003bb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ba0:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <vTaskDelay+0x64>)
 8003ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000c78 	.word	0x20000c78
 8003bbc:	e000ed04 	.word	0xe000ed04

08003bc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bce:	463a      	mov	r2, r7
 8003bd0:	1d39      	adds	r1, r7, #4
 8003bd2:	f107 0308 	add.w	r3, r7, #8
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff f848 	bl	8002c6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bdc:	6839      	ldr	r1, [r7, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	9202      	str	r2, [sp, #8]
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	2300      	movs	r3, #0
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2300      	movs	r3, #0
 8003bec:	460a      	mov	r2, r1
 8003bee:	4921      	ldr	r1, [pc, #132]	; (8003c74 <vTaskStartScheduler+0xb4>)
 8003bf0:	4821      	ldr	r0, [pc, #132]	; (8003c78 <vTaskStartScheduler+0xb8>)
 8003bf2:	f7ff fe0f 	bl	8003814 <xTaskCreateStatic>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4a20      	ldr	r2, [pc, #128]	; (8003c7c <vTaskStartScheduler+0xbc>)
 8003bfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bfc:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <vTaskStartScheduler+0xbc>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c04:	2301      	movs	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	e001      	b.n	8003c0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d102      	bne.n	8003c1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c14:	f000 fcfc 	bl	8004610 <xTimerCreateTimerTask>
 8003c18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d116      	bne.n	8003c4e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	613b      	str	r3, [r7, #16]
}
 8003c32:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c34:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <vTaskStartScheduler+0xc0>)
 8003c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <vTaskStartScheduler+0xc4>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c42:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <vTaskStartScheduler+0xc8>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c48:	f001 f8ba 	bl	8004dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c4c:	e00e      	b.n	8003c6c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c54:	d10a      	bne.n	8003c6c <vTaskStartScheduler+0xac>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60fb      	str	r3, [r7, #12]
}
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <vTaskStartScheduler+0xaa>
}
 8003c6c:	bf00      	nop
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	080055c4 	.word	0x080055c4
 8003c78:	080042a5 	.word	0x080042a5
 8003c7c:	20000c74 	.word	0x20000c74
 8003c80:	20000c70 	.word	0x20000c70
 8003c84:	20000c5c 	.word	0x20000c5c
 8003c88:	20000c54 	.word	0x20000c54

08003c8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <vTaskSuspendAll+0x18>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	4a03      	ldr	r2, [pc, #12]	; (8003ca4 <vTaskSuspendAll+0x18>)
 8003c98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	20000c78 	.word	0x20000c78

08003ca8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cb6:	4b42      	ldr	r3, [pc, #264]	; (8003dc0 <xTaskResumeAll+0x118>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	603b      	str	r3, [r7, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	e7fe      	b.n	8003cd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cd4:	f001 f916 	bl	8004f04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cd8:	4b39      	ldr	r3, [pc, #228]	; (8003dc0 <xTaskResumeAll+0x118>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	4a38      	ldr	r2, [pc, #224]	; (8003dc0 <xTaskResumeAll+0x118>)
 8003ce0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ce2:	4b37      	ldr	r3, [pc, #220]	; (8003dc0 <xTaskResumeAll+0x118>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d162      	bne.n	8003db0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cea:	4b36      	ldr	r3, [pc, #216]	; (8003dc4 <xTaskResumeAll+0x11c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d05e      	beq.n	8003db0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cf2:	e02f      	b.n	8003d54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf4:	4b34      	ldr	r3, [pc, #208]	; (8003dc8 <xTaskResumeAll+0x120>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3318      	adds	r3, #24
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff f871 	bl	8002de8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff f86c 	bl	8002de8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <xTaskResumeAll+0x124>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d903      	bls.n	8003d24 <xTaskResumeAll+0x7c>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4a2a      	ldr	r2, [pc, #168]	; (8003dcc <xTaskResumeAll+0x124>)
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4a27      	ldr	r2, [pc, #156]	; (8003dd0 <xTaskResumeAll+0x128>)
 8003d32:	441a      	add	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f7fe fff7 	bl	8002d2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d44:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <xTaskResumeAll+0x12c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d4e:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <xTaskResumeAll+0x130>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d54:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <xTaskResumeAll+0x120>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1cb      	bne.n	8003cf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d62:	f000 fb55 	bl	8004410 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d66:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <xTaskResumeAll+0x134>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d010      	beq.n	8003d94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d72:	f000 f847 	bl	8003e04 <xTaskIncrementTick>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d7c:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <xTaskResumeAll+0x130>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f1      	bne.n	8003d72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d8e:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <xTaskResumeAll+0x134>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d94:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <xTaskResumeAll+0x130>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d009      	beq.n	8003db0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <xTaskResumeAll+0x138>)
 8003da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003db0:	f001 f8d8 	bl	8004f64 <vPortExitCritical>

	return xAlreadyYielded;
 8003db4:	68bb      	ldr	r3, [r7, #8]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000c78 	.word	0x20000c78
 8003dc4:	20000c50 	.word	0x20000c50
 8003dc8:	20000c10 	.word	0x20000c10
 8003dcc:	20000c58 	.word	0x20000c58
 8003dd0:	20000780 	.word	0x20000780
 8003dd4:	2000077c 	.word	0x2000077c
 8003dd8:	20000c64 	.word	0x20000c64
 8003ddc:	20000c60 	.word	0x20000c60
 8003de0:	e000ed04 	.word	0xe000ed04

08003de4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <xTaskGetTickCount+0x1c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003df0:	687b      	ldr	r3, [r7, #4]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000c54 	.word	0x20000c54

08003e04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e0e:	4b4f      	ldr	r3, [pc, #316]	; (8003f4c <xTaskIncrementTick+0x148>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f040 808f 	bne.w	8003f36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e18:	4b4d      	ldr	r3, [pc, #308]	; (8003f50 <xTaskIncrementTick+0x14c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e20:	4a4b      	ldr	r2, [pc, #300]	; (8003f50 <xTaskIncrementTick+0x14c>)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d120      	bne.n	8003e6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e2c:	4b49      	ldr	r3, [pc, #292]	; (8003f54 <xTaskIncrementTick+0x150>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <xTaskIncrementTick+0x48>
	__asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	603b      	str	r3, [r7, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	e7fe      	b.n	8003e4a <xTaskIncrementTick+0x46>
 8003e4c:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <xTaskIncrementTick+0x150>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	4b41      	ldr	r3, [pc, #260]	; (8003f58 <xTaskIncrementTick+0x154>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a3f      	ldr	r2, [pc, #252]	; (8003f54 <xTaskIncrementTick+0x150>)
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4a3f      	ldr	r2, [pc, #252]	; (8003f58 <xTaskIncrementTick+0x154>)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	4b3e      	ldr	r3, [pc, #248]	; (8003f5c <xTaskIncrementTick+0x158>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3301      	adds	r3, #1
 8003e66:	4a3d      	ldr	r2, [pc, #244]	; (8003f5c <xTaskIncrementTick+0x158>)
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	f000 fad1 	bl	8004410 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e6e:	4b3c      	ldr	r3, [pc, #240]	; (8003f60 <xTaskIncrementTick+0x15c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d349      	bcc.n	8003f0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e78:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <xTaskIncrementTick+0x150>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d104      	bne.n	8003e8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e82:	4b37      	ldr	r3, [pc, #220]	; (8003f60 <xTaskIncrementTick+0x15c>)
 8003e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e88:	601a      	str	r2, [r3, #0]
					break;
 8003e8a:	e03f      	b.n	8003f0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8c:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <xTaskIncrementTick+0x150>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d203      	bcs.n	8003eac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ea4:	4a2e      	ldr	r2, [pc, #184]	; (8003f60 <xTaskIncrementTick+0x15c>)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003eaa:	e02f      	b.n	8003f0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe ff99 	bl	8002de8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d004      	beq.n	8003ec8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	3318      	adds	r3, #24
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe ff90 	bl	8002de8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <xTaskIncrementTick+0x160>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d903      	bls.n	8003edc <xTaskIncrementTick+0xd8>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	4a22      	ldr	r2, [pc, #136]	; (8003f64 <xTaskIncrementTick+0x160>)
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4a1f      	ldr	r2, [pc, #124]	; (8003f68 <xTaskIncrementTick+0x164>)
 8003eea:	441a      	add	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f7fe ff1b 	bl	8002d2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efc:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <xTaskIncrementTick+0x168>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d3b8      	bcc.n	8003e78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f06:	2301      	movs	r3, #1
 8003f08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f0a:	e7b5      	b.n	8003e78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f0c:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <xTaskIncrementTick+0x168>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f12:	4915      	ldr	r1, [pc, #84]	; (8003f68 <xTaskIncrementTick+0x164>)
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d901      	bls.n	8003f28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f24:	2301      	movs	r3, #1
 8003f26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <xTaskIncrementTick+0x16c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e004      	b.n	8003f40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f36:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <xTaskIncrementTick+0x170>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	4a0d      	ldr	r2, [pc, #52]	; (8003f74 <xTaskIncrementTick+0x170>)
 8003f3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f40:	697b      	ldr	r3, [r7, #20]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000c78 	.word	0x20000c78
 8003f50:	20000c54 	.word	0x20000c54
 8003f54:	20000c08 	.word	0x20000c08
 8003f58:	20000c0c 	.word	0x20000c0c
 8003f5c:	20000c68 	.word	0x20000c68
 8003f60:	20000c70 	.word	0x20000c70
 8003f64:	20000c58 	.word	0x20000c58
 8003f68:	20000780 	.word	0x20000780
 8003f6c:	2000077c 	.word	0x2000077c
 8003f70:	20000c64 	.word	0x20000c64
 8003f74:	20000c60 	.word	0x20000c60

08003f78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f7e:	4b28      	ldr	r3, [pc, #160]	; (8004020 <vTaskSwitchContext+0xa8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f86:	4b27      	ldr	r3, [pc, #156]	; (8004024 <vTaskSwitchContext+0xac>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f8c:	e041      	b.n	8004012 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003f8e:	4b25      	ldr	r3, [pc, #148]	; (8004024 <vTaskSwitchContext+0xac>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f94:	4b24      	ldr	r3, [pc, #144]	; (8004028 <vTaskSwitchContext+0xb0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e010      	b.n	8003fbe <vTaskSwitchContext+0x46>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	607b      	str	r3, [r7, #4]
}
 8003fb4:	bf00      	nop
 8003fb6:	e7fe      	b.n	8003fb6 <vTaskSwitchContext+0x3e>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	491b      	ldr	r1, [pc, #108]	; (800402c <vTaskSwitchContext+0xb4>)
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0e4      	beq.n	8003f9c <vTaskSwitchContext+0x24>
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4a13      	ldr	r2, [pc, #76]	; (800402c <vTaskSwitchContext+0xb4>)
 8003fde:	4413      	add	r3, r2
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	605a      	str	r2, [r3, #4]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d104      	bne.n	8004002 <vTaskSwitchContext+0x8a>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a09      	ldr	r2, [pc, #36]	; (8004030 <vTaskSwitchContext+0xb8>)
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4a06      	ldr	r2, [pc, #24]	; (8004028 <vTaskSwitchContext+0xb0>)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6013      	str	r3, [r2, #0]
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000c78 	.word	0x20000c78
 8004024:	20000c64 	.word	0x20000c64
 8004028:	20000c58 	.word	0x20000c58
 800402c:	20000780 	.word	0x20000780
 8004030:	2000077c 	.word	0x2000077c

08004034 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	60fb      	str	r3, [r7, #12]
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800405a:	4b07      	ldr	r3, [pc, #28]	; (8004078 <vTaskPlaceOnEventList+0x44>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3318      	adds	r3, #24
 8004060:	4619      	mov	r1, r3
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fe fe87 	bl	8002d76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004068:	2101      	movs	r1, #1
 800406a:	6838      	ldr	r0, [r7, #0]
 800406c:	f000 fa7c 	bl	8004568 <prvAddCurrentTaskToDelayedList>
}
 8004070:	bf00      	nop
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	2000077c 	.word	0x2000077c

0800407c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	617b      	str	r3, [r7, #20]
}
 80040a0:	bf00      	nop
 80040a2:	e7fe      	b.n	80040a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3318      	adds	r3, #24
 80040aa:	4619      	mov	r1, r3
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f7fe fe3e 	bl	8002d2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	68b8      	ldr	r0, [r7, #8]
 80040c2:	f000 fa51 	bl	8004568 <prvAddCurrentTaskToDelayedList>
	}
 80040c6:	bf00      	nop
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	2000077c 	.word	0x2000077c

080040d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60fb      	str	r3, [r7, #12]
}
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	3318      	adds	r3, #24
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe fe6f 	bl	8002de8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800410a:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <xTaskRemoveFromEventList+0xb0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d11d      	bne.n	800414e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	3304      	adds	r3, #4
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe fe66 	bl	8002de8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <xTaskRemoveFromEventList+0xb4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d903      	bls.n	8004130 <xTaskRemoveFromEventList+0x5c>
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	4a16      	ldr	r2, [pc, #88]	; (8004188 <xTaskRemoveFromEventList+0xb4>)
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4a13      	ldr	r2, [pc, #76]	; (800418c <xTaskRemoveFromEventList+0xb8>)
 800413e:	441a      	add	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	3304      	adds	r3, #4
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f7fe fdf1 	bl	8002d2e <vListInsertEnd>
 800414c:	e005      	b.n	800415a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3318      	adds	r3, #24
 8004152:	4619      	mov	r1, r3
 8004154:	480e      	ldr	r0, [pc, #56]	; (8004190 <xTaskRemoveFromEventList+0xbc>)
 8004156:	f7fe fdea 	bl	8002d2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <xTaskRemoveFromEventList+0xc0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	429a      	cmp	r2, r3
 8004166:	d905      	bls.n	8004174 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004168:	2301      	movs	r3, #1
 800416a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <xTaskRemoveFromEventList+0xc4>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e001      	b.n	8004178 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004178:	697b      	ldr	r3, [r7, #20]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000c78 	.word	0x20000c78
 8004188:	20000c58 	.word	0x20000c58
 800418c:	20000780 	.word	0x20000780
 8004190:	20000c10 	.word	0x20000c10
 8004194:	2000077c 	.word	0x2000077c
 8004198:	20000c64 	.word	0x20000c64

0800419c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <vTaskInternalSetTimeOutState+0x24>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <vTaskInternalSetTimeOutState+0x28>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	605a      	str	r2, [r3, #4]
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	20000c68 	.word	0x20000c68
 80041c4:	20000c54 	.word	0x20000c54

080041c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	613b      	str	r3, [r7, #16]
}
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	60fb      	str	r3, [r7, #12]
}
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800420a:	f000 fe7b 	bl	8004f04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800420e:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <xTaskCheckForTimeOut+0xbc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004226:	d102      	bne.n	800422e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004228:	2300      	movs	r3, #0
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	e023      	b.n	8004276 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b15      	ldr	r3, [pc, #84]	; (8004288 <xTaskCheckForTimeOut+0xc0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d007      	beq.n	800424a <xTaskCheckForTimeOut+0x82>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	429a      	cmp	r2, r3
 8004242:	d302      	bcc.n	800424a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004244:	2301      	movs	r3, #1
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	e015      	b.n	8004276 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	429a      	cmp	r2, r3
 8004252:	d20b      	bcs.n	800426c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff ff9b 	bl	800419c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	e004      	b.n	8004276 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004272:	2301      	movs	r3, #1
 8004274:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004276:	f000 fe75 	bl	8004f64 <vPortExitCritical>

	return xReturn;
 800427a:	69fb      	ldr	r3, [r7, #28]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000c54 	.word	0x20000c54
 8004288:	20000c68 	.word	0x20000c68

0800428c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <vTaskMissedYield+0x14>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]
}
 8004296:	bf00      	nop
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	20000c64 	.word	0x20000c64

080042a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042ac:	f000 f852 	bl	8004354 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <prvIdleTask+0x28>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d9f9      	bls.n	80042ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <prvIdleTask+0x2c>)
 80042ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042c8:	e7f0      	b.n	80042ac <prvIdleTask+0x8>
 80042ca:	bf00      	nop
 80042cc:	20000780 	.word	0x20000780
 80042d0:	e000ed04 	.word	0xe000ed04

080042d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042da:	2300      	movs	r3, #0
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	e00c      	b.n	80042fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4a12      	ldr	r2, [pc, #72]	; (8004334 <prvInitialiseTaskLists+0x60>)
 80042ec:	4413      	add	r3, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fcf0 	bl	8002cd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3301      	adds	r3, #1
 80042f8:	607b      	str	r3, [r7, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b37      	cmp	r3, #55	; 0x37
 80042fe:	d9ef      	bls.n	80042e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004300:	480d      	ldr	r0, [pc, #52]	; (8004338 <prvInitialiseTaskLists+0x64>)
 8004302:	f7fe fce7 	bl	8002cd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004306:	480d      	ldr	r0, [pc, #52]	; (800433c <prvInitialiseTaskLists+0x68>)
 8004308:	f7fe fce4 	bl	8002cd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800430c:	480c      	ldr	r0, [pc, #48]	; (8004340 <prvInitialiseTaskLists+0x6c>)
 800430e:	f7fe fce1 	bl	8002cd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004312:	480c      	ldr	r0, [pc, #48]	; (8004344 <prvInitialiseTaskLists+0x70>)
 8004314:	f7fe fcde 	bl	8002cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004318:	480b      	ldr	r0, [pc, #44]	; (8004348 <prvInitialiseTaskLists+0x74>)
 800431a:	f7fe fcdb 	bl	8002cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800431e:	4b0b      	ldr	r3, [pc, #44]	; (800434c <prvInitialiseTaskLists+0x78>)
 8004320:	4a05      	ldr	r2, [pc, #20]	; (8004338 <prvInitialiseTaskLists+0x64>)
 8004322:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <prvInitialiseTaskLists+0x7c>)
 8004326:	4a05      	ldr	r2, [pc, #20]	; (800433c <prvInitialiseTaskLists+0x68>)
 8004328:	601a      	str	r2, [r3, #0]
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000780 	.word	0x20000780
 8004338:	20000be0 	.word	0x20000be0
 800433c:	20000bf4 	.word	0x20000bf4
 8004340:	20000c10 	.word	0x20000c10
 8004344:	20000c24 	.word	0x20000c24
 8004348:	20000c3c 	.word	0x20000c3c
 800434c:	20000c08 	.word	0x20000c08
 8004350:	20000c0c 	.word	0x20000c0c

08004354 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800435a:	e019      	b.n	8004390 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800435c:	f000 fdd2 	bl	8004f04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004360:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <prvCheckTasksWaitingTermination+0x50>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe fd3b 	bl	8002de8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004372:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <prvCheckTasksWaitingTermination+0x54>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3b01      	subs	r3, #1
 8004378:	4a0b      	ldr	r2, [pc, #44]	; (80043a8 <prvCheckTasksWaitingTermination+0x54>)
 800437a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <prvCheckTasksWaitingTermination+0x58>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3b01      	subs	r3, #1
 8004382:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <prvCheckTasksWaitingTermination+0x58>)
 8004384:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004386:	f000 fded 	bl	8004f64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f810 	bl	80043b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <prvCheckTasksWaitingTermination+0x58>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e1      	bne.n	800435c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000c24 	.word	0x20000c24
 80043a8:	20000c50 	.word	0x20000c50
 80043ac:	20000c38 	.word	0x20000c38

080043b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d108      	bne.n	80043d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 ff8a 	bl	80052e0 <vPortFree>
				vPortFree( pxTCB );
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 ff87 	bl	80052e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043d2:	e018      	b.n	8004406 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d103      	bne.n	80043e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 ff7e 	bl	80052e0 <vPortFree>
	}
 80043e4:	e00f      	b.n	8004406 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d00a      	beq.n	8004406 <prvDeleteTCB+0x56>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	60fb      	str	r3, [r7, #12]
}
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <prvDeleteTCB+0x54>
	}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <prvResetNextTaskUnblockTime+0x38>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <prvResetNextTaskUnblockTime+0x3c>)
 8004422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004426:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004428:	e008      	b.n	800443c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800442a:	4b07      	ldr	r3, [pc, #28]	; (8004448 <prvResetNextTaskUnblockTime+0x38>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <prvResetNextTaskUnblockTime+0x3c>)
 800443a:	6013      	str	r3, [r2, #0]
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	20000c08 	.word	0x20000c08
 800444c:	20000c70 	.word	0x20000c70

08004450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <xTaskGetSchedulerState+0x34>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800445e:	2301      	movs	r3, #1
 8004460:	607b      	str	r3, [r7, #4]
 8004462:	e008      	b.n	8004476 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004464:	4b08      	ldr	r3, [pc, #32]	; (8004488 <xTaskGetSchedulerState+0x38>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d102      	bne.n	8004472 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800446c:	2302      	movs	r3, #2
 800446e:	607b      	str	r3, [r7, #4]
 8004470:	e001      	b.n	8004476 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004472:	2300      	movs	r3, #0
 8004474:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004476:	687b      	ldr	r3, [r7, #4]
	}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	20000c5c 	.word	0x20000c5c
 8004488:	20000c78 	.word	0x20000c78

0800448c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d056      	beq.n	8004550 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044a2:	4b2e      	ldr	r3, [pc, #184]	; (800455c <xTaskPriorityDisinherit+0xd0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d00a      	beq.n	80044c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	60fb      	str	r3, [r7, #12]
}
 80044be:	bf00      	nop
 80044c0:	e7fe      	b.n	80044c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10a      	bne.n	80044e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	60bb      	str	r3, [r7, #8]
}
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e4:	1e5a      	subs	r2, r3, #1
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d02c      	beq.n	8004550 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d128      	bne.n	8004550 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	3304      	adds	r3, #4
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe fc70 	bl	8002de8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004520:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <xTaskPriorityDisinherit+0xd4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d903      	bls.n	8004530 <xTaskPriorityDisinherit+0xa4>
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	4a0c      	ldr	r2, [pc, #48]	; (8004560 <xTaskPriorityDisinherit+0xd4>)
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4a09      	ldr	r2, [pc, #36]	; (8004564 <xTaskPriorityDisinherit+0xd8>)
 800453e:	441a      	add	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f7fe fbf1 	bl	8002d2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800454c:	2301      	movs	r3, #1
 800454e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004550:	697b      	ldr	r3, [r7, #20]
	}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	2000077c 	.word	0x2000077c
 8004560:	20000c58 	.word	0x20000c58
 8004564:	20000780 	.word	0x20000780

08004568 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004572:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004578:	4b20      	ldr	r3, [pc, #128]	; (80045fc <prvAddCurrentTaskToDelayedList+0x94>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3304      	adds	r3, #4
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fc32 	bl	8002de8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800458a:	d10a      	bne.n	80045a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d007      	beq.n	80045a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004592:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <prvAddCurrentTaskToDelayedList+0x94>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4819      	ldr	r0, [pc, #100]	; (8004600 <prvAddCurrentTaskToDelayedList+0x98>)
 800459c:	f7fe fbc7 	bl	8002d2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045a0:	e026      	b.n	80045f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4413      	add	r3, r2
 80045a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045aa:	4b14      	ldr	r3, [pc, #80]	; (80045fc <prvAddCurrentTaskToDelayedList+0x94>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d209      	bcs.n	80045ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <prvAddCurrentTaskToDelayedList+0x94>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f7fe fbd5 	bl	8002d76 <vListInsert>
}
 80045cc:	e010      	b.n	80045f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ce:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <prvAddCurrentTaskToDelayedList+0x94>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f7fe fbcb 	bl	8002d76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045e0:	4b0a      	ldr	r3, [pc, #40]	; (800460c <prvAddCurrentTaskToDelayedList+0xa4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d202      	bcs.n	80045f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045ea:	4a08      	ldr	r2, [pc, #32]	; (800460c <prvAddCurrentTaskToDelayedList+0xa4>)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	6013      	str	r3, [r2, #0]
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20000c54 	.word	0x20000c54
 80045fc:	2000077c 	.word	0x2000077c
 8004600:	20000c3c 	.word	0x20000c3c
 8004604:	20000c0c 	.word	0x20000c0c
 8004608:	20000c08 	.word	0x20000c08
 800460c:	20000c70 	.word	0x20000c70

08004610 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800461a:	f000 fb07 	bl	8004c2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800461e:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <xTimerCreateTimerTask+0x80>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d021      	beq.n	800466a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800462a:	2300      	movs	r3, #0
 800462c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800462e:	1d3a      	adds	r2, r7, #4
 8004630:	f107 0108 	add.w	r1, r7, #8
 8004634:	f107 030c 	add.w	r3, r7, #12
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fb31 	bl	8002ca0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	9202      	str	r2, [sp, #8]
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	2302      	movs	r3, #2
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	2300      	movs	r3, #0
 800464e:	460a      	mov	r2, r1
 8004650:	4910      	ldr	r1, [pc, #64]	; (8004694 <xTimerCreateTimerTask+0x84>)
 8004652:	4811      	ldr	r0, [pc, #68]	; (8004698 <xTimerCreateTimerTask+0x88>)
 8004654:	f7ff f8de 	bl	8003814 <xTaskCreateStatic>
 8004658:	4603      	mov	r3, r0
 800465a:	4a10      	ldr	r2, [pc, #64]	; (800469c <xTimerCreateTimerTask+0x8c>)
 800465c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800465e:	4b0f      	ldr	r3, [pc, #60]	; (800469c <xTimerCreateTimerTask+0x8c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004666:	2301      	movs	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	613b      	str	r3, [r7, #16]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004686:	697b      	ldr	r3, [r7, #20]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000cac 	.word	0x20000cac
 8004694:	080055cc 	.word	0x080055cc
 8004698:	080047d5 	.word	0x080047d5
 800469c:	20000cb0 	.word	0x20000cb0

080046a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	; 0x28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	623b      	str	r3, [r7, #32]
}
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046ce:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <xTimerGenericCommand+0x98>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d02a      	beq.n	800472c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b05      	cmp	r3, #5
 80046e6:	dc18      	bgt.n	800471a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046e8:	f7ff feb2 	bl	8004450 <xTaskGetSchedulerState>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d109      	bne.n	8004706 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046f2:	4b11      	ldr	r3, [pc, #68]	; (8004738 <xTimerGenericCommand+0x98>)
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	f107 0110 	add.w	r1, r7, #16
 80046fa:	2300      	movs	r3, #0
 80046fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fe:	f7fe fca1 	bl	8003044 <xQueueGenericSend>
 8004702:	6278      	str	r0, [r7, #36]	; 0x24
 8004704:	e012      	b.n	800472c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004706:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <xTimerGenericCommand+0x98>)
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	f107 0110 	add.w	r1, r7, #16
 800470e:	2300      	movs	r3, #0
 8004710:	2200      	movs	r2, #0
 8004712:	f7fe fc97 	bl	8003044 <xQueueGenericSend>
 8004716:	6278      	str	r0, [r7, #36]	; 0x24
 8004718:	e008      	b.n	800472c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <xTimerGenericCommand+0x98>)
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	f107 0110 	add.w	r1, r7, #16
 8004722:	2300      	movs	r3, #0
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	f7fe fd8b 	bl	8003240 <xQueueGenericSendFromISR>
 800472a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800472e:	4618      	mov	r0, r3
 8004730:	3728      	adds	r7, #40	; 0x28
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000cac 	.word	0x20000cac

0800473c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af02      	add	r7, sp, #8
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004746:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <prvProcessExpiredTimer+0x94>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	3304      	adds	r3, #4
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe fb47 	bl	8002de8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d022      	beq.n	80047ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	699a      	ldr	r2, [r3, #24]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	18d1      	adds	r1, r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	6978      	ldr	r0, [r7, #20]
 8004776:	f000 f8d1 	bl	800491c <prvInsertTimerInActiveList>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01f      	beq.n	80047c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004780:	2300      	movs	r3, #0
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	2100      	movs	r1, #0
 800478a:	6978      	ldr	r0, [r7, #20]
 800478c:	f7ff ff88 	bl	80046a0 <xTimerGenericCommand>
 8004790:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d113      	bne.n	80047c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	60fb      	str	r3, [r7, #12]
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	6978      	ldr	r0, [r7, #20]
 80047c6:	4798      	blx	r3
}
 80047c8:	bf00      	nop
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20000ca4 	.word	0x20000ca4

080047d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047dc:	f107 0308 	add.w	r3, r7, #8
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 f857 	bl	8004894 <prvGetNextExpireTime>
 80047e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4619      	mov	r1, r3
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f803 	bl	80047f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047f2:	f000 f8d5 	bl	80049a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047f6:	e7f1      	b.n	80047dc <prvTimerTask+0x8>

080047f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004802:	f7ff fa43 	bl	8003c8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004806:	f107 0308 	add.w	r3, r7, #8
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f866 	bl	80048dc <prvSampleTimeNow>
 8004810:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d130      	bne.n	800487a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10a      	bne.n	8004834 <prvProcessTimerOrBlockTask+0x3c>
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	429a      	cmp	r2, r3
 8004824:	d806      	bhi.n	8004834 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004826:	f7ff fa3f 	bl	8003ca8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800482a:	68f9      	ldr	r1, [r7, #12]
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff ff85 	bl	800473c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004832:	e024      	b.n	800487e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800483a:	4b13      	ldr	r3, [pc, #76]	; (8004888 <prvProcessTimerOrBlockTask+0x90>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <prvProcessTimerOrBlockTask+0x50>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <prvProcessTimerOrBlockTask+0x52>
 8004848:	2300      	movs	r3, #0
 800484a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800484c:	4b0f      	ldr	r3, [pc, #60]	; (800488c <prvProcessTimerOrBlockTask+0x94>)
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	4619      	mov	r1, r3
 800485a:	f7fe ffa7 	bl	80037ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800485e:	f7ff fa23 	bl	8003ca8 <xTaskResumeAll>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <prvProcessTimerOrBlockTask+0x98>)
 800486a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	f3bf 8f6f 	isb	sy
}
 8004878:	e001      	b.n	800487e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800487a:	f7ff fa15 	bl	8003ca8 <xTaskResumeAll>
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000ca8 	.word	0x20000ca8
 800488c:	20000cac 	.word	0x20000cac
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800489c:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <prvGetNextExpireTime+0x44>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <prvGetNextExpireTime+0x16>
 80048a6:	2201      	movs	r2, #1
 80048a8:	e000      	b.n	80048ac <prvGetNextExpireTime+0x18>
 80048aa:	2200      	movs	r2, #0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d105      	bne.n	80048c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048b8:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <prvGetNextExpireTime+0x44>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	e001      	b.n	80048c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048c8:	68fb      	ldr	r3, [r7, #12]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20000ca4 	.word	0x20000ca4

080048dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048e4:	f7ff fa7e 	bl	8003de4 <xTaskGetTickCount>
 80048e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <prvSampleTimeNow+0x3c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d205      	bcs.n	8004900 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048f4:	f000 f936 	bl	8004b64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e002      	b.n	8004906 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004906:	4a04      	ldr	r2, [pc, #16]	; (8004918 <prvSampleTimeNow+0x3c>)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800490c:	68fb      	ldr	r3, [r7, #12]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000cb4 	.word	0x20000cb4

0800491c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	429a      	cmp	r2, r3
 8004940:	d812      	bhi.n	8004968 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	1ad2      	subs	r2, r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	429a      	cmp	r2, r3
 800494e:	d302      	bcc.n	8004956 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004950:	2301      	movs	r3, #1
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e01b      	b.n	800498e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <prvInsertTimerInActiveList+0x7c>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3304      	adds	r3, #4
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f7fe fa08 	bl	8002d76 <vListInsert>
 8004966:	e012      	b.n	800498e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d206      	bcs.n	800497e <prvInsertTimerInActiveList+0x62>
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d302      	bcc.n	800497e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004978:	2301      	movs	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e007      	b.n	800498e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800497e:	4b07      	ldr	r3, [pc, #28]	; (800499c <prvInsertTimerInActiveList+0x80>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3304      	adds	r3, #4
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f7fe f9f4 	bl	8002d76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800498e:	697b      	ldr	r3, [r7, #20]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000ca8 	.word	0x20000ca8
 800499c:	20000ca4 	.word	0x20000ca4

080049a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08e      	sub	sp, #56	; 0x38
 80049a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049a6:	e0ca      	b.n	8004b3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	da18      	bge.n	80049e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049ae:	1d3b      	adds	r3, r7, #4
 80049b0:	3304      	adds	r3, #4
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	61fb      	str	r3, [r7, #28]
}
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d6:	6850      	ldr	r0, [r2, #4]
 80049d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049da:	6892      	ldr	r2, [r2, #8]
 80049dc:	4611      	mov	r1, r2
 80049de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f2c0 80ab 	blt.w	8004b3e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d004      	beq.n	80049fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	3304      	adds	r3, #4
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe f9f5 	bl	8002de8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049fe:	463b      	mov	r3, r7
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff ff6b 	bl	80048dc <prvSampleTimeNow>
 8004a06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b09      	cmp	r3, #9
 8004a0c:	f200 8096 	bhi.w	8004b3c <prvProcessReceivedCommands+0x19c>
 8004a10:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <prvProcessReceivedCommands+0x78>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004a41 	.word	0x08004a41
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a41 	.word	0x08004a41
 8004a24:	08004ab5 	.word	0x08004ab5
 8004a28:	08004ac9 	.word	0x08004ac9
 8004a2c:	08004b13 	.word	0x08004b13
 8004a30:	08004a41 	.word	0x08004a41
 8004a34:	08004a41 	.word	0x08004a41
 8004a38:	08004ab5 	.word	0x08004ab5
 8004a3c:	08004ac9 	.word	0x08004ac9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	18d1      	adds	r1, r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a60:	f7ff ff5c 	bl	800491c <prvInsertTimerInActiveList>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d069      	beq.n	8004b3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d05e      	beq.n	8004b3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	441a      	add	r2, r3
 8004a88:	2300      	movs	r3, #0
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	2100      	movs	r1, #0
 8004a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a92:	f7ff fe05 	bl	80046a0 <xTimerGenericCommand>
 8004a96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d14f      	bne.n	8004b3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	61bb      	str	r3, [r7, #24]
}
 8004ab0:	bf00      	nop
 8004ab2:	e7fe      	b.n	8004ab2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004ac6:	e03a      	b.n	8004b3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ace:	f043 0301 	orr.w	r3, r3, #1
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	617b      	str	r3, [r7, #20]
}
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	18d1      	adds	r1, r2, r3
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b0c:	f7ff ff06 	bl	800491c <prvInsertTimerInActiveList>
					break;
 8004b10:	e015      	b.n	8004b3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d103      	bne.n	8004b28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b22:	f000 fbdd 	bl	80052e0 <vPortFree>
 8004b26:	e00a      	b.n	8004b3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b3a:	e000      	b.n	8004b3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004b3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b3e:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <prvProcessReceivedCommands+0x1c0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	1d39      	adds	r1, r7, #4
 8004b44:	2200      	movs	r2, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fc16 	bl	8003378 <xQueueReceive>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f47f af2a 	bne.w	80049a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	3730      	adds	r7, #48	; 0x30
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000cac 	.word	0x20000cac

08004b64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b6a:	e048      	b.n	8004bfe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b6c:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <prvSwitchTimerLists+0xc0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b76:	4b2b      	ldr	r3, [pc, #172]	; (8004c24 <prvSwitchTimerLists+0xc0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3304      	adds	r3, #4
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fe f92f 	bl	8002de8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d02e      	beq.n	8004bfe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d90e      	bls.n	8004bd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bbe:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <prvSwitchTimerLists+0xc0>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4610      	mov	r0, r2
 8004bca:	f7fe f8d4 	bl	8002d76 <vListInsert>
 8004bce:	e016      	b.n	8004bfe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	2100      	movs	r1, #0
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f7ff fd60 	bl	80046a0 <xTimerGenericCommand>
 8004be0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	603b      	str	r3, [r7, #0]
}
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <prvSwitchTimerLists+0xc0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1b1      	bne.n	8004b6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <prvSwitchTimerLists+0xc0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <prvSwitchTimerLists+0xc4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <prvSwitchTimerLists+0xc0>)
 8004c14:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c16:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <prvSwitchTimerLists+0xc4>)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	6013      	str	r3, [r2, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20000ca4 	.word	0x20000ca4
 8004c28:	20000ca8 	.word	0x20000ca8

08004c2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c32:	f000 f967 	bl	8004f04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c36:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <prvCheckForValidListAndQueue+0x60>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d120      	bne.n	8004c80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c3e:	4814      	ldr	r0, [pc, #80]	; (8004c90 <prvCheckForValidListAndQueue+0x64>)
 8004c40:	f7fe f848 	bl	8002cd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c44:	4813      	ldr	r0, [pc, #76]	; (8004c94 <prvCheckForValidListAndQueue+0x68>)
 8004c46:	f7fe f845 	bl	8002cd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c4a:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <prvCheckForValidListAndQueue+0x6c>)
 8004c4c:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <prvCheckForValidListAndQueue+0x64>)
 8004c4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c50:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <prvCheckForValidListAndQueue+0x70>)
 8004c52:	4a10      	ldr	r2, [pc, #64]	; (8004c94 <prvCheckForValidListAndQueue+0x68>)
 8004c54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c56:	2300      	movs	r3, #0
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <prvCheckForValidListAndQueue+0x74>)
 8004c5c:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <prvCheckForValidListAndQueue+0x78>)
 8004c5e:	2110      	movs	r1, #16
 8004c60:	200a      	movs	r0, #10
 8004c62:	f7fe f953 	bl	8002f0c <xQueueGenericCreateStatic>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <prvCheckForValidListAndQueue+0x60>)
 8004c6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c6c:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <prvCheckForValidListAndQueue+0x60>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <prvCheckForValidListAndQueue+0x60>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	490b      	ldr	r1, [pc, #44]	; (8004ca8 <prvCheckForValidListAndQueue+0x7c>)
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe fd6c 	bl	8003758 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c80:	f000 f970 	bl	8004f64 <vPortExitCritical>
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000cac 	.word	0x20000cac
 8004c90:	20000c7c 	.word	0x20000c7c
 8004c94:	20000c90 	.word	0x20000c90
 8004c98:	20000ca4 	.word	0x20000ca4
 8004c9c:	20000ca8 	.word	0x20000ca8
 8004ca0:	20000d58 	.word	0x20000d58
 8004ca4:	20000cb8 	.word	0x20000cb8
 8004ca8:	080055d4 	.word	0x080055d4

08004cac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3b04      	subs	r3, #4
 8004cbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3b04      	subs	r3, #4
 8004cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f023 0201 	bic.w	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3b04      	subs	r3, #4
 8004cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cdc:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <pxPortInitialiseStack+0x64>)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3b14      	subs	r3, #20
 8004ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3b04      	subs	r3, #4
 8004cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f06f 0202 	mvn.w	r2, #2
 8004cfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3b20      	subs	r3, #32
 8004d00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d02:	68fb      	ldr	r3, [r7, #12]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	08004d15 	.word	0x08004d15

08004d14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <prvTaskExitError+0x54>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d26:	d00a      	beq.n	8004d3e <prvTaskExitError+0x2a>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	60fb      	str	r3, [r7, #12]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <prvTaskExitError+0x28>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	60bb      	str	r3, [r7, #8]
}
 8004d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d52:	bf00      	nop
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0fc      	beq.n	8004d54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	2000000c 	.word	0x2000000c
 8004d6c:	00000000 	.word	0x00000000

08004d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <pxCurrentTCBConst2>)
 8004d72:	6819      	ldr	r1, [r3, #0]
 8004d74:	6808      	ldr	r0, [r1, #0]
 8004d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7a:	f380 8809 	msr	PSP, r0
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f380 8811 	msr	BASEPRI, r0
 8004d8a:	4770      	bx	lr
 8004d8c:	f3af 8000 	nop.w

08004d90 <pxCurrentTCBConst2>:
 8004d90:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop

08004d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d98:	4808      	ldr	r0, [pc, #32]	; (8004dbc <prvPortStartFirstTask+0x24>)
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	6800      	ldr	r0, [r0, #0]
 8004d9e:	f380 8808 	msr	MSP, r0
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f380 8814 	msr	CONTROL, r0
 8004daa:	b662      	cpsie	i
 8004dac:	b661      	cpsie	f
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	df00      	svc	0
 8004db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dba:	bf00      	nop
 8004dbc:	e000ed08 	.word	0xe000ed08

08004dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004dc6:	4b46      	ldr	r3, [pc, #280]	; (8004ee0 <xPortStartScheduler+0x120>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a46      	ldr	r2, [pc, #280]	; (8004ee4 <xPortStartScheduler+0x124>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10a      	bne.n	8004de6 <xPortStartScheduler+0x26>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	613b      	str	r3, [r7, #16]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004de6:	4b3e      	ldr	r3, [pc, #248]	; (8004ee0 <xPortStartScheduler+0x120>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a3f      	ldr	r2, [pc, #252]	; (8004ee8 <xPortStartScheduler+0x128>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10a      	bne.n	8004e06 <xPortStartScheduler+0x46>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60fb      	str	r3, [r7, #12]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e06:	4b39      	ldr	r3, [pc, #228]	; (8004eec <xPortStartScheduler+0x12c>)
 8004e08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	22ff      	movs	r2, #255	; 0xff
 8004e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	4b31      	ldr	r3, [pc, #196]	; (8004ef0 <xPortStartScheduler+0x130>)
 8004e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e2e:	4b31      	ldr	r3, [pc, #196]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e30:	2207      	movs	r2, #7
 8004e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e34:	e009      	b.n	8004e4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e36:	4b2f      	ldr	r3, [pc, #188]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	2b80      	cmp	r3, #128	; 0x80
 8004e54:	d0ef      	beq.n	8004e36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e56:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1c3 0307 	rsb	r3, r3, #7
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d00a      	beq.n	8004e78 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	60bb      	str	r3, [r7, #8]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e78:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e82:	4b1c      	ldr	r3, [pc, #112]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e96:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ea2:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004ea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eae:	f000 f8dd 	bl	800506c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <xPortStartScheduler+0x13c>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004eb8:	f000 f8fc 	bl	80050b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ebc:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <xPortStartScheduler+0x140>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a0f      	ldr	r2, [pc, #60]	; (8004f00 <xPortStartScheduler+0x140>)
 8004ec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ec8:	f7ff ff66 	bl	8004d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ecc:	f7ff f854 	bl	8003f78 <vTaskSwitchContext>
	prvTaskExitError();
 8004ed0:	f7ff ff20 	bl	8004d14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	e000ed00 	.word	0xe000ed00
 8004ee4:	410fc271 	.word	0x410fc271
 8004ee8:	410fc270 	.word	0x410fc270
 8004eec:	e000e400 	.word	0xe000e400
 8004ef0:	20000da8 	.word	0x20000da8
 8004ef4:	20000dac 	.word	0x20000dac
 8004ef8:	e000ed20 	.word	0xe000ed20
 8004efc:	2000000c 	.word	0x2000000c
 8004f00:	e000ef34 	.word	0xe000ef34

08004f04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	607b      	str	r3, [r7, #4]
}
 8004f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <vPortEnterCritical+0x58>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3301      	adds	r3, #1
 8004f24:	4a0d      	ldr	r2, [pc, #52]	; (8004f5c <vPortEnterCritical+0x58>)
 8004f26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <vPortEnterCritical+0x58>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10f      	bne.n	8004f50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <vPortEnterCritical+0x5c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	603b      	str	r3, [r7, #0]
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <vPortEnterCritical+0x4a>
	}
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	2000000c 	.word	0x2000000c
 8004f60:	e000ed04 	.word	0xe000ed04

08004f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f6a:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <vPortExitCritical+0x24>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	607b      	str	r3, [r7, #4]
}
 8004f84:	bf00      	nop
 8004f86:	e7fe      	b.n	8004f86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f88:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f92:	4b08      	ldr	r3, [pc, #32]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d105      	bne.n	8004fa6 <vPortExitCritical+0x42>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f383 8811 	msr	BASEPRI, r3
}
 8004fa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	2000000c 	.word	0x2000000c
	...

08004fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fc0:	f3ef 8009 	mrs	r0, PSP
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	4b15      	ldr	r3, [pc, #84]	; (8005020 <pxCurrentTCBConst>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	f01e 0f10 	tst.w	lr, #16
 8004fd0:	bf08      	it	eq
 8004fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fda:	6010      	str	r0, [r2, #0]
 8004fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fe4:	f380 8811 	msr	BASEPRI, r0
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f7fe ffc2 	bl	8003f78 <vTaskSwitchContext>
 8004ff4:	f04f 0000 	mov.w	r0, #0
 8004ff8:	f380 8811 	msr	BASEPRI, r0
 8004ffc:	bc09      	pop	{r0, r3}
 8004ffe:	6819      	ldr	r1, [r3, #0]
 8005000:	6808      	ldr	r0, [r1, #0]
 8005002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005006:	f01e 0f10 	tst.w	lr, #16
 800500a:	bf08      	it	eq
 800500c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005010:	f380 8809 	msr	PSP, r0
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	f3af 8000 	nop.w

08005020 <pxCurrentTCBConst>:
 8005020:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	607b      	str	r3, [r7, #4]
}
 8005040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005042:	f7fe fedf 	bl	8003e04 <xTaskIncrementTick>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <xPortSysTickHandler+0x40>)
 800504e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f383 8811 	msr	BASEPRI, r3
}
 800505e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <vPortSetupTimerInterrupt+0x34>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <vPortSetupTimerInterrupt+0x38>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <vPortSetupTimerInterrupt+0x3c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a0a      	ldr	r2, [pc, #40]	; (80050ac <vPortSetupTimerInterrupt+0x40>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <vPortSetupTimerInterrupt+0x44>)
 800508a:	3b01      	subs	r3, #1
 800508c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800508e:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <vPortSetupTimerInterrupt+0x34>)
 8005090:	2207      	movs	r2, #7
 8005092:	601a      	str	r2, [r3, #0]
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	e000e010 	.word	0xe000e010
 80050a4:	e000e018 	.word	0xe000e018
 80050a8:	20000000 	.word	0x20000000
 80050ac:	10624dd3 	.word	0x10624dd3
 80050b0:	e000e014 	.word	0xe000e014

080050b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050c4 <vPortEnableVFP+0x10>
 80050b8:	6801      	ldr	r1, [r0, #0]
 80050ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050be:	6001      	str	r1, [r0, #0]
 80050c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050c2:	bf00      	nop
 80050c4:	e000ed88 	.word	0xe000ed88

080050c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050ce:	f3ef 8305 	mrs	r3, IPSR
 80050d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b0f      	cmp	r3, #15
 80050d8:	d914      	bls.n	8005104 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050da:	4a17      	ldr	r2, [pc, #92]	; (8005138 <vPortValidateInterruptPriority+0x70>)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050e4:	4b15      	ldr	r3, [pc, #84]	; (800513c <vPortValidateInterruptPriority+0x74>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	7afa      	ldrb	r2, [r7, #11]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d20a      	bcs.n	8005104 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	607b      	str	r3, [r7, #4]
}
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005104:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <vPortValidateInterruptPriority+0x78>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800510c:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <vPortValidateInterruptPriority+0x7c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d90a      	bls.n	800512a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	603b      	str	r3, [r7, #0]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <vPortValidateInterruptPriority+0x60>
	}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	e000e3f0 	.word	0xe000e3f0
 800513c:	20000da8 	.word	0x20000da8
 8005140:	e000ed0c 	.word	0xe000ed0c
 8005144:	20000dac 	.word	0x20000dac

08005148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005154:	f7fe fd9a 	bl	8003c8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005158:	4b5b      	ldr	r3, [pc, #364]	; (80052c8 <pvPortMalloc+0x180>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005160:	f000 f920 	bl	80053a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005164:	4b59      	ldr	r3, [pc, #356]	; (80052cc <pvPortMalloc+0x184>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4013      	ands	r3, r2
 800516c:	2b00      	cmp	r3, #0
 800516e:	f040 8093 	bne.w	8005298 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01d      	beq.n	80051b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005178:	2208      	movs	r2, #8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4413      	add	r3, r2
 800517e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	2b00      	cmp	r3, #0
 8005188:	d014      	beq.n	80051b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f023 0307 	bic.w	r3, r3, #7
 8005190:	3308      	adds	r3, #8
 8005192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <pvPortMalloc+0x6c>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	617b      	str	r3, [r7, #20]
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d06e      	beq.n	8005298 <pvPortMalloc+0x150>
 80051ba:	4b45      	ldr	r3, [pc, #276]	; (80052d0 <pvPortMalloc+0x188>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d869      	bhi.n	8005298 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <pvPortMalloc+0x18c>)
 80051c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051c8:	4b42      	ldr	r3, [pc, #264]	; (80052d4 <pvPortMalloc+0x18c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ce:	e004      	b.n	80051da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d903      	bls.n	80051ec <pvPortMalloc+0xa4>
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1f1      	bne.n	80051d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051ec:	4b36      	ldr	r3, [pc, #216]	; (80052c8 <pvPortMalloc+0x180>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d050      	beq.n	8005298 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2208      	movs	r2, #8
 80051fc:	4413      	add	r3, r2
 80051fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	1ad2      	subs	r2, r2, r3
 8005210:	2308      	movs	r3, #8
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	429a      	cmp	r2, r3
 8005216:	d91f      	bls.n	8005258 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4413      	add	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <pvPortMalloc+0xf8>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	613b      	str	r3, [r7, #16]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005252:	69b8      	ldr	r0, [r7, #24]
 8005254:	f000 f908 	bl	8005468 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005258:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <pvPortMalloc+0x188>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	4a1b      	ldr	r2, [pc, #108]	; (80052d0 <pvPortMalloc+0x188>)
 8005264:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <pvPortMalloc+0x188>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <pvPortMalloc+0x190>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d203      	bcs.n	800527a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005272:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <pvPortMalloc+0x188>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <pvPortMalloc+0x190>)
 8005278:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	4b13      	ldr	r3, [pc, #76]	; (80052cc <pvPortMalloc+0x184>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	431a      	orrs	r2, r3
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <pvPortMalloc+0x194>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3301      	adds	r3, #1
 8005294:	4a11      	ldr	r2, [pc, #68]	; (80052dc <pvPortMalloc+0x194>)
 8005296:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005298:	f7fe fd06 	bl	8003ca8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <pvPortMalloc+0x174>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	60fb      	str	r3, [r7, #12]
}
 80052b8:	bf00      	nop
 80052ba:	e7fe      	b.n	80052ba <pvPortMalloc+0x172>
	return pvReturn;
 80052bc:	69fb      	ldr	r3, [r7, #28]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3728      	adds	r7, #40	; 0x28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	200049b8 	.word	0x200049b8
 80052cc:	200049cc 	.word	0x200049cc
 80052d0:	200049bc 	.word	0x200049bc
 80052d4:	200049b0 	.word	0x200049b0
 80052d8:	200049c0 	.word	0x200049c0
 80052dc:	200049c4 	.word	0x200049c4

080052e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d04d      	beq.n	800538e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052f2:	2308      	movs	r3, #8
 80052f4:	425b      	negs	r3, r3
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4413      	add	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	4b24      	ldr	r3, [pc, #144]	; (8005398 <vPortFree+0xb8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <vPortFree+0x44>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60fb      	str	r3, [r7, #12]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <vPortFree+0x62>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	60bb      	str	r3, [r7, #8]
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <vPortFree+0xb8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01e      	beq.n	800538e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d11a      	bne.n	800538e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <vPortFree+0xb8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	43db      	mvns	r3, r3
 8005362:	401a      	ands	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005368:	f7fe fc90 	bl	8003c8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <vPortFree+0xbc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4413      	add	r3, r2
 8005376:	4a09      	ldr	r2, [pc, #36]	; (800539c <vPortFree+0xbc>)
 8005378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800537a:	6938      	ldr	r0, [r7, #16]
 800537c:	f000 f874 	bl	8005468 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <vPortFree+0xc0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	4a06      	ldr	r2, [pc, #24]	; (80053a0 <vPortFree+0xc0>)
 8005388:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800538a:	f7fe fc8d 	bl	8003ca8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800538e:	bf00      	nop
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	200049cc 	.word	0x200049cc
 800539c:	200049bc 	.word	0x200049bc
 80053a0:	200049c8 	.word	0x200049c8

080053a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053b0:	4b27      	ldr	r3, [pc, #156]	; (8005450 <prvHeapInit+0xac>)
 80053b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3307      	adds	r3, #7
 80053c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0307 	bic.w	r3, r3, #7
 80053ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	4a1f      	ldr	r2, [pc, #124]	; (8005450 <prvHeapInit+0xac>)
 80053d4:	4413      	add	r3, r2
 80053d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053dc:	4a1d      	ldr	r2, [pc, #116]	; (8005454 <prvHeapInit+0xb0>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053e2:	4b1c      	ldr	r3, [pc, #112]	; (8005454 <prvHeapInit+0xb0>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	4413      	add	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053f0:	2208      	movs	r2, #8
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0307 	bic.w	r3, r3, #7
 80053fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4a15      	ldr	r2, [pc, #84]	; (8005458 <prvHeapInit+0xb4>)
 8005404:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <prvHeapInit+0xb4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800540e:	4b12      	ldr	r3, [pc, #72]	; (8005458 <prvHeapInit+0xb4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	1ad2      	subs	r2, r2, r3
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005424:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <prvHeapInit+0xb4>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4a0a      	ldr	r2, [pc, #40]	; (800545c <prvHeapInit+0xb8>)
 8005432:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	4a09      	ldr	r2, [pc, #36]	; (8005460 <prvHeapInit+0xbc>)
 800543a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800543c:	4b09      	ldr	r3, [pc, #36]	; (8005464 <prvHeapInit+0xc0>)
 800543e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005442:	601a      	str	r2, [r3, #0]
}
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	20000db0 	.word	0x20000db0
 8005454:	200049b0 	.word	0x200049b0
 8005458:	200049b8 	.word	0x200049b8
 800545c:	200049c0 	.word	0x200049c0
 8005460:	200049bc 	.word	0x200049bc
 8005464:	200049cc 	.word	0x200049cc

08005468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005470:	4b28      	ldr	r3, [pc, #160]	; (8005514 <prvInsertBlockIntoFreeList+0xac>)
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e002      	b.n	800547c <prvInsertBlockIntoFreeList+0x14>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	d8f7      	bhi.n	8005476 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	4413      	add	r3, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d108      	bne.n	80054aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	441a      	add	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	441a      	add	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d118      	bne.n	80054f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b15      	ldr	r3, [pc, #84]	; (8005518 <prvInsertBlockIntoFreeList+0xb0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d00d      	beq.n	80054e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	441a      	add	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	e008      	b.n	80054f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054e6:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <prvInsertBlockIntoFreeList+0xb0>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e003      	b.n	80054f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d002      	beq.n	8005506 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005506:	bf00      	nop
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	200049b0 	.word	0x200049b0
 8005518:	200049b8 	.word	0x200049b8

0800551c <memset>:
 800551c:	4402      	add	r2, r0
 800551e:	4603      	mov	r3, r0
 8005520:	4293      	cmp	r3, r2
 8005522:	d100      	bne.n	8005526 <memset+0xa>
 8005524:	4770      	bx	lr
 8005526:	f803 1b01 	strb.w	r1, [r3], #1
 800552a:	e7f9      	b.n	8005520 <memset+0x4>

0800552c <__libc_init_array>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	4d0d      	ldr	r5, [pc, #52]	; (8005564 <__libc_init_array+0x38>)
 8005530:	4c0d      	ldr	r4, [pc, #52]	; (8005568 <__libc_init_array+0x3c>)
 8005532:	1b64      	subs	r4, r4, r5
 8005534:	10a4      	asrs	r4, r4, #2
 8005536:	2600      	movs	r6, #0
 8005538:	42a6      	cmp	r6, r4
 800553a:	d109      	bne.n	8005550 <__libc_init_array+0x24>
 800553c:	4d0b      	ldr	r5, [pc, #44]	; (800556c <__libc_init_array+0x40>)
 800553e:	4c0c      	ldr	r4, [pc, #48]	; (8005570 <__libc_init_array+0x44>)
 8005540:	f000 f826 	bl	8005590 <_init>
 8005544:	1b64      	subs	r4, r4, r5
 8005546:	10a4      	asrs	r4, r4, #2
 8005548:	2600      	movs	r6, #0
 800554a:	42a6      	cmp	r6, r4
 800554c:	d105      	bne.n	800555a <__libc_init_array+0x2e>
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	f855 3b04 	ldr.w	r3, [r5], #4
 8005554:	4798      	blx	r3
 8005556:	3601      	adds	r6, #1
 8005558:	e7ee      	b.n	8005538 <__libc_init_array+0xc>
 800555a:	f855 3b04 	ldr.w	r3, [r5], #4
 800555e:	4798      	blx	r3
 8005560:	3601      	adds	r6, #1
 8005562:	e7f2      	b.n	800554a <__libc_init_array+0x1e>
 8005564:	08005644 	.word	0x08005644
 8005568:	08005644 	.word	0x08005644
 800556c:	08005644 	.word	0x08005644
 8005570:	08005648 	.word	0x08005648

08005574 <memcpy>:
 8005574:	440a      	add	r2, r1
 8005576:	4291      	cmp	r1, r2
 8005578:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800557c:	d100      	bne.n	8005580 <memcpy+0xc>
 800557e:	4770      	bx	lr
 8005580:	b510      	push	{r4, lr}
 8005582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800558a:	4291      	cmp	r1, r2
 800558c:	d1f9      	bne.n	8005582 <memcpy+0xe>
 800558e:	bd10      	pop	{r4, pc}

08005590 <_init>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	bf00      	nop
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr

0800559c <_fini>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr
