
003_encoder_IMU_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b620  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800b7c0  0800b7c0  0001b7c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcf8  0800bcf8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcf8  0800bcf8  0001bcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd00  0800bd00  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd00  0800bd00  0001bd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd04  0800bd04  0001bd04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800bd08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b60  200001d8  0800bee0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d38  0800bee0  00024d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015905  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032a5  00000000  00000000  00035b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  00038df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e58  00000000  00000000  0003a078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004b8c  00000000  00000000  0003aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015358  00000000  00000000  0003fa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094c37  00000000  00000000  00054db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006280  00000000  00000000  000e99ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000efc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b7a8 	.word	0x0800b7a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b7a8 	.word	0x0800b7a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001004:	f000 fbec 	bl	80017e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001008:	f000 f828 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100c:	f000 f8e6 	bl	80011dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001010:	f000 f8ba 	bl	8001188 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001014:	f000 f88a 	bl	800112c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001018:	f003 faf0 	bl	80045fc <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(get_encoder_task, NULL, &encoderTask_attributes);
 800101c:	4a09      	ldr	r2, [pc, #36]	; (8001044 <main+0x44>)
 800101e:	2100      	movs	r1, #0
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <main+0x48>)
 8001022:	f003 fb35 	bl	8004690 <osThreadNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a08      	ldr	r2, [pc, #32]	; (800104c <main+0x4c>)
 800102a:	6013      	str	r3, [r2, #0]

  /* creation of imu_task_handle */
  imu_task_handleHandle = osThreadNew(imu_task, NULL, &imu_task_handle_attributes);
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <main+0x50>)
 800102e:	2100      	movs	r1, #0
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <main+0x54>)
 8001032:	f003 fb2d 	bl	8004690 <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <main+0x58>)
 800103a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800103c:	f003 fb02 	bl	8004644 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001040:	e7fe      	b.n	8001040 <main+0x40>
 8001042:	bf00      	nop
 8001044:	0800b86c 	.word	0x0800b86c
 8001048:	080012c9 	.word	0x080012c9
 800104c:	2000028c 	.word	0x2000028c
 8001050:	0800b890 	.word	0x0800b890
 8001054:	080013c1 	.word	0x080013c1
 8001058:	20000290 	.word	0x20000290

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	; 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f006 ff61 	bl	8007f32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <SystemClock_Config+0xc8>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a26      	ldr	r2, [pc, #152]	; (8001124 <SystemClock_Config+0xc8>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <SystemClock_Config+0xc8>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <SystemClock_Config+0xcc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a20      	ldr	r2, [pc, #128]	; (8001128 <SystemClock_Config+0xcc>)
 80010a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <SystemClock_Config+0xcc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010cc:	2304      	movs	r3, #4
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 fd41 	bl	8002b68 <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010ec:	f000 f97e 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	230f      	movs	r3, #15
 80010f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f4:	2302      	movs	r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2103      	movs	r1, #3
 800110c:	4618      	mov	r0, r3
 800110e:	f001 ffa3 	bl	8003058 <HAL_RCC_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001118:	f000 f968 	bl	80013ec <Error_Handler>
  }
}
 800111c:	bf00      	nop
 800111e:	3750      	adds	r7, #80	; 0x50
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_I2C1_Init+0x50>)
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <MX_I2C1_Init+0x54>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_I2C1_Init+0x50>)
 8001138:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_I2C1_Init+0x58>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_I2C1_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_I2C1_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_I2C1_Init+0x50>)
 800114a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_I2C1_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_I2C1_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_I2C1_Init+0x50>)
 800116a:	f000 ff0f 	bl	8001f8c <HAL_I2C_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001174:	f000 f93a 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200001f4 	.word	0x200001f4
 8001180:	40005400 	.word	0x40005400
 8001184:	000186a0 	.word	0x000186a0

08001188 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <MX_USART2_UART_Init+0x50>)
 8001190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 8001194:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011c0:	f002 f96a 	bl	8003498 <HAL_UART_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ca:	f000 f90f 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000248 	.word	0x20000248
 80011d8:	40004400 	.word	0x40004400

080011dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_GPIO_Init+0x8c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <MX_GPIO_Init+0x8c>)
 80011fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_GPIO_Init+0x8c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_GPIO_Init+0x8c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a14      	ldr	r2, [pc, #80]	; (8001268 <MX_GPIO_Init+0x8c>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_GPIO_Init+0x8c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_GPIO_Init+0x8c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <MX_GPIO_Init+0x8c>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_GPIO_Init+0x8c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001246:	2330      	movs	r3, #48	; 0x30
 8001248:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	4619      	mov	r1, r3
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_GPIO_Init+0x90>)
 800125a:	f000 fcfb 	bl	8001c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40020400 	.word	0x40020400

08001270 <print_accel>:

/* USER CODE BEGIN 4 */
void print_accel(MPU6050_t *MPU6050) {
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	b0a1      	sub	sp, #132	; 0x84
 8001274:	af04      	add	r7, sp, #16
 8001276:	6078      	str	r0, [r7, #4]
	char buffer[100];
	int32_t len;
	len = sprintf(buffer, "Acc: X:%f Y:%f Z:%f\n", MPU6050->Ax, MPU6050->Ay,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 800128a:	f107 0608 	add.w	r6, r7, #8
 800128e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001292:	e9cd 2300 	strd	r2, r3, [sp]
 8001296:	4622      	mov	r2, r4
 8001298:	462b      	mov	r3, r5
 800129a:	4909      	ldr	r1, [pc, #36]	; (80012c0 <print_accel+0x50>)
 800129c:	4630      	mov	r0, r6
 800129e:	f006 fde5 	bl	8007e6c <siprintf>
 80012a2:	66f8      	str	r0, [r7, #108]	; 0x6c
			MPU6050->Az);
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, HAL_MAX_DELAY);
 80012a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f107 0108 	add.w	r1, r7, #8
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <print_accel+0x54>)
 80012b2:	f002 f93e 	bl	8003532 <HAL_UART_Transmit>
}
 80012b6:	bf00      	nop
 80012b8:	3774      	adds	r7, #116	; 0x74
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800b7dc 	.word	0x0800b7dc
 80012c4:	20000248 	.word	0x20000248

080012c8 <get_encoder_task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_get_encoder_task */
void get_encoder_task(void *argument)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	; 0x30
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int encoderPosCount = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	char posCount[20];
	int pinALast;
	int aVal;
	bool bCW;
	pinALast = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80012d4:	2120      	movs	r1, #32
 80012d6:	4832      	ldr	r0, [pc, #200]	; (80013a0 <get_encoder_task+0xd8>)
 80012d8:	f000 fe40 	bl	8001f5c <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
	/* Infinite loop */
	for (;;) {
		aVal = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80012e0:	2120      	movs	r1, #32
 80012e2:	482f      	ldr	r0, [pc, #188]	; (80013a0 <get_encoder_task+0xd8>)
 80012e4:	f000 fe3a 	bl	8001f5c <HAL_GPIO_ReadPin>
 80012e8:	4603      	mov	r3, r0
 80012ea:	623b      	str	r3, [r7, #32]
		if (aVal != pinALast) {
 80012ec:	6a3a      	ldr	r2, [r7, #32]
 80012ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d052      	beq.n	800139a <get_encoder_task+0xd2>

			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) != aVal) {
 80012f4:	2110      	movs	r1, #16
 80012f6:	482a      	ldr	r0, [pc, #168]	; (80013a0 <get_encoder_task+0xd8>)
 80012f8:	f000 fe30 	bl	8001f5c <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	4293      	cmp	r3, r2
 8001304:	d006      	beq.n	8001314 <get_encoder_task+0x4c>
				encoderPosCount++;
 8001306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001308:	3301      	adds	r3, #1
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
				bCW = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001312:	e005      	b.n	8001320 <get_encoder_task+0x58>
			} else {
				bCW = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				encoderPosCount--;
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	3b01      	subs	r3, #1
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			HAL_UART_Transmit(&huart2, (uint8_t*) "Rotated: ", 8,
 8001320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001324:	2208      	movs	r2, #8
 8001326:	491f      	ldr	r1, [pc, #124]	; (80013a4 <get_encoder_task+0xdc>)
 8001328:	481f      	ldr	r0, [pc, #124]	; (80013a8 <get_encoder_task+0xe0>)
 800132a:	f002 f902 	bl	8003532 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			if (bCW) {
 800132e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <get_encoder_task+0x7e>
				HAL_UART_Transmit(&huart2, (uint8_t*) "clockwise\n", 9,
 8001336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800133a:	2209      	movs	r2, #9
 800133c:	491b      	ldr	r1, [pc, #108]	; (80013ac <get_encoder_task+0xe4>)
 800133e:	481a      	ldr	r0, [pc, #104]	; (80013a8 <get_encoder_task+0xe0>)
 8001340:	f002 f8f7 	bl	8003532 <HAL_UART_Transmit>
 8001344:	e006      	b.n	8001354 <get_encoder_task+0x8c>
				HAL_MAX_DELAY);
			} else {
				HAL_UART_Transmit(&huart2, (uint8_t*) "counterclockwise\n", 15,
 8001346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134a:	220f      	movs	r2, #15
 800134c:	4918      	ldr	r1, [pc, #96]	; (80013b0 <get_encoder_task+0xe8>)
 800134e:	4816      	ldr	r0, [pc, #88]	; (80013a8 <get_encoder_task+0xe0>)
 8001350:	f002 f8ef 	bl	8003532 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}
			HAL_UART_Transmit(&huart2, (uint8_t*) "Encoder Position: ", 17,
 8001354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001358:	2211      	movs	r2, #17
 800135a:	4916      	ldr	r1, [pc, #88]	; (80013b4 <get_encoder_task+0xec>)
 800135c:	4812      	ldr	r0, [pc, #72]	; (80013a8 <get_encoder_task+0xe0>)
 800135e:	f002 f8e8 	bl	8003532 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			sprintf(posCount, "%d", encoderPosCount);
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001368:	4913      	ldr	r1, [pc, #76]	; (80013b8 <get_encoder_task+0xf0>)
 800136a:	4618      	mov	r0, r3
 800136c:	f006 fd7e 	bl	8007e6c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) posCount, strlen(posCount),
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4618      	mov	r0, r3
 8001376:	f7fe ff83 	bl	8000280 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	f107 010c 	add.w	r1, r7, #12
 8001382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001386:	4808      	ldr	r0, [pc, #32]	; (80013a8 <get_encoder_task+0xe0>)
 8001388:	f002 f8d3 	bl	8003532 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, HAL_MAX_DELAY);
 800138c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001390:	2201      	movs	r2, #1
 8001392:	490a      	ldr	r1, [pc, #40]	; (80013bc <get_encoder_task+0xf4>)
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <get_encoder_task+0xe0>)
 8001396:	f002 f8cc 	bl	8003532 <HAL_UART_Transmit>

		}
		pinALast = aVal;
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
		aVal = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 800139e:	e79f      	b.n	80012e0 <get_encoder_task+0x18>
 80013a0:	40020400 	.word	0x40020400
 80013a4:	0800b80c 	.word	0x0800b80c
 80013a8:	20000248 	.word	0x20000248
 80013ac:	0800b818 	.word	0x0800b818
 80013b0:	0800b824 	.word	0x0800b824
 80013b4:	0800b838 	.word	0x0800b838
 80013b8:	0800b84c 	.word	0x0800b84c
 80013bc:	0800b850 	.word	0x0800b850

080013c0 <imu_task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_imu_task */
void imu_task(void *argument)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b094      	sub	sp, #80	; 0x50
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN imu_task */
	/* Infinite loop */
	MPU6050_t MPU6050;

	for (;;) {
		MPU6050_Read_Accel(&hi2c1, &MPU6050);
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <imu_task+0x28>)
 80013d0:	f003 f876 	bl	80044c0 <MPU6050_Read_Accel>
		HAL_Delay(500);
 80013d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013d8:	f000 fa74 	bl	80018c4 <HAL_Delay>
		print_accel(&MPU6050);
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff45 	bl	8001270 <print_accel>
		MPU6050_Read_Accel(&hi2c1, &MPU6050);
 80013e6:	e7ef      	b.n	80013c8 <imu_task+0x8>
 80013e8:	200001f4 	.word	0x200001f4

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013f4:	e7fe      	b.n	80013f4 <Error_Handler+0x8>
	...

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_MspInit+0x54>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a11      	ldr	r2, [pc, #68]	; (800144c <HAL_MspInit+0x54>)
 8001408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_MspInit+0x54>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_MspInit+0x54>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_MspInit+0x54>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_MspInit+0x54>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	210f      	movs	r1, #15
 800143a:	f06f 0001 	mvn.w	r0, #1
 800143e:	f000 fb40 	bl	8001ac2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_I2C_MspInit+0x84>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12b      	bne.n	80014ca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800148e:	23c0      	movs	r3, #192	; 0xc0
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001492:	2312      	movs	r3, #18
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149e:	2304      	movs	r3, #4
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <HAL_I2C_MspInit+0x8c>)
 80014aa:	f000 fbd3 	bl	8001c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 80014b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014ca:	bf00      	nop
 80014cc:	3728      	adds	r7, #40	; 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40005400 	.word	0x40005400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400

080014e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <HAL_UART_MspInit+0x94>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d133      	bne.n	800156a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HAL_UART_MspInit+0x98>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a1b      	ldr	r2, [pc, #108]	; (8001578 <HAL_UART_MspInit+0x98>)
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_UART_MspInit+0x98>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_UART_MspInit+0x98>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a14      	ldr	r2, [pc, #80]	; (8001578 <HAL_UART_MspInit+0x98>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_UART_MspInit+0x98>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800153a:	230c      	movs	r3, #12
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800154a:	2307      	movs	r3, #7
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4809      	ldr	r0, [pc, #36]	; (800157c <HAL_UART_MspInit+0x9c>)
 8001556:	f000 fb7d 	bl	8001c54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2105      	movs	r1, #5
 800155e:	2026      	movs	r0, #38	; 0x26
 8001560:	f000 faaf 	bl	8001ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001564:	2026      	movs	r0, #38	; 0x26
 8001566:	f000 fac8 	bl	8001afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40004400 	.word	0x40004400
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <NMI_Handler+0x4>

08001586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <MemManage_Handler+0x4>

08001592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <UsageFault_Handler+0x4>

0800159e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b0:	f000 f968 	bl	8001884 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015b4:	f004 fcbc 	bl	8005f30 <xTaskGetSchedulerState>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015be:	f005 faa3 	bl	8006b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <USART2_IRQHandler+0x10>)
 80015ce:	f002 f843 	bl	8003658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000248 	.word	0x20000248

080015dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return 1;
 80015e0:	2301      	movs	r3, #1
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_kill>:

int _kill(int pid, int sig)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015f6:	f006 fcef 	bl	8007fd8 <__errno>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2216      	movs	r2, #22
 80015fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_exit>:

void _exit (int status)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffe7 	bl	80015ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800161e:	e7fe      	b.n	800161e <_exit+0x12>

08001620 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e00a      	b.n	8001648 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001632:	f3af 8000 	nop.w
 8001636:	4601      	mov	r1, r0
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	b2ca      	uxtb	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	dbf0      	blt.n	8001632 <_read+0x12>
  }

  return len;
 8001650:	687b      	ldr	r3, [r7, #4]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e009      	b.n	8001680 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60ba      	str	r2, [r7, #8]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	dbf1      	blt.n	800166c <_write+0x12>
  }
  return len;
 8001688:	687b      	ldr	r3, [r7, #4]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <_close>:

int _close(int file)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ba:	605a      	str	r2, [r3, #4]
  return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_isatty>:

int _isatty(int file)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <_sbrk+0x5c>)
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <_sbrk+0x60>)
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <_sbrk+0x64>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <_sbrk+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	429a      	cmp	r2, r3
 800172a:	d207      	bcs.n	800173c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800172c:	f006 fc54 	bl	8007fd8 <__errno>
 8001730:	4603      	mov	r3, r0
 8001732:	220c      	movs	r2, #12
 8001734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800173a:	e009      	b.n	8001750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <_sbrk+0x64>)
 800174c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174e:	68fb      	ldr	r3, [r7, #12]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20020000 	.word	0x20020000
 800175c:	00000400 	.word	0x00000400
 8001760:	20000294 	.word	0x20000294
 8001764:	20004d38 	.word	0x20004d38

08001768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <SystemInit+0x20>)
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <SystemInit+0x20>)
 8001774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800178c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001792:	490e      	ldr	r1, [pc, #56]	; (80017cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001794:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a8:	4c0b      	ldr	r4, [pc, #44]	; (80017d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017b6:	f7ff ffd7 	bl	8001768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ba:	f006 fc13 	bl	8007fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017be:	f7ff fc1f 	bl	8001000 <main>
  bx  lr    
 80017c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80017d0:	0800bd08 	.word	0x0800bd08
  ldr r2, =_sbss
 80017d4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80017d8:	20004d38 	.word	0x20004d38

080017dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC_IRQHandler>
	...

080017e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <HAL_Init+0x40>)
 80017ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <HAL_Init+0x40>)
 80017f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_Init+0x40>)
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f000 f94f 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180e:	200f      	movs	r0, #15
 8001810:	f000 f808 	bl	8001824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001814:	f7ff fdf0 	bl	80013f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023c00 	.word	0x40023c00

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_InitTick+0x54>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x58>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	fbb3 f3f1 	udiv	r3, r3, r1
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f967 	bl	8001b16 <HAL_SYSTICK_Config>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00e      	b.n	8001870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d80a      	bhi.n	800186e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001860:	f000 f92f 	bl	8001ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001864:	4a06      	ldr	r2, [pc, #24]	; (8001880 <HAL_InitTick+0x5c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000000 	.word	0x20000000
 800187c:	20000008 	.word	0x20000008
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x20>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x24>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_IncTick+0x24>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000298 	.word	0x20000298

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000298 	.word	0x20000298

080018c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff ffee 	bl	80018ac <HAL_GetTick>
 80018d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018dc:	d005      	beq.n	80018ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_Delay+0x44>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ea:	bf00      	nop
 80018ec:	f7ff ffde 	bl	80018ac <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d8f7      	bhi.n	80018ec <HAL_Delay+0x28>
  {
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000008 	.word	0x20000008

0800190c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001928:	4013      	ands	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193e:	4a04      	ldr	r2, [pc, #16]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	60d3      	str	r3, [r2, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <__NVIC_GetPriorityGrouping+0x18>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	f003 0307 	and.w	r3, r3, #7
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db0b      	blt.n	800199a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4907      	ldr	r1, [pc, #28]	; (80019a8 <__NVIC_EnableIRQ+0x38>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	2001      	movs	r0, #1
 8001992:	fa00 f202 	lsl.w	r2, r0, r2
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	; (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
         );
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a78:	d301      	bcc.n	8001a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00f      	b.n	8001a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <SysTick_Config+0x40>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a86:	210f      	movs	r1, #15
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a8c:	f7ff ff8e 	bl	80019ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <SysTick_Config+0x40>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SysTick_Config+0x40>)
 8001a98:	2207      	movs	r2, #7
 8001a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff29 	bl	800190c <__NVIC_SetPriorityGrouping>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad4:	f7ff ff3e 	bl	8001954 <__NVIC_GetPriorityGrouping>
 8001ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7ff ff8e 	bl	8001a00 <NVIC_EncodePriority>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff5d 	bl	80019ac <__NVIC_SetPriority>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff31 	bl	8001970 <__NVIC_EnableIRQ>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffa2 	bl	8001a68 <SysTick_Config>
 8001b24:	4603      	mov	r3, r0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff feb6 	bl	80018ac <HAL_GetTick>
 8001b40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d008      	beq.n	8001b60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e052      	b.n	8001c06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0216 	bic.w	r2, r2, #22
 8001b6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d103      	bne.n	8001b90 <HAL_DMA_Abort+0x62>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d007      	beq.n	8001ba0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0208 	bic.w	r2, r2, #8
 8001b9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0201 	bic.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb0:	e013      	b.n	8001bda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bb2:	f7ff fe7b 	bl	80018ac <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d90c      	bls.n	8001bda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2203      	movs	r2, #3
 8001bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e015      	b.n	8001c06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e4      	bne.n	8001bb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bec:	223f      	movs	r2, #63	; 0x3f
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d004      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e00c      	b.n	8001c46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2205      	movs	r2, #5
 8001c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0201 	bic.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e159      	b.n	8001f24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c70:	2201      	movs	r2, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	f040 8148 	bne.w	8001f1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d005      	beq.n	8001ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d130      	bne.n	8001d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cdc:	2201      	movs	r2, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 0201 	and.w	r2, r3, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d017      	beq.n	8001d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d123      	bne.n	8001d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	08da      	lsrs	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3208      	adds	r2, #8
 8001d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	69b9      	ldr	r1, [r7, #24]
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80a2 	beq.w	8001f1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <HAL_GPIO_Init+0x2e8>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a56      	ldr	r2, [pc, #344]	; (8001f3c <HAL_GPIO_Init+0x2e8>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b54      	ldr	r3, [pc, #336]	; (8001f3c <HAL_GPIO_Init+0x2e8>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df6:	4a52      	ldr	r2, [pc, #328]	; (8001f40 <HAL_GPIO_Init+0x2ec>)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a49      	ldr	r2, [pc, #292]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d019      	beq.n	8001e56 <HAL_GPIO_Init+0x202>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a48      	ldr	r2, [pc, #288]	; (8001f48 <HAL_GPIO_Init+0x2f4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d013      	beq.n	8001e52 <HAL_GPIO_Init+0x1fe>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a47      	ldr	r2, [pc, #284]	; (8001f4c <HAL_GPIO_Init+0x2f8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00d      	beq.n	8001e4e <HAL_GPIO_Init+0x1fa>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a46      	ldr	r2, [pc, #280]	; (8001f50 <HAL_GPIO_Init+0x2fc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d007      	beq.n	8001e4a <HAL_GPIO_Init+0x1f6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a45      	ldr	r2, [pc, #276]	; (8001f54 <HAL_GPIO_Init+0x300>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d101      	bne.n	8001e46 <HAL_GPIO_Init+0x1f2>
 8001e42:	2304      	movs	r3, #4
 8001e44:	e008      	b.n	8001e58 <HAL_GPIO_Init+0x204>
 8001e46:	2307      	movs	r3, #7
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x204>
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e004      	b.n	8001e58 <HAL_GPIO_Init+0x204>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e002      	b.n	8001e58 <HAL_GPIO_Init+0x204>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_GPIO_Init+0x204>
 8001e56:	2300      	movs	r3, #0
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	f002 0203 	and.w	r2, r2, #3
 8001e5e:	0092      	lsls	r2, r2, #2
 8001e60:	4093      	lsls	r3, r2
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e68:	4935      	ldr	r1, [pc, #212]	; (8001f40 <HAL_GPIO_Init+0x2ec>)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e76:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <HAL_GPIO_Init+0x304>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e9a:	4a2f      	ldr	r2, [pc, #188]	; (8001f58 <HAL_GPIO_Init+0x304>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_GPIO_Init+0x304>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec4:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <HAL_GPIO_Init+0x304>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eca:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <HAL_GPIO_Init+0x304>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eee:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_GPIO_Init+0x304>)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_GPIO_Init+0x304>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f18:	4a0f      	ldr	r2, [pc, #60]	; (8001f58 <HAL_GPIO_Init+0x304>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3301      	adds	r3, #1
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	2b0f      	cmp	r3, #15
 8001f28:	f67f aea2 	bls.w	8001c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3724      	adds	r7, #36	; 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40013800 	.word	0x40013800
 8001f44:	40020000 	.word	0x40020000
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	40020800 	.word	0x40020800
 8001f50:	40020c00 	.word	0x40020c00
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40013c00 	.word	0x40013c00

08001f5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	887b      	ldrh	r3, [r7, #2]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e001      	b.n	8001f7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e12b      	b.n	80021f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fa4c 	bl	8001450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	; 0x24
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ff0:	f001 fa2a 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 8001ff4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4a81      	ldr	r2, [pc, #516]	; (8002200 <HAL_I2C_Init+0x274>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d807      	bhi.n	8002010 <HAL_I2C_Init+0x84>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a80      	ldr	r2, [pc, #512]	; (8002204 <HAL_I2C_Init+0x278>)
 8002004:	4293      	cmp	r3, r2
 8002006:	bf94      	ite	ls
 8002008:	2301      	movls	r3, #1
 800200a:	2300      	movhi	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e006      	b.n	800201e <HAL_I2C_Init+0x92>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a7d      	ldr	r2, [pc, #500]	; (8002208 <HAL_I2C_Init+0x27c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	bf94      	ite	ls
 8002018:	2301      	movls	r3, #1
 800201a:	2300      	movhi	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e0e7      	b.n	80021f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a78      	ldr	r2, [pc, #480]	; (800220c <HAL_I2C_Init+0x280>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9b      	lsrs	r3, r3, #18
 8002030:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	430a      	orrs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a6a      	ldr	r2, [pc, #424]	; (8002200 <HAL_I2C_Init+0x274>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d802      	bhi.n	8002060 <HAL_I2C_Init+0xd4>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3301      	adds	r3, #1
 800205e:	e009      	b.n	8002074 <HAL_I2C_Init+0xe8>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	4a69      	ldr	r2, [pc, #420]	; (8002210 <HAL_I2C_Init+0x284>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	099b      	lsrs	r3, r3, #6
 8002072:	3301      	adds	r3, #1
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	430b      	orrs	r3, r1
 800207a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002086:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	495c      	ldr	r1, [pc, #368]	; (8002200 <HAL_I2C_Init+0x274>)
 8002090:	428b      	cmp	r3, r1
 8002092:	d819      	bhi.n	80020c8 <HAL_I2C_Init+0x13c>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1e59      	subs	r1, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a2:	1c59      	adds	r1, r3, #1
 80020a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020a8:	400b      	ands	r3, r1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_I2C_Init+0x138>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1e59      	subs	r1, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	e051      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e04f      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <HAL_I2C_Init+0x168>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e012      	b.n	800211a <HAL_I2C_Init+0x18e>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1e58      	subs	r0, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	0099      	lsls	r1, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	fbb0 f3f3 	udiv	r3, r0, r3
 800210a:	3301      	adds	r3, #1
 800210c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Init+0x196>
 800211e:	2301      	movs	r3, #1
 8002120:	e022      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10e      	bne.n	8002148 <HAL_I2C_Init+0x1bc>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e58      	subs	r0, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6859      	ldr	r1, [r3, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	440b      	add	r3, r1
 8002138:	fbb0 f3f3 	udiv	r3, r0, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002146:	e00f      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e58      	subs	r0, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	0099      	lsls	r1, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	fbb0 f3f3 	udiv	r3, r0, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	6809      	ldr	r1, [r1, #0]
 800216c:	4313      	orrs	r3, r2
 800216e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69da      	ldr	r2, [r3, #28]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6911      	ldr	r1, [r2, #16]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68d2      	ldr	r2, [r2, #12]
 80021a2:	4311      	orrs	r1, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	000186a0 	.word	0x000186a0
 8002204:	001e847f 	.word	0x001e847f
 8002208:	003d08ff 	.word	0x003d08ff
 800220c:	431bde83 	.word	0x431bde83
 8002210:	10624dd3 	.word	0x10624dd3

08002214 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	; 0x30
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	817b      	strh	r3, [r7, #10]
 8002226:	460b      	mov	r3, r1
 8002228:	813b      	strh	r3, [r7, #8]
 800222a:	4613      	mov	r3, r2
 800222c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800222e:	f7ff fb3d 	bl	80018ac <HAL_GetTick>
 8002232:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b20      	cmp	r3, #32
 800223e:	f040 8208 	bne.w	8002652 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2319      	movs	r3, #25
 8002248:	2201      	movs	r2, #1
 800224a:	497b      	ldr	r1, [pc, #492]	; (8002438 <HAL_I2C_Mem_Read+0x224>)
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 faef 	bl	8002830 <I2C_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002258:	2302      	movs	r3, #2
 800225a:	e1fb      	b.n	8002654 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_I2C_Mem_Read+0x56>
 8002266:	2302      	movs	r3, #2
 8002268:	e1f4      	b.n	8002654 <HAL_I2C_Mem_Read+0x440>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d007      	beq.n	8002290 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800229e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2222      	movs	r2, #34	; 0x22
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2240      	movs	r2, #64	; 0x40
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4a5b      	ldr	r2, [pc, #364]	; (800243c <HAL_I2C_Mem_Read+0x228>)
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022d2:	88f8      	ldrh	r0, [r7, #6]
 80022d4:	893a      	ldrh	r2, [r7, #8]
 80022d6:	8979      	ldrh	r1, [r7, #10]
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	4603      	mov	r3, r0
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f9bc 	bl	8002660 <I2C_RequestMemoryRead>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e1b0      	b.n	8002654 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d113      	bne.n	8002322 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	623b      	str	r3, [r7, #32]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	623b      	str	r3, [r7, #32]
 800230e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e184      	b.n	800262c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002326:	2b01      	cmp	r3, #1
 8002328:	d11b      	bne.n	8002362 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002338:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e164      	b.n	800262c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	2b02      	cmp	r3, #2
 8002368:	d11b      	bne.n	80023a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002378:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002388:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	e144      	b.n	800262c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023b8:	e138      	b.n	800262c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	2b03      	cmp	r3, #3
 80023c0:	f200 80f1 	bhi.w	80025a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d123      	bne.n	8002414 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fb44 	bl	8002a5e <I2C_WaitOnRXNEFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e139      	b.n	8002654 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002412:	e10b      	b.n	800262c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	2b02      	cmp	r3, #2
 800241a:	d14e      	bne.n	80024ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002422:	2200      	movs	r2, #0
 8002424:	4906      	ldr	r1, [pc, #24]	; (8002440 <HAL_I2C_Mem_Read+0x22c>)
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fa02 	bl	8002830 <I2C_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e10e      	b.n	8002654 <HAL_I2C_Mem_Read+0x440>
 8002436:	bf00      	nop
 8002438:	00100002 	.word	0x00100002
 800243c:	ffff0000 	.word	0xffff0000
 8002440:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024b8:	e0b8      	b.n	800262c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c0:	2200      	movs	r2, #0
 80024c2:	4966      	ldr	r1, [pc, #408]	; (800265c <HAL_I2C_Mem_Read+0x448>)
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f9b3 	bl	8002830 <I2C_WaitOnFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0bf      	b.n	8002654 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251c:	2200      	movs	r2, #0
 800251e:	494f      	ldr	r1, [pc, #316]	; (800265c <HAL_I2C_Mem_Read+0x448>)
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f985 	bl	8002830 <I2C_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e091      	b.n	8002654 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025a4:	e042      	b.n	800262c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fa57 	bl	8002a5e <I2C_WaitOnRXNEFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e04c      	b.n	8002654 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d118      	bne.n	800262c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002630:	2b00      	cmp	r3, #0
 8002632:	f47f aec2 	bne.w	80023ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e000      	b.n	8002654 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002652:	2302      	movs	r3, #2
  }
}
 8002654:	4618      	mov	r0, r3
 8002656:	3728      	adds	r7, #40	; 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	00010004 	.word	0x00010004

08002660 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	4608      	mov	r0, r1
 800266a:	4611      	mov	r1, r2
 800266c:	461a      	mov	r2, r3
 800266e:	4603      	mov	r3, r0
 8002670:	817b      	strh	r3, [r7, #10]
 8002672:	460b      	mov	r3, r1
 8002674:	813b      	strh	r3, [r7, #8]
 8002676:	4613      	mov	r3, r2
 8002678:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002688:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002698:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f8c2 	bl	8002830 <I2C_WaitOnFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c0:	d103      	bne.n	80026ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0aa      	b.n	8002824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026ce:	897b      	ldrh	r3, [r7, #10]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	6a3a      	ldr	r2, [r7, #32]
 80026e2:	4952      	ldr	r1, [pc, #328]	; (800282c <I2C_RequestMemoryRead+0x1cc>)
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f8fa 	bl	80028de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e097      	b.n	8002824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800270a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270c:	6a39      	ldr	r1, [r7, #32]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f964 	bl	80029dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00d      	beq.n	8002736 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b04      	cmp	r3, #4
 8002720:	d107      	bne.n	8002732 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002730:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e076      	b.n	8002824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d105      	bne.n	8002748 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800273c:	893b      	ldrh	r3, [r7, #8]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	611a      	str	r2, [r3, #16]
 8002746:	e021      	b.n	800278c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002748:	893b      	ldrh	r3, [r7, #8]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	b29b      	uxth	r3, r3
 800274e:	b2da      	uxtb	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	6a39      	ldr	r1, [r7, #32]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f93e 	bl	80029dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	2b04      	cmp	r3, #4
 800276c:	d107      	bne.n	800277e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e050      	b.n	8002824 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002782:	893b      	ldrh	r3, [r7, #8]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800278c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278e:	6a39      	ldr	r1, [r7, #32]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f923 	bl	80029dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00d      	beq.n	80027b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d107      	bne.n	80027b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e035      	b.n	8002824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f82b 	bl	8002830 <I2C_WaitOnFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00d      	beq.n	80027fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ee:	d103      	bne.n	80027f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e013      	b.n	8002824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027fc:	897b      	ldrh	r3, [r7, #10]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	b2da      	uxtb	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	6a3a      	ldr	r2, [r7, #32]
 8002810:	4906      	ldr	r1, [pc, #24]	; (800282c <I2C_RequestMemoryRead+0x1cc>)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f863 	bl	80028de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	00010002 	.word	0x00010002

08002830 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002840:	e025      	b.n	800288e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002848:	d021      	beq.n	800288e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284a:	f7ff f82f 	bl	80018ac <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <I2C_WaitOnFlagUntilTimeout+0x30>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d116      	bne.n	800288e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f043 0220 	orr.w	r2, r3, #32
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e023      	b.n	80028d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	0c1b      	lsrs	r3, r3, #16
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d10d      	bne.n	80028b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	43da      	mvns	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4013      	ands	r3, r2
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	e00c      	b.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4013      	ands	r3, r2
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d0b6      	beq.n	8002842 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ec:	e051      	b.n	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fc:	d123      	bne.n	8002946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002916:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f043 0204 	orr.w	r2, r3, #4
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e046      	b.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800294c:	d021      	beq.n	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294e:	f7fe ffad 	bl	80018ac <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	429a      	cmp	r2, r3
 800295c:	d302      	bcc.n	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d116      	bne.n	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f043 0220 	orr.w	r2, r3, #32
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e020      	b.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10c      	bne.n	80029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bf14      	ite	ne
 80029ae:	2301      	movne	r3, #1
 80029b0:	2300      	moveq	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	e00b      	b.n	80029ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	43da      	mvns	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4013      	ands	r3, r2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d18d      	bne.n	80028ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e8:	e02d      	b.n	8002a46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f88d 	bl	8002b0a <I2C_IsAcknowledgeFailed>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e02d      	b.n	8002a56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a00:	d021      	beq.n	8002a46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7fe ff53 	bl	80018ac <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d116      	bne.n	8002a46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e007      	b.n	8002a56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	d1ca      	bne.n	80029ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a6a:	e042      	b.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d119      	bne.n	8002aae <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f06f 0210 	mvn.w	r2, #16
 8002a82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e029      	b.n	8002b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aae:	f7fe fefd 	bl	80018ac <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d302      	bcc.n	8002ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d116      	bne.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f043 0220 	orr.w	r2, r3, #32
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e007      	b.n	8002b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d1b5      	bne.n	8002a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b20:	d11b      	bne.n	8002b5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f043 0204 	orr.w	r2, r3, #4
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e267      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d075      	beq.n	8002c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b86:	4b88      	ldr	r3, [pc, #544]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d00c      	beq.n	8002bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b92:	4b85      	ldr	r3, [pc, #532]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d112      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9e:	4b82      	ldr	r3, [pc, #520]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002baa:	d10b      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	4b7e      	ldr	r3, [pc, #504]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d05b      	beq.n	8002c70 <HAL_RCC_OscConfig+0x108>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d157      	bne.n	8002c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e242      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bcc:	d106      	bne.n	8002bdc <HAL_RCC_OscConfig+0x74>
 8002bce:	4b76      	ldr	r3, [pc, #472]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a75      	ldr	r2, [pc, #468]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e01d      	b.n	8002c18 <HAL_RCC_OscConfig+0xb0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x98>
 8002be6:	4b70      	ldr	r3, [pc, #448]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6f      	ldr	r2, [pc, #444]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	4b6d      	ldr	r3, [pc, #436]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a6c      	ldr	r2, [pc, #432]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0xb0>
 8002c00:	4b69      	ldr	r3, [pc, #420]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a68      	ldr	r2, [pc, #416]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b66      	ldr	r3, [pc, #408]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a65      	ldr	r2, [pc, #404]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d013      	beq.n	8002c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe fe44 	bl	80018ac <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c28:	f7fe fe40 	bl	80018ac <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e207      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	4b5b      	ldr	r3, [pc, #364]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0xc0>
 8002c46:	e014      	b.n	8002c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe fe30 	bl	80018ac <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fe fe2c 	bl	80018ac <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1f3      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c62:	4b51      	ldr	r3, [pc, #324]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0xe8>
 8002c6e:	e000      	b.n	8002c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d063      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7e:	4b4a      	ldr	r3, [pc, #296]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d11c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c96:	4b44      	ldr	r3, [pc, #272]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d116      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <HAL_RCC_OscConfig+0x152>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d001      	beq.n	8002cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e1c7      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cba:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4937      	ldr	r1, [pc, #220]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cce:	e03a      	b.n	8002d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d020      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd8:	4b34      	ldr	r3, [pc, #208]	; (8002dac <HAL_RCC_OscConfig+0x244>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe fde5 	bl	80018ac <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fde1 	bl	80018ac <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e1a8      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf8:	4b2b      	ldr	r3, [pc, #172]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4925      	ldr	r1, [pc, #148]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]
 8002d18:	e015      	b.n	8002d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1a:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_RCC_OscConfig+0x244>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fdc4 	bl	80018ac <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d28:	f7fe fdc0 	bl	80018ac <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e187      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d036      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d016      	beq.n	8002d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <HAL_RCC_OscConfig+0x248>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fe fda4 	bl	80018ac <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d68:	f7fe fda0 	bl	80018ac <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e167      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x200>
 8002d86:	e01b      	b.n	8002dc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCC_OscConfig+0x248>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7fe fd8d 	bl	80018ac <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	e00e      	b.n	8002db4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d96:	f7fe fd89 	bl	80018ac <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d907      	bls.n	8002db4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e150      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
 8002da8:	40023800 	.word	0x40023800
 8002dac:	42470000 	.word	0x42470000
 8002db0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	4b88      	ldr	r3, [pc, #544]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1ea      	bne.n	8002d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8097 	beq.w	8002efc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd2:	4b81      	ldr	r3, [pc, #516]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10f      	bne.n	8002dfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	4b7d      	ldr	r3, [pc, #500]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a7c      	ldr	r2, [pc, #496]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40
 8002dee:	4b7a      	ldr	r3, [pc, #488]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfe:	4b77      	ldr	r3, [pc, #476]	; (8002fdc <HAL_RCC_OscConfig+0x474>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d118      	bne.n	8002e3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e0a:	4b74      	ldr	r3, [pc, #464]	; (8002fdc <HAL_RCC_OscConfig+0x474>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a73      	ldr	r2, [pc, #460]	; (8002fdc <HAL_RCC_OscConfig+0x474>)
 8002e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e16:	f7fe fd49 	bl	80018ac <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1e:	f7fe fd45 	bl	80018ac <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e10c      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	4b6a      	ldr	r3, [pc, #424]	; (8002fdc <HAL_RCC_OscConfig+0x474>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x2ea>
 8002e44:	4b64      	ldr	r3, [pc, #400]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	4a63      	ldr	r2, [pc, #396]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e50:	e01c      	b.n	8002e8c <HAL_RCC_OscConfig+0x324>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x30c>
 8002e5a:	4b5f      	ldr	r3, [pc, #380]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a5e      	ldr	r2, [pc, #376]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e60:	f043 0304 	orr.w	r3, r3, #4
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70
 8002e66:	4b5c      	ldr	r3, [pc, #368]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	4a5b      	ldr	r2, [pc, #364]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6713      	str	r3, [r2, #112]	; 0x70
 8002e72:	e00b      	b.n	8002e8c <HAL_RCC_OscConfig+0x324>
 8002e74:	4b58      	ldr	r3, [pc, #352]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	4a57      	ldr	r2, [pc, #348]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e80:	4b55      	ldr	r3, [pc, #340]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	4a54      	ldr	r2, [pc, #336]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002e86:	f023 0304 	bic.w	r3, r3, #4
 8002e8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d015      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7fe fd0a 	bl	80018ac <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9c:	f7fe fd06 	bl	80018ac <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e0cb      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb2:	4b49      	ldr	r3, [pc, #292]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0ee      	beq.n	8002e9c <HAL_RCC_OscConfig+0x334>
 8002ebe:	e014      	b.n	8002eea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fcf4 	bl	80018ac <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe fcf0 	bl	80018ac <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0b5      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ede:	4b3e      	ldr	r3, [pc, #248]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1ee      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef0:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	4a38      	ldr	r2, [pc, #224]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80a1 	beq.w	8003048 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f06:	4b34      	ldr	r3, [pc, #208]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d05c      	beq.n	8002fcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d141      	bne.n	8002f9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1a:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_RCC_OscConfig+0x478>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe fcc4 	bl	80018ac <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f28:	f7fe fcc0 	bl	80018ac <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e087      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	019b      	lsls	r3, r3, #6
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	491b      	ldr	r1, [pc, #108]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f70:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <HAL_RCC_OscConfig+0x478>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7fe fc99 	bl	80018ac <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fe fc95 	bl	80018ac <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e05c      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x416>
 8002f9c:	e054      	b.n	8003048 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <HAL_RCC_OscConfig+0x478>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fc82 	bl	80018ac <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe fc7e 	bl	80018ac <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e045      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x444>
 8002fca:	e03d      	b.n	8003048 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e038      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40007000 	.word	0x40007000
 8002fe0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_RCC_OscConfig+0x4ec>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d028      	beq.n	8003044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d121      	bne.n	8003044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d11a      	bne.n	8003044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003014:	4013      	ands	r3, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800301a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800301c:	4293      	cmp	r3, r2
 800301e:	d111      	bne.n	8003044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	3b01      	subs	r3, #1
 800302e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d107      	bne.n	8003044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800

08003058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0cc      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800306c:	4b68      	ldr	r3, [pc, #416]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d90c      	bls.n	8003094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b65      	ldr	r3, [pc, #404]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b63      	ldr	r3, [pc, #396]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0b8      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d020      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ac:	4b59      	ldr	r3, [pc, #356]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a58      	ldr	r2, [pc, #352]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c4:	4b53      	ldr	r3, [pc, #332]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a52      	ldr	r2, [pc, #328]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b50      	ldr	r3, [pc, #320]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	494d      	ldr	r1, [pc, #308]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d044      	beq.n	8003178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d119      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e07f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d003      	beq.n	8003116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003112:	2b03      	cmp	r3, #3
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	4b3f      	ldr	r3, [pc, #252]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e06f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003126:	4b3b      	ldr	r3, [pc, #236]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e067      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003136:	4b37      	ldr	r3, [pc, #220]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f023 0203 	bic.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4934      	ldr	r1, [pc, #208]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003148:	f7fe fbb0 	bl	80018ac <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	e00a      	b.n	8003166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003150:	f7fe fbac 	bl	80018ac <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e04f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 020c 	and.w	r2, r3, #12
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	429a      	cmp	r2, r3
 8003176:	d1eb      	bne.n	8003150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003178:	4b25      	ldr	r3, [pc, #148]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d20c      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b22      	ldr	r3, [pc, #136]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e032      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4916      	ldr	r1, [pc, #88]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	490e      	ldr	r1, [pc, #56]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031de:	f000 f821 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 80031e2:	4602      	mov	r2, r0
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	490a      	ldr	r1, [pc, #40]	; (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	5ccb      	ldrb	r3, [r1, r3]
 80031f2:	fa22 f303 	lsr.w	r3, r2, r3
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe fb10 	bl	8001824 <HAL_InitTick>

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40023c00 	.word	0x40023c00
 8003214:	40023800 	.word	0x40023800
 8003218:	0800b8b4 	.word	0x0800b8b4
 800321c:	20000000 	.word	0x20000000
 8003220:	20000004 	.word	0x20000004

08003224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003228:	b094      	sub	sp, #80	; 0x50
 800322a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	647b      	str	r3, [r7, #68]	; 0x44
 8003230:	2300      	movs	r3, #0
 8003232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003234:	2300      	movs	r3, #0
 8003236:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800323c:	4b79      	ldr	r3, [pc, #484]	; (8003424 <HAL_RCC_GetSysClockFreq+0x200>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d00d      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x40>
 8003248:	2b08      	cmp	r3, #8
 800324a:	f200 80e1 	bhi.w	8003410 <HAL_RCC_GetSysClockFreq+0x1ec>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x34>
 8003252:	2b04      	cmp	r3, #4
 8003254:	d003      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0x3a>
 8003256:	e0db      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003258:	4b73      	ldr	r3, [pc, #460]	; (8003428 <HAL_RCC_GetSysClockFreq+0x204>)
 800325a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800325c:	e0db      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800325e:	4b73      	ldr	r3, [pc, #460]	; (800342c <HAL_RCC_GetSysClockFreq+0x208>)
 8003260:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003262:	e0d8      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003264:	4b6f      	ldr	r3, [pc, #444]	; (8003424 <HAL_RCC_GetSysClockFreq+0x200>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800326c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800326e:	4b6d      	ldr	r3, [pc, #436]	; (8003424 <HAL_RCC_GetSysClockFreq+0x200>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d063      	beq.n	8003342 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327a:	4b6a      	ldr	r3, [pc, #424]	; (8003424 <HAL_RCC_GetSysClockFreq+0x200>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	099b      	lsrs	r3, r3, #6
 8003280:	2200      	movs	r2, #0
 8003282:	63bb      	str	r3, [r7, #56]	; 0x38
 8003284:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800328c:	633b      	str	r3, [r7, #48]	; 0x30
 800328e:	2300      	movs	r3, #0
 8003290:	637b      	str	r3, [r7, #52]	; 0x34
 8003292:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003296:	4622      	mov	r2, r4
 8003298:	462b      	mov	r3, r5
 800329a:	f04f 0000 	mov.w	r0, #0
 800329e:	f04f 0100 	mov.w	r1, #0
 80032a2:	0159      	lsls	r1, r3, #5
 80032a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a8:	0150      	lsls	r0, r2, #5
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4621      	mov	r1, r4
 80032b0:	1a51      	subs	r1, r2, r1
 80032b2:	6139      	str	r1, [r7, #16]
 80032b4:	4629      	mov	r1, r5
 80032b6:	eb63 0301 	sbc.w	r3, r3, r1
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032c8:	4659      	mov	r1, fp
 80032ca:	018b      	lsls	r3, r1, #6
 80032cc:	4651      	mov	r1, sl
 80032ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032d2:	4651      	mov	r1, sl
 80032d4:	018a      	lsls	r2, r1, #6
 80032d6:	4651      	mov	r1, sl
 80032d8:	ebb2 0801 	subs.w	r8, r2, r1
 80032dc:	4659      	mov	r1, fp
 80032de:	eb63 0901 	sbc.w	r9, r3, r1
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032f6:	4690      	mov	r8, r2
 80032f8:	4699      	mov	r9, r3
 80032fa:	4623      	mov	r3, r4
 80032fc:	eb18 0303 	adds.w	r3, r8, r3
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	462b      	mov	r3, r5
 8003304:	eb49 0303 	adc.w	r3, r9, r3
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003316:	4629      	mov	r1, r5
 8003318:	024b      	lsls	r3, r1, #9
 800331a:	4621      	mov	r1, r4
 800331c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003320:	4621      	mov	r1, r4
 8003322:	024a      	lsls	r2, r1, #9
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800332a:	2200      	movs	r2, #0
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
 800332e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003330:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003334:	f7fd fcb0 	bl	8000c98 <__aeabi_uldivmod>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4613      	mov	r3, r2
 800333e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003340:	e058      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003342:	4b38      	ldr	r3, [pc, #224]	; (8003424 <HAL_RCC_GetSysClockFreq+0x200>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	2200      	movs	r2, #0
 800334a:	4618      	mov	r0, r3
 800334c:	4611      	mov	r1, r2
 800334e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003352:	623b      	str	r3, [r7, #32]
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
 8003358:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800335c:	4642      	mov	r2, r8
 800335e:	464b      	mov	r3, r9
 8003360:	f04f 0000 	mov.w	r0, #0
 8003364:	f04f 0100 	mov.w	r1, #0
 8003368:	0159      	lsls	r1, r3, #5
 800336a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800336e:	0150      	lsls	r0, r2, #5
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4641      	mov	r1, r8
 8003376:	ebb2 0a01 	subs.w	sl, r2, r1
 800337a:	4649      	mov	r1, r9
 800337c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800338c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003390:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003394:	ebb2 040a 	subs.w	r4, r2, sl
 8003398:	eb63 050b 	sbc.w	r5, r3, fp
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	00eb      	lsls	r3, r5, #3
 80033a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033aa:	00e2      	lsls	r2, r4, #3
 80033ac:	4614      	mov	r4, r2
 80033ae:	461d      	mov	r5, r3
 80033b0:	4643      	mov	r3, r8
 80033b2:	18e3      	adds	r3, r4, r3
 80033b4:	603b      	str	r3, [r7, #0]
 80033b6:	464b      	mov	r3, r9
 80033b8:	eb45 0303 	adc.w	r3, r5, r3
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ca:	4629      	mov	r1, r5
 80033cc:	028b      	lsls	r3, r1, #10
 80033ce:	4621      	mov	r1, r4
 80033d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033d4:	4621      	mov	r1, r4
 80033d6:	028a      	lsls	r2, r1, #10
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033de:	2200      	movs	r2, #0
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	61fa      	str	r2, [r7, #28]
 80033e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e8:	f7fd fc56 	bl	8000c98 <__aeabi_uldivmod>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4613      	mov	r3, r2
 80033f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	3301      	adds	r3, #1
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800340e:	e002      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCC_GetSysClockFreq+0x204>)
 8003412:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003418:	4618      	mov	r0, r3
 800341a:	3750      	adds	r7, #80	; 0x50
 800341c:	46bd      	mov	sp, r7
 800341e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	00f42400 	.word	0x00f42400
 800342c:	007a1200 	.word	0x007a1200

08003430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_RCC_GetHCLKFreq+0x14>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000000 	.word	0x20000000

08003448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800344c:	f7ff fff0 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	0a9b      	lsrs	r3, r3, #10
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4903      	ldr	r1, [pc, #12]	; (800346c <HAL_RCC_GetPCLK1Freq+0x24>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40023800 	.word	0x40023800
 800346c:	0800b8c4 	.word	0x0800b8c4

08003470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003474:	f7ff ffdc 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	0b5b      	lsrs	r3, r3, #13
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4903      	ldr	r1, [pc, #12]	; (8003494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800
 8003494:	0800b8c4 	.word	0x0800b8c4

08003498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e03f      	b.n	800352a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fe f80e 	bl	80014e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2224      	movs	r2, #36	; 0x24
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fd7b 	bl	8003fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b08a      	sub	sp, #40	; 0x28
 8003536:	af02      	add	r7, sp, #8
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b20      	cmp	r3, #32
 8003550:	d17c      	bne.n	800364c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_UART_Transmit+0x2c>
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e075      	b.n	800364e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_UART_Transmit+0x3e>
 800356c:	2302      	movs	r3, #2
 800356e:	e06e      	b.n	800364e <HAL_UART_Transmit+0x11c>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2221      	movs	r2, #33	; 0x21
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003586:	f7fe f991 	bl	80018ac <HAL_GetTick>
 800358a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	d108      	bne.n	80035b4 <HAL_UART_Transmit+0x82>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	e003      	b.n	80035bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035c4:	e02a      	b.n	800361c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2180      	movs	r1, #128	; 0x80
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 faf9 	bl	8003bc8 <UART_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e036      	b.n	800364e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	3302      	adds	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	e007      	b.n	800360e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	3301      	adds	r3, #1
 800360c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1cf      	bne.n	80035c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	2140      	movs	r1, #64	; 0x40
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fac9 	bl	8003bc8 <UART_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e006      	b.n	800364e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b0ba      	sub	sp, #232	; 0xe8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003684:	2300      	movs	r3, #0
 8003686:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800369e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_UART_IRQHandler+0x66>
 80036aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fbd3 	bl	8003e62 <UART_Receive_IT>
      return;
 80036bc:	e256      	b.n	8003b6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80de 	beq.w	8003884 <HAL_UART_IRQHandler+0x22c>
 80036c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80d1 	beq.w	8003884 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_UART_IRQHandler+0xae>
 80036ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f043 0201 	orr.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <HAL_UART_IRQHandler+0xd2>
 8003712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f043 0202 	orr.w	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800372a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <HAL_UART_IRQHandler+0xf6>
 8003736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f043 0204 	orr.w	r2, r3, #4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800374e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d011      	beq.n	800377e <HAL_UART_IRQHandler+0x126>
 800375a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d105      	bne.n	8003772 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f043 0208 	orr.w	r2, r3, #8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 81ed 	beq.w	8003b62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_UART_IRQHandler+0x14e>
 8003794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fb5e 	bl	8003e62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <HAL_UART_IRQHandler+0x17a>
 80037ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d04f      	beq.n	8003872 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa66 	bl	8003ca4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d141      	bne.n	800386a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3314      	adds	r3, #20
 80037ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3314      	adds	r3, #20
 800380e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003812:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800381e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800382a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1d9      	bne.n	80037e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	2b00      	cmp	r3, #0
 8003838:	d013      	beq.n	8003862 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	4a7d      	ldr	r2, [pc, #500]	; (8003a34 <HAL_UART_IRQHandler+0x3dc>)
 8003840:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe f9e1 	bl	8001c0e <HAL_DMA_Abort_IT>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800385c:	4610      	mov	r0, r2
 800385e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	e00e      	b.n	8003880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f99a 	bl	8003b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003868:	e00a      	b.n	8003880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f996 	bl	8003b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	e006      	b.n	8003880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f992 	bl	8003b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800387e:	e170      	b.n	8003b62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003880:	bf00      	nop
    return;
 8003882:	e16e      	b.n	8003b62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	2b01      	cmp	r3, #1
 800388a:	f040 814a 	bne.w	8003b22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800388e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8143 	beq.w	8003b22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800389c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 813c 	beq.w	8003b22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b40      	cmp	r3, #64	; 0x40
 80038cc:	f040 80b4 	bne.w	8003a38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8140 	beq.w	8003b66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038ee:	429a      	cmp	r2, r3
 80038f0:	f080 8139 	bcs.w	8003b66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003906:	f000 8088 	beq.w	8003a1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	330c      	adds	r3, #12
 8003932:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003936:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800393a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003942:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800394e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1d9      	bne.n	800390a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3314      	adds	r3, #20
 800395c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3314      	adds	r3, #20
 8003976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800397a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800397e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003982:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800398c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e1      	bne.n	8003956 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3314      	adds	r3, #20
 8003998:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3314      	adds	r3, #20
 80039b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e3      	bne.n	8003992 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	330c      	adds	r3, #12
 80039de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ea:	f023 0310 	bic.w	r3, r3, #16
 80039ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80039fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e3      	bne.n	80039d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe f88a 	bl	8001b2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8c0 	bl	8003bb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a30:	e099      	b.n	8003b66 <HAL_UART_IRQHandler+0x50e>
 8003a32:	bf00      	nop
 8003a34:	08003d6b 	.word	0x08003d6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 808b 	beq.w	8003b6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8086 	beq.w	8003b6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a82:	647a      	str	r2, [r7, #68]	; 0x44
 8003a84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e3      	bne.n	8003a5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3314      	adds	r3, #20
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3314      	adds	r3, #20
 8003ab6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003aba:	633a      	str	r2, [r7, #48]	; 0x30
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e3      	bne.n	8003a96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0310 	bic.w	r3, r3, #16
 8003af2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b00:	61fa      	str	r2, [r7, #28]
 8003b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	69b9      	ldr	r1, [r7, #24]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e3      	bne.n	8003adc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f848 	bl	8003bb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b20:	e023      	b.n	8003b6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_UART_IRQHandler+0x4ea>
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f929 	bl	8003d92 <UART_Transmit_IT>
    return;
 8003b40:	e014      	b.n	8003b6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00e      	beq.n	8003b6c <HAL_UART_IRQHandler+0x514>
 8003b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f969 	bl	8003e32 <UART_EndTransmit_IT>
    return;
 8003b60:	e004      	b.n	8003b6c <HAL_UART_IRQHandler+0x514>
    return;
 8003b62:	bf00      	nop
 8003b64:	e002      	b.n	8003b6c <HAL_UART_IRQHandler+0x514>
      return;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <HAL_UART_IRQHandler+0x514>
      return;
 8003b6a:	bf00      	nop
  }
}
 8003b6c:	37e8      	adds	r7, #232	; 0xe8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop

08003b74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b090      	sub	sp, #64	; 0x40
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd8:	e050      	b.n	8003c7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be0:	d04c      	beq.n	8003c7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003be8:	f7fd fe60 	bl	80018ac <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d241      	bcs.n	8003c7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c18:	637a      	str	r2, [r7, #52]	; 0x34
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e5      	bne.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3314      	adds	r3, #20
 8003c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3314      	adds	r3, #20
 8003c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c4c:	623a      	str	r2, [r7, #32]
 8003c4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	69f9      	ldr	r1, [r7, #28]
 8003c52:	6a3a      	ldr	r2, [r7, #32]
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e5      	bne.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e00f      	b.n	8003c9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4013      	ands	r3, r2
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d09f      	beq.n	8003bda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3740      	adds	r7, #64	; 0x40
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b095      	sub	sp, #84	; 0x54
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ccc:	643a      	str	r2, [r7, #64]	; 0x40
 8003cce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e5      	bne.n	8003cac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3314      	adds	r3, #20
 8003ce6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3314      	adds	r3, #20
 8003cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e5      	bne.n	8003ce0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d119      	bne.n	8003d50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f023 0310 	bic.w	r3, r3, #16
 8003d32:	647b      	str	r3, [r7, #68]	; 0x44
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d3c:	61ba      	str	r2, [r7, #24]
 8003d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6979      	ldr	r1, [r7, #20]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	613b      	str	r3, [r7, #16]
   return(result);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d5e:	bf00      	nop
 8003d60:	3754      	adds	r7, #84	; 0x54
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f7ff ff09 	bl	8003b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b21      	cmp	r3, #33	; 0x21
 8003da4:	d13e      	bne.n	8003e24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dae:	d114      	bne.n	8003dda <UART_Transmit_IT+0x48>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d110      	bne.n	8003dda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dcc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	1c9a      	adds	r2, r3, #2
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	621a      	str	r2, [r3, #32]
 8003dd8:	e008      	b.n	8003dec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	1c59      	adds	r1, r3, #1
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6211      	str	r1, [r2, #32]
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10f      	bne.n	8003e20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e000      	b.n	8003e26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e24:	2302      	movs	r3, #2
  }
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff fe8e 	bl	8003b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b08c      	sub	sp, #48	; 0x30
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b22      	cmp	r3, #34	; 0x22
 8003e74:	f040 80ab 	bne.w	8003fce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e80:	d117      	bne.n	8003eb2 <UART_Receive_IT+0x50>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d113      	bne.n	8003eb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	1c9a      	adds	r2, r3, #2
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
 8003eb0:	e026      	b.n	8003f00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec4:	d007      	beq.n	8003ed6 <UART_Receive_IT+0x74>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <UART_Receive_IT+0x82>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e008      	b.n	8003ef6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d15a      	bne.n	8003fca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0220 	bic.w	r2, r2, #32
 8003f22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d135      	bne.n	8003fc0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	330c      	adds	r3, #12
 8003f60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	613b      	str	r3, [r7, #16]
   return(result);
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f023 0310 	bic.w	r3, r3, #16
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7a:	623a      	str	r2, [r7, #32]
 8003f7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	69f9      	ldr	r1, [r7, #28]
 8003f80:	6a3a      	ldr	r2, [r7, #32]
 8003f82:	e841 2300 	strex	r3, r2, [r1]
 8003f86:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e5      	bne.n	8003f5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d10a      	bne.n	8003fb2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff fdf9 	bl	8003bb0 <HAL_UARTEx_RxEventCallback>
 8003fbe:	e002      	b.n	8003fc6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fde1 	bl	8003b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e002      	b.n	8003fd0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e000      	b.n	8003fd0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
  }
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3730      	adds	r7, #48	; 0x30
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fdc:	b0c0      	sub	sp, #256	; 0x100
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	68d9      	ldr	r1, [r3, #12]
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	ea40 0301 	orr.w	r3, r0, r1
 8004000:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	431a      	orrs	r2, r3
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	431a      	orrs	r2, r3
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004030:	f021 010c 	bic.w	r1, r1, #12
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800403e:	430b      	orrs	r3, r1
 8004040:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004052:	6999      	ldr	r1, [r3, #24]
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	ea40 0301 	orr.w	r3, r0, r1
 800405e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b8f      	ldr	r3, [pc, #572]	; (80042a4 <UART_SetConfig+0x2cc>)
 8004068:	429a      	cmp	r2, r3
 800406a:	d005      	beq.n	8004078 <UART_SetConfig+0xa0>
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b8d      	ldr	r3, [pc, #564]	; (80042a8 <UART_SetConfig+0x2d0>)
 8004074:	429a      	cmp	r2, r3
 8004076:	d104      	bne.n	8004082 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004078:	f7ff f9fa 	bl	8003470 <HAL_RCC_GetPCLK2Freq>
 800407c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004080:	e003      	b.n	800408a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004082:	f7ff f9e1 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 8004086:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004094:	f040 810c 	bne.w	80042b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800409c:	2200      	movs	r2, #0
 800409e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040aa:	4622      	mov	r2, r4
 80040ac:	462b      	mov	r3, r5
 80040ae:	1891      	adds	r1, r2, r2
 80040b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80040b2:	415b      	adcs	r3, r3
 80040b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040ba:	4621      	mov	r1, r4
 80040bc:	eb12 0801 	adds.w	r8, r2, r1
 80040c0:	4629      	mov	r1, r5
 80040c2:	eb43 0901 	adc.w	r9, r3, r1
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040da:	4690      	mov	r8, r2
 80040dc:	4699      	mov	r9, r3
 80040de:	4623      	mov	r3, r4
 80040e0:	eb18 0303 	adds.w	r3, r8, r3
 80040e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040e8:	462b      	mov	r3, r5
 80040ea:	eb49 0303 	adc.w	r3, r9, r3
 80040ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004102:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004106:	460b      	mov	r3, r1
 8004108:	18db      	adds	r3, r3, r3
 800410a:	653b      	str	r3, [r7, #80]	; 0x50
 800410c:	4613      	mov	r3, r2
 800410e:	eb42 0303 	adc.w	r3, r2, r3
 8004112:	657b      	str	r3, [r7, #84]	; 0x54
 8004114:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004118:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800411c:	f7fc fdbc 	bl	8000c98 <__aeabi_uldivmod>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4b61      	ldr	r3, [pc, #388]	; (80042ac <UART_SetConfig+0x2d4>)
 8004126:	fba3 2302 	umull	r2, r3, r3, r2
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	011c      	lsls	r4, r3, #4
 800412e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004132:	2200      	movs	r2, #0
 8004134:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004138:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800413c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004140:	4642      	mov	r2, r8
 8004142:	464b      	mov	r3, r9
 8004144:	1891      	adds	r1, r2, r2
 8004146:	64b9      	str	r1, [r7, #72]	; 0x48
 8004148:	415b      	adcs	r3, r3
 800414a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800414c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004150:	4641      	mov	r1, r8
 8004152:	eb12 0a01 	adds.w	sl, r2, r1
 8004156:	4649      	mov	r1, r9
 8004158:	eb43 0b01 	adc.w	fp, r3, r1
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004168:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800416c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004170:	4692      	mov	sl, r2
 8004172:	469b      	mov	fp, r3
 8004174:	4643      	mov	r3, r8
 8004176:	eb1a 0303 	adds.w	r3, sl, r3
 800417a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800417e:	464b      	mov	r3, r9
 8004180:	eb4b 0303 	adc.w	r3, fp, r3
 8004184:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004194:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004198:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800419c:	460b      	mov	r3, r1
 800419e:	18db      	adds	r3, r3, r3
 80041a0:	643b      	str	r3, [r7, #64]	; 0x40
 80041a2:	4613      	mov	r3, r2
 80041a4:	eb42 0303 	adc.w	r3, r2, r3
 80041a8:	647b      	str	r3, [r7, #68]	; 0x44
 80041aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041b2:	f7fc fd71 	bl	8000c98 <__aeabi_uldivmod>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4611      	mov	r1, r2
 80041bc:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <UART_SetConfig+0x2d4>)
 80041be:	fba3 2301 	umull	r2, r3, r3, r1
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	2264      	movs	r2, #100	; 0x64
 80041c6:	fb02 f303 	mul.w	r3, r2, r3
 80041ca:	1acb      	subs	r3, r1, r3
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041d2:	4b36      	ldr	r3, [pc, #216]	; (80042ac <UART_SetConfig+0x2d4>)
 80041d4:	fba3 2302 	umull	r2, r3, r3, r2
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041e0:	441c      	add	r4, r3
 80041e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041f4:	4642      	mov	r2, r8
 80041f6:	464b      	mov	r3, r9
 80041f8:	1891      	adds	r1, r2, r2
 80041fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80041fc:	415b      	adcs	r3, r3
 80041fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004200:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004204:	4641      	mov	r1, r8
 8004206:	1851      	adds	r1, r2, r1
 8004208:	6339      	str	r1, [r7, #48]	; 0x30
 800420a:	4649      	mov	r1, r9
 800420c:	414b      	adcs	r3, r1
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800421c:	4659      	mov	r1, fp
 800421e:	00cb      	lsls	r3, r1, #3
 8004220:	4651      	mov	r1, sl
 8004222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004226:	4651      	mov	r1, sl
 8004228:	00ca      	lsls	r2, r1, #3
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	4603      	mov	r3, r0
 8004230:	4642      	mov	r2, r8
 8004232:	189b      	adds	r3, r3, r2
 8004234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004238:	464b      	mov	r3, r9
 800423a:	460a      	mov	r2, r1
 800423c:	eb42 0303 	adc.w	r3, r2, r3
 8004240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004250:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004254:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004258:	460b      	mov	r3, r1
 800425a:	18db      	adds	r3, r3, r3
 800425c:	62bb      	str	r3, [r7, #40]	; 0x28
 800425e:	4613      	mov	r3, r2
 8004260:	eb42 0303 	adc.w	r3, r2, r3
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004266:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800426a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800426e:	f7fc fd13 	bl	8000c98 <__aeabi_uldivmod>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <UART_SetConfig+0x2d4>)
 8004278:	fba3 1302 	umull	r1, r3, r3, r2
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	2164      	movs	r1, #100	; 0x64
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	3332      	adds	r3, #50	; 0x32
 800428a:	4a08      	ldr	r2, [pc, #32]	; (80042ac <UART_SetConfig+0x2d4>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f003 0207 	and.w	r2, r3, #7
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4422      	add	r2, r4
 800429e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042a0:	e106      	b.n	80044b0 <UART_SetConfig+0x4d8>
 80042a2:	bf00      	nop
 80042a4:	40011000 	.word	0x40011000
 80042a8:	40011400 	.word	0x40011400
 80042ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042c2:	4642      	mov	r2, r8
 80042c4:	464b      	mov	r3, r9
 80042c6:	1891      	adds	r1, r2, r2
 80042c8:	6239      	str	r1, [r7, #32]
 80042ca:	415b      	adcs	r3, r3
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
 80042ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042d2:	4641      	mov	r1, r8
 80042d4:	1854      	adds	r4, r2, r1
 80042d6:	4649      	mov	r1, r9
 80042d8:	eb43 0501 	adc.w	r5, r3, r1
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	00eb      	lsls	r3, r5, #3
 80042e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ea:	00e2      	lsls	r2, r4, #3
 80042ec:	4614      	mov	r4, r2
 80042ee:	461d      	mov	r5, r3
 80042f0:	4643      	mov	r3, r8
 80042f2:	18e3      	adds	r3, r4, r3
 80042f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042f8:	464b      	mov	r3, r9
 80042fa:	eb45 0303 	adc.w	r3, r5, r3
 80042fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800430e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800431e:	4629      	mov	r1, r5
 8004320:	008b      	lsls	r3, r1, #2
 8004322:	4621      	mov	r1, r4
 8004324:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004328:	4621      	mov	r1, r4
 800432a:	008a      	lsls	r2, r1, #2
 800432c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004330:	f7fc fcb2 	bl	8000c98 <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4b60      	ldr	r3, [pc, #384]	; (80044bc <UART_SetConfig+0x4e4>)
 800433a:	fba3 2302 	umull	r2, r3, r3, r2
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	011c      	lsls	r4, r3, #4
 8004342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800434c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004350:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	1891      	adds	r1, r2, r2
 800435a:	61b9      	str	r1, [r7, #24]
 800435c:	415b      	adcs	r3, r3
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004364:	4641      	mov	r1, r8
 8004366:	1851      	adds	r1, r2, r1
 8004368:	6139      	str	r1, [r7, #16]
 800436a:	4649      	mov	r1, r9
 800436c:	414b      	adcs	r3, r1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800437c:	4659      	mov	r1, fp
 800437e:	00cb      	lsls	r3, r1, #3
 8004380:	4651      	mov	r1, sl
 8004382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004386:	4651      	mov	r1, sl
 8004388:	00ca      	lsls	r2, r1, #3
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	4603      	mov	r3, r0
 8004390:	4642      	mov	r2, r8
 8004392:	189b      	adds	r3, r3, r2
 8004394:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004398:	464b      	mov	r3, r9
 800439a:	460a      	mov	r2, r1
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043bc:	4649      	mov	r1, r9
 80043be:	008b      	lsls	r3, r1, #2
 80043c0:	4641      	mov	r1, r8
 80043c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043c6:	4641      	mov	r1, r8
 80043c8:	008a      	lsls	r2, r1, #2
 80043ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043ce:	f7fc fc63 	bl	8000c98 <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	4b38      	ldr	r3, [pc, #224]	; (80044bc <UART_SetConfig+0x4e4>)
 80043da:	fba3 2301 	umull	r2, r3, r3, r1
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2264      	movs	r2, #100	; 0x64
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	1acb      	subs	r3, r1, r3
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	3332      	adds	r3, #50	; 0x32
 80043ec:	4a33      	ldr	r2, [pc, #204]	; (80044bc <UART_SetConfig+0x4e4>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f8:	441c      	add	r4, r3
 80043fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043fe:	2200      	movs	r2, #0
 8004400:	673b      	str	r3, [r7, #112]	; 0x70
 8004402:	677a      	str	r2, [r7, #116]	; 0x74
 8004404:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004408:	4642      	mov	r2, r8
 800440a:	464b      	mov	r3, r9
 800440c:	1891      	adds	r1, r2, r2
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	415b      	adcs	r3, r3
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004418:	4641      	mov	r1, r8
 800441a:	1851      	adds	r1, r2, r1
 800441c:	6039      	str	r1, [r7, #0]
 800441e:	4649      	mov	r1, r9
 8004420:	414b      	adcs	r3, r1
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004430:	4659      	mov	r1, fp
 8004432:	00cb      	lsls	r3, r1, #3
 8004434:	4651      	mov	r1, sl
 8004436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800443a:	4651      	mov	r1, sl
 800443c:	00ca      	lsls	r2, r1, #3
 800443e:	4610      	mov	r0, r2
 8004440:	4619      	mov	r1, r3
 8004442:	4603      	mov	r3, r0
 8004444:	4642      	mov	r2, r8
 8004446:	189b      	adds	r3, r3, r2
 8004448:	66bb      	str	r3, [r7, #104]	; 0x68
 800444a:	464b      	mov	r3, r9
 800444c:	460a      	mov	r2, r1
 800444e:	eb42 0303 	adc.w	r3, r2, r3
 8004452:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	663b      	str	r3, [r7, #96]	; 0x60
 800445e:	667a      	str	r2, [r7, #100]	; 0x64
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800446c:	4649      	mov	r1, r9
 800446e:	008b      	lsls	r3, r1, #2
 8004470:	4641      	mov	r1, r8
 8004472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004476:	4641      	mov	r1, r8
 8004478:	008a      	lsls	r2, r1, #2
 800447a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800447e:	f7fc fc0b 	bl	8000c98 <__aeabi_uldivmod>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <UART_SetConfig+0x4e4>)
 8004488:	fba3 1302 	umull	r1, r3, r3, r2
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	2164      	movs	r1, #100	; 0x64
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	3332      	adds	r3, #50	; 0x32
 800449a:	4a08      	ldr	r2, [pc, #32]	; (80044bc <UART_SetConfig+0x4e4>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	f003 020f 	and.w	r2, r3, #15
 80044a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4422      	add	r2, r4
 80044ae:	609a      	str	r2, [r3, #8]
}
 80044b0:	bf00      	nop
 80044b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044b6:	46bd      	mov	sp, r7
 80044b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044bc:	51eb851f 	.word	0x51eb851f

080044c0 <MPU6050_Read_Accel>:
    }
    return 1;
}

void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af04      	add	r7, sp, #16
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 80044ca:	2364      	movs	r3, #100	; 0x64
 80044cc:	9302      	str	r3, [sp, #8]
 80044ce:	2306      	movs	r3, #6
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	f107 0308 	add.w	r3, r7, #8
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	2301      	movs	r3, #1
 80044da:	223b      	movs	r2, #59	; 0x3b
 80044dc:	21d0      	movs	r1, #208	; 0xd0
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fd fe98 	bl	8002214 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80044e4:	7a3b      	ldrb	r3, [r7, #8]
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	b21a      	sxth	r2, r3
 80044ea:	7a7b      	ldrb	r3, [r7, #9]
 80044ec:	b21b      	sxth	r3, r3
 80044ee:	4313      	orrs	r3, r2
 80044f0:	b21a      	sxth	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80044f6:	7abb      	ldrb	r3, [r7, #10]
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	b21a      	sxth	r2, r3
 80044fc:	7afb      	ldrb	r3, [r7, #11]
 80044fe:	b21b      	sxth	r3, r3
 8004500:	4313      	orrs	r3, r2
 8004502:	b21a      	sxth	r2, r3
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8004508:	7b3b      	ldrb	r3, [r7, #12]
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	b21a      	sxth	r2, r3
 800450e:	7b7b      	ldrb	r3, [r7, #13]
 8004510:	b21b      	sxth	r3, r3
 8004512:	4313      	orrs	r3, r2
 8004514:	b21a      	sxth	r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004520:	4618      	mov	r0, r3
 8004522:	f7fc f807 	bl	8000534 <__aeabi_i2d>
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	4b19      	ldr	r3, [pc, #100]	; (8004590 <MPU6050_Read_Accel+0xd0>)
 800452c:	f7fc f996 	bl	800085c <__aeabi_ddiv>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	6839      	ldr	r1, [r7, #0]
 8004536:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004540:	4618      	mov	r0, r3
 8004542:	f7fb fff7 	bl	8000534 <__aeabi_i2d>
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	4b11      	ldr	r3, [pc, #68]	; (8004590 <MPU6050_Read_Accel+0xd0>)
 800454c:	f7fc f986 	bl	800085c <__aeabi_ddiv>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004560:	4618      	mov	r0, r3
 8004562:	f7fb ffe7 	bl	8000534 <__aeabi_i2d>
 8004566:	a308      	add	r3, pc, #32	; (adr r3, 8004588 <MPU6050_Read_Accel+0xc8>)
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f7fc f976 	bl	800085c <__aeabi_ddiv>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	6839      	ldr	r1, [r7, #0]
 8004576:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	f3af 8000 	nop.w
 8004588:	00000000 	.word	0x00000000
 800458c:	40cc2900 	.word	0x40cc2900
 8004590:	40d00000 	.word	0x40d00000

08004594 <__NVIC_SetPriority>:
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	6039      	str	r1, [r7, #0]
 800459e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	db0a      	blt.n	80045be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	490c      	ldr	r1, [pc, #48]	; (80045e0 <__NVIC_SetPriority+0x4c>)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	0112      	lsls	r2, r2, #4
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	440b      	add	r3, r1
 80045b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80045bc:	e00a      	b.n	80045d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	4908      	ldr	r1, [pc, #32]	; (80045e4 <__NVIC_SetPriority+0x50>)
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	3b04      	subs	r3, #4
 80045cc:	0112      	lsls	r2, r2, #4
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	440b      	add	r3, r1
 80045d2:	761a      	strb	r2, [r3, #24]
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000e100 	.word	0xe000e100
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045ec:	2100      	movs	r1, #0
 80045ee:	f06f 0004 	mvn.w	r0, #4
 80045f2:	f7ff ffcf 	bl	8004594 <__NVIC_SetPriority>
#endif
}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004602:	f3ef 8305 	mrs	r3, IPSR
 8004606:	603b      	str	r3, [r7, #0]
  return(result);
 8004608:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800460e:	f06f 0305 	mvn.w	r3, #5
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	e00c      	b.n	8004630 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <osKernelInitialize+0x44>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d105      	bne.n	800462a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800461e:	4b08      	ldr	r3, [pc, #32]	; (8004640 <osKernelInitialize+0x44>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004624:	2300      	movs	r3, #0
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	e002      	b.n	8004630 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800462a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800462e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004630:	687b      	ldr	r3, [r7, #4]
}
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	2000029c 	.word	0x2000029c

08004644 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800464a:	f3ef 8305 	mrs	r3, IPSR
 800464e:	603b      	str	r3, [r7, #0]
  return(result);
 8004650:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004656:	f06f 0305 	mvn.w	r3, #5
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	e010      	b.n	8004680 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <osKernelStart+0x48>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d109      	bne.n	800467a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004666:	f7ff ffbf 	bl	80045e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800466a:	4b08      	ldr	r3, [pc, #32]	; (800468c <osKernelStart+0x48>)
 800466c:	2202      	movs	r2, #2
 800466e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004670:	f001 f816 	bl	80056a0 <vTaskStartScheduler>
      stat = osOK;
 8004674:	2300      	movs	r3, #0
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	e002      	b.n	8004680 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800467a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800467e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004680:	687b      	ldr	r3, [r7, #4]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	2000029c 	.word	0x2000029c

08004690 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b08e      	sub	sp, #56	; 0x38
 8004694:	af04      	add	r7, sp, #16
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800469c:	2300      	movs	r3, #0
 800469e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a0:	f3ef 8305 	mrs	r3, IPSR
 80046a4:	617b      	str	r3, [r7, #20]
  return(result);
 80046a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d17e      	bne.n	80047aa <osThreadNew+0x11a>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d07b      	beq.n	80047aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046b6:	2318      	movs	r3, #24
 80046b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80046be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d045      	beq.n	8004756 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <osThreadNew+0x48>
        name = attr->name;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <osThreadNew+0x6e>
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2b38      	cmp	r3, #56	; 0x38
 80046f0:	d805      	bhi.n	80046fe <osThreadNew+0x6e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <osThreadNew+0x72>
        return (NULL);
 80046fe:	2300      	movs	r3, #0
 8004700:	e054      	b.n	80047ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	089b      	lsrs	r3, r3, #2
 8004710:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00e      	beq.n	8004738 <osThreadNew+0xa8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b5b      	cmp	r3, #91	; 0x5b
 8004720:	d90a      	bls.n	8004738 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004726:	2b00      	cmp	r3, #0
 8004728:	d006      	beq.n	8004738 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <osThreadNew+0xa8>
        mem = 1;
 8004732:	2301      	movs	r3, #1
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	e010      	b.n	800475a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10c      	bne.n	800475a <osThreadNew+0xca>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d108      	bne.n	800475a <osThreadNew+0xca>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <osThreadNew+0xca>
          mem = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e001      	b.n	800475a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d110      	bne.n	8004782 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004768:	9202      	str	r2, [sp, #8]
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6a3a      	ldr	r2, [r7, #32]
 8004774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fdf0 	bl	800535c <xTaskCreateStatic>
 800477c:	4603      	mov	r3, r0
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	e013      	b.n	80047aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d110      	bne.n	80047aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	b29a      	uxth	r2, r3
 800478c:	f107 0310 	add.w	r3, r7, #16
 8004790:	9301      	str	r3, [sp, #4]
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fe3b 	bl	8005416 <xTaskCreate>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d001      	beq.n	80047aa <osThreadNew+0x11a>
            hTask = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047aa:	693b      	ldr	r3, [r7, #16]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3728      	adds	r7, #40	; 0x28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80047c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4a06      	ldr	r2, [pc, #24]	; (80047e4 <vApplicationGetIdleTaskMemory+0x30>)
 80047ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2280      	movs	r2, #128	; 0x80
 80047d0:	601a      	str	r2, [r3, #0]
}
 80047d2:	bf00      	nop
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	200002a0 	.word	0x200002a0
 80047e4:	200002fc 	.word	0x200002fc

080047e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a07      	ldr	r2, [pc, #28]	; (8004814 <vApplicationGetTimerTaskMemory+0x2c>)
 80047f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4a06      	ldr	r2, [pc, #24]	; (8004818 <vApplicationGetTimerTaskMemory+0x30>)
 80047fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004806:	601a      	str	r2, [r3, #0]
}
 8004808:	bf00      	nop
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	200004fc 	.word	0x200004fc
 8004818:	20000558 	.word	0x20000558

0800481c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f103 0208 	add.w	r2, r3, #8
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004834:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f103 0208 	add.w	r2, r3, #8
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f103 0208 	add.w	r2, r3, #8
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	601a      	str	r2, [r3, #0]
}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048be:	b480      	push	{r7}
 80048c0:	b085      	sub	sp, #20
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d4:	d103      	bne.n	80048de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e00c      	b.n	80048f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3308      	adds	r3, #8
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e002      	b.n	80048ec <vListInsert+0x2e>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d2f6      	bcs.n	80048e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	601a      	str	r2, [r3, #0]
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6892      	ldr	r2, [r2, #8]
 8004946:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6852      	ldr	r2, [r2, #4]
 8004950:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	d103      	bne.n	8004964 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	1e5a      	subs	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049ae:	f002 f819 	bl	80069e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	68f9      	ldr	r1, [r7, #12]
 80049bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	441a      	add	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049de:	3b01      	subs	r3, #1
 80049e0:	68f9      	ldr	r1, [r7, #12]
 80049e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	441a      	add	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	22ff      	movs	r2, #255	; 0xff
 80049f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	22ff      	movs	r2, #255	; 0xff
 80049fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d114      	bne.n	8004a2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01a      	beq.n	8004a42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3310      	adds	r3, #16
 8004a10:	4618      	mov	r0, r3
 8004a12:	f001 f8cf 	bl	8005bb4 <xTaskRemoveFromEventList>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d012      	beq.n	8004a42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <xQueueGenericReset+0xcc>)
 8004a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	e009      	b.n	8004a42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3310      	adds	r3, #16
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fef2 	bl	800481c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3324      	adds	r3, #36	; 0x24
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff feed 	bl	800481c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a42:	f001 ffff 	bl	8006a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a46:	2301      	movs	r3, #1
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08e      	sub	sp, #56	; 0x38
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <xQueueGenericCreateStatic+0x52>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <xQueueGenericCreateStatic+0x56>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <xQueueGenericCreateStatic+0x58>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	623b      	str	r3, [r7, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <xQueueGenericCreateStatic+0x7e>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <xQueueGenericCreateStatic+0x82>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <xQueueGenericCreateStatic+0x84>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10a      	bne.n	8004af2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	61fb      	str	r3, [r7, #28]
}
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004af2:	2350      	movs	r3, #80	; 0x50
 8004af4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b50      	cmp	r3, #80	; 0x50
 8004afa:	d00a      	beq.n	8004b12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	61bb      	str	r3, [r7, #24]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f805 	bl	8004b44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3730      	adds	r7, #48	; 0x30
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d103      	bne.n	8004b60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e002      	b.n	8004b66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b72:	2101      	movs	r1, #1
 8004b74:	69b8      	ldr	r0, [r7, #24]
 8004b76:	f7ff ff05 	bl	8004984 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	78fa      	ldrb	r2, [r7, #3]
 8004b7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08e      	sub	sp, #56	; 0x38
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueGenericSend+0x32>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d103      	bne.n	8004bcc <xQueueGenericSend+0x40>
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <xQueueGenericSend+0x44>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <xQueueGenericSend+0x46>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10a      	bne.n	8004bec <xQueueGenericSend+0x60>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d103      	bne.n	8004bfa <xQueueGenericSend+0x6e>
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <xQueueGenericSend+0x72>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <xQueueGenericSend+0x74>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <xQueueGenericSend+0x8e>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	623b      	str	r3, [r7, #32]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c1a:	f001 f989 	bl	8005f30 <xTaskGetSchedulerState>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <xQueueGenericSend+0x9e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <xQueueGenericSend+0xa2>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <xQueueGenericSend+0xa4>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10a      	bne.n	8004c4a <xQueueGenericSend+0xbe>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	61fb      	str	r3, [r7, #28]
}
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c4a:	f001 fecb 	bl	80069e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d302      	bcc.n	8004c60 <xQueueGenericSend+0xd4>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d129      	bne.n	8004cb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c66:	f000 fa0b 	bl	8005080 <prvCopyDataToQueue>
 8004c6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d010      	beq.n	8004c96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	3324      	adds	r3, #36	; 0x24
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 ff9b 	bl	8005bb4 <xTaskRemoveFromEventList>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d013      	beq.n	8004cac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c84:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <xQueueGenericSend+0x1f8>)
 8004c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	e00a      	b.n	8004cac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c9c:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <xQueueGenericSend+0x1f8>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cac:	f001 feca 	bl	8006a44 <vPortExitCritical>
				return pdPASS;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e063      	b.n	8004d7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d103      	bne.n	8004cc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cba:	f001 fec3 	bl	8006a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e05c      	b.n	8004d7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cc8:	f107 0314 	add.w	r3, r7, #20
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 ffd5 	bl	8005c7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cd6:	f001 feb5 	bl	8006a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cda:	f000 fd47 	bl	800576c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cde:	f001 fe81 	bl	80069e4 <vPortEnterCritical>
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ce8:	b25b      	sxtb	r3, r3
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cee:	d103      	bne.n	8004cf8 <xQueueGenericSend+0x16c>
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cfe:	b25b      	sxtb	r3, r3
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d04:	d103      	bne.n	8004d0e <xQueueGenericSend+0x182>
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d0e:	f001 fe99 	bl	8006a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d12:	1d3a      	adds	r2, r7, #4
 8004d14:	f107 0314 	add.w	r3, r7, #20
 8004d18:	4611      	mov	r1, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 ffc4 	bl	8005ca8 <xTaskCheckForTimeOut>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d124      	bne.n	8004d70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d28:	f000 faa2 	bl	8005270 <prvIsQueueFull>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d018      	beq.n	8004d64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	3310      	adds	r3, #16
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	4611      	mov	r1, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 feea 	bl	8005b14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d42:	f000 fa2d 	bl	80051a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d46:	f000 fd1f 	bl	8005788 <xTaskResumeAll>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f47f af7c 	bne.w	8004c4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d52:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <xQueueGenericSend+0x1f8>)
 8004d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	e772      	b.n	8004c4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d66:	f000 fa1b 	bl	80051a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d6a:	f000 fd0d 	bl	8005788 <xTaskResumeAll>
 8004d6e:	e76c      	b.n	8004c4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d72:	f000 fa15 	bl	80051a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d76:	f000 fd07 	bl	8005788 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3738      	adds	r7, #56	; 0x38
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	e000ed04 	.word	0xe000ed04

08004d88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b090      	sub	sp, #64	; 0x40
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <xQueueGenericSendFromISR+0x3c>
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <xQueueGenericSendFromISR+0x40>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <xQueueGenericSendFromISR+0x42>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d103      	bne.n	8004df2 <xQueueGenericSendFromISR+0x6a>
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <xQueueGenericSendFromISR+0x6e>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <xQueueGenericSendFromISR+0x70>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	623b      	str	r3, [r7, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e12:	f001 fec9 	bl	8006ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e16:	f3ef 8211 	mrs	r2, BASEPRI
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	61fa      	str	r2, [r7, #28]
 8004e2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d302      	bcc.n	8004e44 <xQueueGenericSendFromISR+0xbc>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d12f      	bne.n	8004ea4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e5a:	f000 f911 	bl	8005080 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e66:	d112      	bne.n	8004e8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d016      	beq.n	8004e9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	3324      	adds	r3, #36	; 0x24
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fe9d 	bl	8005bb4 <xTaskRemoveFromEventList>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00e      	beq.n	8004e9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e007      	b.n	8004e9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e92:	3301      	adds	r3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	b25a      	sxtb	r2, r3
 8004e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004ea2:	e001      	b.n	8004ea8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eaa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004eb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3740      	adds	r7, #64	; 0x40
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08c      	sub	sp, #48	; 0x30
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <xQueueReceive+0x30>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	623b      	str	r3, [r7, #32]
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <xQueueReceive+0x3e>
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <xQueueReceive+0x42>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <xQueueReceive+0x44>
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <xQueueReceive+0x5e>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	61fb      	str	r3, [r7, #28]
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f1e:	f001 f807 	bl	8005f30 <xTaskGetSchedulerState>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d102      	bne.n	8004f2e <xQueueReceive+0x6e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <xQueueReceive+0x72>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <xQueueReceive+0x74>
 8004f32:	2300      	movs	r3, #0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <xQueueReceive+0x8e>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	61bb      	str	r3, [r7, #24]
}
 8004f4a:	bf00      	nop
 8004f4c:	e7fe      	b.n	8004f4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f4e:	f001 fd49 	bl	80069e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01f      	beq.n	8004f9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f62:	f000 f8f7 	bl	8005154 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	1e5a      	subs	r2, r3, #1
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00f      	beq.n	8004f96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	3310      	adds	r3, #16
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fe1a 	bl	8005bb4 <xTaskRemoveFromEventList>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f86:	4b3d      	ldr	r3, [pc, #244]	; (800507c <xQueueReceive+0x1bc>)
 8004f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f96:	f001 fd55 	bl	8006a44 <vPortExitCritical>
				return pdPASS;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e069      	b.n	8005072 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d103      	bne.n	8004fac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fa4:	f001 fd4e 	bl	8006a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e062      	b.n	8005072 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fb2:	f107 0310 	add.w	r3, r7, #16
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fe60 	bl	8005c7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fc0:	f001 fd40 	bl	8006a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fc4:	f000 fbd2 	bl	800576c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fc8:	f001 fd0c 	bl	80069e4 <vPortEnterCritical>
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fd2:	b25b      	sxtb	r3, r3
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fd8:	d103      	bne.n	8004fe2 <xQueueReceive+0x122>
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe8:	b25b      	sxtb	r3, r3
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fee:	d103      	bne.n	8004ff8 <xQueueReceive+0x138>
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ff8:	f001 fd24 	bl	8006a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ffc:	1d3a      	adds	r2, r7, #4
 8004ffe:	f107 0310 	add.w	r3, r7, #16
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fe4f 	bl	8005ca8 <xTaskCheckForTimeOut>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d123      	bne.n	8005058 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005012:	f000 f917 	bl	8005244 <prvIsQueueEmpty>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d017      	beq.n	800504c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	3324      	adds	r3, #36	; 0x24
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	4611      	mov	r1, r2
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fd75 	bl	8005b14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800502a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800502c:	f000 f8b8 	bl	80051a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005030:	f000 fbaa 	bl	8005788 <xTaskResumeAll>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d189      	bne.n	8004f4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800503a:	4b10      	ldr	r3, [pc, #64]	; (800507c <xQueueReceive+0x1bc>)
 800503c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	e780      	b.n	8004f4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800504c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800504e:	f000 f8a7 	bl	80051a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005052:	f000 fb99 	bl	8005788 <xTaskResumeAll>
 8005056:	e77a      	b.n	8004f4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800505a:	f000 f8a1 	bl	80051a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800505e:	f000 fb93 	bl	8005788 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005064:	f000 f8ee 	bl	8005244 <prvIsQueueEmpty>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	f43f af6f 	beq.w	8004f4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005070:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005072:	4618      	mov	r0, r3
 8005074:	3730      	adds	r7, #48	; 0x30
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	e000ed04 	.word	0xe000ed04

08005080 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10d      	bne.n	80050ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d14d      	bne.n	8005142 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 ff5e 	bl	8005f6c <xTaskPriorityDisinherit>
 80050b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	609a      	str	r2, [r3, #8]
 80050b8:	e043      	b.n	8005142 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d119      	bne.n	80050f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6858      	ldr	r0, [r3, #4]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	461a      	mov	r2, r3
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	f002 ffb1 	bl	8008032 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	441a      	add	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d32b      	bcc.n	8005142 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	605a      	str	r2, [r3, #4]
 80050f2:	e026      	b.n	8005142 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68d8      	ldr	r0, [r3, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	461a      	mov	r2, r3
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	f002 ff97 	bl	8008032 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	425b      	negs	r3, r3
 800510e:	441a      	add	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d207      	bcs.n	8005130 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	425b      	negs	r3, r3
 800512a:	441a      	add	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d105      	bne.n	8005142 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	3b01      	subs	r3, #1
 8005140:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800514a:	697b      	ldr	r3, [r7, #20]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d018      	beq.n	8005198 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	441a      	add	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	429a      	cmp	r2, r3
 800517e:	d303      	bcc.n	8005188 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68d9      	ldr	r1, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	461a      	mov	r2, r3
 8005192:	6838      	ldr	r0, [r7, #0]
 8005194:	f002 ff4d 	bl	8008032 <memcpy>
	}
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051a8:	f001 fc1c 	bl	80069e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051b4:	e011      	b.n	80051da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d012      	beq.n	80051e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3324      	adds	r3, #36	; 0x24
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fcf6 	bl	8005bb4 <xTaskRemoveFromEventList>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051ce:	f000 fdcd 	bl	8005d6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	dce9      	bgt.n	80051b6 <prvUnlockQueue+0x16>
 80051e2:	e000      	b.n	80051e6 <prvUnlockQueue+0x46>
					break;
 80051e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	22ff      	movs	r2, #255	; 0xff
 80051ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80051ee:	f001 fc29 	bl	8006a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051f2:	f001 fbf7 	bl	80069e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051fe:	e011      	b.n	8005224 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d012      	beq.n	800522e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3310      	adds	r3, #16
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fcd1 	bl	8005bb4 <xTaskRemoveFromEventList>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005218:	f000 fda8 	bl	8005d6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800521c:	7bbb      	ldrb	r3, [r7, #14]
 800521e:	3b01      	subs	r3, #1
 8005220:	b2db      	uxtb	r3, r3
 8005222:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005228:	2b00      	cmp	r3, #0
 800522a:	dce9      	bgt.n	8005200 <prvUnlockQueue+0x60>
 800522c:	e000      	b.n	8005230 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800522e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	22ff      	movs	r2, #255	; 0xff
 8005234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005238:	f001 fc04 	bl	8006a44 <vPortExitCritical>
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800524c:	f001 fbca 	bl	80069e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005258:	2301      	movs	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e001      	b.n	8005262 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005262:	f001 fbef 	bl	8006a44 <vPortExitCritical>

	return xReturn;
 8005266:	68fb      	ldr	r3, [r7, #12]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005278:	f001 fbb4 	bl	80069e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	429a      	cmp	r2, r3
 8005286:	d102      	bne.n	800528e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005288:	2301      	movs	r3, #1
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e001      	b.n	8005292 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005292:	f001 fbd7 	bl	8006a44 <vPortExitCritical>

	return xReturn;
 8005296:	68fb      	ldr	r3, [r7, #12]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e014      	b.n	80052da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052b0:	4a0f      	ldr	r2, [pc, #60]	; (80052f0 <vQueueAddToRegistry+0x50>)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10b      	bne.n	80052d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052bc:	490c      	ldr	r1, [pc, #48]	; (80052f0 <vQueueAddToRegistry+0x50>)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052c6:	4a0a      	ldr	r2, [pc, #40]	; (80052f0 <vQueueAddToRegistry+0x50>)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	4413      	add	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052d2:	e006      	b.n	80052e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3301      	adds	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b07      	cmp	r3, #7
 80052de:	d9e7      	bls.n	80052b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000958 	.word	0x20000958

080052f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005304:	f001 fb6e 	bl	80069e4 <vPortEnterCritical>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800530e:	b25b      	sxtb	r3, r3
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005314:	d103      	bne.n	800531e <vQueueWaitForMessageRestricted+0x2a>
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005324:	b25b      	sxtb	r3, r3
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800532a:	d103      	bne.n	8005334 <vQueueWaitForMessageRestricted+0x40>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005334:	f001 fb86 	bl	8006a44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d106      	bne.n	800534e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	3324      	adds	r3, #36	; 0x24
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fc07 	bl	8005b5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800534e:	6978      	ldr	r0, [r7, #20]
 8005350:	f7ff ff26 	bl	80051a0 <prvUnlockQueue>
	}
 8005354:	bf00      	nop
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08e      	sub	sp, #56	; 0x38
 8005360:	af04      	add	r7, sp, #16
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	623b      	str	r3, [r7, #32]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	61fb      	str	r3, [r7, #28]
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053a2:	235c      	movs	r3, #92	; 0x5c
 80053a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b5c      	cmp	r3, #92	; 0x5c
 80053aa:	d00a      	beq.n	80053c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	61bb      	str	r3, [r7, #24]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01e      	beq.n	8005408 <xTaskCreateStatic+0xac>
 80053ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01b      	beq.n	8005408 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053e2:	2300      	movs	r3, #0
 80053e4:	9303      	str	r3, [sp, #12]
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	9302      	str	r3, [sp, #8]
 80053ea:	f107 0314 	add.w	r3, r7, #20
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f850 	bl	80054a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005402:	f000 f8dd 	bl	80055c0 <prvAddNewTaskToReadyList>
 8005406:	e001      	b.n	800540c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800540c:	697b      	ldr	r3, [r7, #20]
	}
 800540e:	4618      	mov	r0, r3
 8005410:	3728      	adds	r7, #40	; 0x28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005416:	b580      	push	{r7, lr}
 8005418:	b08c      	sub	sp, #48	; 0x30
 800541a:	af04      	add	r7, sp, #16
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4618      	mov	r0, r3
 800542c:	f001 fbfc 	bl	8006c28 <pvPortMalloc>
 8005430:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00e      	beq.n	8005456 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005438:	205c      	movs	r0, #92	; 0x5c
 800543a:	f001 fbf5 	bl	8006c28 <pvPortMalloc>
 800543e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
 800544c:	e005      	b.n	800545a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800544e:	6978      	ldr	r0, [r7, #20]
 8005450:	f001 fcb6 	bl	8006dc0 <vPortFree>
 8005454:	e001      	b.n	800545a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d017      	beq.n	8005490 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	2300      	movs	r3, #0
 800546c:	9303      	str	r3, [sp, #12]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	9302      	str	r3, [sp, #8]
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f80e 	bl	80054a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005484:	69f8      	ldr	r0, [r7, #28]
 8005486:	f000 f89b 	bl	80055c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800548a:	2301      	movs	r3, #1
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	e002      	b.n	8005496 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005494:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005496:	69bb      	ldr	r3, [r7, #24]
	}
 8005498:	4618      	mov	r0, r3
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	461a      	mov	r2, r3
 80054b8:	21a5      	movs	r1, #165	; 0xa5
 80054ba:	f002 fd3a 	bl	8007f32 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054c8:	3b01      	subs	r3, #1
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f023 0307 	bic.w	r3, r3, #7
 80054d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	617b      	str	r3, [r7, #20]
}
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01f      	beq.n	800553e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054fe:	2300      	movs	r3, #0
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	e012      	b.n	800552a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	7819      	ldrb	r1, [r3, #0]
 800550c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	3334      	adds	r3, #52	; 0x34
 8005514:	460a      	mov	r2, r1
 8005516:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	4413      	add	r3, r2
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	3301      	adds	r3, #1
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	2b0f      	cmp	r3, #15
 800552e:	d9e9      	bls.n	8005504 <prvInitialiseNewTask+0x64>
 8005530:	e000      	b.n	8005534 <prvInitialiseNewTask+0x94>
			{
				break;
 8005532:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800553c:	e003      	b.n	8005546 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	2b37      	cmp	r3, #55	; 0x37
 800554a:	d901      	bls.n	8005550 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800554c:	2337      	movs	r3, #55	; 0x37
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005554:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800555a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	2200      	movs	r2, #0
 8005560:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	3304      	adds	r3, #4
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff f978 	bl	800485c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	3318      	adds	r3, #24
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff f973 	bl	800485c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	2200      	movs	r2, #0
 8005590:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	68f9      	ldr	r1, [r7, #12]
 800559e:	69b8      	ldr	r0, [r7, #24]
 80055a0:	f001 f8f4 	bl	800678c <pxPortInitialiseStack>
 80055a4:	4602      	mov	r2, r0
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055b6:	bf00      	nop
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055c8:	f001 fa0c 	bl	80069e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055cc:	4b2d      	ldr	r3, [pc, #180]	; (8005684 <prvAddNewTaskToReadyList+0xc4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	4a2c      	ldr	r2, [pc, #176]	; (8005684 <prvAddNewTaskToReadyList+0xc4>)
 80055d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055d6:	4b2c      	ldr	r3, [pc, #176]	; (8005688 <prvAddNewTaskToReadyList+0xc8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055de:	4a2a      	ldr	r2, [pc, #168]	; (8005688 <prvAddNewTaskToReadyList+0xc8>)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055e4:	4b27      	ldr	r3, [pc, #156]	; (8005684 <prvAddNewTaskToReadyList+0xc4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d110      	bne.n	800560e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055ec:	f000 fbe2 	bl	8005db4 <prvInitialiseTaskLists>
 80055f0:	e00d      	b.n	800560e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055f2:	4b26      	ldr	r3, [pc, #152]	; (800568c <prvAddNewTaskToReadyList+0xcc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d109      	bne.n	800560e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055fa:	4b23      	ldr	r3, [pc, #140]	; (8005688 <prvAddNewTaskToReadyList+0xc8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	429a      	cmp	r2, r3
 8005606:	d802      	bhi.n	800560e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005608:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <prvAddNewTaskToReadyList+0xc8>)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800560e:	4b20      	ldr	r3, [pc, #128]	; (8005690 <prvAddNewTaskToReadyList+0xd0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3301      	adds	r3, #1
 8005614:	4a1e      	ldr	r2, [pc, #120]	; (8005690 <prvAddNewTaskToReadyList+0xd0>)
 8005616:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005618:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <prvAddNewTaskToReadyList+0xd0>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005624:	4b1b      	ldr	r3, [pc, #108]	; (8005694 <prvAddNewTaskToReadyList+0xd4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d903      	bls.n	8005634 <prvAddNewTaskToReadyList+0x74>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	4a18      	ldr	r2, [pc, #96]	; (8005694 <prvAddNewTaskToReadyList+0xd4>)
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4a15      	ldr	r2, [pc, #84]	; (8005698 <prvAddNewTaskToReadyList+0xd8>)
 8005642:	441a      	add	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3304      	adds	r3, #4
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f7ff f913 	bl	8004876 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005650:	f001 f9f8 	bl	8006a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005654:	4b0d      	ldr	r3, [pc, #52]	; (800568c <prvAddNewTaskToReadyList+0xcc>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00e      	beq.n	800567a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <prvAddNewTaskToReadyList+0xc8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	429a      	cmp	r2, r3
 8005668:	d207      	bcs.n	800567a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800566a:	4b0c      	ldr	r3, [pc, #48]	; (800569c <prvAddNewTaskToReadyList+0xdc>)
 800566c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000e6c 	.word	0x20000e6c
 8005688:	20000998 	.word	0x20000998
 800568c:	20000e78 	.word	0x20000e78
 8005690:	20000e88 	.word	0x20000e88
 8005694:	20000e74 	.word	0x20000e74
 8005698:	2000099c 	.word	0x2000099c
 800569c:	e000ed04 	.word	0xe000ed04

080056a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	; 0x28
 80056a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056ae:	463a      	mov	r2, r7
 80056b0:	1d39      	adds	r1, r7, #4
 80056b2:	f107 0308 	add.w	r3, r7, #8
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff f87c 	bl	80047b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	9202      	str	r2, [sp, #8]
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	2300      	movs	r3, #0
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	2300      	movs	r3, #0
 80056cc:	460a      	mov	r2, r1
 80056ce:	4921      	ldr	r1, [pc, #132]	; (8005754 <vTaskStartScheduler+0xb4>)
 80056d0:	4821      	ldr	r0, [pc, #132]	; (8005758 <vTaskStartScheduler+0xb8>)
 80056d2:	f7ff fe43 	bl	800535c <xTaskCreateStatic>
 80056d6:	4603      	mov	r3, r0
 80056d8:	4a20      	ldr	r2, [pc, #128]	; (800575c <vTaskStartScheduler+0xbc>)
 80056da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056dc:	4b1f      	ldr	r3, [pc, #124]	; (800575c <vTaskStartScheduler+0xbc>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056e4:	2301      	movs	r3, #1
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	e001      	b.n	80056ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d102      	bne.n	80056fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056f4:	f000 fcfc 	bl	80060f0 <xTimerCreateTimerTask>
 80056f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d116      	bne.n	800572e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	613b      	str	r3, [r7, #16]
}
 8005712:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005714:	4b12      	ldr	r3, [pc, #72]	; (8005760 <vTaskStartScheduler+0xc0>)
 8005716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800571a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800571c:	4b11      	ldr	r3, [pc, #68]	; (8005764 <vTaskStartScheduler+0xc4>)
 800571e:	2201      	movs	r2, #1
 8005720:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005722:	4b11      	ldr	r3, [pc, #68]	; (8005768 <vTaskStartScheduler+0xc8>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005728:	f001 f8ba 	bl	80068a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800572c:	e00e      	b.n	800574c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005734:	d10a      	bne.n	800574c <vTaskStartScheduler+0xac>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	60fb      	str	r3, [r7, #12]
}
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <vTaskStartScheduler+0xaa>
}
 800574c:	bf00      	nop
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	0800b854 	.word	0x0800b854
 8005758:	08005d85 	.word	0x08005d85
 800575c:	20000e90 	.word	0x20000e90
 8005760:	20000e8c 	.word	0x20000e8c
 8005764:	20000e78 	.word	0x20000e78
 8005768:	20000e70 	.word	0x20000e70

0800576c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005770:	4b04      	ldr	r3, [pc, #16]	; (8005784 <vTaskSuspendAll+0x18>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3301      	adds	r3, #1
 8005776:	4a03      	ldr	r2, [pc, #12]	; (8005784 <vTaskSuspendAll+0x18>)
 8005778:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800577a:	bf00      	nop
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	20000e94 	.word	0x20000e94

08005788 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005796:	4b42      	ldr	r3, [pc, #264]	; (80058a0 <xTaskResumeAll+0x118>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	603b      	str	r3, [r7, #0]
}
 80057b0:	bf00      	nop
 80057b2:	e7fe      	b.n	80057b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057b4:	f001 f916 	bl	80069e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057b8:	4b39      	ldr	r3, [pc, #228]	; (80058a0 <xTaskResumeAll+0x118>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3b01      	subs	r3, #1
 80057be:	4a38      	ldr	r2, [pc, #224]	; (80058a0 <xTaskResumeAll+0x118>)
 80057c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057c2:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <xTaskResumeAll+0x118>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d162      	bne.n	8005890 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057ca:	4b36      	ldr	r3, [pc, #216]	; (80058a4 <xTaskResumeAll+0x11c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d05e      	beq.n	8005890 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057d2:	e02f      	b.n	8005834 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d4:	4b34      	ldr	r3, [pc, #208]	; (80058a8 <xTaskResumeAll+0x120>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3318      	adds	r3, #24
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff f8a5 	bl	8004930 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff f8a0 	bl	8004930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <xTaskResumeAll+0x124>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d903      	bls.n	8005804 <xTaskResumeAll+0x7c>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	4a2a      	ldr	r2, [pc, #168]	; (80058ac <xTaskResumeAll+0x124>)
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4a27      	ldr	r2, [pc, #156]	; (80058b0 <xTaskResumeAll+0x128>)
 8005812:	441a      	add	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3304      	adds	r3, #4
 8005818:	4619      	mov	r1, r3
 800581a:	4610      	mov	r0, r2
 800581c:	f7ff f82b 	bl	8004876 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	4b23      	ldr	r3, [pc, #140]	; (80058b4 <xTaskResumeAll+0x12c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	429a      	cmp	r2, r3
 800582c:	d302      	bcc.n	8005834 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800582e:	4b22      	ldr	r3, [pc, #136]	; (80058b8 <xTaskResumeAll+0x130>)
 8005830:	2201      	movs	r2, #1
 8005832:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005834:	4b1c      	ldr	r3, [pc, #112]	; (80058a8 <xTaskResumeAll+0x120>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1cb      	bne.n	80057d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005842:	f000 fb55 	bl	8005ef0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005846:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <xTaskResumeAll+0x134>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d010      	beq.n	8005874 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005852:	f000 f847 	bl	80058e4 <xTaskIncrementTick>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800585c:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <xTaskResumeAll+0x130>)
 800585e:	2201      	movs	r2, #1
 8005860:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3b01      	subs	r3, #1
 8005866:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f1      	bne.n	8005852 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800586e:	4b13      	ldr	r3, [pc, #76]	; (80058bc <xTaskResumeAll+0x134>)
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005874:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <xTaskResumeAll+0x130>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d009      	beq.n	8005890 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800587c:	2301      	movs	r3, #1
 800587e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005880:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <xTaskResumeAll+0x138>)
 8005882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005890:	f001 f8d8 	bl	8006a44 <vPortExitCritical>

	return xAlreadyYielded;
 8005894:	68bb      	ldr	r3, [r7, #8]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000e94 	.word	0x20000e94
 80058a4:	20000e6c 	.word	0x20000e6c
 80058a8:	20000e2c 	.word	0x20000e2c
 80058ac:	20000e74 	.word	0x20000e74
 80058b0:	2000099c 	.word	0x2000099c
 80058b4:	20000998 	.word	0x20000998
 80058b8:	20000e80 	.word	0x20000e80
 80058bc:	20000e7c 	.word	0x20000e7c
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <xTaskGetTickCount+0x1c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058d0:	687b      	ldr	r3, [r7, #4]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20000e70 	.word	0x20000e70

080058e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058ee:	4b4f      	ldr	r3, [pc, #316]	; (8005a2c <xTaskIncrementTick+0x148>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f040 808f 	bne.w	8005a16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058f8:	4b4d      	ldr	r3, [pc, #308]	; (8005a30 <xTaskIncrementTick+0x14c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005900:	4a4b      	ldr	r2, [pc, #300]	; (8005a30 <xTaskIncrementTick+0x14c>)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d120      	bne.n	800594e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800590c:	4b49      	ldr	r3, [pc, #292]	; (8005a34 <xTaskIncrementTick+0x150>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <xTaskIncrementTick+0x48>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	603b      	str	r3, [r7, #0]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <xTaskIncrementTick+0x46>
 800592c:	4b41      	ldr	r3, [pc, #260]	; (8005a34 <xTaskIncrementTick+0x150>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	4b41      	ldr	r3, [pc, #260]	; (8005a38 <xTaskIncrementTick+0x154>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a3f      	ldr	r2, [pc, #252]	; (8005a34 <xTaskIncrementTick+0x150>)
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	4a3f      	ldr	r2, [pc, #252]	; (8005a38 <xTaskIncrementTick+0x154>)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	4b3e      	ldr	r3, [pc, #248]	; (8005a3c <xTaskIncrementTick+0x158>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3301      	adds	r3, #1
 8005946:	4a3d      	ldr	r2, [pc, #244]	; (8005a3c <xTaskIncrementTick+0x158>)
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	f000 fad1 	bl	8005ef0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800594e:	4b3c      	ldr	r3, [pc, #240]	; (8005a40 <xTaskIncrementTick+0x15c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	429a      	cmp	r2, r3
 8005956:	d349      	bcc.n	80059ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005958:	4b36      	ldr	r3, [pc, #216]	; (8005a34 <xTaskIncrementTick+0x150>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005962:	4b37      	ldr	r3, [pc, #220]	; (8005a40 <xTaskIncrementTick+0x15c>)
 8005964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005968:	601a      	str	r2, [r3, #0]
					break;
 800596a:	e03f      	b.n	80059ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800596c:	4b31      	ldr	r3, [pc, #196]	; (8005a34 <xTaskIncrementTick+0x150>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d203      	bcs.n	800598c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005984:	4a2e      	ldr	r2, [pc, #184]	; (8005a40 <xTaskIncrementTick+0x15c>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800598a:	e02f      	b.n	80059ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	3304      	adds	r3, #4
 8005990:	4618      	mov	r0, r3
 8005992:	f7fe ffcd 	bl	8004930 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	d004      	beq.n	80059a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	3318      	adds	r3, #24
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe ffc4 	bl	8004930 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ac:	4b25      	ldr	r3, [pc, #148]	; (8005a44 <xTaskIncrementTick+0x160>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d903      	bls.n	80059bc <xTaskIncrementTick+0xd8>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4a22      	ldr	r2, [pc, #136]	; (8005a44 <xTaskIncrementTick+0x160>)
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4a1f      	ldr	r2, [pc, #124]	; (8005a48 <xTaskIncrementTick+0x164>)
 80059ca:	441a      	add	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f7fe ff4f 	bl	8004876 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059dc:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <xTaskIncrementTick+0x168>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d3b8      	bcc.n	8005958 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80059e6:	2301      	movs	r3, #1
 80059e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ea:	e7b5      	b.n	8005958 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059ec:	4b17      	ldr	r3, [pc, #92]	; (8005a4c <xTaskIncrementTick+0x168>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f2:	4915      	ldr	r1, [pc, #84]	; (8005a48 <xTaskIncrementTick+0x164>)
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d901      	bls.n	8005a08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <xTaskIncrementTick+0x16c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a10:	2301      	movs	r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e004      	b.n	8005a20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a16:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <xTaskIncrementTick+0x170>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	4a0d      	ldr	r2, [pc, #52]	; (8005a54 <xTaskIncrementTick+0x170>)
 8005a1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a20:	697b      	ldr	r3, [r7, #20]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000e94 	.word	0x20000e94
 8005a30:	20000e70 	.word	0x20000e70
 8005a34:	20000e24 	.word	0x20000e24
 8005a38:	20000e28 	.word	0x20000e28
 8005a3c:	20000e84 	.word	0x20000e84
 8005a40:	20000e8c 	.word	0x20000e8c
 8005a44:	20000e74 	.word	0x20000e74
 8005a48:	2000099c 	.word	0x2000099c
 8005a4c:	20000998 	.word	0x20000998
 8005a50:	20000e80 	.word	0x20000e80
 8005a54:	20000e7c 	.word	0x20000e7c

08005a58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a5e:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <vTaskSwitchContext+0xa8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a66:	4b27      	ldr	r3, [pc, #156]	; (8005b04 <vTaskSwitchContext+0xac>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a6c:	e041      	b.n	8005af2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005a6e:	4b25      	ldr	r3, [pc, #148]	; (8005b04 <vTaskSwitchContext+0xac>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a74:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <vTaskSwitchContext+0xb0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e010      	b.n	8005a9e <vTaskSwitchContext+0x46>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <vTaskSwitchContext+0x40>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	607b      	str	r3, [r7, #4]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <vTaskSwitchContext+0x3e>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	491b      	ldr	r1, [pc, #108]	; (8005b0c <vTaskSwitchContext+0xb4>)
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0e4      	beq.n	8005a7c <vTaskSwitchContext+0x24>
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <vTaskSwitchContext+0xb4>)
 8005abe:	4413      	add	r3, r2
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	605a      	str	r2, [r3, #4]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d104      	bne.n	8005ae2 <vTaskSwitchContext+0x8a>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	605a      	str	r2, [r3, #4]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <vTaskSwitchContext+0xb8>)
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	4a06      	ldr	r2, [pc, #24]	; (8005b08 <vTaskSwitchContext+0xb0>)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6013      	str	r3, [r2, #0]
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	20000e94 	.word	0x20000e94
 8005b04:	20000e80 	.word	0x20000e80
 8005b08:	20000e74 	.word	0x20000e74
 8005b0c:	2000099c 	.word	0x2000099c
 8005b10:	20000998 	.word	0x20000998

08005b14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	60fb      	str	r3, [r7, #12]
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b3a:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <vTaskPlaceOnEventList+0x44>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3318      	adds	r3, #24
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fe febb 	bl	80048be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b48:	2101      	movs	r1, #1
 8005b4a:	6838      	ldr	r0, [r7, #0]
 8005b4c:	f000 fa7c 	bl	8006048 <prvAddCurrentTaskToDelayedList>
}
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000998 	.word	0x20000998

08005b5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	617b      	str	r3, [r7, #20]
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b84:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3318      	adds	r3, #24
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7fe fe72 	bl	8004876 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	68b8      	ldr	r0, [r7, #8]
 8005ba2:	f000 fa51 	bl	8006048 <prvAddCurrentTaskToDelayedList>
	}
 8005ba6:	bf00      	nop
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000998 	.word	0x20000998

08005bb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	60fb      	str	r3, [r7, #12]
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	3318      	adds	r3, #24
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fe fea3 	bl	8004930 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bea:	4b1e      	ldr	r3, [pc, #120]	; (8005c64 <xTaskRemoveFromEventList+0xb0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d11d      	bne.n	8005c2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fe fe9a 	bl	8004930 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <xTaskRemoveFromEventList+0xb4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d903      	bls.n	8005c10 <xTaskRemoveFromEventList+0x5c>
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	4a16      	ldr	r2, [pc, #88]	; (8005c68 <xTaskRemoveFromEventList+0xb4>)
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <xTaskRemoveFromEventList+0xb8>)
 8005c1e:	441a      	add	r2, r3
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4619      	mov	r1, r3
 8005c26:	4610      	mov	r0, r2
 8005c28:	f7fe fe25 	bl	8004876 <vListInsertEnd>
 8005c2c:	e005      	b.n	8005c3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	3318      	adds	r3, #24
 8005c32:	4619      	mov	r1, r3
 8005c34:	480e      	ldr	r0, [pc, #56]	; (8005c70 <xTaskRemoveFromEventList+0xbc>)
 8005c36:	f7fe fe1e 	bl	8004876 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <xTaskRemoveFromEventList+0xc0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d905      	bls.n	8005c54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <xTaskRemoveFromEventList+0xc4>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	e001      	b.n	8005c58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c58:	697b      	ldr	r3, [r7, #20]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000e94 	.word	0x20000e94
 8005c68:	20000e74 	.word	0x20000e74
 8005c6c:	2000099c 	.word	0x2000099c
 8005c70:	20000e2c 	.word	0x20000e2c
 8005c74:	20000998 	.word	0x20000998
 8005c78:	20000e80 	.word	0x20000e80

08005c7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c84:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <vTaskInternalSetTimeOutState+0x24>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <vTaskInternalSetTimeOutState+0x28>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	605a      	str	r2, [r3, #4]
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	20000e84 	.word	0x20000e84
 8005ca4:	20000e70 	.word	0x20000e70

08005ca8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	613b      	str	r3, [r7, #16]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	60fb      	str	r3, [r7, #12]
}
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005cea:	f000 fe7b 	bl	80069e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cee:	4b1d      	ldr	r3, [pc, #116]	; (8005d64 <xTaskCheckForTimeOut+0xbc>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d06:	d102      	bne.n	8005d0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e023      	b.n	8005d56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <xTaskCheckForTimeOut+0xc0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d007      	beq.n	8005d2a <xTaskCheckForTimeOut+0x82>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d302      	bcc.n	8005d2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	e015      	b.n	8005d56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d20b      	bcs.n	8005d4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	1ad2      	subs	r2, r2, r3
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff ff9b 	bl	8005c7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	e004      	b.n	8005d56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d52:	2301      	movs	r3, #1
 8005d54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d56:	f000 fe75 	bl	8006a44 <vPortExitCritical>

	return xReturn;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3720      	adds	r7, #32
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	20000e70 	.word	0x20000e70
 8005d68:	20000e84 	.word	0x20000e84

08005d6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d70:	4b03      	ldr	r3, [pc, #12]	; (8005d80 <vTaskMissedYield+0x14>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
}
 8005d76:	bf00      	nop
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	20000e80 	.word	0x20000e80

08005d84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d8c:	f000 f852 	bl	8005e34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d90:	4b06      	ldr	r3, [pc, #24]	; (8005dac <prvIdleTask+0x28>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d9f9      	bls.n	8005d8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <prvIdleTask+0x2c>)
 8005d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005da8:	e7f0      	b.n	8005d8c <prvIdleTask+0x8>
 8005daa:	bf00      	nop
 8005dac:	2000099c 	.word	0x2000099c
 8005db0:	e000ed04 	.word	0xe000ed04

08005db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dba:	2300      	movs	r3, #0
 8005dbc:	607b      	str	r3, [r7, #4]
 8005dbe:	e00c      	b.n	8005dda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4a12      	ldr	r2, [pc, #72]	; (8005e14 <prvInitialiseTaskLists+0x60>)
 8005dcc:	4413      	add	r3, r2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fe fd24 	bl	800481c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	607b      	str	r3, [r7, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b37      	cmp	r3, #55	; 0x37
 8005dde:	d9ef      	bls.n	8005dc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005de0:	480d      	ldr	r0, [pc, #52]	; (8005e18 <prvInitialiseTaskLists+0x64>)
 8005de2:	f7fe fd1b 	bl	800481c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005de6:	480d      	ldr	r0, [pc, #52]	; (8005e1c <prvInitialiseTaskLists+0x68>)
 8005de8:	f7fe fd18 	bl	800481c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dec:	480c      	ldr	r0, [pc, #48]	; (8005e20 <prvInitialiseTaskLists+0x6c>)
 8005dee:	f7fe fd15 	bl	800481c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005df2:	480c      	ldr	r0, [pc, #48]	; (8005e24 <prvInitialiseTaskLists+0x70>)
 8005df4:	f7fe fd12 	bl	800481c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005df8:	480b      	ldr	r0, [pc, #44]	; (8005e28 <prvInitialiseTaskLists+0x74>)
 8005dfa:	f7fe fd0f 	bl	800481c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dfe:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <prvInitialiseTaskLists+0x78>)
 8005e00:	4a05      	ldr	r2, [pc, #20]	; (8005e18 <prvInitialiseTaskLists+0x64>)
 8005e02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <prvInitialiseTaskLists+0x7c>)
 8005e06:	4a05      	ldr	r2, [pc, #20]	; (8005e1c <prvInitialiseTaskLists+0x68>)
 8005e08:	601a      	str	r2, [r3, #0]
}
 8005e0a:	bf00      	nop
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	2000099c 	.word	0x2000099c
 8005e18:	20000dfc 	.word	0x20000dfc
 8005e1c:	20000e10 	.word	0x20000e10
 8005e20:	20000e2c 	.word	0x20000e2c
 8005e24:	20000e40 	.word	0x20000e40
 8005e28:	20000e58 	.word	0x20000e58
 8005e2c:	20000e24 	.word	0x20000e24
 8005e30:	20000e28 	.word	0x20000e28

08005e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e3a:	e019      	b.n	8005e70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e3c:	f000 fdd2 	bl	80069e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e40:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <prvCheckTasksWaitingTermination+0x50>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe fd6f 	bl	8004930 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e52:	4b0d      	ldr	r3, [pc, #52]	; (8005e88 <prvCheckTasksWaitingTermination+0x54>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	4a0b      	ldr	r2, [pc, #44]	; (8005e88 <prvCheckTasksWaitingTermination+0x54>)
 8005e5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <prvCheckTasksWaitingTermination+0x58>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <prvCheckTasksWaitingTermination+0x58>)
 8005e64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e66:	f000 fded 	bl	8006a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f810 	bl	8005e90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e70:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <prvCheckTasksWaitingTermination+0x58>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e1      	bne.n	8005e3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e78:	bf00      	nop
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000e40 	.word	0x20000e40
 8005e88:	20000e6c 	.word	0x20000e6c
 8005e8c:	20000e54 	.word	0x20000e54

08005e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d108      	bne.n	8005eb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 ff8a 	bl	8006dc0 <vPortFree>
				vPortFree( pxTCB );
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 ff87 	bl	8006dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005eb2:	e018      	b.n	8005ee6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d103      	bne.n	8005ec6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 ff7e 	bl	8006dc0 <vPortFree>
	}
 8005ec4:	e00f      	b.n	8005ee6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d00a      	beq.n	8005ee6 <prvDeleteTCB+0x56>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	60fb      	str	r3, [r7, #12]
}
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <prvDeleteTCB+0x54>
	}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ef6:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <prvResetNextTaskUnblockTime+0x38>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d104      	bne.n	8005f0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f00:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <prvResetNextTaskUnblockTime+0x3c>)
 8005f02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f08:	e008      	b.n	8005f1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0a:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <prvResetNextTaskUnblockTime+0x38>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4a04      	ldr	r2, [pc, #16]	; (8005f2c <prvResetNextTaskUnblockTime+0x3c>)
 8005f1a:	6013      	str	r3, [r2, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	20000e24 	.word	0x20000e24
 8005f2c:	20000e8c 	.word	0x20000e8c

08005f30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f36:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <xTaskGetSchedulerState+0x34>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d102      	bne.n	8005f44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	607b      	str	r3, [r7, #4]
 8005f42:	e008      	b.n	8005f56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f44:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <xTaskGetSchedulerState+0x38>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	607b      	str	r3, [r7, #4]
 8005f50:	e001      	b.n	8005f56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f52:	2300      	movs	r3, #0
 8005f54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f56:	687b      	ldr	r3, [r7, #4]
	}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	20000e78 	.word	0x20000e78
 8005f68:	20000e94 	.word	0x20000e94

08005f6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d056      	beq.n	8006030 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f82:	4b2e      	ldr	r3, [pc, #184]	; (800603c <xTaskPriorityDisinherit+0xd0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d00a      	beq.n	8005fa2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	60fb      	str	r3, [r7, #12]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	60bb      	str	r3, [r7, #8]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc4:	1e5a      	subs	r2, r3, #1
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d02c      	beq.n	8006030 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d128      	bne.n	8006030 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe fca4 	bl	8004930 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006000:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <xTaskPriorityDisinherit+0xd4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d903      	bls.n	8006010 <xTaskPriorityDisinherit+0xa4>
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	4a0c      	ldr	r2, [pc, #48]	; (8006040 <xTaskPriorityDisinherit+0xd4>)
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4a09      	ldr	r2, [pc, #36]	; (8006044 <xTaskPriorityDisinherit+0xd8>)
 800601e:	441a      	add	r2, r3
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	3304      	adds	r3, #4
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f7fe fc25 	bl	8004876 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800602c:	2301      	movs	r3, #1
 800602e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006030:	697b      	ldr	r3, [r7, #20]
	}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000998 	.word	0x20000998
 8006040:	20000e74 	.word	0x20000e74
 8006044:	2000099c 	.word	0x2000099c

08006048 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006052:	4b21      	ldr	r3, [pc, #132]	; (80060d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006058:	4b20      	ldr	r3, [pc, #128]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3304      	adds	r3, #4
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe fc66 	bl	8004930 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800606a:	d10a      	bne.n	8006082 <prvAddCurrentTaskToDelayedList+0x3a>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006072:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3304      	adds	r3, #4
 8006078:	4619      	mov	r1, r3
 800607a:	4819      	ldr	r0, [pc, #100]	; (80060e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800607c:	f7fe fbfb 	bl	8004876 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006080:	e026      	b.n	80060d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4413      	add	r3, r2
 8006088:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800608a:	4b14      	ldr	r3, [pc, #80]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	429a      	cmp	r2, r3
 8006098:	d209      	bcs.n	80060ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800609a:	4b12      	ldr	r3, [pc, #72]	; (80060e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3304      	adds	r3, #4
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f7fe fc09 	bl	80048be <vListInsert>
}
 80060ac:	e010      	b.n	80060d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ae:	4b0e      	ldr	r3, [pc, #56]	; (80060e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f7fe fbff 	bl	80048be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d202      	bcs.n	80060d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060ca:	4a08      	ldr	r2, [pc, #32]	; (80060ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6013      	str	r3, [r2, #0]
}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20000e70 	.word	0x20000e70
 80060dc:	20000998 	.word	0x20000998
 80060e0:	20000e58 	.word	0x20000e58
 80060e4:	20000e28 	.word	0x20000e28
 80060e8:	20000e24 	.word	0x20000e24
 80060ec:	20000e8c 	.word	0x20000e8c

080060f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08a      	sub	sp, #40	; 0x28
 80060f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060fa:	f000 fb07 	bl	800670c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060fe:	4b1c      	ldr	r3, [pc, #112]	; (8006170 <xTimerCreateTimerTask+0x80>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d021      	beq.n	800614a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800610e:	1d3a      	adds	r2, r7, #4
 8006110:	f107 0108 	add.w	r1, r7, #8
 8006114:	f107 030c 	add.w	r3, r7, #12
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe fb65 	bl	80047e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	9202      	str	r2, [sp, #8]
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	2302      	movs	r3, #2
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	2300      	movs	r3, #0
 800612e:	460a      	mov	r2, r1
 8006130:	4910      	ldr	r1, [pc, #64]	; (8006174 <xTimerCreateTimerTask+0x84>)
 8006132:	4811      	ldr	r0, [pc, #68]	; (8006178 <xTimerCreateTimerTask+0x88>)
 8006134:	f7ff f912 	bl	800535c <xTaskCreateStatic>
 8006138:	4603      	mov	r3, r0
 800613a:	4a10      	ldr	r2, [pc, #64]	; (800617c <xTimerCreateTimerTask+0x8c>)
 800613c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800613e:	4b0f      	ldr	r3, [pc, #60]	; (800617c <xTimerCreateTimerTask+0x8c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006146:	2301      	movs	r3, #1
 8006148:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	613b      	str	r3, [r7, #16]
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006166:	697b      	ldr	r3, [r7, #20]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	20000ec8 	.word	0x20000ec8
 8006174:	0800b85c 	.word	0x0800b85c
 8006178:	080062b5 	.word	0x080062b5
 800617c:	20000ecc 	.word	0x20000ecc

08006180 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	; 0x28
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800618e:	2300      	movs	r3, #0
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	623b      	str	r3, [r7, #32]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061ae:	4b1a      	ldr	r3, [pc, #104]	; (8006218 <xTimerGenericCommand+0x98>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d02a      	beq.n	800620c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b05      	cmp	r3, #5
 80061c6:	dc18      	bgt.n	80061fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061c8:	f7ff feb2 	bl	8005f30 <xTaskGetSchedulerState>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d109      	bne.n	80061e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061d2:	4b11      	ldr	r3, [pc, #68]	; (8006218 <xTimerGenericCommand+0x98>)
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	f107 0110 	add.w	r1, r7, #16
 80061da:	2300      	movs	r3, #0
 80061dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061de:	f7fe fcd5 	bl	8004b8c <xQueueGenericSend>
 80061e2:	6278      	str	r0, [r7, #36]	; 0x24
 80061e4:	e012      	b.n	800620c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061e6:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <xTimerGenericCommand+0x98>)
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	f107 0110 	add.w	r1, r7, #16
 80061ee:	2300      	movs	r3, #0
 80061f0:	2200      	movs	r2, #0
 80061f2:	f7fe fccb 	bl	8004b8c <xQueueGenericSend>
 80061f6:	6278      	str	r0, [r7, #36]	; 0x24
 80061f8:	e008      	b.n	800620c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061fa:	4b07      	ldr	r3, [pc, #28]	; (8006218 <xTimerGenericCommand+0x98>)
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	f107 0110 	add.w	r1, r7, #16
 8006202:	2300      	movs	r3, #0
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	f7fe fdbf 	bl	8004d88 <xQueueGenericSendFromISR>
 800620a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800620e:	4618      	mov	r0, r3
 8006210:	3728      	adds	r7, #40	; 0x28
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000ec8 	.word	0x20000ec8

0800621c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af02      	add	r7, sp, #8
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006226:	4b22      	ldr	r3, [pc, #136]	; (80062b0 <prvProcessExpiredTimer+0x94>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	3304      	adds	r3, #4
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe fb7b 	bl	8004930 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d022      	beq.n	800628e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	699a      	ldr	r2, [r3, #24]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	18d1      	adds	r1, r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	6978      	ldr	r0, [r7, #20]
 8006256:	f000 f8d1 	bl	80063fc <prvInsertTimerInActiveList>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01f      	beq.n	80062a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006260:	2300      	movs	r3, #0
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	2300      	movs	r3, #0
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	2100      	movs	r1, #0
 800626a:	6978      	ldr	r0, [r7, #20]
 800626c:	f7ff ff88 	bl	8006180 <xTimerGenericCommand>
 8006270:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d113      	bne.n	80062a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	60fb      	str	r3, [r7, #12]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006294:	f023 0301 	bic.w	r3, r3, #1
 8006298:	b2da      	uxtb	r2, r3
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	6978      	ldr	r0, [r7, #20]
 80062a6:	4798      	blx	r3
}
 80062a8:	bf00      	nop
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	20000ec0 	.word	0x20000ec0

080062b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062bc:	f107 0308 	add.w	r3, r7, #8
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 f857 	bl	8006374 <prvGetNextExpireTime>
 80062c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4619      	mov	r1, r3
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 f803 	bl	80062d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062d2:	f000 f8d5 	bl	8006480 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062d6:	e7f1      	b.n	80062bc <prvTimerTask+0x8>

080062d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062e2:	f7ff fa43 	bl	800576c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062e6:	f107 0308 	add.w	r3, r7, #8
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 f866 	bl	80063bc <prvSampleTimeNow>
 80062f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d130      	bne.n	800635a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10a      	bne.n	8006314 <prvProcessTimerOrBlockTask+0x3c>
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	429a      	cmp	r2, r3
 8006304:	d806      	bhi.n	8006314 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006306:	f7ff fa3f 	bl	8005788 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800630a:	68f9      	ldr	r1, [r7, #12]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff ff85 	bl	800621c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006312:	e024      	b.n	800635e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d008      	beq.n	800632c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800631a:	4b13      	ldr	r3, [pc, #76]	; (8006368 <prvProcessTimerOrBlockTask+0x90>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <prvProcessTimerOrBlockTask+0x50>
 8006324:	2301      	movs	r3, #1
 8006326:	e000      	b.n	800632a <prvProcessTimerOrBlockTask+0x52>
 8006328:	2300      	movs	r3, #0
 800632a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800632c:	4b0f      	ldr	r3, [pc, #60]	; (800636c <prvProcessTimerOrBlockTask+0x94>)
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	4619      	mov	r1, r3
 800633a:	f7fe ffdb 	bl	80052f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800633e:	f7ff fa23 	bl	8005788 <xTaskResumeAll>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006348:	4b09      	ldr	r3, [pc, #36]	; (8006370 <prvProcessTimerOrBlockTask+0x98>)
 800634a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	f3bf 8f6f 	isb	sy
}
 8006358:	e001      	b.n	800635e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800635a:	f7ff fa15 	bl	8005788 <xTaskResumeAll>
}
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20000ec4 	.word	0x20000ec4
 800636c:	20000ec8 	.word	0x20000ec8
 8006370:	e000ed04 	.word	0xe000ed04

08006374 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800637c:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <prvGetNextExpireTime+0x44>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <prvGetNextExpireTime+0x16>
 8006386:	2201      	movs	r2, #1
 8006388:	e000      	b.n	800638c <prvGetNextExpireTime+0x18>
 800638a:	2200      	movs	r2, #0
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d105      	bne.n	80063a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006398:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <prvGetNextExpireTime+0x44>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	e001      	b.n	80063a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063a8:	68fb      	ldr	r3, [r7, #12]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	20000ec0 	.word	0x20000ec0

080063bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063c4:	f7ff fa7e 	bl	80058c4 <xTaskGetTickCount>
 80063c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063ca:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <prvSampleTimeNow+0x3c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d205      	bcs.n	80063e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063d4:	f000 f936 	bl	8006644 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	e002      	b.n	80063e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063e6:	4a04      	ldr	r2, [pc, #16]	; (80063f8 <prvSampleTimeNow+0x3c>)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063ec:	68fb      	ldr	r3, [r7, #12]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000ed0 	.word	0x20000ed0

080063fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	429a      	cmp	r2, r3
 8006420:	d812      	bhi.n	8006448 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	1ad2      	subs	r2, r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	429a      	cmp	r2, r3
 800642e:	d302      	bcc.n	8006436 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006430:	2301      	movs	r3, #1
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	e01b      	b.n	800646e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006436:	4b10      	ldr	r3, [pc, #64]	; (8006478 <prvInsertTimerInActiveList+0x7c>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3304      	adds	r3, #4
 800643e:	4619      	mov	r1, r3
 8006440:	4610      	mov	r0, r2
 8006442:	f7fe fa3c 	bl	80048be <vListInsert>
 8006446:	e012      	b.n	800646e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d206      	bcs.n	800645e <prvInsertTimerInActiveList+0x62>
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d302      	bcc.n	800645e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006458:	2301      	movs	r3, #1
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	e007      	b.n	800646e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800645e:	4b07      	ldr	r3, [pc, #28]	; (800647c <prvInsertTimerInActiveList+0x80>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3304      	adds	r3, #4
 8006466:	4619      	mov	r1, r3
 8006468:	4610      	mov	r0, r2
 800646a:	f7fe fa28 	bl	80048be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800646e:	697b      	ldr	r3, [r7, #20]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	20000ec4 	.word	0x20000ec4
 800647c:	20000ec0 	.word	0x20000ec0

08006480 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b08e      	sub	sp, #56	; 0x38
 8006484:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006486:	e0ca      	b.n	800661e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	da18      	bge.n	80064c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800648e:	1d3b      	adds	r3, r7, #4
 8006490:	3304      	adds	r3, #4
 8006492:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	61fb      	str	r3, [r7, #28]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064b6:	6850      	ldr	r0, [r2, #4]
 80064b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ba:	6892      	ldr	r2, [r2, #8]
 80064bc:	4611      	mov	r1, r2
 80064be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f2c0 80ab 	blt.w	800661e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d004      	beq.n	80064de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	3304      	adds	r3, #4
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe fa29 	bl	8004930 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064de:	463b      	mov	r3, r7
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff ff6b 	bl	80063bc <prvSampleTimeNow>
 80064e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b09      	cmp	r3, #9
 80064ec:	f200 8096 	bhi.w	800661c <prvProcessReceivedCommands+0x19c>
 80064f0:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <prvProcessReceivedCommands+0x78>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	08006521 	.word	0x08006521
 80064fc:	08006521 	.word	0x08006521
 8006500:	08006521 	.word	0x08006521
 8006504:	08006595 	.word	0x08006595
 8006508:	080065a9 	.word	0x080065a9
 800650c:	080065f3 	.word	0x080065f3
 8006510:	08006521 	.word	0x08006521
 8006514:	08006521 	.word	0x08006521
 8006518:	08006595 	.word	0x08006595
 800651c:	080065a9 	.word	0x080065a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006526:	f043 0301 	orr.w	r3, r3, #1
 800652a:	b2da      	uxtb	r2, r3
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	18d1      	adds	r1, r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006540:	f7ff ff5c 	bl	80063fc <prvInsertTimerInActiveList>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d069      	beq.n	800661e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006550:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d05e      	beq.n	800661e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	441a      	add	r2, r3
 8006568:	2300      	movs	r3, #0
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	2300      	movs	r3, #0
 800656e:	2100      	movs	r1, #0
 8006570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006572:	f7ff fe05 	bl	8006180 <xTimerGenericCommand>
 8006576:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d14f      	bne.n	800661e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	61bb      	str	r3, [r7, #24]
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800659a:	f023 0301 	bic.w	r3, r3, #1
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80065a6:	e03a      	b.n	800661e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	617b      	str	r3, [r7, #20]
}
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	18d1      	adds	r1, r2, r3
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ec:	f7ff ff06 	bl	80063fc <prvInsertTimerInActiveList>
					break;
 80065f0:	e015      	b.n	800661e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d103      	bne.n	8006608 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006602:	f000 fbdd 	bl	8006dc0 <vPortFree>
 8006606:	e00a      	b.n	800661e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800660e:	f023 0301 	bic.w	r3, r3, #1
 8006612:	b2da      	uxtb	r2, r3
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800661a:	e000      	b.n	800661e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800661c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800661e:	4b08      	ldr	r3, [pc, #32]	; (8006640 <prvProcessReceivedCommands+0x1c0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	1d39      	adds	r1, r7, #4
 8006624:	2200      	movs	r2, #0
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe fc4a 	bl	8004ec0 <xQueueReceive>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	f47f af2a 	bne.w	8006488 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	3730      	adds	r7, #48	; 0x30
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000ec8 	.word	0x20000ec8

08006644 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b088      	sub	sp, #32
 8006648:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800664a:	e048      	b.n	80066de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800664c:	4b2d      	ldr	r3, [pc, #180]	; (8006704 <prvSwitchTimerLists+0xc0>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006656:	4b2b      	ldr	r3, [pc, #172]	; (8006704 <prvSwitchTimerLists+0xc0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3304      	adds	r3, #4
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe f963 	bl	8004930 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d02e      	beq.n	80066de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4413      	add	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	429a      	cmp	r2, r3
 8006690:	d90e      	bls.n	80066b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800669e:	4b19      	ldr	r3, [pc, #100]	; (8006704 <prvSwitchTimerLists+0xc0>)
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3304      	adds	r3, #4
 80066a6:	4619      	mov	r1, r3
 80066a8:	4610      	mov	r0, r2
 80066aa:	f7fe f908 	bl	80048be <vListInsert>
 80066ae:	e016      	b.n	80066de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066b0:	2300      	movs	r3, #0
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	2300      	movs	r3, #0
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	2100      	movs	r1, #0
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7ff fd60 	bl	8006180 <xTimerGenericCommand>
 80066c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	603b      	str	r3, [r7, #0]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066de:	4b09      	ldr	r3, [pc, #36]	; (8006704 <prvSwitchTimerLists+0xc0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1b1      	bne.n	800664c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066e8:	4b06      	ldr	r3, [pc, #24]	; (8006704 <prvSwitchTimerLists+0xc0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066ee:	4b06      	ldr	r3, [pc, #24]	; (8006708 <prvSwitchTimerLists+0xc4>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a04      	ldr	r2, [pc, #16]	; (8006704 <prvSwitchTimerLists+0xc0>)
 80066f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066f6:	4a04      	ldr	r2, [pc, #16]	; (8006708 <prvSwitchTimerLists+0xc4>)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	6013      	str	r3, [r2, #0]
}
 80066fc:	bf00      	nop
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	20000ec0 	.word	0x20000ec0
 8006708:	20000ec4 	.word	0x20000ec4

0800670c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006712:	f000 f967 	bl	80069e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006716:	4b15      	ldr	r3, [pc, #84]	; (800676c <prvCheckForValidListAndQueue+0x60>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d120      	bne.n	8006760 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800671e:	4814      	ldr	r0, [pc, #80]	; (8006770 <prvCheckForValidListAndQueue+0x64>)
 8006720:	f7fe f87c 	bl	800481c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006724:	4813      	ldr	r0, [pc, #76]	; (8006774 <prvCheckForValidListAndQueue+0x68>)
 8006726:	f7fe f879 	bl	800481c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800672a:	4b13      	ldr	r3, [pc, #76]	; (8006778 <prvCheckForValidListAndQueue+0x6c>)
 800672c:	4a10      	ldr	r2, [pc, #64]	; (8006770 <prvCheckForValidListAndQueue+0x64>)
 800672e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006730:	4b12      	ldr	r3, [pc, #72]	; (800677c <prvCheckForValidListAndQueue+0x70>)
 8006732:	4a10      	ldr	r2, [pc, #64]	; (8006774 <prvCheckForValidListAndQueue+0x68>)
 8006734:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006736:	2300      	movs	r3, #0
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	4b11      	ldr	r3, [pc, #68]	; (8006780 <prvCheckForValidListAndQueue+0x74>)
 800673c:	4a11      	ldr	r2, [pc, #68]	; (8006784 <prvCheckForValidListAndQueue+0x78>)
 800673e:	2110      	movs	r1, #16
 8006740:	200a      	movs	r0, #10
 8006742:	f7fe f987 	bl	8004a54 <xQueueGenericCreateStatic>
 8006746:	4603      	mov	r3, r0
 8006748:	4a08      	ldr	r2, [pc, #32]	; (800676c <prvCheckForValidListAndQueue+0x60>)
 800674a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800674c:	4b07      	ldr	r3, [pc, #28]	; (800676c <prvCheckForValidListAndQueue+0x60>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <prvCheckForValidListAndQueue+0x60>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	490b      	ldr	r1, [pc, #44]	; (8006788 <prvCheckForValidListAndQueue+0x7c>)
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe fda0 	bl	80052a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006760:	f000 f970 	bl	8006a44 <vPortExitCritical>
}
 8006764:	bf00      	nop
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20000ec8 	.word	0x20000ec8
 8006770:	20000e98 	.word	0x20000e98
 8006774:	20000eac 	.word	0x20000eac
 8006778:	20000ec0 	.word	0x20000ec0
 800677c:	20000ec4 	.word	0x20000ec4
 8006780:	20000f74 	.word	0x20000f74
 8006784:	20000ed4 	.word	0x20000ed4
 8006788:	0800b864 	.word	0x0800b864

0800678c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3b04      	subs	r3, #4
 800679c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3b04      	subs	r3, #4
 80067aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f023 0201 	bic.w	r2, r3, #1
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3b04      	subs	r3, #4
 80067ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067bc:	4a0c      	ldr	r2, [pc, #48]	; (80067f0 <pxPortInitialiseStack+0x64>)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3b14      	subs	r3, #20
 80067c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3b04      	subs	r3, #4
 80067d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f06f 0202 	mvn.w	r2, #2
 80067da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3b20      	subs	r3, #32
 80067e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067e2:	68fb      	ldr	r3, [r7, #12]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	080067f5 	.word	0x080067f5

080067f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067fe:	4b12      	ldr	r3, [pc, #72]	; (8006848 <prvTaskExitError+0x54>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006806:	d00a      	beq.n	800681e <prvTaskExitError+0x2a>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	60fb      	str	r3, [r7, #12]
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <prvTaskExitError+0x28>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	60bb      	str	r3, [r7, #8]
}
 8006830:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006832:	bf00      	nop
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0fc      	beq.n	8006834 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800683a:	bf00      	nop
 800683c:	bf00      	nop
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	2000000c 	.word	0x2000000c
 800684c:	00000000 	.word	0x00000000

08006850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006850:	4b07      	ldr	r3, [pc, #28]	; (8006870 <pxCurrentTCBConst2>)
 8006852:	6819      	ldr	r1, [r3, #0]
 8006854:	6808      	ldr	r0, [r1, #0]
 8006856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	f380 8809 	msr	PSP, r0
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f04f 0000 	mov.w	r0, #0
 8006866:	f380 8811 	msr	BASEPRI, r0
 800686a:	4770      	bx	lr
 800686c:	f3af 8000 	nop.w

08006870 <pxCurrentTCBConst2>:
 8006870:	20000998 	.word	0x20000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop

08006878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006878:	4808      	ldr	r0, [pc, #32]	; (800689c <prvPortStartFirstTask+0x24>)
 800687a:	6800      	ldr	r0, [r0, #0]
 800687c:	6800      	ldr	r0, [r0, #0]
 800687e:	f380 8808 	msr	MSP, r0
 8006882:	f04f 0000 	mov.w	r0, #0
 8006886:	f380 8814 	msr	CONTROL, r0
 800688a:	b662      	cpsie	i
 800688c:	b661      	cpsie	f
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	df00      	svc	0
 8006898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800689a:	bf00      	nop
 800689c:	e000ed08 	.word	0xe000ed08

080068a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068a6:	4b46      	ldr	r3, [pc, #280]	; (80069c0 <xPortStartScheduler+0x120>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a46      	ldr	r2, [pc, #280]	; (80069c4 <xPortStartScheduler+0x124>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d10a      	bne.n	80068c6 <xPortStartScheduler+0x26>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	613b      	str	r3, [r7, #16]
}
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068c6:	4b3e      	ldr	r3, [pc, #248]	; (80069c0 <xPortStartScheduler+0x120>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a3f      	ldr	r2, [pc, #252]	; (80069c8 <xPortStartScheduler+0x128>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10a      	bne.n	80068e6 <xPortStartScheduler+0x46>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	60fb      	str	r3, [r7, #12]
}
 80068e2:	bf00      	nop
 80068e4:	e7fe      	b.n	80068e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068e6:	4b39      	ldr	r3, [pc, #228]	; (80069cc <xPortStartScheduler+0x12c>)
 80068e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	22ff      	movs	r2, #255	; 0xff
 80068f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006908:	b2da      	uxtb	r2, r3
 800690a:	4b31      	ldr	r3, [pc, #196]	; (80069d0 <xPortStartScheduler+0x130>)
 800690c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800690e:	4b31      	ldr	r3, [pc, #196]	; (80069d4 <xPortStartScheduler+0x134>)
 8006910:	2207      	movs	r2, #7
 8006912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006914:	e009      	b.n	800692a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006916:	4b2f      	ldr	r3, [pc, #188]	; (80069d4 <xPortStartScheduler+0x134>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3b01      	subs	r3, #1
 800691c:	4a2d      	ldr	r2, [pc, #180]	; (80069d4 <xPortStartScheduler+0x134>)
 800691e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	b2db      	uxtb	r3, r3
 8006928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	b2db      	uxtb	r3, r3
 800692e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006932:	2b80      	cmp	r3, #128	; 0x80
 8006934:	d0ef      	beq.n	8006916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006936:	4b27      	ldr	r3, [pc, #156]	; (80069d4 <xPortStartScheduler+0x134>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f1c3 0307 	rsb	r3, r3, #7
 800693e:	2b04      	cmp	r3, #4
 8006940:	d00a      	beq.n	8006958 <xPortStartScheduler+0xb8>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	60bb      	str	r3, [r7, #8]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006958:	4b1e      	ldr	r3, [pc, #120]	; (80069d4 <xPortStartScheduler+0x134>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	021b      	lsls	r3, r3, #8
 800695e:	4a1d      	ldr	r2, [pc, #116]	; (80069d4 <xPortStartScheduler+0x134>)
 8006960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006962:	4b1c      	ldr	r3, [pc, #112]	; (80069d4 <xPortStartScheduler+0x134>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800696a:	4a1a      	ldr	r2, [pc, #104]	; (80069d4 <xPortStartScheduler+0x134>)
 800696c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	b2da      	uxtb	r2, r3
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006976:	4b18      	ldr	r3, [pc, #96]	; (80069d8 <xPortStartScheduler+0x138>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a17      	ldr	r2, [pc, #92]	; (80069d8 <xPortStartScheduler+0x138>)
 800697c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006982:	4b15      	ldr	r3, [pc, #84]	; (80069d8 <xPortStartScheduler+0x138>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <xPortStartScheduler+0x138>)
 8006988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800698c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800698e:	f000 f8dd 	bl	8006b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006992:	4b12      	ldr	r3, [pc, #72]	; (80069dc <xPortStartScheduler+0x13c>)
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006998:	f000 f8fc 	bl	8006b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800699c:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <xPortStartScheduler+0x140>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a0f      	ldr	r2, [pc, #60]	; (80069e0 <xPortStartScheduler+0x140>)
 80069a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069a8:	f7ff ff66 	bl	8006878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069ac:	f7ff f854 	bl	8005a58 <vTaskSwitchContext>
	prvTaskExitError();
 80069b0:	f7ff ff20 	bl	80067f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	e000ed00 	.word	0xe000ed00
 80069c4:	410fc271 	.word	0x410fc271
 80069c8:	410fc270 	.word	0x410fc270
 80069cc:	e000e400 	.word	0xe000e400
 80069d0:	20000fc4 	.word	0x20000fc4
 80069d4:	20000fc8 	.word	0x20000fc8
 80069d8:	e000ed20 	.word	0xe000ed20
 80069dc:	2000000c 	.word	0x2000000c
 80069e0:	e000ef34 	.word	0xe000ef34

080069e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	607b      	str	r3, [r7, #4]
}
 80069fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069fe:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <vPortEnterCritical+0x58>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	4a0d      	ldr	r2, [pc, #52]	; (8006a3c <vPortEnterCritical+0x58>)
 8006a06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <vPortEnterCritical+0x58>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d10f      	bne.n	8006a30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <vPortEnterCritical+0x5c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	603b      	str	r3, [r7, #0]
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <vPortEnterCritical+0x4a>
	}
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	2000000c 	.word	0x2000000c
 8006a40:	e000ed04 	.word	0xe000ed04

08006a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a4a:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <vPortExitCritical+0x50>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <vPortExitCritical+0x24>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	607b      	str	r3, [r7, #4]
}
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <vPortExitCritical+0x50>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	4a09      	ldr	r2, [pc, #36]	; (8006a94 <vPortExitCritical+0x50>)
 8006a70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a72:	4b08      	ldr	r3, [pc, #32]	; (8006a94 <vPortExitCritical+0x50>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d105      	bne.n	8006a86 <vPortExitCritical+0x42>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	f383 8811 	msr	BASEPRI, r3
}
 8006a84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	2000000c 	.word	0x2000000c
	...

08006aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006aa0:	f3ef 8009 	mrs	r0, PSP
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <pxCurrentTCBConst>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	f01e 0f10 	tst.w	lr, #16
 8006ab0:	bf08      	it	eq
 8006ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aba:	6010      	str	r0, [r2, #0]
 8006abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ac4:	f380 8811 	msr	BASEPRI, r0
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f7fe ffc2 	bl	8005a58 <vTaskSwitchContext>
 8006ad4:	f04f 0000 	mov.w	r0, #0
 8006ad8:	f380 8811 	msr	BASEPRI, r0
 8006adc:	bc09      	pop	{r0, r3}
 8006ade:	6819      	ldr	r1, [r3, #0]
 8006ae0:	6808      	ldr	r0, [r1, #0]
 8006ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae6:	f01e 0f10 	tst.w	lr, #16
 8006aea:	bf08      	it	eq
 8006aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006af0:	f380 8809 	msr	PSP, r0
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	f3af 8000 	nop.w

08006b00 <pxCurrentTCBConst>:
 8006b00:	20000998 	.word	0x20000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop

08006b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	607b      	str	r3, [r7, #4]
}
 8006b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b22:	f7fe fedf 	bl	80058e4 <xTaskIncrementTick>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <xPortSysTickHandler+0x40>)
 8006b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	2300      	movs	r3, #0
 8006b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f383 8811 	msr	BASEPRI, r3
}
 8006b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b40:	bf00      	nop
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	e000ed04 	.word	0xe000ed04

08006b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b50:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <vPortSetupTimerInterrupt+0x34>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b56:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <vPortSetupTimerInterrupt+0x38>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <vPortSetupTimerInterrupt+0x3c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a0a      	ldr	r2, [pc, #40]	; (8006b8c <vPortSetupTimerInterrupt+0x40>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	099b      	lsrs	r3, r3, #6
 8006b68:	4a09      	ldr	r2, [pc, #36]	; (8006b90 <vPortSetupTimerInterrupt+0x44>)
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b6e:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <vPortSetupTimerInterrupt+0x34>)
 8006b70:	2207      	movs	r2, #7
 8006b72:	601a      	str	r2, [r3, #0]
}
 8006b74:	bf00      	nop
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	e000e010 	.word	0xe000e010
 8006b84:	e000e018 	.word	0xe000e018
 8006b88:	20000000 	.word	0x20000000
 8006b8c:	10624dd3 	.word	0x10624dd3
 8006b90:	e000e014 	.word	0xe000e014

08006b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ba4 <vPortEnableVFP+0x10>
 8006b98:	6801      	ldr	r1, [r0, #0]
 8006b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b9e:	6001      	str	r1, [r0, #0]
 8006ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ba2:	bf00      	nop
 8006ba4:	e000ed88 	.word	0xe000ed88

08006ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bae:	f3ef 8305 	mrs	r3, IPSR
 8006bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b0f      	cmp	r3, #15
 8006bb8:	d914      	bls.n	8006be4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bba:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <vPortValidateInterruptPriority+0x70>)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bc4:	4b15      	ldr	r3, [pc, #84]	; (8006c1c <vPortValidateInterruptPriority+0x74>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	7afa      	ldrb	r2, [r7, #11]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d20a      	bcs.n	8006be4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	607b      	str	r3, [r7, #4]
}
 8006be0:	bf00      	nop
 8006be2:	e7fe      	b.n	8006be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006be4:	4b0e      	ldr	r3, [pc, #56]	; (8006c20 <vPortValidateInterruptPriority+0x78>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bec:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <vPortValidateInterruptPriority+0x7c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d90a      	bls.n	8006c0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	603b      	str	r3, [r7, #0]
}
 8006c06:	bf00      	nop
 8006c08:	e7fe      	b.n	8006c08 <vPortValidateInterruptPriority+0x60>
	}
 8006c0a:	bf00      	nop
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	e000e3f0 	.word	0xe000e3f0
 8006c1c:	20000fc4 	.word	0x20000fc4
 8006c20:	e000ed0c 	.word	0xe000ed0c
 8006c24:	20000fc8 	.word	0x20000fc8

08006c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	; 0x28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c34:	f7fe fd9a 	bl	800576c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c38:	4b5b      	ldr	r3, [pc, #364]	; (8006da8 <pvPortMalloc+0x180>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c40:	f000 f920 	bl	8006e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c44:	4b59      	ldr	r3, [pc, #356]	; (8006dac <pvPortMalloc+0x184>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f040 8093 	bne.w	8006d78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01d      	beq.n	8006c94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c58:	2208      	movs	r2, #8
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d014      	beq.n	8006c94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f023 0307 	bic.w	r3, r3, #7
 8006c70:	3308      	adds	r3, #8
 8006c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <pvPortMalloc+0x6c>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	617b      	str	r3, [r7, #20]
}
 8006c90:	bf00      	nop
 8006c92:	e7fe      	b.n	8006c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d06e      	beq.n	8006d78 <pvPortMalloc+0x150>
 8006c9a:	4b45      	ldr	r3, [pc, #276]	; (8006db0 <pvPortMalloc+0x188>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d869      	bhi.n	8006d78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ca4:	4b43      	ldr	r3, [pc, #268]	; (8006db4 <pvPortMalloc+0x18c>)
 8006ca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ca8:	4b42      	ldr	r3, [pc, #264]	; (8006db4 <pvPortMalloc+0x18c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cae:	e004      	b.n	8006cba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d903      	bls.n	8006ccc <pvPortMalloc+0xa4>
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1f1      	bne.n	8006cb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ccc:	4b36      	ldr	r3, [pc, #216]	; (8006da8 <pvPortMalloc+0x180>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d050      	beq.n	8006d78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2208      	movs	r2, #8
 8006cdc:	4413      	add	r3, r2
 8006cde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	1ad2      	subs	r2, r2, r3
 8006cf0:	2308      	movs	r3, #8
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d91f      	bls.n	8006d38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <pvPortMalloc+0xf8>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	613b      	str	r3, [r7, #16]
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	1ad2      	subs	r2, r2, r3
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d32:	69b8      	ldr	r0, [r7, #24]
 8006d34:	f000 f908 	bl	8006f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d38:	4b1d      	ldr	r3, [pc, #116]	; (8006db0 <pvPortMalloc+0x188>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	4a1b      	ldr	r2, [pc, #108]	; (8006db0 <pvPortMalloc+0x188>)
 8006d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d46:	4b1a      	ldr	r3, [pc, #104]	; (8006db0 <pvPortMalloc+0x188>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4b1b      	ldr	r3, [pc, #108]	; (8006db8 <pvPortMalloc+0x190>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d203      	bcs.n	8006d5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d52:	4b17      	ldr	r3, [pc, #92]	; (8006db0 <pvPortMalloc+0x188>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a18      	ldr	r2, [pc, #96]	; (8006db8 <pvPortMalloc+0x190>)
 8006d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <pvPortMalloc+0x184>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	431a      	orrs	r2, r3
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d6e:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <pvPortMalloc+0x194>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3301      	adds	r3, #1
 8006d74:	4a11      	ldr	r2, [pc, #68]	; (8006dbc <pvPortMalloc+0x194>)
 8006d76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d78:	f7fe fd06 	bl	8005788 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <pvPortMalloc+0x174>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	60fb      	str	r3, [r7, #12]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <pvPortMalloc+0x172>
	return pvReturn;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3728      	adds	r7, #40	; 0x28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20004bd4 	.word	0x20004bd4
 8006dac:	20004be8 	.word	0x20004be8
 8006db0:	20004bd8 	.word	0x20004bd8
 8006db4:	20004bcc 	.word	0x20004bcc
 8006db8:	20004bdc 	.word	0x20004bdc
 8006dbc:	20004be0 	.word	0x20004be0

08006dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d04d      	beq.n	8006e6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dd2:	2308      	movs	r3, #8
 8006dd4:	425b      	negs	r3, r3
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4413      	add	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	4b24      	ldr	r3, [pc, #144]	; (8006e78 <vPortFree+0xb8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4013      	ands	r3, r2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <vPortFree+0x44>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	60fb      	str	r3, [r7, #12]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <vPortFree+0x62>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	60bb      	str	r3, [r7, #8]
}
 8006e1e:	bf00      	nop
 8006e20:	e7fe      	b.n	8006e20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <vPortFree+0xb8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01e      	beq.n	8006e6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d11a      	bne.n	8006e6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	4b0e      	ldr	r3, [pc, #56]	; (8006e78 <vPortFree+0xb8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	43db      	mvns	r3, r3
 8006e42:	401a      	ands	r2, r3
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e48:	f7fe fc90 	bl	800576c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <vPortFree+0xbc>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4413      	add	r3, r2
 8006e56:	4a09      	ldr	r2, [pc, #36]	; (8006e7c <vPortFree+0xbc>)
 8006e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e5a:	6938      	ldr	r0, [r7, #16]
 8006e5c:	f000 f874 	bl	8006f48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e60:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <vPortFree+0xc0>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	4a06      	ldr	r2, [pc, #24]	; (8006e80 <vPortFree+0xc0>)
 8006e68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e6a:	f7fe fc8d 	bl	8005788 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e6e:	bf00      	nop
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20004be8 	.word	0x20004be8
 8006e7c:	20004bd8 	.word	0x20004bd8
 8006e80:	20004be4 	.word	0x20004be4

08006e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e90:	4b27      	ldr	r3, [pc, #156]	; (8006f30 <prvHeapInit+0xac>)
 8006e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00c      	beq.n	8006eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3307      	adds	r3, #7
 8006ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0307 	bic.w	r3, r3, #7
 8006eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	4a1f      	ldr	r2, [pc, #124]	; (8006f30 <prvHeapInit+0xac>)
 8006eb4:	4413      	add	r3, r2
 8006eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ebc:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <prvHeapInit+0xb0>)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ec2:	4b1c      	ldr	r3, [pc, #112]	; (8006f34 <prvHeapInit+0xb0>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	4413      	add	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ed0:	2208      	movs	r2, #8
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	1a9b      	subs	r3, r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0307 	bic.w	r3, r3, #7
 8006ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4a15      	ldr	r2, [pc, #84]	; (8006f38 <prvHeapInit+0xb4>)
 8006ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ee6:	4b14      	ldr	r3, [pc, #80]	; (8006f38 <prvHeapInit+0xb4>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2200      	movs	r2, #0
 8006eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eee:	4b12      	ldr	r3, [pc, #72]	; (8006f38 <prvHeapInit+0xb4>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	1ad2      	subs	r2, r2, r3
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f04:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <prvHeapInit+0xb4>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	4a0a      	ldr	r2, [pc, #40]	; (8006f3c <prvHeapInit+0xb8>)
 8006f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	4a09      	ldr	r2, [pc, #36]	; (8006f40 <prvHeapInit+0xbc>)
 8006f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f1c:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <prvHeapInit+0xc0>)
 8006f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f22:	601a      	str	r2, [r3, #0]
}
 8006f24:	bf00      	nop
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	20000fcc 	.word	0x20000fcc
 8006f34:	20004bcc 	.word	0x20004bcc
 8006f38:	20004bd4 	.word	0x20004bd4
 8006f3c:	20004bdc 	.word	0x20004bdc
 8006f40:	20004bd8 	.word	0x20004bd8
 8006f44:	20004be8 	.word	0x20004be8

08006f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f50:	4b28      	ldr	r3, [pc, #160]	; (8006ff4 <prvInsertBlockIntoFreeList+0xac>)
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	e002      	b.n	8006f5c <prvInsertBlockIntoFreeList+0x14>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d8f7      	bhi.n	8006f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	4413      	add	r3, r2
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d108      	bne.n	8006f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	441a      	add	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	441a      	add	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d118      	bne.n	8006fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	4b15      	ldr	r3, [pc, #84]	; (8006ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d00d      	beq.n	8006fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	441a      	add	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	e008      	b.n	8006fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fc6:	4b0c      	ldr	r3, [pc, #48]	; (8006ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	e003      	b.n	8006fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d002      	beq.n	8006fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fe6:	bf00      	nop
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20004bcc 	.word	0x20004bcc
 8006ff8:	20004bd4 	.word	0x20004bd4

08006ffc <__cvt>:
 8006ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007000:	ec55 4b10 	vmov	r4, r5, d0
 8007004:	2d00      	cmp	r5, #0
 8007006:	460e      	mov	r6, r1
 8007008:	4619      	mov	r1, r3
 800700a:	462b      	mov	r3, r5
 800700c:	bfbb      	ittet	lt
 800700e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007012:	461d      	movlt	r5, r3
 8007014:	2300      	movge	r3, #0
 8007016:	232d      	movlt	r3, #45	; 0x2d
 8007018:	700b      	strb	r3, [r1, #0]
 800701a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800701c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007020:	4691      	mov	r9, r2
 8007022:	f023 0820 	bic.w	r8, r3, #32
 8007026:	bfbc      	itt	lt
 8007028:	4622      	movlt	r2, r4
 800702a:	4614      	movlt	r4, r2
 800702c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007030:	d005      	beq.n	800703e <__cvt+0x42>
 8007032:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007036:	d100      	bne.n	800703a <__cvt+0x3e>
 8007038:	3601      	adds	r6, #1
 800703a:	2102      	movs	r1, #2
 800703c:	e000      	b.n	8007040 <__cvt+0x44>
 800703e:	2103      	movs	r1, #3
 8007040:	ab03      	add	r3, sp, #12
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	ab02      	add	r3, sp, #8
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	ec45 4b10 	vmov	d0, r4, r5
 800704c:	4653      	mov	r3, sl
 800704e:	4632      	mov	r2, r6
 8007050:	f001 f88e 	bl	8008170 <_dtoa_r>
 8007054:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007058:	4607      	mov	r7, r0
 800705a:	d102      	bne.n	8007062 <__cvt+0x66>
 800705c:	f019 0f01 	tst.w	r9, #1
 8007060:	d022      	beq.n	80070a8 <__cvt+0xac>
 8007062:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007066:	eb07 0906 	add.w	r9, r7, r6
 800706a:	d110      	bne.n	800708e <__cvt+0x92>
 800706c:	783b      	ldrb	r3, [r7, #0]
 800706e:	2b30      	cmp	r3, #48	; 0x30
 8007070:	d10a      	bne.n	8007088 <__cvt+0x8c>
 8007072:	2200      	movs	r2, #0
 8007074:	2300      	movs	r3, #0
 8007076:	4620      	mov	r0, r4
 8007078:	4629      	mov	r1, r5
 800707a:	f7f9 fd2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800707e:	b918      	cbnz	r0, 8007088 <__cvt+0x8c>
 8007080:	f1c6 0601 	rsb	r6, r6, #1
 8007084:	f8ca 6000 	str.w	r6, [sl]
 8007088:	f8da 3000 	ldr.w	r3, [sl]
 800708c:	4499      	add	r9, r3
 800708e:	2200      	movs	r2, #0
 8007090:	2300      	movs	r3, #0
 8007092:	4620      	mov	r0, r4
 8007094:	4629      	mov	r1, r5
 8007096:	f7f9 fd1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800709a:	b108      	cbz	r0, 80070a0 <__cvt+0xa4>
 800709c:	f8cd 900c 	str.w	r9, [sp, #12]
 80070a0:	2230      	movs	r2, #48	; 0x30
 80070a2:	9b03      	ldr	r3, [sp, #12]
 80070a4:	454b      	cmp	r3, r9
 80070a6:	d307      	bcc.n	80070b8 <__cvt+0xbc>
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070ac:	1bdb      	subs	r3, r3, r7
 80070ae:	4638      	mov	r0, r7
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	b004      	add	sp, #16
 80070b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b8:	1c59      	adds	r1, r3, #1
 80070ba:	9103      	str	r1, [sp, #12]
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	e7f0      	b.n	80070a2 <__cvt+0xa6>

080070c0 <__exponent>:
 80070c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070c2:	4603      	mov	r3, r0
 80070c4:	2900      	cmp	r1, #0
 80070c6:	bfb8      	it	lt
 80070c8:	4249      	neglt	r1, r1
 80070ca:	f803 2b02 	strb.w	r2, [r3], #2
 80070ce:	bfb4      	ite	lt
 80070d0:	222d      	movlt	r2, #45	; 0x2d
 80070d2:	222b      	movge	r2, #43	; 0x2b
 80070d4:	2909      	cmp	r1, #9
 80070d6:	7042      	strb	r2, [r0, #1]
 80070d8:	dd2a      	ble.n	8007130 <__exponent+0x70>
 80070da:	f10d 0207 	add.w	r2, sp, #7
 80070de:	4617      	mov	r7, r2
 80070e0:	260a      	movs	r6, #10
 80070e2:	4694      	mov	ip, r2
 80070e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80070e8:	fb06 1415 	mls	r4, r6, r5, r1
 80070ec:	3430      	adds	r4, #48	; 0x30
 80070ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80070f2:	460c      	mov	r4, r1
 80070f4:	2c63      	cmp	r4, #99	; 0x63
 80070f6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80070fa:	4629      	mov	r1, r5
 80070fc:	dcf1      	bgt.n	80070e2 <__exponent+0x22>
 80070fe:	3130      	adds	r1, #48	; 0x30
 8007100:	f1ac 0402 	sub.w	r4, ip, #2
 8007104:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007108:	1c41      	adds	r1, r0, #1
 800710a:	4622      	mov	r2, r4
 800710c:	42ba      	cmp	r2, r7
 800710e:	d30a      	bcc.n	8007126 <__exponent+0x66>
 8007110:	f10d 0209 	add.w	r2, sp, #9
 8007114:	eba2 020c 	sub.w	r2, r2, ip
 8007118:	42bc      	cmp	r4, r7
 800711a:	bf88      	it	hi
 800711c:	2200      	movhi	r2, #0
 800711e:	4413      	add	r3, r2
 8007120:	1a18      	subs	r0, r3, r0
 8007122:	b003      	add	sp, #12
 8007124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007126:	f812 5b01 	ldrb.w	r5, [r2], #1
 800712a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800712e:	e7ed      	b.n	800710c <__exponent+0x4c>
 8007130:	2330      	movs	r3, #48	; 0x30
 8007132:	3130      	adds	r1, #48	; 0x30
 8007134:	7083      	strb	r3, [r0, #2]
 8007136:	70c1      	strb	r1, [r0, #3]
 8007138:	1d03      	adds	r3, r0, #4
 800713a:	e7f1      	b.n	8007120 <__exponent+0x60>

0800713c <_printf_float>:
 800713c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007140:	ed2d 8b02 	vpush	{d8}
 8007144:	b08d      	sub	sp, #52	; 0x34
 8007146:	460c      	mov	r4, r1
 8007148:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800714c:	4616      	mov	r6, r2
 800714e:	461f      	mov	r7, r3
 8007150:	4605      	mov	r5, r0
 8007152:	f000 fef7 	bl	8007f44 <_localeconv_r>
 8007156:	f8d0 a000 	ldr.w	sl, [r0]
 800715a:	4650      	mov	r0, sl
 800715c:	f7f9 f890 	bl	8000280 <strlen>
 8007160:	2300      	movs	r3, #0
 8007162:	930a      	str	r3, [sp, #40]	; 0x28
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	9305      	str	r3, [sp, #20]
 8007168:	f8d8 3000 	ldr.w	r3, [r8]
 800716c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007170:	3307      	adds	r3, #7
 8007172:	f023 0307 	bic.w	r3, r3, #7
 8007176:	f103 0208 	add.w	r2, r3, #8
 800717a:	f8c8 2000 	str.w	r2, [r8]
 800717e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007182:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007186:	9307      	str	r3, [sp, #28]
 8007188:	f8cd 8018 	str.w	r8, [sp, #24]
 800718c:	ee08 0a10 	vmov	s16, r0
 8007190:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007198:	4b9e      	ldr	r3, [pc, #632]	; (8007414 <_printf_float+0x2d8>)
 800719a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800719e:	f7f9 fccd 	bl	8000b3c <__aeabi_dcmpun>
 80071a2:	bb88      	cbnz	r0, 8007208 <_printf_float+0xcc>
 80071a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071a8:	4b9a      	ldr	r3, [pc, #616]	; (8007414 <_printf_float+0x2d8>)
 80071aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ae:	f7f9 fca7 	bl	8000b00 <__aeabi_dcmple>
 80071b2:	bb48      	cbnz	r0, 8007208 <_printf_float+0xcc>
 80071b4:	2200      	movs	r2, #0
 80071b6:	2300      	movs	r3, #0
 80071b8:	4640      	mov	r0, r8
 80071ba:	4649      	mov	r1, r9
 80071bc:	f7f9 fc96 	bl	8000aec <__aeabi_dcmplt>
 80071c0:	b110      	cbz	r0, 80071c8 <_printf_float+0x8c>
 80071c2:	232d      	movs	r3, #45	; 0x2d
 80071c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071c8:	4a93      	ldr	r2, [pc, #588]	; (8007418 <_printf_float+0x2dc>)
 80071ca:	4b94      	ldr	r3, [pc, #592]	; (800741c <_printf_float+0x2e0>)
 80071cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80071d0:	bf94      	ite	ls
 80071d2:	4690      	movls	r8, r2
 80071d4:	4698      	movhi	r8, r3
 80071d6:	2303      	movs	r3, #3
 80071d8:	6123      	str	r3, [r4, #16]
 80071da:	9b05      	ldr	r3, [sp, #20]
 80071dc:	f023 0304 	bic.w	r3, r3, #4
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	f04f 0900 	mov.w	r9, #0
 80071e6:	9700      	str	r7, [sp, #0]
 80071e8:	4633      	mov	r3, r6
 80071ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80071ec:	4621      	mov	r1, r4
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 f9da 	bl	80075a8 <_printf_common>
 80071f4:	3001      	adds	r0, #1
 80071f6:	f040 8090 	bne.w	800731a <_printf_float+0x1de>
 80071fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071fe:	b00d      	add	sp, #52	; 0x34
 8007200:	ecbd 8b02 	vpop	{d8}
 8007204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	4640      	mov	r0, r8
 800720e:	4649      	mov	r1, r9
 8007210:	f7f9 fc94 	bl	8000b3c <__aeabi_dcmpun>
 8007214:	b140      	cbz	r0, 8007228 <_printf_float+0xec>
 8007216:	464b      	mov	r3, r9
 8007218:	2b00      	cmp	r3, #0
 800721a:	bfbc      	itt	lt
 800721c:	232d      	movlt	r3, #45	; 0x2d
 800721e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007222:	4a7f      	ldr	r2, [pc, #508]	; (8007420 <_printf_float+0x2e4>)
 8007224:	4b7f      	ldr	r3, [pc, #508]	; (8007424 <_printf_float+0x2e8>)
 8007226:	e7d1      	b.n	80071cc <_printf_float+0x90>
 8007228:	6863      	ldr	r3, [r4, #4]
 800722a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800722e:	9206      	str	r2, [sp, #24]
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	d13f      	bne.n	80072b4 <_printf_float+0x178>
 8007234:	2306      	movs	r3, #6
 8007236:	6063      	str	r3, [r4, #4]
 8007238:	9b05      	ldr	r3, [sp, #20]
 800723a:	6861      	ldr	r1, [r4, #4]
 800723c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007240:	2300      	movs	r3, #0
 8007242:	9303      	str	r3, [sp, #12]
 8007244:	ab0a      	add	r3, sp, #40	; 0x28
 8007246:	e9cd b301 	strd	fp, r3, [sp, #4]
 800724a:	ab09      	add	r3, sp, #36	; 0x24
 800724c:	ec49 8b10 	vmov	d0, r8, r9
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	6022      	str	r2, [r4, #0]
 8007254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007258:	4628      	mov	r0, r5
 800725a:	f7ff fecf 	bl	8006ffc <__cvt>
 800725e:	9b06      	ldr	r3, [sp, #24]
 8007260:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007262:	2b47      	cmp	r3, #71	; 0x47
 8007264:	4680      	mov	r8, r0
 8007266:	d108      	bne.n	800727a <_printf_float+0x13e>
 8007268:	1cc8      	adds	r0, r1, #3
 800726a:	db02      	blt.n	8007272 <_printf_float+0x136>
 800726c:	6863      	ldr	r3, [r4, #4]
 800726e:	4299      	cmp	r1, r3
 8007270:	dd41      	ble.n	80072f6 <_printf_float+0x1ba>
 8007272:	f1ab 0302 	sub.w	r3, fp, #2
 8007276:	fa5f fb83 	uxtb.w	fp, r3
 800727a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800727e:	d820      	bhi.n	80072c2 <_printf_float+0x186>
 8007280:	3901      	subs	r1, #1
 8007282:	465a      	mov	r2, fp
 8007284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007288:	9109      	str	r1, [sp, #36]	; 0x24
 800728a:	f7ff ff19 	bl	80070c0 <__exponent>
 800728e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007290:	1813      	adds	r3, r2, r0
 8007292:	2a01      	cmp	r2, #1
 8007294:	4681      	mov	r9, r0
 8007296:	6123      	str	r3, [r4, #16]
 8007298:	dc02      	bgt.n	80072a0 <_printf_float+0x164>
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	07d2      	lsls	r2, r2, #31
 800729e:	d501      	bpl.n	80072a4 <_printf_float+0x168>
 80072a0:	3301      	adds	r3, #1
 80072a2:	6123      	str	r3, [r4, #16]
 80072a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d09c      	beq.n	80071e6 <_printf_float+0xaa>
 80072ac:	232d      	movs	r3, #45	; 0x2d
 80072ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072b2:	e798      	b.n	80071e6 <_printf_float+0xaa>
 80072b4:	9a06      	ldr	r2, [sp, #24]
 80072b6:	2a47      	cmp	r2, #71	; 0x47
 80072b8:	d1be      	bne.n	8007238 <_printf_float+0xfc>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1bc      	bne.n	8007238 <_printf_float+0xfc>
 80072be:	2301      	movs	r3, #1
 80072c0:	e7b9      	b.n	8007236 <_printf_float+0xfa>
 80072c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80072c6:	d118      	bne.n	80072fa <_printf_float+0x1be>
 80072c8:	2900      	cmp	r1, #0
 80072ca:	6863      	ldr	r3, [r4, #4]
 80072cc:	dd0b      	ble.n	80072e6 <_printf_float+0x1aa>
 80072ce:	6121      	str	r1, [r4, #16]
 80072d0:	b913      	cbnz	r3, 80072d8 <_printf_float+0x19c>
 80072d2:	6822      	ldr	r2, [r4, #0]
 80072d4:	07d0      	lsls	r0, r2, #31
 80072d6:	d502      	bpl.n	80072de <_printf_float+0x1a2>
 80072d8:	3301      	adds	r3, #1
 80072da:	440b      	add	r3, r1
 80072dc:	6123      	str	r3, [r4, #16]
 80072de:	65a1      	str	r1, [r4, #88]	; 0x58
 80072e0:	f04f 0900 	mov.w	r9, #0
 80072e4:	e7de      	b.n	80072a4 <_printf_float+0x168>
 80072e6:	b913      	cbnz	r3, 80072ee <_printf_float+0x1b2>
 80072e8:	6822      	ldr	r2, [r4, #0]
 80072ea:	07d2      	lsls	r2, r2, #31
 80072ec:	d501      	bpl.n	80072f2 <_printf_float+0x1b6>
 80072ee:	3302      	adds	r3, #2
 80072f0:	e7f4      	b.n	80072dc <_printf_float+0x1a0>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e7f2      	b.n	80072dc <_printf_float+0x1a0>
 80072f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80072fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072fc:	4299      	cmp	r1, r3
 80072fe:	db05      	blt.n	800730c <_printf_float+0x1d0>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	6121      	str	r1, [r4, #16]
 8007304:	07d8      	lsls	r0, r3, #31
 8007306:	d5ea      	bpl.n	80072de <_printf_float+0x1a2>
 8007308:	1c4b      	adds	r3, r1, #1
 800730a:	e7e7      	b.n	80072dc <_printf_float+0x1a0>
 800730c:	2900      	cmp	r1, #0
 800730e:	bfd4      	ite	le
 8007310:	f1c1 0202 	rsble	r2, r1, #2
 8007314:	2201      	movgt	r2, #1
 8007316:	4413      	add	r3, r2
 8007318:	e7e0      	b.n	80072dc <_printf_float+0x1a0>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	055a      	lsls	r2, r3, #21
 800731e:	d407      	bmi.n	8007330 <_printf_float+0x1f4>
 8007320:	6923      	ldr	r3, [r4, #16]
 8007322:	4642      	mov	r2, r8
 8007324:	4631      	mov	r1, r6
 8007326:	4628      	mov	r0, r5
 8007328:	47b8      	blx	r7
 800732a:	3001      	adds	r0, #1
 800732c:	d12c      	bne.n	8007388 <_printf_float+0x24c>
 800732e:	e764      	b.n	80071fa <_printf_float+0xbe>
 8007330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007334:	f240 80e0 	bls.w	80074f8 <_printf_float+0x3bc>
 8007338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800733c:	2200      	movs	r2, #0
 800733e:	2300      	movs	r3, #0
 8007340:	f7f9 fbca 	bl	8000ad8 <__aeabi_dcmpeq>
 8007344:	2800      	cmp	r0, #0
 8007346:	d034      	beq.n	80073b2 <_printf_float+0x276>
 8007348:	4a37      	ldr	r2, [pc, #220]	; (8007428 <_printf_float+0x2ec>)
 800734a:	2301      	movs	r3, #1
 800734c:	4631      	mov	r1, r6
 800734e:	4628      	mov	r0, r5
 8007350:	47b8      	blx	r7
 8007352:	3001      	adds	r0, #1
 8007354:	f43f af51 	beq.w	80071fa <_printf_float+0xbe>
 8007358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800735c:	429a      	cmp	r2, r3
 800735e:	db02      	blt.n	8007366 <_printf_float+0x22a>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	07d8      	lsls	r0, r3, #31
 8007364:	d510      	bpl.n	8007388 <_printf_float+0x24c>
 8007366:	ee18 3a10 	vmov	r3, s16
 800736a:	4652      	mov	r2, sl
 800736c:	4631      	mov	r1, r6
 800736e:	4628      	mov	r0, r5
 8007370:	47b8      	blx	r7
 8007372:	3001      	adds	r0, #1
 8007374:	f43f af41 	beq.w	80071fa <_printf_float+0xbe>
 8007378:	f04f 0800 	mov.w	r8, #0
 800737c:	f104 091a 	add.w	r9, r4, #26
 8007380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007382:	3b01      	subs	r3, #1
 8007384:	4543      	cmp	r3, r8
 8007386:	dc09      	bgt.n	800739c <_printf_float+0x260>
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	079b      	lsls	r3, r3, #30
 800738c:	f100 8107 	bmi.w	800759e <_printf_float+0x462>
 8007390:	68e0      	ldr	r0, [r4, #12]
 8007392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007394:	4298      	cmp	r0, r3
 8007396:	bfb8      	it	lt
 8007398:	4618      	movlt	r0, r3
 800739a:	e730      	b.n	80071fe <_printf_float+0xc2>
 800739c:	2301      	movs	r3, #1
 800739e:	464a      	mov	r2, r9
 80073a0:	4631      	mov	r1, r6
 80073a2:	4628      	mov	r0, r5
 80073a4:	47b8      	blx	r7
 80073a6:	3001      	adds	r0, #1
 80073a8:	f43f af27 	beq.w	80071fa <_printf_float+0xbe>
 80073ac:	f108 0801 	add.w	r8, r8, #1
 80073b0:	e7e6      	b.n	8007380 <_printf_float+0x244>
 80073b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	dc39      	bgt.n	800742c <_printf_float+0x2f0>
 80073b8:	4a1b      	ldr	r2, [pc, #108]	; (8007428 <_printf_float+0x2ec>)
 80073ba:	2301      	movs	r3, #1
 80073bc:	4631      	mov	r1, r6
 80073be:	4628      	mov	r0, r5
 80073c0:	47b8      	blx	r7
 80073c2:	3001      	adds	r0, #1
 80073c4:	f43f af19 	beq.w	80071fa <_printf_float+0xbe>
 80073c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80073cc:	4313      	orrs	r3, r2
 80073ce:	d102      	bne.n	80073d6 <_printf_float+0x29a>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	07d9      	lsls	r1, r3, #31
 80073d4:	d5d8      	bpl.n	8007388 <_printf_float+0x24c>
 80073d6:	ee18 3a10 	vmov	r3, s16
 80073da:	4652      	mov	r2, sl
 80073dc:	4631      	mov	r1, r6
 80073de:	4628      	mov	r0, r5
 80073e0:	47b8      	blx	r7
 80073e2:	3001      	adds	r0, #1
 80073e4:	f43f af09 	beq.w	80071fa <_printf_float+0xbe>
 80073e8:	f04f 0900 	mov.w	r9, #0
 80073ec:	f104 0a1a 	add.w	sl, r4, #26
 80073f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f2:	425b      	negs	r3, r3
 80073f4:	454b      	cmp	r3, r9
 80073f6:	dc01      	bgt.n	80073fc <_printf_float+0x2c0>
 80073f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073fa:	e792      	b.n	8007322 <_printf_float+0x1e6>
 80073fc:	2301      	movs	r3, #1
 80073fe:	4652      	mov	r2, sl
 8007400:	4631      	mov	r1, r6
 8007402:	4628      	mov	r0, r5
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	f43f aef7 	beq.w	80071fa <_printf_float+0xbe>
 800740c:	f109 0901 	add.w	r9, r9, #1
 8007410:	e7ee      	b.n	80073f0 <_printf_float+0x2b4>
 8007412:	bf00      	nop
 8007414:	7fefffff 	.word	0x7fefffff
 8007418:	0800b8cc 	.word	0x0800b8cc
 800741c:	0800b8d0 	.word	0x0800b8d0
 8007420:	0800b8d4 	.word	0x0800b8d4
 8007424:	0800b8d8 	.word	0x0800b8d8
 8007428:	0800b8dc 	.word	0x0800b8dc
 800742c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800742e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007430:	429a      	cmp	r2, r3
 8007432:	bfa8      	it	ge
 8007434:	461a      	movge	r2, r3
 8007436:	2a00      	cmp	r2, #0
 8007438:	4691      	mov	r9, r2
 800743a:	dc37      	bgt.n	80074ac <_printf_float+0x370>
 800743c:	f04f 0b00 	mov.w	fp, #0
 8007440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007444:	f104 021a 	add.w	r2, r4, #26
 8007448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800744a:	9305      	str	r3, [sp, #20]
 800744c:	eba3 0309 	sub.w	r3, r3, r9
 8007450:	455b      	cmp	r3, fp
 8007452:	dc33      	bgt.n	80074bc <_printf_float+0x380>
 8007454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007458:	429a      	cmp	r2, r3
 800745a:	db3b      	blt.n	80074d4 <_printf_float+0x398>
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	07da      	lsls	r2, r3, #31
 8007460:	d438      	bmi.n	80074d4 <_printf_float+0x398>
 8007462:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007466:	eba2 0903 	sub.w	r9, r2, r3
 800746a:	9b05      	ldr	r3, [sp, #20]
 800746c:	1ad2      	subs	r2, r2, r3
 800746e:	4591      	cmp	r9, r2
 8007470:	bfa8      	it	ge
 8007472:	4691      	movge	r9, r2
 8007474:	f1b9 0f00 	cmp.w	r9, #0
 8007478:	dc35      	bgt.n	80074e6 <_printf_float+0x3aa>
 800747a:	f04f 0800 	mov.w	r8, #0
 800747e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007482:	f104 0a1a 	add.w	sl, r4, #26
 8007486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800748a:	1a9b      	subs	r3, r3, r2
 800748c:	eba3 0309 	sub.w	r3, r3, r9
 8007490:	4543      	cmp	r3, r8
 8007492:	f77f af79 	ble.w	8007388 <_printf_float+0x24c>
 8007496:	2301      	movs	r3, #1
 8007498:	4652      	mov	r2, sl
 800749a:	4631      	mov	r1, r6
 800749c:	4628      	mov	r0, r5
 800749e:	47b8      	blx	r7
 80074a0:	3001      	adds	r0, #1
 80074a2:	f43f aeaa 	beq.w	80071fa <_printf_float+0xbe>
 80074a6:	f108 0801 	add.w	r8, r8, #1
 80074aa:	e7ec      	b.n	8007486 <_printf_float+0x34a>
 80074ac:	4613      	mov	r3, r2
 80074ae:	4631      	mov	r1, r6
 80074b0:	4642      	mov	r2, r8
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	d1c0      	bne.n	800743c <_printf_float+0x300>
 80074ba:	e69e      	b.n	80071fa <_printf_float+0xbe>
 80074bc:	2301      	movs	r3, #1
 80074be:	4631      	mov	r1, r6
 80074c0:	4628      	mov	r0, r5
 80074c2:	9205      	str	r2, [sp, #20]
 80074c4:	47b8      	blx	r7
 80074c6:	3001      	adds	r0, #1
 80074c8:	f43f ae97 	beq.w	80071fa <_printf_float+0xbe>
 80074cc:	9a05      	ldr	r2, [sp, #20]
 80074ce:	f10b 0b01 	add.w	fp, fp, #1
 80074d2:	e7b9      	b.n	8007448 <_printf_float+0x30c>
 80074d4:	ee18 3a10 	vmov	r3, s16
 80074d8:	4652      	mov	r2, sl
 80074da:	4631      	mov	r1, r6
 80074dc:	4628      	mov	r0, r5
 80074de:	47b8      	blx	r7
 80074e0:	3001      	adds	r0, #1
 80074e2:	d1be      	bne.n	8007462 <_printf_float+0x326>
 80074e4:	e689      	b.n	80071fa <_printf_float+0xbe>
 80074e6:	9a05      	ldr	r2, [sp, #20]
 80074e8:	464b      	mov	r3, r9
 80074ea:	4442      	add	r2, r8
 80074ec:	4631      	mov	r1, r6
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b8      	blx	r7
 80074f2:	3001      	adds	r0, #1
 80074f4:	d1c1      	bne.n	800747a <_printf_float+0x33e>
 80074f6:	e680      	b.n	80071fa <_printf_float+0xbe>
 80074f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074fa:	2a01      	cmp	r2, #1
 80074fc:	dc01      	bgt.n	8007502 <_printf_float+0x3c6>
 80074fe:	07db      	lsls	r3, r3, #31
 8007500:	d53a      	bpl.n	8007578 <_printf_float+0x43c>
 8007502:	2301      	movs	r3, #1
 8007504:	4642      	mov	r2, r8
 8007506:	4631      	mov	r1, r6
 8007508:	4628      	mov	r0, r5
 800750a:	47b8      	blx	r7
 800750c:	3001      	adds	r0, #1
 800750e:	f43f ae74 	beq.w	80071fa <_printf_float+0xbe>
 8007512:	ee18 3a10 	vmov	r3, s16
 8007516:	4652      	mov	r2, sl
 8007518:	4631      	mov	r1, r6
 800751a:	4628      	mov	r0, r5
 800751c:	47b8      	blx	r7
 800751e:	3001      	adds	r0, #1
 8007520:	f43f ae6b 	beq.w	80071fa <_printf_float+0xbe>
 8007524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007528:	2200      	movs	r2, #0
 800752a:	2300      	movs	r3, #0
 800752c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007530:	f7f9 fad2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007534:	b9d8      	cbnz	r0, 800756e <_printf_float+0x432>
 8007536:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800753a:	f108 0201 	add.w	r2, r8, #1
 800753e:	4631      	mov	r1, r6
 8007540:	4628      	mov	r0, r5
 8007542:	47b8      	blx	r7
 8007544:	3001      	adds	r0, #1
 8007546:	d10e      	bne.n	8007566 <_printf_float+0x42a>
 8007548:	e657      	b.n	80071fa <_printf_float+0xbe>
 800754a:	2301      	movs	r3, #1
 800754c:	4652      	mov	r2, sl
 800754e:	4631      	mov	r1, r6
 8007550:	4628      	mov	r0, r5
 8007552:	47b8      	blx	r7
 8007554:	3001      	adds	r0, #1
 8007556:	f43f ae50 	beq.w	80071fa <_printf_float+0xbe>
 800755a:	f108 0801 	add.w	r8, r8, #1
 800755e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007560:	3b01      	subs	r3, #1
 8007562:	4543      	cmp	r3, r8
 8007564:	dcf1      	bgt.n	800754a <_printf_float+0x40e>
 8007566:	464b      	mov	r3, r9
 8007568:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800756c:	e6da      	b.n	8007324 <_printf_float+0x1e8>
 800756e:	f04f 0800 	mov.w	r8, #0
 8007572:	f104 0a1a 	add.w	sl, r4, #26
 8007576:	e7f2      	b.n	800755e <_printf_float+0x422>
 8007578:	2301      	movs	r3, #1
 800757a:	4642      	mov	r2, r8
 800757c:	e7df      	b.n	800753e <_printf_float+0x402>
 800757e:	2301      	movs	r3, #1
 8007580:	464a      	mov	r2, r9
 8007582:	4631      	mov	r1, r6
 8007584:	4628      	mov	r0, r5
 8007586:	47b8      	blx	r7
 8007588:	3001      	adds	r0, #1
 800758a:	f43f ae36 	beq.w	80071fa <_printf_float+0xbe>
 800758e:	f108 0801 	add.w	r8, r8, #1
 8007592:	68e3      	ldr	r3, [r4, #12]
 8007594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007596:	1a5b      	subs	r3, r3, r1
 8007598:	4543      	cmp	r3, r8
 800759a:	dcf0      	bgt.n	800757e <_printf_float+0x442>
 800759c:	e6f8      	b.n	8007390 <_printf_float+0x254>
 800759e:	f04f 0800 	mov.w	r8, #0
 80075a2:	f104 0919 	add.w	r9, r4, #25
 80075a6:	e7f4      	b.n	8007592 <_printf_float+0x456>

080075a8 <_printf_common>:
 80075a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ac:	4616      	mov	r6, r2
 80075ae:	4699      	mov	r9, r3
 80075b0:	688a      	ldr	r2, [r1, #8]
 80075b2:	690b      	ldr	r3, [r1, #16]
 80075b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075b8:	4293      	cmp	r3, r2
 80075ba:	bfb8      	it	lt
 80075bc:	4613      	movlt	r3, r2
 80075be:	6033      	str	r3, [r6, #0]
 80075c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075c4:	4607      	mov	r7, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	b10a      	cbz	r2, 80075ce <_printf_common+0x26>
 80075ca:	3301      	adds	r3, #1
 80075cc:	6033      	str	r3, [r6, #0]
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	0699      	lsls	r1, r3, #26
 80075d2:	bf42      	ittt	mi
 80075d4:	6833      	ldrmi	r3, [r6, #0]
 80075d6:	3302      	addmi	r3, #2
 80075d8:	6033      	strmi	r3, [r6, #0]
 80075da:	6825      	ldr	r5, [r4, #0]
 80075dc:	f015 0506 	ands.w	r5, r5, #6
 80075e0:	d106      	bne.n	80075f0 <_printf_common+0x48>
 80075e2:	f104 0a19 	add.w	sl, r4, #25
 80075e6:	68e3      	ldr	r3, [r4, #12]
 80075e8:	6832      	ldr	r2, [r6, #0]
 80075ea:	1a9b      	subs	r3, r3, r2
 80075ec:	42ab      	cmp	r3, r5
 80075ee:	dc26      	bgt.n	800763e <_printf_common+0x96>
 80075f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075f4:	1e13      	subs	r3, r2, #0
 80075f6:	6822      	ldr	r2, [r4, #0]
 80075f8:	bf18      	it	ne
 80075fa:	2301      	movne	r3, #1
 80075fc:	0692      	lsls	r2, r2, #26
 80075fe:	d42b      	bmi.n	8007658 <_printf_common+0xb0>
 8007600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007604:	4649      	mov	r1, r9
 8007606:	4638      	mov	r0, r7
 8007608:	47c0      	blx	r8
 800760a:	3001      	adds	r0, #1
 800760c:	d01e      	beq.n	800764c <_printf_common+0xa4>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	6922      	ldr	r2, [r4, #16]
 8007612:	f003 0306 	and.w	r3, r3, #6
 8007616:	2b04      	cmp	r3, #4
 8007618:	bf02      	ittt	eq
 800761a:	68e5      	ldreq	r5, [r4, #12]
 800761c:	6833      	ldreq	r3, [r6, #0]
 800761e:	1aed      	subeq	r5, r5, r3
 8007620:	68a3      	ldr	r3, [r4, #8]
 8007622:	bf0c      	ite	eq
 8007624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007628:	2500      	movne	r5, #0
 800762a:	4293      	cmp	r3, r2
 800762c:	bfc4      	itt	gt
 800762e:	1a9b      	subgt	r3, r3, r2
 8007630:	18ed      	addgt	r5, r5, r3
 8007632:	2600      	movs	r6, #0
 8007634:	341a      	adds	r4, #26
 8007636:	42b5      	cmp	r5, r6
 8007638:	d11a      	bne.n	8007670 <_printf_common+0xc8>
 800763a:	2000      	movs	r0, #0
 800763c:	e008      	b.n	8007650 <_printf_common+0xa8>
 800763e:	2301      	movs	r3, #1
 8007640:	4652      	mov	r2, sl
 8007642:	4649      	mov	r1, r9
 8007644:	4638      	mov	r0, r7
 8007646:	47c0      	blx	r8
 8007648:	3001      	adds	r0, #1
 800764a:	d103      	bne.n	8007654 <_printf_common+0xac>
 800764c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007654:	3501      	adds	r5, #1
 8007656:	e7c6      	b.n	80075e6 <_printf_common+0x3e>
 8007658:	18e1      	adds	r1, r4, r3
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	2030      	movs	r0, #48	; 0x30
 800765e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007662:	4422      	add	r2, r4
 8007664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800766c:	3302      	adds	r3, #2
 800766e:	e7c7      	b.n	8007600 <_printf_common+0x58>
 8007670:	2301      	movs	r3, #1
 8007672:	4622      	mov	r2, r4
 8007674:	4649      	mov	r1, r9
 8007676:	4638      	mov	r0, r7
 8007678:	47c0      	blx	r8
 800767a:	3001      	adds	r0, #1
 800767c:	d0e6      	beq.n	800764c <_printf_common+0xa4>
 800767e:	3601      	adds	r6, #1
 8007680:	e7d9      	b.n	8007636 <_printf_common+0x8e>
	...

08007684 <_printf_i>:
 8007684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007688:	7e0f      	ldrb	r7, [r1, #24]
 800768a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800768c:	2f78      	cmp	r7, #120	; 0x78
 800768e:	4691      	mov	r9, r2
 8007690:	4680      	mov	r8, r0
 8007692:	460c      	mov	r4, r1
 8007694:	469a      	mov	sl, r3
 8007696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800769a:	d807      	bhi.n	80076ac <_printf_i+0x28>
 800769c:	2f62      	cmp	r7, #98	; 0x62
 800769e:	d80a      	bhi.n	80076b6 <_printf_i+0x32>
 80076a0:	2f00      	cmp	r7, #0
 80076a2:	f000 80d4 	beq.w	800784e <_printf_i+0x1ca>
 80076a6:	2f58      	cmp	r7, #88	; 0x58
 80076a8:	f000 80c0 	beq.w	800782c <_printf_i+0x1a8>
 80076ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076b4:	e03a      	b.n	800772c <_printf_i+0xa8>
 80076b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076ba:	2b15      	cmp	r3, #21
 80076bc:	d8f6      	bhi.n	80076ac <_printf_i+0x28>
 80076be:	a101      	add	r1, pc, #4	; (adr r1, 80076c4 <_printf_i+0x40>)
 80076c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076c4:	0800771d 	.word	0x0800771d
 80076c8:	08007731 	.word	0x08007731
 80076cc:	080076ad 	.word	0x080076ad
 80076d0:	080076ad 	.word	0x080076ad
 80076d4:	080076ad 	.word	0x080076ad
 80076d8:	080076ad 	.word	0x080076ad
 80076dc:	08007731 	.word	0x08007731
 80076e0:	080076ad 	.word	0x080076ad
 80076e4:	080076ad 	.word	0x080076ad
 80076e8:	080076ad 	.word	0x080076ad
 80076ec:	080076ad 	.word	0x080076ad
 80076f0:	08007835 	.word	0x08007835
 80076f4:	0800775d 	.word	0x0800775d
 80076f8:	080077ef 	.word	0x080077ef
 80076fc:	080076ad 	.word	0x080076ad
 8007700:	080076ad 	.word	0x080076ad
 8007704:	08007857 	.word	0x08007857
 8007708:	080076ad 	.word	0x080076ad
 800770c:	0800775d 	.word	0x0800775d
 8007710:	080076ad 	.word	0x080076ad
 8007714:	080076ad 	.word	0x080076ad
 8007718:	080077f7 	.word	0x080077f7
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	1d1a      	adds	r2, r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	602a      	str	r2, [r5, #0]
 8007724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800772c:	2301      	movs	r3, #1
 800772e:	e09f      	b.n	8007870 <_printf_i+0x1ec>
 8007730:	6820      	ldr	r0, [r4, #0]
 8007732:	682b      	ldr	r3, [r5, #0]
 8007734:	0607      	lsls	r7, r0, #24
 8007736:	f103 0104 	add.w	r1, r3, #4
 800773a:	6029      	str	r1, [r5, #0]
 800773c:	d501      	bpl.n	8007742 <_printf_i+0xbe>
 800773e:	681e      	ldr	r6, [r3, #0]
 8007740:	e003      	b.n	800774a <_printf_i+0xc6>
 8007742:	0646      	lsls	r6, r0, #25
 8007744:	d5fb      	bpl.n	800773e <_printf_i+0xba>
 8007746:	f9b3 6000 	ldrsh.w	r6, [r3]
 800774a:	2e00      	cmp	r6, #0
 800774c:	da03      	bge.n	8007756 <_printf_i+0xd2>
 800774e:	232d      	movs	r3, #45	; 0x2d
 8007750:	4276      	negs	r6, r6
 8007752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007756:	485a      	ldr	r0, [pc, #360]	; (80078c0 <_printf_i+0x23c>)
 8007758:	230a      	movs	r3, #10
 800775a:	e012      	b.n	8007782 <_printf_i+0xfe>
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	6820      	ldr	r0, [r4, #0]
 8007760:	1d19      	adds	r1, r3, #4
 8007762:	6029      	str	r1, [r5, #0]
 8007764:	0605      	lsls	r5, r0, #24
 8007766:	d501      	bpl.n	800776c <_printf_i+0xe8>
 8007768:	681e      	ldr	r6, [r3, #0]
 800776a:	e002      	b.n	8007772 <_printf_i+0xee>
 800776c:	0641      	lsls	r1, r0, #25
 800776e:	d5fb      	bpl.n	8007768 <_printf_i+0xe4>
 8007770:	881e      	ldrh	r6, [r3, #0]
 8007772:	4853      	ldr	r0, [pc, #332]	; (80078c0 <_printf_i+0x23c>)
 8007774:	2f6f      	cmp	r7, #111	; 0x6f
 8007776:	bf0c      	ite	eq
 8007778:	2308      	moveq	r3, #8
 800777a:	230a      	movne	r3, #10
 800777c:	2100      	movs	r1, #0
 800777e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007782:	6865      	ldr	r5, [r4, #4]
 8007784:	60a5      	str	r5, [r4, #8]
 8007786:	2d00      	cmp	r5, #0
 8007788:	bfa2      	ittt	ge
 800778a:	6821      	ldrge	r1, [r4, #0]
 800778c:	f021 0104 	bicge.w	r1, r1, #4
 8007790:	6021      	strge	r1, [r4, #0]
 8007792:	b90e      	cbnz	r6, 8007798 <_printf_i+0x114>
 8007794:	2d00      	cmp	r5, #0
 8007796:	d04b      	beq.n	8007830 <_printf_i+0x1ac>
 8007798:	4615      	mov	r5, r2
 800779a:	fbb6 f1f3 	udiv	r1, r6, r3
 800779e:	fb03 6711 	mls	r7, r3, r1, r6
 80077a2:	5dc7      	ldrb	r7, [r0, r7]
 80077a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077a8:	4637      	mov	r7, r6
 80077aa:	42bb      	cmp	r3, r7
 80077ac:	460e      	mov	r6, r1
 80077ae:	d9f4      	bls.n	800779a <_printf_i+0x116>
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d10b      	bne.n	80077cc <_printf_i+0x148>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	07de      	lsls	r6, r3, #31
 80077b8:	d508      	bpl.n	80077cc <_printf_i+0x148>
 80077ba:	6923      	ldr	r3, [r4, #16]
 80077bc:	6861      	ldr	r1, [r4, #4]
 80077be:	4299      	cmp	r1, r3
 80077c0:	bfde      	ittt	le
 80077c2:	2330      	movle	r3, #48	; 0x30
 80077c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80077cc:	1b52      	subs	r2, r2, r5
 80077ce:	6122      	str	r2, [r4, #16]
 80077d0:	f8cd a000 	str.w	sl, [sp]
 80077d4:	464b      	mov	r3, r9
 80077d6:	aa03      	add	r2, sp, #12
 80077d8:	4621      	mov	r1, r4
 80077da:	4640      	mov	r0, r8
 80077dc:	f7ff fee4 	bl	80075a8 <_printf_common>
 80077e0:	3001      	adds	r0, #1
 80077e2:	d14a      	bne.n	800787a <_printf_i+0x1f6>
 80077e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077e8:	b004      	add	sp, #16
 80077ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	f043 0320 	orr.w	r3, r3, #32
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	4833      	ldr	r0, [pc, #204]	; (80078c4 <_printf_i+0x240>)
 80077f8:	2778      	movs	r7, #120	; 0x78
 80077fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	6829      	ldr	r1, [r5, #0]
 8007802:	061f      	lsls	r7, r3, #24
 8007804:	f851 6b04 	ldr.w	r6, [r1], #4
 8007808:	d402      	bmi.n	8007810 <_printf_i+0x18c>
 800780a:	065f      	lsls	r7, r3, #25
 800780c:	bf48      	it	mi
 800780e:	b2b6      	uxthmi	r6, r6
 8007810:	07df      	lsls	r7, r3, #31
 8007812:	bf48      	it	mi
 8007814:	f043 0320 	orrmi.w	r3, r3, #32
 8007818:	6029      	str	r1, [r5, #0]
 800781a:	bf48      	it	mi
 800781c:	6023      	strmi	r3, [r4, #0]
 800781e:	b91e      	cbnz	r6, 8007828 <_printf_i+0x1a4>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	f023 0320 	bic.w	r3, r3, #32
 8007826:	6023      	str	r3, [r4, #0]
 8007828:	2310      	movs	r3, #16
 800782a:	e7a7      	b.n	800777c <_printf_i+0xf8>
 800782c:	4824      	ldr	r0, [pc, #144]	; (80078c0 <_printf_i+0x23c>)
 800782e:	e7e4      	b.n	80077fa <_printf_i+0x176>
 8007830:	4615      	mov	r5, r2
 8007832:	e7bd      	b.n	80077b0 <_printf_i+0x12c>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	6826      	ldr	r6, [r4, #0]
 8007838:	6961      	ldr	r1, [r4, #20]
 800783a:	1d18      	adds	r0, r3, #4
 800783c:	6028      	str	r0, [r5, #0]
 800783e:	0635      	lsls	r5, r6, #24
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	d501      	bpl.n	8007848 <_printf_i+0x1c4>
 8007844:	6019      	str	r1, [r3, #0]
 8007846:	e002      	b.n	800784e <_printf_i+0x1ca>
 8007848:	0670      	lsls	r0, r6, #25
 800784a:	d5fb      	bpl.n	8007844 <_printf_i+0x1c0>
 800784c:	8019      	strh	r1, [r3, #0]
 800784e:	2300      	movs	r3, #0
 8007850:	6123      	str	r3, [r4, #16]
 8007852:	4615      	mov	r5, r2
 8007854:	e7bc      	b.n	80077d0 <_printf_i+0x14c>
 8007856:	682b      	ldr	r3, [r5, #0]
 8007858:	1d1a      	adds	r2, r3, #4
 800785a:	602a      	str	r2, [r5, #0]
 800785c:	681d      	ldr	r5, [r3, #0]
 800785e:	6862      	ldr	r2, [r4, #4]
 8007860:	2100      	movs	r1, #0
 8007862:	4628      	mov	r0, r5
 8007864:	f7f8 fcbc 	bl	80001e0 <memchr>
 8007868:	b108      	cbz	r0, 800786e <_printf_i+0x1ea>
 800786a:	1b40      	subs	r0, r0, r5
 800786c:	6060      	str	r0, [r4, #4]
 800786e:	6863      	ldr	r3, [r4, #4]
 8007870:	6123      	str	r3, [r4, #16]
 8007872:	2300      	movs	r3, #0
 8007874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007878:	e7aa      	b.n	80077d0 <_printf_i+0x14c>
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	462a      	mov	r2, r5
 800787e:	4649      	mov	r1, r9
 8007880:	4640      	mov	r0, r8
 8007882:	47d0      	blx	sl
 8007884:	3001      	adds	r0, #1
 8007886:	d0ad      	beq.n	80077e4 <_printf_i+0x160>
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	079b      	lsls	r3, r3, #30
 800788c:	d413      	bmi.n	80078b6 <_printf_i+0x232>
 800788e:	68e0      	ldr	r0, [r4, #12]
 8007890:	9b03      	ldr	r3, [sp, #12]
 8007892:	4298      	cmp	r0, r3
 8007894:	bfb8      	it	lt
 8007896:	4618      	movlt	r0, r3
 8007898:	e7a6      	b.n	80077e8 <_printf_i+0x164>
 800789a:	2301      	movs	r3, #1
 800789c:	4632      	mov	r2, r6
 800789e:	4649      	mov	r1, r9
 80078a0:	4640      	mov	r0, r8
 80078a2:	47d0      	blx	sl
 80078a4:	3001      	adds	r0, #1
 80078a6:	d09d      	beq.n	80077e4 <_printf_i+0x160>
 80078a8:	3501      	adds	r5, #1
 80078aa:	68e3      	ldr	r3, [r4, #12]
 80078ac:	9903      	ldr	r1, [sp, #12]
 80078ae:	1a5b      	subs	r3, r3, r1
 80078b0:	42ab      	cmp	r3, r5
 80078b2:	dcf2      	bgt.n	800789a <_printf_i+0x216>
 80078b4:	e7eb      	b.n	800788e <_printf_i+0x20a>
 80078b6:	2500      	movs	r5, #0
 80078b8:	f104 0619 	add.w	r6, r4, #25
 80078bc:	e7f5      	b.n	80078aa <_printf_i+0x226>
 80078be:	bf00      	nop
 80078c0:	0800b8de 	.word	0x0800b8de
 80078c4:	0800b8ef 	.word	0x0800b8ef

080078c8 <_scanf_float>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	b087      	sub	sp, #28
 80078ce:	4617      	mov	r7, r2
 80078d0:	9303      	str	r3, [sp, #12]
 80078d2:	688b      	ldr	r3, [r1, #8]
 80078d4:	1e5a      	subs	r2, r3, #1
 80078d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80078da:	bf83      	ittte	hi
 80078dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80078e0:	195b      	addhi	r3, r3, r5
 80078e2:	9302      	strhi	r3, [sp, #8]
 80078e4:	2300      	movls	r3, #0
 80078e6:	bf86      	itte	hi
 80078e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80078ec:	608b      	strhi	r3, [r1, #8]
 80078ee:	9302      	strls	r3, [sp, #8]
 80078f0:	680b      	ldr	r3, [r1, #0]
 80078f2:	468b      	mov	fp, r1
 80078f4:	2500      	movs	r5, #0
 80078f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80078fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80078fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007902:	4680      	mov	r8, r0
 8007904:	460c      	mov	r4, r1
 8007906:	465e      	mov	r6, fp
 8007908:	46aa      	mov	sl, r5
 800790a:	46a9      	mov	r9, r5
 800790c:	9501      	str	r5, [sp, #4]
 800790e:	68a2      	ldr	r2, [r4, #8]
 8007910:	b152      	cbz	r2, 8007928 <_scanf_float+0x60>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b4e      	cmp	r3, #78	; 0x4e
 8007918:	d864      	bhi.n	80079e4 <_scanf_float+0x11c>
 800791a:	2b40      	cmp	r3, #64	; 0x40
 800791c:	d83c      	bhi.n	8007998 <_scanf_float+0xd0>
 800791e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007922:	b2c8      	uxtb	r0, r1
 8007924:	280e      	cmp	r0, #14
 8007926:	d93a      	bls.n	800799e <_scanf_float+0xd6>
 8007928:	f1b9 0f00 	cmp.w	r9, #0
 800792c:	d003      	beq.n	8007936 <_scanf_float+0x6e>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800793a:	f1ba 0f01 	cmp.w	sl, #1
 800793e:	f200 8113 	bhi.w	8007b68 <_scanf_float+0x2a0>
 8007942:	455e      	cmp	r6, fp
 8007944:	f200 8105 	bhi.w	8007b52 <_scanf_float+0x28a>
 8007948:	2501      	movs	r5, #1
 800794a:	4628      	mov	r0, r5
 800794c:	b007      	add	sp, #28
 800794e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007952:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007956:	2a0d      	cmp	r2, #13
 8007958:	d8e6      	bhi.n	8007928 <_scanf_float+0x60>
 800795a:	a101      	add	r1, pc, #4	; (adr r1, 8007960 <_scanf_float+0x98>)
 800795c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007960:	08007a9f 	.word	0x08007a9f
 8007964:	08007929 	.word	0x08007929
 8007968:	08007929 	.word	0x08007929
 800796c:	08007929 	.word	0x08007929
 8007970:	08007aff 	.word	0x08007aff
 8007974:	08007ad7 	.word	0x08007ad7
 8007978:	08007929 	.word	0x08007929
 800797c:	08007929 	.word	0x08007929
 8007980:	08007aad 	.word	0x08007aad
 8007984:	08007929 	.word	0x08007929
 8007988:	08007929 	.word	0x08007929
 800798c:	08007929 	.word	0x08007929
 8007990:	08007929 	.word	0x08007929
 8007994:	08007a65 	.word	0x08007a65
 8007998:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800799c:	e7db      	b.n	8007956 <_scanf_float+0x8e>
 800799e:	290e      	cmp	r1, #14
 80079a0:	d8c2      	bhi.n	8007928 <_scanf_float+0x60>
 80079a2:	a001      	add	r0, pc, #4	; (adr r0, 80079a8 <_scanf_float+0xe0>)
 80079a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80079a8:	08007a57 	.word	0x08007a57
 80079ac:	08007929 	.word	0x08007929
 80079b0:	08007a57 	.word	0x08007a57
 80079b4:	08007aeb 	.word	0x08007aeb
 80079b8:	08007929 	.word	0x08007929
 80079bc:	08007a05 	.word	0x08007a05
 80079c0:	08007a41 	.word	0x08007a41
 80079c4:	08007a41 	.word	0x08007a41
 80079c8:	08007a41 	.word	0x08007a41
 80079cc:	08007a41 	.word	0x08007a41
 80079d0:	08007a41 	.word	0x08007a41
 80079d4:	08007a41 	.word	0x08007a41
 80079d8:	08007a41 	.word	0x08007a41
 80079dc:	08007a41 	.word	0x08007a41
 80079e0:	08007a41 	.word	0x08007a41
 80079e4:	2b6e      	cmp	r3, #110	; 0x6e
 80079e6:	d809      	bhi.n	80079fc <_scanf_float+0x134>
 80079e8:	2b60      	cmp	r3, #96	; 0x60
 80079ea:	d8b2      	bhi.n	8007952 <_scanf_float+0x8a>
 80079ec:	2b54      	cmp	r3, #84	; 0x54
 80079ee:	d077      	beq.n	8007ae0 <_scanf_float+0x218>
 80079f0:	2b59      	cmp	r3, #89	; 0x59
 80079f2:	d199      	bne.n	8007928 <_scanf_float+0x60>
 80079f4:	2d07      	cmp	r5, #7
 80079f6:	d197      	bne.n	8007928 <_scanf_float+0x60>
 80079f8:	2508      	movs	r5, #8
 80079fa:	e029      	b.n	8007a50 <_scanf_float+0x188>
 80079fc:	2b74      	cmp	r3, #116	; 0x74
 80079fe:	d06f      	beq.n	8007ae0 <_scanf_float+0x218>
 8007a00:	2b79      	cmp	r3, #121	; 0x79
 8007a02:	e7f6      	b.n	80079f2 <_scanf_float+0x12a>
 8007a04:	6821      	ldr	r1, [r4, #0]
 8007a06:	05c8      	lsls	r0, r1, #23
 8007a08:	d51a      	bpl.n	8007a40 <_scanf_float+0x178>
 8007a0a:	9b02      	ldr	r3, [sp, #8]
 8007a0c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007a10:	6021      	str	r1, [r4, #0]
 8007a12:	f109 0901 	add.w	r9, r9, #1
 8007a16:	b11b      	cbz	r3, 8007a20 <_scanf_float+0x158>
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	3201      	adds	r2, #1
 8007a1c:	9302      	str	r3, [sp, #8]
 8007a1e:	60a2      	str	r2, [r4, #8]
 8007a20:	68a3      	ldr	r3, [r4, #8]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	60a3      	str	r3, [r4, #8]
 8007a26:	6923      	ldr	r3, [r4, #16]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	6123      	str	r3, [r4, #16]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	607b      	str	r3, [r7, #4]
 8007a34:	f340 8084 	ble.w	8007b40 <_scanf_float+0x278>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	603b      	str	r3, [r7, #0]
 8007a3e:	e766      	b.n	800790e <_scanf_float+0x46>
 8007a40:	eb1a 0f05 	cmn.w	sl, r5
 8007a44:	f47f af70 	bne.w	8007928 <_scanf_float+0x60>
 8007a48:	6822      	ldr	r2, [r4, #0]
 8007a4a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007a4e:	6022      	str	r2, [r4, #0]
 8007a50:	f806 3b01 	strb.w	r3, [r6], #1
 8007a54:	e7e4      	b.n	8007a20 <_scanf_float+0x158>
 8007a56:	6822      	ldr	r2, [r4, #0]
 8007a58:	0610      	lsls	r0, r2, #24
 8007a5a:	f57f af65 	bpl.w	8007928 <_scanf_float+0x60>
 8007a5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a62:	e7f4      	b.n	8007a4e <_scanf_float+0x186>
 8007a64:	f1ba 0f00 	cmp.w	sl, #0
 8007a68:	d10e      	bne.n	8007a88 <_scanf_float+0x1c0>
 8007a6a:	f1b9 0f00 	cmp.w	r9, #0
 8007a6e:	d10e      	bne.n	8007a8e <_scanf_float+0x1c6>
 8007a70:	6822      	ldr	r2, [r4, #0]
 8007a72:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a76:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a7a:	d108      	bne.n	8007a8e <_scanf_float+0x1c6>
 8007a7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a80:	6022      	str	r2, [r4, #0]
 8007a82:	f04f 0a01 	mov.w	sl, #1
 8007a86:	e7e3      	b.n	8007a50 <_scanf_float+0x188>
 8007a88:	f1ba 0f02 	cmp.w	sl, #2
 8007a8c:	d055      	beq.n	8007b3a <_scanf_float+0x272>
 8007a8e:	2d01      	cmp	r5, #1
 8007a90:	d002      	beq.n	8007a98 <_scanf_float+0x1d0>
 8007a92:	2d04      	cmp	r5, #4
 8007a94:	f47f af48 	bne.w	8007928 <_scanf_float+0x60>
 8007a98:	3501      	adds	r5, #1
 8007a9a:	b2ed      	uxtb	r5, r5
 8007a9c:	e7d8      	b.n	8007a50 <_scanf_float+0x188>
 8007a9e:	f1ba 0f01 	cmp.w	sl, #1
 8007aa2:	f47f af41 	bne.w	8007928 <_scanf_float+0x60>
 8007aa6:	f04f 0a02 	mov.w	sl, #2
 8007aaa:	e7d1      	b.n	8007a50 <_scanf_float+0x188>
 8007aac:	b97d      	cbnz	r5, 8007ace <_scanf_float+0x206>
 8007aae:	f1b9 0f00 	cmp.w	r9, #0
 8007ab2:	f47f af3c 	bne.w	800792e <_scanf_float+0x66>
 8007ab6:	6822      	ldr	r2, [r4, #0]
 8007ab8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007abc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007ac0:	f47f af39 	bne.w	8007936 <_scanf_float+0x6e>
 8007ac4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ac8:	6022      	str	r2, [r4, #0]
 8007aca:	2501      	movs	r5, #1
 8007acc:	e7c0      	b.n	8007a50 <_scanf_float+0x188>
 8007ace:	2d03      	cmp	r5, #3
 8007ad0:	d0e2      	beq.n	8007a98 <_scanf_float+0x1d0>
 8007ad2:	2d05      	cmp	r5, #5
 8007ad4:	e7de      	b.n	8007a94 <_scanf_float+0x1cc>
 8007ad6:	2d02      	cmp	r5, #2
 8007ad8:	f47f af26 	bne.w	8007928 <_scanf_float+0x60>
 8007adc:	2503      	movs	r5, #3
 8007ade:	e7b7      	b.n	8007a50 <_scanf_float+0x188>
 8007ae0:	2d06      	cmp	r5, #6
 8007ae2:	f47f af21 	bne.w	8007928 <_scanf_float+0x60>
 8007ae6:	2507      	movs	r5, #7
 8007ae8:	e7b2      	b.n	8007a50 <_scanf_float+0x188>
 8007aea:	6822      	ldr	r2, [r4, #0]
 8007aec:	0591      	lsls	r1, r2, #22
 8007aee:	f57f af1b 	bpl.w	8007928 <_scanf_float+0x60>
 8007af2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007af6:	6022      	str	r2, [r4, #0]
 8007af8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007afc:	e7a8      	b.n	8007a50 <_scanf_float+0x188>
 8007afe:	6822      	ldr	r2, [r4, #0]
 8007b00:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007b04:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007b08:	d006      	beq.n	8007b18 <_scanf_float+0x250>
 8007b0a:	0550      	lsls	r0, r2, #21
 8007b0c:	f57f af0c 	bpl.w	8007928 <_scanf_float+0x60>
 8007b10:	f1b9 0f00 	cmp.w	r9, #0
 8007b14:	f43f af0f 	beq.w	8007936 <_scanf_float+0x6e>
 8007b18:	0591      	lsls	r1, r2, #22
 8007b1a:	bf58      	it	pl
 8007b1c:	9901      	ldrpl	r1, [sp, #4]
 8007b1e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b22:	bf58      	it	pl
 8007b24:	eba9 0101 	subpl.w	r1, r9, r1
 8007b28:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007b2c:	bf58      	it	pl
 8007b2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007b32:	6022      	str	r2, [r4, #0]
 8007b34:	f04f 0900 	mov.w	r9, #0
 8007b38:	e78a      	b.n	8007a50 <_scanf_float+0x188>
 8007b3a:	f04f 0a03 	mov.w	sl, #3
 8007b3e:	e787      	b.n	8007a50 <_scanf_float+0x188>
 8007b40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007b44:	4639      	mov	r1, r7
 8007b46:	4640      	mov	r0, r8
 8007b48:	4798      	blx	r3
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	f43f aedf 	beq.w	800790e <_scanf_float+0x46>
 8007b50:	e6ea      	b.n	8007928 <_scanf_float+0x60>
 8007b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b5a:	463a      	mov	r2, r7
 8007b5c:	4640      	mov	r0, r8
 8007b5e:	4798      	blx	r3
 8007b60:	6923      	ldr	r3, [r4, #16]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	6123      	str	r3, [r4, #16]
 8007b66:	e6ec      	b.n	8007942 <_scanf_float+0x7a>
 8007b68:	1e6b      	subs	r3, r5, #1
 8007b6a:	2b06      	cmp	r3, #6
 8007b6c:	d825      	bhi.n	8007bba <_scanf_float+0x2f2>
 8007b6e:	2d02      	cmp	r5, #2
 8007b70:	d836      	bhi.n	8007be0 <_scanf_float+0x318>
 8007b72:	455e      	cmp	r6, fp
 8007b74:	f67f aee8 	bls.w	8007948 <_scanf_float+0x80>
 8007b78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b7c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b80:	463a      	mov	r2, r7
 8007b82:	4640      	mov	r0, r8
 8007b84:	4798      	blx	r3
 8007b86:	6923      	ldr	r3, [r4, #16]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	6123      	str	r3, [r4, #16]
 8007b8c:	e7f1      	b.n	8007b72 <_scanf_float+0x2aa>
 8007b8e:	9802      	ldr	r0, [sp, #8]
 8007b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b94:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007b98:	9002      	str	r0, [sp, #8]
 8007b9a:	463a      	mov	r2, r7
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	4798      	blx	r3
 8007ba0:	6923      	ldr	r3, [r4, #16]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	6123      	str	r3, [r4, #16]
 8007ba6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007baa:	fa5f fa8a 	uxtb.w	sl, sl
 8007bae:	f1ba 0f02 	cmp.w	sl, #2
 8007bb2:	d1ec      	bne.n	8007b8e <_scanf_float+0x2c6>
 8007bb4:	3d03      	subs	r5, #3
 8007bb6:	b2ed      	uxtb	r5, r5
 8007bb8:	1b76      	subs	r6, r6, r5
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	05da      	lsls	r2, r3, #23
 8007bbe:	d52f      	bpl.n	8007c20 <_scanf_float+0x358>
 8007bc0:	055b      	lsls	r3, r3, #21
 8007bc2:	d510      	bpl.n	8007be6 <_scanf_float+0x31e>
 8007bc4:	455e      	cmp	r6, fp
 8007bc6:	f67f aebf 	bls.w	8007948 <_scanf_float+0x80>
 8007bca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bd2:	463a      	mov	r2, r7
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	4798      	blx	r3
 8007bd8:	6923      	ldr	r3, [r4, #16]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	6123      	str	r3, [r4, #16]
 8007bde:	e7f1      	b.n	8007bc4 <_scanf_float+0x2fc>
 8007be0:	46aa      	mov	sl, r5
 8007be2:	9602      	str	r6, [sp, #8]
 8007be4:	e7df      	b.n	8007ba6 <_scanf_float+0x2de>
 8007be6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007bea:	6923      	ldr	r3, [r4, #16]
 8007bec:	2965      	cmp	r1, #101	; 0x65
 8007bee:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007bf2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007bf6:	6123      	str	r3, [r4, #16]
 8007bf8:	d00c      	beq.n	8007c14 <_scanf_float+0x34c>
 8007bfa:	2945      	cmp	r1, #69	; 0x45
 8007bfc:	d00a      	beq.n	8007c14 <_scanf_float+0x34c>
 8007bfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c02:	463a      	mov	r2, r7
 8007c04:	4640      	mov	r0, r8
 8007c06:	4798      	blx	r3
 8007c08:	6923      	ldr	r3, [r4, #16]
 8007c0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	1eb5      	subs	r5, r6, #2
 8007c12:	6123      	str	r3, [r4, #16]
 8007c14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c18:	463a      	mov	r2, r7
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4798      	blx	r3
 8007c1e:	462e      	mov	r6, r5
 8007c20:	6825      	ldr	r5, [r4, #0]
 8007c22:	f015 0510 	ands.w	r5, r5, #16
 8007c26:	d158      	bne.n	8007cda <_scanf_float+0x412>
 8007c28:	7035      	strb	r5, [r6, #0]
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c34:	d11c      	bne.n	8007c70 <_scanf_float+0x3a8>
 8007c36:	9b01      	ldr	r3, [sp, #4]
 8007c38:	454b      	cmp	r3, r9
 8007c3a:	eba3 0209 	sub.w	r2, r3, r9
 8007c3e:	d124      	bne.n	8007c8a <_scanf_float+0x3c2>
 8007c40:	2200      	movs	r2, #0
 8007c42:	4659      	mov	r1, fp
 8007c44:	4640      	mov	r0, r8
 8007c46:	f002 fc3f 	bl	800a4c8 <_strtod_r>
 8007c4a:	9b03      	ldr	r3, [sp, #12]
 8007c4c:	6821      	ldr	r1, [r4, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f011 0f02 	tst.w	r1, #2
 8007c54:	ec57 6b10 	vmov	r6, r7, d0
 8007c58:	f103 0204 	add.w	r2, r3, #4
 8007c5c:	d020      	beq.n	8007ca0 <_scanf_float+0x3d8>
 8007c5e:	9903      	ldr	r1, [sp, #12]
 8007c60:	600a      	str	r2, [r1, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	e9c3 6700 	strd	r6, r7, [r3]
 8007c68:	68e3      	ldr	r3, [r4, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60e3      	str	r3, [r4, #12]
 8007c6e:	e66c      	b.n	800794a <_scanf_float+0x82>
 8007c70:	9b04      	ldr	r3, [sp, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0e4      	beq.n	8007c40 <_scanf_float+0x378>
 8007c76:	9905      	ldr	r1, [sp, #20]
 8007c78:	230a      	movs	r3, #10
 8007c7a:	462a      	mov	r2, r5
 8007c7c:	3101      	adds	r1, #1
 8007c7e:	4640      	mov	r0, r8
 8007c80:	f002 fcaa 	bl	800a5d8 <_strtol_r>
 8007c84:	9b04      	ldr	r3, [sp, #16]
 8007c86:	9e05      	ldr	r6, [sp, #20]
 8007c88:	1ac2      	subs	r2, r0, r3
 8007c8a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007c8e:	429e      	cmp	r6, r3
 8007c90:	bf28      	it	cs
 8007c92:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007c96:	4912      	ldr	r1, [pc, #72]	; (8007ce0 <_scanf_float+0x418>)
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f000 f8e7 	bl	8007e6c <siprintf>
 8007c9e:	e7cf      	b.n	8007c40 <_scanf_float+0x378>
 8007ca0:	f011 0f04 	tst.w	r1, #4
 8007ca4:	9903      	ldr	r1, [sp, #12]
 8007ca6:	600a      	str	r2, [r1, #0]
 8007ca8:	d1db      	bne.n	8007c62 <_scanf_float+0x39a>
 8007caa:	f8d3 8000 	ldr.w	r8, [r3]
 8007cae:	ee10 2a10 	vmov	r2, s0
 8007cb2:	ee10 0a10 	vmov	r0, s0
 8007cb6:	463b      	mov	r3, r7
 8007cb8:	4639      	mov	r1, r7
 8007cba:	f7f8 ff3f 	bl	8000b3c <__aeabi_dcmpun>
 8007cbe:	b128      	cbz	r0, 8007ccc <_scanf_float+0x404>
 8007cc0:	4808      	ldr	r0, [pc, #32]	; (8007ce4 <_scanf_float+0x41c>)
 8007cc2:	f000 f9c5 	bl	8008050 <nanf>
 8007cc6:	ed88 0a00 	vstr	s0, [r8]
 8007cca:	e7cd      	b.n	8007c68 <_scanf_float+0x3a0>
 8007ccc:	4630      	mov	r0, r6
 8007cce:	4639      	mov	r1, r7
 8007cd0:	f7f8 ff92 	bl	8000bf8 <__aeabi_d2f>
 8007cd4:	f8c8 0000 	str.w	r0, [r8]
 8007cd8:	e7c6      	b.n	8007c68 <_scanf_float+0x3a0>
 8007cda:	2500      	movs	r5, #0
 8007cdc:	e635      	b.n	800794a <_scanf_float+0x82>
 8007cde:	bf00      	nop
 8007ce0:	0800b900 	.word	0x0800b900
 8007ce4:	0800bc95 	.word	0x0800bc95

08007ce8 <std>:
 8007ce8:	2300      	movs	r3, #0
 8007cea:	b510      	push	{r4, lr}
 8007cec:	4604      	mov	r4, r0
 8007cee:	e9c0 3300 	strd	r3, r3, [r0]
 8007cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cf6:	6083      	str	r3, [r0, #8]
 8007cf8:	8181      	strh	r1, [r0, #12]
 8007cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8007cfc:	81c2      	strh	r2, [r0, #14]
 8007cfe:	6183      	str	r3, [r0, #24]
 8007d00:	4619      	mov	r1, r3
 8007d02:	2208      	movs	r2, #8
 8007d04:	305c      	adds	r0, #92	; 0x5c
 8007d06:	f000 f914 	bl	8007f32 <memset>
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	; (8007d40 <std+0x58>)
 8007d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8007d0e:	4b0d      	ldr	r3, [pc, #52]	; (8007d44 <std+0x5c>)
 8007d10:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d12:	4b0d      	ldr	r3, [pc, #52]	; (8007d48 <std+0x60>)
 8007d14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d16:	4b0d      	ldr	r3, [pc, #52]	; (8007d4c <std+0x64>)
 8007d18:	6323      	str	r3, [r4, #48]	; 0x30
 8007d1a:	4b0d      	ldr	r3, [pc, #52]	; (8007d50 <std+0x68>)
 8007d1c:	6224      	str	r4, [r4, #32]
 8007d1e:	429c      	cmp	r4, r3
 8007d20:	d006      	beq.n	8007d30 <std+0x48>
 8007d22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007d26:	4294      	cmp	r4, r2
 8007d28:	d002      	beq.n	8007d30 <std+0x48>
 8007d2a:	33d0      	adds	r3, #208	; 0xd0
 8007d2c:	429c      	cmp	r4, r3
 8007d2e:	d105      	bne.n	8007d3c <std+0x54>
 8007d30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d38:	f000 b978 	b.w	800802c <__retarget_lock_init_recursive>
 8007d3c:	bd10      	pop	{r4, pc}
 8007d3e:	bf00      	nop
 8007d40:	08007ead 	.word	0x08007ead
 8007d44:	08007ecf 	.word	0x08007ecf
 8007d48:	08007f07 	.word	0x08007f07
 8007d4c:	08007f2b 	.word	0x08007f2b
 8007d50:	20004bec 	.word	0x20004bec

08007d54 <stdio_exit_handler>:
 8007d54:	4a02      	ldr	r2, [pc, #8]	; (8007d60 <stdio_exit_handler+0xc>)
 8007d56:	4903      	ldr	r1, [pc, #12]	; (8007d64 <stdio_exit_handler+0x10>)
 8007d58:	4803      	ldr	r0, [pc, #12]	; (8007d68 <stdio_exit_handler+0x14>)
 8007d5a:	f000 b869 	b.w	8007e30 <_fwalk_sglue>
 8007d5e:	bf00      	nop
 8007d60:	20000010 	.word	0x20000010
 8007d64:	0800a999 	.word	0x0800a999
 8007d68:	2000001c 	.word	0x2000001c

08007d6c <cleanup_stdio>:
 8007d6c:	6841      	ldr	r1, [r0, #4]
 8007d6e:	4b0c      	ldr	r3, [pc, #48]	; (8007da0 <cleanup_stdio+0x34>)
 8007d70:	4299      	cmp	r1, r3
 8007d72:	b510      	push	{r4, lr}
 8007d74:	4604      	mov	r4, r0
 8007d76:	d001      	beq.n	8007d7c <cleanup_stdio+0x10>
 8007d78:	f002 fe0e 	bl	800a998 <_fflush_r>
 8007d7c:	68a1      	ldr	r1, [r4, #8]
 8007d7e:	4b09      	ldr	r3, [pc, #36]	; (8007da4 <cleanup_stdio+0x38>)
 8007d80:	4299      	cmp	r1, r3
 8007d82:	d002      	beq.n	8007d8a <cleanup_stdio+0x1e>
 8007d84:	4620      	mov	r0, r4
 8007d86:	f002 fe07 	bl	800a998 <_fflush_r>
 8007d8a:	68e1      	ldr	r1, [r4, #12]
 8007d8c:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <cleanup_stdio+0x3c>)
 8007d8e:	4299      	cmp	r1, r3
 8007d90:	d004      	beq.n	8007d9c <cleanup_stdio+0x30>
 8007d92:	4620      	mov	r0, r4
 8007d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d98:	f002 bdfe 	b.w	800a998 <_fflush_r>
 8007d9c:	bd10      	pop	{r4, pc}
 8007d9e:	bf00      	nop
 8007da0:	20004bec 	.word	0x20004bec
 8007da4:	20004c54 	.word	0x20004c54
 8007da8:	20004cbc 	.word	0x20004cbc

08007dac <global_stdio_init.part.0>:
 8007dac:	b510      	push	{r4, lr}
 8007dae:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <global_stdio_init.part.0+0x30>)
 8007db0:	4c0b      	ldr	r4, [pc, #44]	; (8007de0 <global_stdio_init.part.0+0x34>)
 8007db2:	4a0c      	ldr	r2, [pc, #48]	; (8007de4 <global_stdio_init.part.0+0x38>)
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	4620      	mov	r0, r4
 8007db8:	2200      	movs	r2, #0
 8007dba:	2104      	movs	r1, #4
 8007dbc:	f7ff ff94 	bl	8007ce8 <std>
 8007dc0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	2109      	movs	r1, #9
 8007dc8:	f7ff ff8e 	bl	8007ce8 <std>
 8007dcc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd6:	2112      	movs	r1, #18
 8007dd8:	f7ff bf86 	b.w	8007ce8 <std>
 8007ddc:	20004d24 	.word	0x20004d24
 8007de0:	20004bec 	.word	0x20004bec
 8007de4:	08007d55 	.word	0x08007d55

08007de8 <__sfp_lock_acquire>:
 8007de8:	4801      	ldr	r0, [pc, #4]	; (8007df0 <__sfp_lock_acquire+0x8>)
 8007dea:	f000 b920 	b.w	800802e <__retarget_lock_acquire_recursive>
 8007dee:	bf00      	nop
 8007df0:	20004d2d 	.word	0x20004d2d

08007df4 <__sfp_lock_release>:
 8007df4:	4801      	ldr	r0, [pc, #4]	; (8007dfc <__sfp_lock_release+0x8>)
 8007df6:	f000 b91b 	b.w	8008030 <__retarget_lock_release_recursive>
 8007dfa:	bf00      	nop
 8007dfc:	20004d2d 	.word	0x20004d2d

08007e00 <__sinit>:
 8007e00:	b510      	push	{r4, lr}
 8007e02:	4604      	mov	r4, r0
 8007e04:	f7ff fff0 	bl	8007de8 <__sfp_lock_acquire>
 8007e08:	6a23      	ldr	r3, [r4, #32]
 8007e0a:	b11b      	cbz	r3, 8007e14 <__sinit+0x14>
 8007e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e10:	f7ff bff0 	b.w	8007df4 <__sfp_lock_release>
 8007e14:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <__sinit+0x28>)
 8007e16:	6223      	str	r3, [r4, #32]
 8007e18:	4b04      	ldr	r3, [pc, #16]	; (8007e2c <__sinit+0x2c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1f5      	bne.n	8007e0c <__sinit+0xc>
 8007e20:	f7ff ffc4 	bl	8007dac <global_stdio_init.part.0>
 8007e24:	e7f2      	b.n	8007e0c <__sinit+0xc>
 8007e26:	bf00      	nop
 8007e28:	08007d6d 	.word	0x08007d6d
 8007e2c:	20004d24 	.word	0x20004d24

08007e30 <_fwalk_sglue>:
 8007e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e34:	4607      	mov	r7, r0
 8007e36:	4688      	mov	r8, r1
 8007e38:	4614      	mov	r4, r2
 8007e3a:	2600      	movs	r6, #0
 8007e3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e40:	f1b9 0901 	subs.w	r9, r9, #1
 8007e44:	d505      	bpl.n	8007e52 <_fwalk_sglue+0x22>
 8007e46:	6824      	ldr	r4, [r4, #0]
 8007e48:	2c00      	cmp	r4, #0
 8007e4a:	d1f7      	bne.n	8007e3c <_fwalk_sglue+0xc>
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e52:	89ab      	ldrh	r3, [r5, #12]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d907      	bls.n	8007e68 <_fwalk_sglue+0x38>
 8007e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	d003      	beq.n	8007e68 <_fwalk_sglue+0x38>
 8007e60:	4629      	mov	r1, r5
 8007e62:	4638      	mov	r0, r7
 8007e64:	47c0      	blx	r8
 8007e66:	4306      	orrs	r6, r0
 8007e68:	3568      	adds	r5, #104	; 0x68
 8007e6a:	e7e9      	b.n	8007e40 <_fwalk_sglue+0x10>

08007e6c <siprintf>:
 8007e6c:	b40e      	push	{r1, r2, r3}
 8007e6e:	b500      	push	{lr}
 8007e70:	b09c      	sub	sp, #112	; 0x70
 8007e72:	ab1d      	add	r3, sp, #116	; 0x74
 8007e74:	9002      	str	r0, [sp, #8]
 8007e76:	9006      	str	r0, [sp, #24]
 8007e78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e7c:	4809      	ldr	r0, [pc, #36]	; (8007ea4 <siprintf+0x38>)
 8007e7e:	9107      	str	r1, [sp, #28]
 8007e80:	9104      	str	r1, [sp, #16]
 8007e82:	4909      	ldr	r1, [pc, #36]	; (8007ea8 <siprintf+0x3c>)
 8007e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e88:	9105      	str	r1, [sp, #20]
 8007e8a:	6800      	ldr	r0, [r0, #0]
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	a902      	add	r1, sp, #8
 8007e90:	f002 fbfe 	bl	800a690 <_svfiprintf_r>
 8007e94:	9b02      	ldr	r3, [sp, #8]
 8007e96:	2200      	movs	r2, #0
 8007e98:	701a      	strb	r2, [r3, #0]
 8007e9a:	b01c      	add	sp, #112	; 0x70
 8007e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea0:	b003      	add	sp, #12
 8007ea2:	4770      	bx	lr
 8007ea4:	20000068 	.word	0x20000068
 8007ea8:	ffff0208 	.word	0xffff0208

08007eac <__sread>:
 8007eac:	b510      	push	{r4, lr}
 8007eae:	460c      	mov	r4, r1
 8007eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb4:	f000 f86c 	bl	8007f90 <_read_r>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	bfab      	itete	ge
 8007ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8007ec0:	181b      	addge	r3, r3, r0
 8007ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ec6:	bfac      	ite	ge
 8007ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eca:	81a3      	strhlt	r3, [r4, #12]
 8007ecc:	bd10      	pop	{r4, pc}

08007ece <__swrite>:
 8007ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed2:	461f      	mov	r7, r3
 8007ed4:	898b      	ldrh	r3, [r1, #12]
 8007ed6:	05db      	lsls	r3, r3, #23
 8007ed8:	4605      	mov	r5, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	4616      	mov	r6, r2
 8007ede:	d505      	bpl.n	8007eec <__swrite+0x1e>
 8007ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f000 f840 	bl	8007f6c <_lseek_r>
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ef6:	81a3      	strh	r3, [r4, #12]
 8007ef8:	4632      	mov	r2, r6
 8007efa:	463b      	mov	r3, r7
 8007efc:	4628      	mov	r0, r5
 8007efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f02:	f000 b857 	b.w	8007fb4 <_write_r>

08007f06 <__sseek>:
 8007f06:	b510      	push	{r4, lr}
 8007f08:	460c      	mov	r4, r1
 8007f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0e:	f000 f82d 	bl	8007f6c <_lseek_r>
 8007f12:	1c43      	adds	r3, r0, #1
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	bf15      	itete	ne
 8007f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f22:	81a3      	strheq	r3, [r4, #12]
 8007f24:	bf18      	it	ne
 8007f26:	81a3      	strhne	r3, [r4, #12]
 8007f28:	bd10      	pop	{r4, pc}

08007f2a <__sclose>:
 8007f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2e:	f000 b80d 	b.w	8007f4c <_close_r>

08007f32 <memset>:
 8007f32:	4402      	add	r2, r0
 8007f34:	4603      	mov	r3, r0
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d100      	bne.n	8007f3c <memset+0xa>
 8007f3a:	4770      	bx	lr
 8007f3c:	f803 1b01 	strb.w	r1, [r3], #1
 8007f40:	e7f9      	b.n	8007f36 <memset+0x4>
	...

08007f44 <_localeconv_r>:
 8007f44:	4800      	ldr	r0, [pc, #0]	; (8007f48 <_localeconv_r+0x4>)
 8007f46:	4770      	bx	lr
 8007f48:	2000015c 	.word	0x2000015c

08007f4c <_close_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	4d06      	ldr	r5, [pc, #24]	; (8007f68 <_close_r+0x1c>)
 8007f50:	2300      	movs	r3, #0
 8007f52:	4604      	mov	r4, r0
 8007f54:	4608      	mov	r0, r1
 8007f56:	602b      	str	r3, [r5, #0]
 8007f58:	f7f9 fb9b 	bl	8001692 <_close>
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	d102      	bne.n	8007f66 <_close_r+0x1a>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	b103      	cbz	r3, 8007f66 <_close_r+0x1a>
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	20004d28 	.word	0x20004d28

08007f6c <_lseek_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4d07      	ldr	r5, [pc, #28]	; (8007f8c <_lseek_r+0x20>)
 8007f70:	4604      	mov	r4, r0
 8007f72:	4608      	mov	r0, r1
 8007f74:	4611      	mov	r1, r2
 8007f76:	2200      	movs	r2, #0
 8007f78:	602a      	str	r2, [r5, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f7f9 fbb0 	bl	80016e0 <_lseek>
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	d102      	bne.n	8007f8a <_lseek_r+0x1e>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	b103      	cbz	r3, 8007f8a <_lseek_r+0x1e>
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}
 8007f8c:	20004d28 	.word	0x20004d28

08007f90 <_read_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	4d07      	ldr	r5, [pc, #28]	; (8007fb0 <_read_r+0x20>)
 8007f94:	4604      	mov	r4, r0
 8007f96:	4608      	mov	r0, r1
 8007f98:	4611      	mov	r1, r2
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	602a      	str	r2, [r5, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f7f9 fb3e 	bl	8001620 <_read>
 8007fa4:	1c43      	adds	r3, r0, #1
 8007fa6:	d102      	bne.n	8007fae <_read_r+0x1e>
 8007fa8:	682b      	ldr	r3, [r5, #0]
 8007faa:	b103      	cbz	r3, 8007fae <_read_r+0x1e>
 8007fac:	6023      	str	r3, [r4, #0]
 8007fae:	bd38      	pop	{r3, r4, r5, pc}
 8007fb0:	20004d28 	.word	0x20004d28

08007fb4 <_write_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4d07      	ldr	r5, [pc, #28]	; (8007fd4 <_write_r+0x20>)
 8007fb8:	4604      	mov	r4, r0
 8007fba:	4608      	mov	r0, r1
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	602a      	str	r2, [r5, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f7f9 fb49 	bl	800165a <_write>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_write_r+0x1e>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_write_r+0x1e>
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	20004d28 	.word	0x20004d28

08007fd8 <__errno>:
 8007fd8:	4b01      	ldr	r3, [pc, #4]	; (8007fe0 <__errno+0x8>)
 8007fda:	6818      	ldr	r0, [r3, #0]
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	20000068 	.word	0x20000068

08007fe4 <__libc_init_array>:
 8007fe4:	b570      	push	{r4, r5, r6, lr}
 8007fe6:	4d0d      	ldr	r5, [pc, #52]	; (800801c <__libc_init_array+0x38>)
 8007fe8:	4c0d      	ldr	r4, [pc, #52]	; (8008020 <__libc_init_array+0x3c>)
 8007fea:	1b64      	subs	r4, r4, r5
 8007fec:	10a4      	asrs	r4, r4, #2
 8007fee:	2600      	movs	r6, #0
 8007ff0:	42a6      	cmp	r6, r4
 8007ff2:	d109      	bne.n	8008008 <__libc_init_array+0x24>
 8007ff4:	4d0b      	ldr	r5, [pc, #44]	; (8008024 <__libc_init_array+0x40>)
 8007ff6:	4c0c      	ldr	r4, [pc, #48]	; (8008028 <__libc_init_array+0x44>)
 8007ff8:	f003 fbd6 	bl	800b7a8 <_init>
 8007ffc:	1b64      	subs	r4, r4, r5
 8007ffe:	10a4      	asrs	r4, r4, #2
 8008000:	2600      	movs	r6, #0
 8008002:	42a6      	cmp	r6, r4
 8008004:	d105      	bne.n	8008012 <__libc_init_array+0x2e>
 8008006:	bd70      	pop	{r4, r5, r6, pc}
 8008008:	f855 3b04 	ldr.w	r3, [r5], #4
 800800c:	4798      	blx	r3
 800800e:	3601      	adds	r6, #1
 8008010:	e7ee      	b.n	8007ff0 <__libc_init_array+0xc>
 8008012:	f855 3b04 	ldr.w	r3, [r5], #4
 8008016:	4798      	blx	r3
 8008018:	3601      	adds	r6, #1
 800801a:	e7f2      	b.n	8008002 <__libc_init_array+0x1e>
 800801c:	0800bd00 	.word	0x0800bd00
 8008020:	0800bd00 	.word	0x0800bd00
 8008024:	0800bd00 	.word	0x0800bd00
 8008028:	0800bd04 	.word	0x0800bd04

0800802c <__retarget_lock_init_recursive>:
 800802c:	4770      	bx	lr

0800802e <__retarget_lock_acquire_recursive>:
 800802e:	4770      	bx	lr

08008030 <__retarget_lock_release_recursive>:
 8008030:	4770      	bx	lr

08008032 <memcpy>:
 8008032:	440a      	add	r2, r1
 8008034:	4291      	cmp	r1, r2
 8008036:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800803a:	d100      	bne.n	800803e <memcpy+0xc>
 800803c:	4770      	bx	lr
 800803e:	b510      	push	{r4, lr}
 8008040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008048:	4291      	cmp	r1, r2
 800804a:	d1f9      	bne.n	8008040 <memcpy+0xe>
 800804c:	bd10      	pop	{r4, pc}
	...

08008050 <nanf>:
 8008050:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008058 <nanf+0x8>
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	7fc00000 	.word	0x7fc00000

0800805c <quorem>:
 800805c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008060:	6903      	ldr	r3, [r0, #16]
 8008062:	690c      	ldr	r4, [r1, #16]
 8008064:	42a3      	cmp	r3, r4
 8008066:	4607      	mov	r7, r0
 8008068:	db7e      	blt.n	8008168 <quorem+0x10c>
 800806a:	3c01      	subs	r4, #1
 800806c:	f101 0814 	add.w	r8, r1, #20
 8008070:	f100 0514 	add.w	r5, r0, #20
 8008074:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008078:	9301      	str	r3, [sp, #4]
 800807a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800807e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008082:	3301      	adds	r3, #1
 8008084:	429a      	cmp	r2, r3
 8008086:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800808a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800808e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008092:	d331      	bcc.n	80080f8 <quorem+0x9c>
 8008094:	f04f 0e00 	mov.w	lr, #0
 8008098:	4640      	mov	r0, r8
 800809a:	46ac      	mov	ip, r5
 800809c:	46f2      	mov	sl, lr
 800809e:	f850 2b04 	ldr.w	r2, [r0], #4
 80080a2:	b293      	uxth	r3, r2
 80080a4:	fb06 e303 	mla	r3, r6, r3, lr
 80080a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080ac:	0c1a      	lsrs	r2, r3, #16
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	ebaa 0303 	sub.w	r3, sl, r3
 80080b4:	f8dc a000 	ldr.w	sl, [ip]
 80080b8:	fa13 f38a 	uxtah	r3, r3, sl
 80080bc:	fb06 220e 	mla	r2, r6, lr, r2
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	9b00      	ldr	r3, [sp, #0]
 80080c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080c8:	b292      	uxth	r2, r2
 80080ca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080d2:	f8bd 3000 	ldrh.w	r3, [sp]
 80080d6:	4581      	cmp	r9, r0
 80080d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080dc:	f84c 3b04 	str.w	r3, [ip], #4
 80080e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080e4:	d2db      	bcs.n	800809e <quorem+0x42>
 80080e6:	f855 300b 	ldr.w	r3, [r5, fp]
 80080ea:	b92b      	cbnz	r3, 80080f8 <quorem+0x9c>
 80080ec:	9b01      	ldr	r3, [sp, #4]
 80080ee:	3b04      	subs	r3, #4
 80080f0:	429d      	cmp	r5, r3
 80080f2:	461a      	mov	r2, r3
 80080f4:	d32c      	bcc.n	8008150 <quorem+0xf4>
 80080f6:	613c      	str	r4, [r7, #16]
 80080f8:	4638      	mov	r0, r7
 80080fa:	f001 f9f1 	bl	80094e0 <__mcmp>
 80080fe:	2800      	cmp	r0, #0
 8008100:	db22      	blt.n	8008148 <quorem+0xec>
 8008102:	3601      	adds	r6, #1
 8008104:	4629      	mov	r1, r5
 8008106:	2000      	movs	r0, #0
 8008108:	f858 2b04 	ldr.w	r2, [r8], #4
 800810c:	f8d1 c000 	ldr.w	ip, [r1]
 8008110:	b293      	uxth	r3, r2
 8008112:	1ac3      	subs	r3, r0, r3
 8008114:	0c12      	lsrs	r2, r2, #16
 8008116:	fa13 f38c 	uxtah	r3, r3, ip
 800811a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800811e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008122:	b29b      	uxth	r3, r3
 8008124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008128:	45c1      	cmp	r9, r8
 800812a:	f841 3b04 	str.w	r3, [r1], #4
 800812e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008132:	d2e9      	bcs.n	8008108 <quorem+0xac>
 8008134:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008138:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800813c:	b922      	cbnz	r2, 8008148 <quorem+0xec>
 800813e:	3b04      	subs	r3, #4
 8008140:	429d      	cmp	r5, r3
 8008142:	461a      	mov	r2, r3
 8008144:	d30a      	bcc.n	800815c <quorem+0x100>
 8008146:	613c      	str	r4, [r7, #16]
 8008148:	4630      	mov	r0, r6
 800814a:	b003      	add	sp, #12
 800814c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008150:	6812      	ldr	r2, [r2, #0]
 8008152:	3b04      	subs	r3, #4
 8008154:	2a00      	cmp	r2, #0
 8008156:	d1ce      	bne.n	80080f6 <quorem+0x9a>
 8008158:	3c01      	subs	r4, #1
 800815a:	e7c9      	b.n	80080f0 <quorem+0x94>
 800815c:	6812      	ldr	r2, [r2, #0]
 800815e:	3b04      	subs	r3, #4
 8008160:	2a00      	cmp	r2, #0
 8008162:	d1f0      	bne.n	8008146 <quorem+0xea>
 8008164:	3c01      	subs	r4, #1
 8008166:	e7eb      	b.n	8008140 <quorem+0xe4>
 8008168:	2000      	movs	r0, #0
 800816a:	e7ee      	b.n	800814a <quorem+0xee>
 800816c:	0000      	movs	r0, r0
	...

08008170 <_dtoa_r>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	ed2d 8b04 	vpush	{d8-d9}
 8008178:	69c5      	ldr	r5, [r0, #28]
 800817a:	b093      	sub	sp, #76	; 0x4c
 800817c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008180:	ec57 6b10 	vmov	r6, r7, d0
 8008184:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008188:	9107      	str	r1, [sp, #28]
 800818a:	4604      	mov	r4, r0
 800818c:	920a      	str	r2, [sp, #40]	; 0x28
 800818e:	930d      	str	r3, [sp, #52]	; 0x34
 8008190:	b975      	cbnz	r5, 80081b0 <_dtoa_r+0x40>
 8008192:	2010      	movs	r0, #16
 8008194:	f000 fe2a 	bl	8008dec <malloc>
 8008198:	4602      	mov	r2, r0
 800819a:	61e0      	str	r0, [r4, #28]
 800819c:	b920      	cbnz	r0, 80081a8 <_dtoa_r+0x38>
 800819e:	4bae      	ldr	r3, [pc, #696]	; (8008458 <_dtoa_r+0x2e8>)
 80081a0:	21ef      	movs	r1, #239	; 0xef
 80081a2:	48ae      	ldr	r0, [pc, #696]	; (800845c <_dtoa_r+0x2ec>)
 80081a4:	f002 fc64 	bl	800aa70 <__assert_func>
 80081a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081ac:	6005      	str	r5, [r0, #0]
 80081ae:	60c5      	str	r5, [r0, #12]
 80081b0:	69e3      	ldr	r3, [r4, #28]
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	b151      	cbz	r1, 80081cc <_dtoa_r+0x5c>
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	604a      	str	r2, [r1, #4]
 80081ba:	2301      	movs	r3, #1
 80081bc:	4093      	lsls	r3, r2
 80081be:	608b      	str	r3, [r1, #8]
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 ff07 	bl	8008fd4 <_Bfree>
 80081c6:	69e3      	ldr	r3, [r4, #28]
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	1e3b      	subs	r3, r7, #0
 80081ce:	bfbb      	ittet	lt
 80081d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081d4:	9303      	strlt	r3, [sp, #12]
 80081d6:	2300      	movge	r3, #0
 80081d8:	2201      	movlt	r2, #1
 80081da:	bfac      	ite	ge
 80081dc:	f8c8 3000 	strge.w	r3, [r8]
 80081e0:	f8c8 2000 	strlt.w	r2, [r8]
 80081e4:	4b9e      	ldr	r3, [pc, #632]	; (8008460 <_dtoa_r+0x2f0>)
 80081e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80081ea:	ea33 0308 	bics.w	r3, r3, r8
 80081ee:	d11b      	bne.n	8008228 <_dtoa_r+0xb8>
 80081f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80081fc:	4333      	orrs	r3, r6
 80081fe:	f000 8593 	beq.w	8008d28 <_dtoa_r+0xbb8>
 8008202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008204:	b963      	cbnz	r3, 8008220 <_dtoa_r+0xb0>
 8008206:	4b97      	ldr	r3, [pc, #604]	; (8008464 <_dtoa_r+0x2f4>)
 8008208:	e027      	b.n	800825a <_dtoa_r+0xea>
 800820a:	4b97      	ldr	r3, [pc, #604]	; (8008468 <_dtoa_r+0x2f8>)
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	3308      	adds	r3, #8
 8008210:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	9800      	ldr	r0, [sp, #0]
 8008216:	b013      	add	sp, #76	; 0x4c
 8008218:	ecbd 8b04 	vpop	{d8-d9}
 800821c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008220:	4b90      	ldr	r3, [pc, #576]	; (8008464 <_dtoa_r+0x2f4>)
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	3303      	adds	r3, #3
 8008226:	e7f3      	b.n	8008210 <_dtoa_r+0xa0>
 8008228:	ed9d 7b02 	vldr	d7, [sp, #8]
 800822c:	2200      	movs	r2, #0
 800822e:	ec51 0b17 	vmov	r0, r1, d7
 8008232:	eeb0 8a47 	vmov.f32	s16, s14
 8008236:	eef0 8a67 	vmov.f32	s17, s15
 800823a:	2300      	movs	r3, #0
 800823c:	f7f8 fc4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008240:	4681      	mov	r9, r0
 8008242:	b160      	cbz	r0, 800825e <_dtoa_r+0xee>
 8008244:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008246:	2301      	movs	r3, #1
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 8568 	beq.w	8008d22 <_dtoa_r+0xbb2>
 8008252:	4b86      	ldr	r3, [pc, #536]	; (800846c <_dtoa_r+0x2fc>)
 8008254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	3b01      	subs	r3, #1
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	e7da      	b.n	8008214 <_dtoa_r+0xa4>
 800825e:	aa10      	add	r2, sp, #64	; 0x40
 8008260:	a911      	add	r1, sp, #68	; 0x44
 8008262:	4620      	mov	r0, r4
 8008264:	eeb0 0a48 	vmov.f32	s0, s16
 8008268:	eef0 0a68 	vmov.f32	s1, s17
 800826c:	f001 fa4e 	bl	800970c <__d2b>
 8008270:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008274:	4682      	mov	sl, r0
 8008276:	2d00      	cmp	r5, #0
 8008278:	d07f      	beq.n	800837a <_dtoa_r+0x20a>
 800827a:	ee18 3a90 	vmov	r3, s17
 800827e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008282:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008286:	ec51 0b18 	vmov	r0, r1, d8
 800828a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800828e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008292:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008296:	4619      	mov	r1, r3
 8008298:	2200      	movs	r2, #0
 800829a:	4b75      	ldr	r3, [pc, #468]	; (8008470 <_dtoa_r+0x300>)
 800829c:	f7f7 fffc 	bl	8000298 <__aeabi_dsub>
 80082a0:	a367      	add	r3, pc, #412	; (adr r3, 8008440 <_dtoa_r+0x2d0>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	f7f8 f9af 	bl	8000608 <__aeabi_dmul>
 80082aa:	a367      	add	r3, pc, #412	; (adr r3, 8008448 <_dtoa_r+0x2d8>)
 80082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b0:	f7f7 fff4 	bl	800029c <__adddf3>
 80082b4:	4606      	mov	r6, r0
 80082b6:	4628      	mov	r0, r5
 80082b8:	460f      	mov	r7, r1
 80082ba:	f7f8 f93b 	bl	8000534 <__aeabi_i2d>
 80082be:	a364      	add	r3, pc, #400	; (adr r3, 8008450 <_dtoa_r+0x2e0>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	f7f8 f9a0 	bl	8000608 <__aeabi_dmul>
 80082c8:	4602      	mov	r2, r0
 80082ca:	460b      	mov	r3, r1
 80082cc:	4630      	mov	r0, r6
 80082ce:	4639      	mov	r1, r7
 80082d0:	f7f7 ffe4 	bl	800029c <__adddf3>
 80082d4:	4606      	mov	r6, r0
 80082d6:	460f      	mov	r7, r1
 80082d8:	f7f8 fc46 	bl	8000b68 <__aeabi_d2iz>
 80082dc:	2200      	movs	r2, #0
 80082de:	4683      	mov	fp, r0
 80082e0:	2300      	movs	r3, #0
 80082e2:	4630      	mov	r0, r6
 80082e4:	4639      	mov	r1, r7
 80082e6:	f7f8 fc01 	bl	8000aec <__aeabi_dcmplt>
 80082ea:	b148      	cbz	r0, 8008300 <_dtoa_r+0x190>
 80082ec:	4658      	mov	r0, fp
 80082ee:	f7f8 f921 	bl	8000534 <__aeabi_i2d>
 80082f2:	4632      	mov	r2, r6
 80082f4:	463b      	mov	r3, r7
 80082f6:	f7f8 fbef 	bl	8000ad8 <__aeabi_dcmpeq>
 80082fa:	b908      	cbnz	r0, 8008300 <_dtoa_r+0x190>
 80082fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008300:	f1bb 0f16 	cmp.w	fp, #22
 8008304:	d857      	bhi.n	80083b6 <_dtoa_r+0x246>
 8008306:	4b5b      	ldr	r3, [pc, #364]	; (8008474 <_dtoa_r+0x304>)
 8008308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	ec51 0b18 	vmov	r0, r1, d8
 8008314:	f7f8 fbea 	bl	8000aec <__aeabi_dcmplt>
 8008318:	2800      	cmp	r0, #0
 800831a:	d04e      	beq.n	80083ba <_dtoa_r+0x24a>
 800831c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008320:	2300      	movs	r3, #0
 8008322:	930c      	str	r3, [sp, #48]	; 0x30
 8008324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008326:	1b5b      	subs	r3, r3, r5
 8008328:	1e5a      	subs	r2, r3, #1
 800832a:	bf45      	ittet	mi
 800832c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008330:	9305      	strmi	r3, [sp, #20]
 8008332:	2300      	movpl	r3, #0
 8008334:	2300      	movmi	r3, #0
 8008336:	9206      	str	r2, [sp, #24]
 8008338:	bf54      	ite	pl
 800833a:	9305      	strpl	r3, [sp, #20]
 800833c:	9306      	strmi	r3, [sp, #24]
 800833e:	f1bb 0f00 	cmp.w	fp, #0
 8008342:	db3c      	blt.n	80083be <_dtoa_r+0x24e>
 8008344:	9b06      	ldr	r3, [sp, #24]
 8008346:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800834a:	445b      	add	r3, fp
 800834c:	9306      	str	r3, [sp, #24]
 800834e:	2300      	movs	r3, #0
 8008350:	9308      	str	r3, [sp, #32]
 8008352:	9b07      	ldr	r3, [sp, #28]
 8008354:	2b09      	cmp	r3, #9
 8008356:	d868      	bhi.n	800842a <_dtoa_r+0x2ba>
 8008358:	2b05      	cmp	r3, #5
 800835a:	bfc4      	itt	gt
 800835c:	3b04      	subgt	r3, #4
 800835e:	9307      	strgt	r3, [sp, #28]
 8008360:	9b07      	ldr	r3, [sp, #28]
 8008362:	f1a3 0302 	sub.w	r3, r3, #2
 8008366:	bfcc      	ite	gt
 8008368:	2500      	movgt	r5, #0
 800836a:	2501      	movle	r5, #1
 800836c:	2b03      	cmp	r3, #3
 800836e:	f200 8085 	bhi.w	800847c <_dtoa_r+0x30c>
 8008372:	e8df f003 	tbb	[pc, r3]
 8008376:	3b2e      	.short	0x3b2e
 8008378:	5839      	.short	0x5839
 800837a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800837e:	441d      	add	r5, r3
 8008380:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008384:	2b20      	cmp	r3, #32
 8008386:	bfc1      	itttt	gt
 8008388:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800838c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008390:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008394:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008398:	bfd6      	itet	le
 800839a:	f1c3 0320 	rsble	r3, r3, #32
 800839e:	ea48 0003 	orrgt.w	r0, r8, r3
 80083a2:	fa06 f003 	lslle.w	r0, r6, r3
 80083a6:	f7f8 f8b5 	bl	8000514 <__aeabi_ui2d>
 80083aa:	2201      	movs	r2, #1
 80083ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80083b0:	3d01      	subs	r5, #1
 80083b2:	920e      	str	r2, [sp, #56]	; 0x38
 80083b4:	e76f      	b.n	8008296 <_dtoa_r+0x126>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e7b3      	b.n	8008322 <_dtoa_r+0x1b2>
 80083ba:	900c      	str	r0, [sp, #48]	; 0x30
 80083bc:	e7b2      	b.n	8008324 <_dtoa_r+0x1b4>
 80083be:	9b05      	ldr	r3, [sp, #20]
 80083c0:	eba3 030b 	sub.w	r3, r3, fp
 80083c4:	9305      	str	r3, [sp, #20]
 80083c6:	f1cb 0300 	rsb	r3, fp, #0
 80083ca:	9308      	str	r3, [sp, #32]
 80083cc:	2300      	movs	r3, #0
 80083ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80083d0:	e7bf      	b.n	8008352 <_dtoa_r+0x1e2>
 80083d2:	2300      	movs	r3, #0
 80083d4:	9309      	str	r3, [sp, #36]	; 0x24
 80083d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d8:	2b00      	cmp	r3, #0
 80083da:	dc52      	bgt.n	8008482 <_dtoa_r+0x312>
 80083dc:	2301      	movs	r3, #1
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	9304      	str	r3, [sp, #16]
 80083e2:	461a      	mov	r2, r3
 80083e4:	920a      	str	r2, [sp, #40]	; 0x28
 80083e6:	e00b      	b.n	8008400 <_dtoa_r+0x290>
 80083e8:	2301      	movs	r3, #1
 80083ea:	e7f3      	b.n	80083d4 <_dtoa_r+0x264>
 80083ec:	2300      	movs	r3, #0
 80083ee:	9309      	str	r3, [sp, #36]	; 0x24
 80083f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f2:	445b      	add	r3, fp
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	3301      	adds	r3, #1
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	9304      	str	r3, [sp, #16]
 80083fc:	bfb8      	it	lt
 80083fe:	2301      	movlt	r3, #1
 8008400:	69e0      	ldr	r0, [r4, #28]
 8008402:	2100      	movs	r1, #0
 8008404:	2204      	movs	r2, #4
 8008406:	f102 0614 	add.w	r6, r2, #20
 800840a:	429e      	cmp	r6, r3
 800840c:	d93d      	bls.n	800848a <_dtoa_r+0x31a>
 800840e:	6041      	str	r1, [r0, #4]
 8008410:	4620      	mov	r0, r4
 8008412:	f000 fd9f 	bl	8008f54 <_Balloc>
 8008416:	9000      	str	r0, [sp, #0]
 8008418:	2800      	cmp	r0, #0
 800841a:	d139      	bne.n	8008490 <_dtoa_r+0x320>
 800841c:	4b16      	ldr	r3, [pc, #88]	; (8008478 <_dtoa_r+0x308>)
 800841e:	4602      	mov	r2, r0
 8008420:	f240 11af 	movw	r1, #431	; 0x1af
 8008424:	e6bd      	b.n	80081a2 <_dtoa_r+0x32>
 8008426:	2301      	movs	r3, #1
 8008428:	e7e1      	b.n	80083ee <_dtoa_r+0x27e>
 800842a:	2501      	movs	r5, #1
 800842c:	2300      	movs	r3, #0
 800842e:	9307      	str	r3, [sp, #28]
 8008430:	9509      	str	r5, [sp, #36]	; 0x24
 8008432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	9304      	str	r3, [sp, #16]
 800843a:	2200      	movs	r2, #0
 800843c:	2312      	movs	r3, #18
 800843e:	e7d1      	b.n	80083e4 <_dtoa_r+0x274>
 8008440:	636f4361 	.word	0x636f4361
 8008444:	3fd287a7 	.word	0x3fd287a7
 8008448:	8b60c8b3 	.word	0x8b60c8b3
 800844c:	3fc68a28 	.word	0x3fc68a28
 8008450:	509f79fb 	.word	0x509f79fb
 8008454:	3fd34413 	.word	0x3fd34413
 8008458:	0800b912 	.word	0x0800b912
 800845c:	0800b929 	.word	0x0800b929
 8008460:	7ff00000 	.word	0x7ff00000
 8008464:	0800b90e 	.word	0x0800b90e
 8008468:	0800b905 	.word	0x0800b905
 800846c:	0800b8dd 	.word	0x0800b8dd
 8008470:	3ff80000 	.word	0x3ff80000
 8008474:	0800ba18 	.word	0x0800ba18
 8008478:	0800b981 	.word	0x0800b981
 800847c:	2301      	movs	r3, #1
 800847e:	9309      	str	r3, [sp, #36]	; 0x24
 8008480:	e7d7      	b.n	8008432 <_dtoa_r+0x2c2>
 8008482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	e7ba      	b.n	8008400 <_dtoa_r+0x290>
 800848a:	3101      	adds	r1, #1
 800848c:	0052      	lsls	r2, r2, #1
 800848e:	e7ba      	b.n	8008406 <_dtoa_r+0x296>
 8008490:	69e3      	ldr	r3, [r4, #28]
 8008492:	9a00      	ldr	r2, [sp, #0]
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	9b04      	ldr	r3, [sp, #16]
 8008498:	2b0e      	cmp	r3, #14
 800849a:	f200 80a8 	bhi.w	80085ee <_dtoa_r+0x47e>
 800849e:	2d00      	cmp	r5, #0
 80084a0:	f000 80a5 	beq.w	80085ee <_dtoa_r+0x47e>
 80084a4:	f1bb 0f00 	cmp.w	fp, #0
 80084a8:	dd38      	ble.n	800851c <_dtoa_r+0x3ac>
 80084aa:	4bc0      	ldr	r3, [pc, #768]	; (80087ac <_dtoa_r+0x63c>)
 80084ac:	f00b 020f 	and.w	r2, fp, #15
 80084b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80084b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80084bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80084c0:	d019      	beq.n	80084f6 <_dtoa_r+0x386>
 80084c2:	4bbb      	ldr	r3, [pc, #748]	; (80087b0 <_dtoa_r+0x640>)
 80084c4:	ec51 0b18 	vmov	r0, r1, d8
 80084c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084cc:	f7f8 f9c6 	bl	800085c <__aeabi_ddiv>
 80084d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d4:	f008 080f 	and.w	r8, r8, #15
 80084d8:	2503      	movs	r5, #3
 80084da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80087b0 <_dtoa_r+0x640>
 80084de:	f1b8 0f00 	cmp.w	r8, #0
 80084e2:	d10a      	bne.n	80084fa <_dtoa_r+0x38a>
 80084e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084e8:	4632      	mov	r2, r6
 80084ea:	463b      	mov	r3, r7
 80084ec:	f7f8 f9b6 	bl	800085c <__aeabi_ddiv>
 80084f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084f4:	e02b      	b.n	800854e <_dtoa_r+0x3de>
 80084f6:	2502      	movs	r5, #2
 80084f8:	e7ef      	b.n	80084da <_dtoa_r+0x36a>
 80084fa:	f018 0f01 	tst.w	r8, #1
 80084fe:	d008      	beq.n	8008512 <_dtoa_r+0x3a2>
 8008500:	4630      	mov	r0, r6
 8008502:	4639      	mov	r1, r7
 8008504:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008508:	f7f8 f87e 	bl	8000608 <__aeabi_dmul>
 800850c:	3501      	adds	r5, #1
 800850e:	4606      	mov	r6, r0
 8008510:	460f      	mov	r7, r1
 8008512:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008516:	f109 0908 	add.w	r9, r9, #8
 800851a:	e7e0      	b.n	80084de <_dtoa_r+0x36e>
 800851c:	f000 809f 	beq.w	800865e <_dtoa_r+0x4ee>
 8008520:	f1cb 0600 	rsb	r6, fp, #0
 8008524:	4ba1      	ldr	r3, [pc, #644]	; (80087ac <_dtoa_r+0x63c>)
 8008526:	4fa2      	ldr	r7, [pc, #648]	; (80087b0 <_dtoa_r+0x640>)
 8008528:	f006 020f 	and.w	r2, r6, #15
 800852c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	ec51 0b18 	vmov	r0, r1, d8
 8008538:	f7f8 f866 	bl	8000608 <__aeabi_dmul>
 800853c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008540:	1136      	asrs	r6, r6, #4
 8008542:	2300      	movs	r3, #0
 8008544:	2502      	movs	r5, #2
 8008546:	2e00      	cmp	r6, #0
 8008548:	d17e      	bne.n	8008648 <_dtoa_r+0x4d8>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1d0      	bne.n	80084f0 <_dtoa_r+0x380>
 800854e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008550:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8084 	beq.w	8008662 <_dtoa_r+0x4f2>
 800855a:	4b96      	ldr	r3, [pc, #600]	; (80087b4 <_dtoa_r+0x644>)
 800855c:	2200      	movs	r2, #0
 800855e:	4640      	mov	r0, r8
 8008560:	4649      	mov	r1, r9
 8008562:	f7f8 fac3 	bl	8000aec <__aeabi_dcmplt>
 8008566:	2800      	cmp	r0, #0
 8008568:	d07b      	beq.n	8008662 <_dtoa_r+0x4f2>
 800856a:	9b04      	ldr	r3, [sp, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d078      	beq.n	8008662 <_dtoa_r+0x4f2>
 8008570:	9b01      	ldr	r3, [sp, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	dd39      	ble.n	80085ea <_dtoa_r+0x47a>
 8008576:	4b90      	ldr	r3, [pc, #576]	; (80087b8 <_dtoa_r+0x648>)
 8008578:	2200      	movs	r2, #0
 800857a:	4640      	mov	r0, r8
 800857c:	4649      	mov	r1, r9
 800857e:	f7f8 f843 	bl	8000608 <__aeabi_dmul>
 8008582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008586:	9e01      	ldr	r6, [sp, #4]
 8008588:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800858c:	3501      	adds	r5, #1
 800858e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008592:	4628      	mov	r0, r5
 8008594:	f7f7 ffce 	bl	8000534 <__aeabi_i2d>
 8008598:	4642      	mov	r2, r8
 800859a:	464b      	mov	r3, r9
 800859c:	f7f8 f834 	bl	8000608 <__aeabi_dmul>
 80085a0:	4b86      	ldr	r3, [pc, #536]	; (80087bc <_dtoa_r+0x64c>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	f7f7 fe7a 	bl	800029c <__adddf3>
 80085a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80085ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085b0:	9303      	str	r3, [sp, #12]
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	d158      	bne.n	8008668 <_dtoa_r+0x4f8>
 80085b6:	4b82      	ldr	r3, [pc, #520]	; (80087c0 <_dtoa_r+0x650>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	4640      	mov	r0, r8
 80085bc:	4649      	mov	r1, r9
 80085be:	f7f7 fe6b 	bl	8000298 <__aeabi_dsub>
 80085c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085c6:	4680      	mov	r8, r0
 80085c8:	4689      	mov	r9, r1
 80085ca:	f7f8 faad 	bl	8000b28 <__aeabi_dcmpgt>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	f040 8296 	bne.w	8008b00 <_dtoa_r+0x990>
 80085d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80085d8:	4640      	mov	r0, r8
 80085da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085de:	4649      	mov	r1, r9
 80085e0:	f7f8 fa84 	bl	8000aec <__aeabi_dcmplt>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	f040 8289 	bne.w	8008afc <_dtoa_r+0x98c>
 80085ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80085ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f2c0 814e 	blt.w	8008892 <_dtoa_r+0x722>
 80085f6:	f1bb 0f0e 	cmp.w	fp, #14
 80085fa:	f300 814a 	bgt.w	8008892 <_dtoa_r+0x722>
 80085fe:	4b6b      	ldr	r3, [pc, #428]	; (80087ac <_dtoa_r+0x63c>)
 8008600:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008604:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800860a:	2b00      	cmp	r3, #0
 800860c:	f280 80dc 	bge.w	80087c8 <_dtoa_r+0x658>
 8008610:	9b04      	ldr	r3, [sp, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	f300 80d8 	bgt.w	80087c8 <_dtoa_r+0x658>
 8008618:	f040 826f 	bne.w	8008afa <_dtoa_r+0x98a>
 800861c:	4b68      	ldr	r3, [pc, #416]	; (80087c0 <_dtoa_r+0x650>)
 800861e:	2200      	movs	r2, #0
 8008620:	4640      	mov	r0, r8
 8008622:	4649      	mov	r1, r9
 8008624:	f7f7 fff0 	bl	8000608 <__aeabi_dmul>
 8008628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800862c:	f7f8 fa72 	bl	8000b14 <__aeabi_dcmpge>
 8008630:	9e04      	ldr	r6, [sp, #16]
 8008632:	4637      	mov	r7, r6
 8008634:	2800      	cmp	r0, #0
 8008636:	f040 8245 	bne.w	8008ac4 <_dtoa_r+0x954>
 800863a:	9d00      	ldr	r5, [sp, #0]
 800863c:	2331      	movs	r3, #49	; 0x31
 800863e:	f805 3b01 	strb.w	r3, [r5], #1
 8008642:	f10b 0b01 	add.w	fp, fp, #1
 8008646:	e241      	b.n	8008acc <_dtoa_r+0x95c>
 8008648:	07f2      	lsls	r2, r6, #31
 800864a:	d505      	bpl.n	8008658 <_dtoa_r+0x4e8>
 800864c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008650:	f7f7 ffda 	bl	8000608 <__aeabi_dmul>
 8008654:	3501      	adds	r5, #1
 8008656:	2301      	movs	r3, #1
 8008658:	1076      	asrs	r6, r6, #1
 800865a:	3708      	adds	r7, #8
 800865c:	e773      	b.n	8008546 <_dtoa_r+0x3d6>
 800865e:	2502      	movs	r5, #2
 8008660:	e775      	b.n	800854e <_dtoa_r+0x3de>
 8008662:	9e04      	ldr	r6, [sp, #16]
 8008664:	465f      	mov	r7, fp
 8008666:	e792      	b.n	800858e <_dtoa_r+0x41e>
 8008668:	9900      	ldr	r1, [sp, #0]
 800866a:	4b50      	ldr	r3, [pc, #320]	; (80087ac <_dtoa_r+0x63c>)
 800866c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008670:	4431      	add	r1, r6
 8008672:	9102      	str	r1, [sp, #8]
 8008674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008676:	eeb0 9a47 	vmov.f32	s18, s14
 800867a:	eef0 9a67 	vmov.f32	s19, s15
 800867e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008682:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008686:	2900      	cmp	r1, #0
 8008688:	d044      	beq.n	8008714 <_dtoa_r+0x5a4>
 800868a:	494e      	ldr	r1, [pc, #312]	; (80087c4 <_dtoa_r+0x654>)
 800868c:	2000      	movs	r0, #0
 800868e:	f7f8 f8e5 	bl	800085c <__aeabi_ddiv>
 8008692:	ec53 2b19 	vmov	r2, r3, d9
 8008696:	f7f7 fdff 	bl	8000298 <__aeabi_dsub>
 800869a:	9d00      	ldr	r5, [sp, #0]
 800869c:	ec41 0b19 	vmov	d9, r0, r1
 80086a0:	4649      	mov	r1, r9
 80086a2:	4640      	mov	r0, r8
 80086a4:	f7f8 fa60 	bl	8000b68 <__aeabi_d2iz>
 80086a8:	4606      	mov	r6, r0
 80086aa:	f7f7 ff43 	bl	8000534 <__aeabi_i2d>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	f7f7 fdef 	bl	8000298 <__aeabi_dsub>
 80086ba:	3630      	adds	r6, #48	; 0x30
 80086bc:	f805 6b01 	strb.w	r6, [r5], #1
 80086c0:	ec53 2b19 	vmov	r2, r3, d9
 80086c4:	4680      	mov	r8, r0
 80086c6:	4689      	mov	r9, r1
 80086c8:	f7f8 fa10 	bl	8000aec <__aeabi_dcmplt>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d164      	bne.n	800879a <_dtoa_r+0x62a>
 80086d0:	4642      	mov	r2, r8
 80086d2:	464b      	mov	r3, r9
 80086d4:	4937      	ldr	r1, [pc, #220]	; (80087b4 <_dtoa_r+0x644>)
 80086d6:	2000      	movs	r0, #0
 80086d8:	f7f7 fdde 	bl	8000298 <__aeabi_dsub>
 80086dc:	ec53 2b19 	vmov	r2, r3, d9
 80086e0:	f7f8 fa04 	bl	8000aec <__aeabi_dcmplt>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	f040 80b6 	bne.w	8008856 <_dtoa_r+0x6e6>
 80086ea:	9b02      	ldr	r3, [sp, #8]
 80086ec:	429d      	cmp	r5, r3
 80086ee:	f43f af7c 	beq.w	80085ea <_dtoa_r+0x47a>
 80086f2:	4b31      	ldr	r3, [pc, #196]	; (80087b8 <_dtoa_r+0x648>)
 80086f4:	ec51 0b19 	vmov	r0, r1, d9
 80086f8:	2200      	movs	r2, #0
 80086fa:	f7f7 ff85 	bl	8000608 <__aeabi_dmul>
 80086fe:	4b2e      	ldr	r3, [pc, #184]	; (80087b8 <_dtoa_r+0x648>)
 8008700:	ec41 0b19 	vmov	d9, r0, r1
 8008704:	2200      	movs	r2, #0
 8008706:	4640      	mov	r0, r8
 8008708:	4649      	mov	r1, r9
 800870a:	f7f7 ff7d 	bl	8000608 <__aeabi_dmul>
 800870e:	4680      	mov	r8, r0
 8008710:	4689      	mov	r9, r1
 8008712:	e7c5      	b.n	80086a0 <_dtoa_r+0x530>
 8008714:	ec51 0b17 	vmov	r0, r1, d7
 8008718:	f7f7 ff76 	bl	8000608 <__aeabi_dmul>
 800871c:	9b02      	ldr	r3, [sp, #8]
 800871e:	9d00      	ldr	r5, [sp, #0]
 8008720:	930f      	str	r3, [sp, #60]	; 0x3c
 8008722:	ec41 0b19 	vmov	d9, r0, r1
 8008726:	4649      	mov	r1, r9
 8008728:	4640      	mov	r0, r8
 800872a:	f7f8 fa1d 	bl	8000b68 <__aeabi_d2iz>
 800872e:	4606      	mov	r6, r0
 8008730:	f7f7 ff00 	bl	8000534 <__aeabi_i2d>
 8008734:	3630      	adds	r6, #48	; 0x30
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	4640      	mov	r0, r8
 800873c:	4649      	mov	r1, r9
 800873e:	f7f7 fdab 	bl	8000298 <__aeabi_dsub>
 8008742:	f805 6b01 	strb.w	r6, [r5], #1
 8008746:	9b02      	ldr	r3, [sp, #8]
 8008748:	429d      	cmp	r5, r3
 800874a:	4680      	mov	r8, r0
 800874c:	4689      	mov	r9, r1
 800874e:	f04f 0200 	mov.w	r2, #0
 8008752:	d124      	bne.n	800879e <_dtoa_r+0x62e>
 8008754:	4b1b      	ldr	r3, [pc, #108]	; (80087c4 <_dtoa_r+0x654>)
 8008756:	ec51 0b19 	vmov	r0, r1, d9
 800875a:	f7f7 fd9f 	bl	800029c <__adddf3>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4640      	mov	r0, r8
 8008764:	4649      	mov	r1, r9
 8008766:	f7f8 f9df 	bl	8000b28 <__aeabi_dcmpgt>
 800876a:	2800      	cmp	r0, #0
 800876c:	d173      	bne.n	8008856 <_dtoa_r+0x6e6>
 800876e:	ec53 2b19 	vmov	r2, r3, d9
 8008772:	4914      	ldr	r1, [pc, #80]	; (80087c4 <_dtoa_r+0x654>)
 8008774:	2000      	movs	r0, #0
 8008776:	f7f7 fd8f 	bl	8000298 <__aeabi_dsub>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4640      	mov	r0, r8
 8008780:	4649      	mov	r1, r9
 8008782:	f7f8 f9b3 	bl	8000aec <__aeabi_dcmplt>
 8008786:	2800      	cmp	r0, #0
 8008788:	f43f af2f 	beq.w	80085ea <_dtoa_r+0x47a>
 800878c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800878e:	1e6b      	subs	r3, r5, #1
 8008790:	930f      	str	r3, [sp, #60]	; 0x3c
 8008792:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008796:	2b30      	cmp	r3, #48	; 0x30
 8008798:	d0f8      	beq.n	800878c <_dtoa_r+0x61c>
 800879a:	46bb      	mov	fp, r7
 800879c:	e04a      	b.n	8008834 <_dtoa_r+0x6c4>
 800879e:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <_dtoa_r+0x648>)
 80087a0:	f7f7 ff32 	bl	8000608 <__aeabi_dmul>
 80087a4:	4680      	mov	r8, r0
 80087a6:	4689      	mov	r9, r1
 80087a8:	e7bd      	b.n	8008726 <_dtoa_r+0x5b6>
 80087aa:	bf00      	nop
 80087ac:	0800ba18 	.word	0x0800ba18
 80087b0:	0800b9f0 	.word	0x0800b9f0
 80087b4:	3ff00000 	.word	0x3ff00000
 80087b8:	40240000 	.word	0x40240000
 80087bc:	401c0000 	.word	0x401c0000
 80087c0:	40140000 	.word	0x40140000
 80087c4:	3fe00000 	.word	0x3fe00000
 80087c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80087cc:	9d00      	ldr	r5, [sp, #0]
 80087ce:	4642      	mov	r2, r8
 80087d0:	464b      	mov	r3, r9
 80087d2:	4630      	mov	r0, r6
 80087d4:	4639      	mov	r1, r7
 80087d6:	f7f8 f841 	bl	800085c <__aeabi_ddiv>
 80087da:	f7f8 f9c5 	bl	8000b68 <__aeabi_d2iz>
 80087de:	9001      	str	r0, [sp, #4]
 80087e0:	f7f7 fea8 	bl	8000534 <__aeabi_i2d>
 80087e4:	4642      	mov	r2, r8
 80087e6:	464b      	mov	r3, r9
 80087e8:	f7f7 ff0e 	bl	8000608 <__aeabi_dmul>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4630      	mov	r0, r6
 80087f2:	4639      	mov	r1, r7
 80087f4:	f7f7 fd50 	bl	8000298 <__aeabi_dsub>
 80087f8:	9e01      	ldr	r6, [sp, #4]
 80087fa:	9f04      	ldr	r7, [sp, #16]
 80087fc:	3630      	adds	r6, #48	; 0x30
 80087fe:	f805 6b01 	strb.w	r6, [r5], #1
 8008802:	9e00      	ldr	r6, [sp, #0]
 8008804:	1bae      	subs	r6, r5, r6
 8008806:	42b7      	cmp	r7, r6
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	d134      	bne.n	8008878 <_dtoa_r+0x708>
 800880e:	f7f7 fd45 	bl	800029c <__adddf3>
 8008812:	4642      	mov	r2, r8
 8008814:	464b      	mov	r3, r9
 8008816:	4606      	mov	r6, r0
 8008818:	460f      	mov	r7, r1
 800881a:	f7f8 f985 	bl	8000b28 <__aeabi_dcmpgt>
 800881e:	b9c8      	cbnz	r0, 8008854 <_dtoa_r+0x6e4>
 8008820:	4642      	mov	r2, r8
 8008822:	464b      	mov	r3, r9
 8008824:	4630      	mov	r0, r6
 8008826:	4639      	mov	r1, r7
 8008828:	f7f8 f956 	bl	8000ad8 <__aeabi_dcmpeq>
 800882c:	b110      	cbz	r0, 8008834 <_dtoa_r+0x6c4>
 800882e:	9b01      	ldr	r3, [sp, #4]
 8008830:	07db      	lsls	r3, r3, #31
 8008832:	d40f      	bmi.n	8008854 <_dtoa_r+0x6e4>
 8008834:	4651      	mov	r1, sl
 8008836:	4620      	mov	r0, r4
 8008838:	f000 fbcc 	bl	8008fd4 <_Bfree>
 800883c:	2300      	movs	r3, #0
 800883e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008840:	702b      	strb	r3, [r5, #0]
 8008842:	f10b 0301 	add.w	r3, fp, #1
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800884a:	2b00      	cmp	r3, #0
 800884c:	f43f ace2 	beq.w	8008214 <_dtoa_r+0xa4>
 8008850:	601d      	str	r5, [r3, #0]
 8008852:	e4df      	b.n	8008214 <_dtoa_r+0xa4>
 8008854:	465f      	mov	r7, fp
 8008856:	462b      	mov	r3, r5
 8008858:	461d      	mov	r5, r3
 800885a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800885e:	2a39      	cmp	r2, #57	; 0x39
 8008860:	d106      	bne.n	8008870 <_dtoa_r+0x700>
 8008862:	9a00      	ldr	r2, [sp, #0]
 8008864:	429a      	cmp	r2, r3
 8008866:	d1f7      	bne.n	8008858 <_dtoa_r+0x6e8>
 8008868:	9900      	ldr	r1, [sp, #0]
 800886a:	2230      	movs	r2, #48	; 0x30
 800886c:	3701      	adds	r7, #1
 800886e:	700a      	strb	r2, [r1, #0]
 8008870:	781a      	ldrb	r2, [r3, #0]
 8008872:	3201      	adds	r2, #1
 8008874:	701a      	strb	r2, [r3, #0]
 8008876:	e790      	b.n	800879a <_dtoa_r+0x62a>
 8008878:	4ba3      	ldr	r3, [pc, #652]	; (8008b08 <_dtoa_r+0x998>)
 800887a:	2200      	movs	r2, #0
 800887c:	f7f7 fec4 	bl	8000608 <__aeabi_dmul>
 8008880:	2200      	movs	r2, #0
 8008882:	2300      	movs	r3, #0
 8008884:	4606      	mov	r6, r0
 8008886:	460f      	mov	r7, r1
 8008888:	f7f8 f926 	bl	8000ad8 <__aeabi_dcmpeq>
 800888c:	2800      	cmp	r0, #0
 800888e:	d09e      	beq.n	80087ce <_dtoa_r+0x65e>
 8008890:	e7d0      	b.n	8008834 <_dtoa_r+0x6c4>
 8008892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008894:	2a00      	cmp	r2, #0
 8008896:	f000 80ca 	beq.w	8008a2e <_dtoa_r+0x8be>
 800889a:	9a07      	ldr	r2, [sp, #28]
 800889c:	2a01      	cmp	r2, #1
 800889e:	f300 80ad 	bgt.w	80089fc <_dtoa_r+0x88c>
 80088a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088a4:	2a00      	cmp	r2, #0
 80088a6:	f000 80a5 	beq.w	80089f4 <_dtoa_r+0x884>
 80088aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088ae:	9e08      	ldr	r6, [sp, #32]
 80088b0:	9d05      	ldr	r5, [sp, #20]
 80088b2:	9a05      	ldr	r2, [sp, #20]
 80088b4:	441a      	add	r2, r3
 80088b6:	9205      	str	r2, [sp, #20]
 80088b8:	9a06      	ldr	r2, [sp, #24]
 80088ba:	2101      	movs	r1, #1
 80088bc:	441a      	add	r2, r3
 80088be:	4620      	mov	r0, r4
 80088c0:	9206      	str	r2, [sp, #24]
 80088c2:	f000 fc87 	bl	80091d4 <__i2b>
 80088c6:	4607      	mov	r7, r0
 80088c8:	b165      	cbz	r5, 80088e4 <_dtoa_r+0x774>
 80088ca:	9b06      	ldr	r3, [sp, #24]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dd09      	ble.n	80088e4 <_dtoa_r+0x774>
 80088d0:	42ab      	cmp	r3, r5
 80088d2:	9a05      	ldr	r2, [sp, #20]
 80088d4:	bfa8      	it	ge
 80088d6:	462b      	movge	r3, r5
 80088d8:	1ad2      	subs	r2, r2, r3
 80088da:	9205      	str	r2, [sp, #20]
 80088dc:	9a06      	ldr	r2, [sp, #24]
 80088de:	1aed      	subs	r5, r5, r3
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	9306      	str	r3, [sp, #24]
 80088e4:	9b08      	ldr	r3, [sp, #32]
 80088e6:	b1f3      	cbz	r3, 8008926 <_dtoa_r+0x7b6>
 80088e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 80a3 	beq.w	8008a36 <_dtoa_r+0x8c6>
 80088f0:	2e00      	cmp	r6, #0
 80088f2:	dd10      	ble.n	8008916 <_dtoa_r+0x7a6>
 80088f4:	4639      	mov	r1, r7
 80088f6:	4632      	mov	r2, r6
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fd2b 	bl	8009354 <__pow5mult>
 80088fe:	4652      	mov	r2, sl
 8008900:	4601      	mov	r1, r0
 8008902:	4607      	mov	r7, r0
 8008904:	4620      	mov	r0, r4
 8008906:	f000 fc7b 	bl	8009200 <__multiply>
 800890a:	4651      	mov	r1, sl
 800890c:	4680      	mov	r8, r0
 800890e:	4620      	mov	r0, r4
 8008910:	f000 fb60 	bl	8008fd4 <_Bfree>
 8008914:	46c2      	mov	sl, r8
 8008916:	9b08      	ldr	r3, [sp, #32]
 8008918:	1b9a      	subs	r2, r3, r6
 800891a:	d004      	beq.n	8008926 <_dtoa_r+0x7b6>
 800891c:	4651      	mov	r1, sl
 800891e:	4620      	mov	r0, r4
 8008920:	f000 fd18 	bl	8009354 <__pow5mult>
 8008924:	4682      	mov	sl, r0
 8008926:	2101      	movs	r1, #1
 8008928:	4620      	mov	r0, r4
 800892a:	f000 fc53 	bl	80091d4 <__i2b>
 800892e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008930:	2b00      	cmp	r3, #0
 8008932:	4606      	mov	r6, r0
 8008934:	f340 8081 	ble.w	8008a3a <_dtoa_r+0x8ca>
 8008938:	461a      	mov	r2, r3
 800893a:	4601      	mov	r1, r0
 800893c:	4620      	mov	r0, r4
 800893e:	f000 fd09 	bl	8009354 <__pow5mult>
 8008942:	9b07      	ldr	r3, [sp, #28]
 8008944:	2b01      	cmp	r3, #1
 8008946:	4606      	mov	r6, r0
 8008948:	dd7a      	ble.n	8008a40 <_dtoa_r+0x8d0>
 800894a:	f04f 0800 	mov.w	r8, #0
 800894e:	6933      	ldr	r3, [r6, #16]
 8008950:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008954:	6918      	ldr	r0, [r3, #16]
 8008956:	f000 fbef 	bl	8009138 <__hi0bits>
 800895a:	f1c0 0020 	rsb	r0, r0, #32
 800895e:	9b06      	ldr	r3, [sp, #24]
 8008960:	4418      	add	r0, r3
 8008962:	f010 001f 	ands.w	r0, r0, #31
 8008966:	f000 8094 	beq.w	8008a92 <_dtoa_r+0x922>
 800896a:	f1c0 0320 	rsb	r3, r0, #32
 800896e:	2b04      	cmp	r3, #4
 8008970:	f340 8085 	ble.w	8008a7e <_dtoa_r+0x90e>
 8008974:	9b05      	ldr	r3, [sp, #20]
 8008976:	f1c0 001c 	rsb	r0, r0, #28
 800897a:	4403      	add	r3, r0
 800897c:	9305      	str	r3, [sp, #20]
 800897e:	9b06      	ldr	r3, [sp, #24]
 8008980:	4403      	add	r3, r0
 8008982:	4405      	add	r5, r0
 8008984:	9306      	str	r3, [sp, #24]
 8008986:	9b05      	ldr	r3, [sp, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	dd05      	ble.n	8008998 <_dtoa_r+0x828>
 800898c:	4651      	mov	r1, sl
 800898e:	461a      	mov	r2, r3
 8008990:	4620      	mov	r0, r4
 8008992:	f000 fd39 	bl	8009408 <__lshift>
 8008996:	4682      	mov	sl, r0
 8008998:	9b06      	ldr	r3, [sp, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	dd05      	ble.n	80089aa <_dtoa_r+0x83a>
 800899e:	4631      	mov	r1, r6
 80089a0:	461a      	mov	r2, r3
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 fd30 	bl	8009408 <__lshift>
 80089a8:	4606      	mov	r6, r0
 80089aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d072      	beq.n	8008a96 <_dtoa_r+0x926>
 80089b0:	4631      	mov	r1, r6
 80089b2:	4650      	mov	r0, sl
 80089b4:	f000 fd94 	bl	80094e0 <__mcmp>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	da6c      	bge.n	8008a96 <_dtoa_r+0x926>
 80089bc:	2300      	movs	r3, #0
 80089be:	4651      	mov	r1, sl
 80089c0:	220a      	movs	r2, #10
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 fb28 	bl	8009018 <__multadd>
 80089c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80089ce:	4682      	mov	sl, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f000 81b0 	beq.w	8008d36 <_dtoa_r+0xbc6>
 80089d6:	2300      	movs	r3, #0
 80089d8:	4639      	mov	r1, r7
 80089da:	220a      	movs	r2, #10
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 fb1b 	bl	8009018 <__multadd>
 80089e2:	9b01      	ldr	r3, [sp, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	4607      	mov	r7, r0
 80089e8:	f300 8096 	bgt.w	8008b18 <_dtoa_r+0x9a8>
 80089ec:	9b07      	ldr	r3, [sp, #28]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	dc59      	bgt.n	8008aa6 <_dtoa_r+0x936>
 80089f2:	e091      	b.n	8008b18 <_dtoa_r+0x9a8>
 80089f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089fa:	e758      	b.n	80088ae <_dtoa_r+0x73e>
 80089fc:	9b04      	ldr	r3, [sp, #16]
 80089fe:	1e5e      	subs	r6, r3, #1
 8008a00:	9b08      	ldr	r3, [sp, #32]
 8008a02:	42b3      	cmp	r3, r6
 8008a04:	bfbf      	itttt	lt
 8008a06:	9b08      	ldrlt	r3, [sp, #32]
 8008a08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008a0a:	9608      	strlt	r6, [sp, #32]
 8008a0c:	1af3      	sublt	r3, r6, r3
 8008a0e:	bfb4      	ite	lt
 8008a10:	18d2      	addlt	r2, r2, r3
 8008a12:	1b9e      	subge	r6, r3, r6
 8008a14:	9b04      	ldr	r3, [sp, #16]
 8008a16:	bfbc      	itt	lt
 8008a18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008a1a:	2600      	movlt	r6, #0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bfb7      	itett	lt
 8008a20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008a24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008a28:	1a9d      	sublt	r5, r3, r2
 8008a2a:	2300      	movlt	r3, #0
 8008a2c:	e741      	b.n	80088b2 <_dtoa_r+0x742>
 8008a2e:	9e08      	ldr	r6, [sp, #32]
 8008a30:	9d05      	ldr	r5, [sp, #20]
 8008a32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008a34:	e748      	b.n	80088c8 <_dtoa_r+0x758>
 8008a36:	9a08      	ldr	r2, [sp, #32]
 8008a38:	e770      	b.n	800891c <_dtoa_r+0x7ac>
 8008a3a:	9b07      	ldr	r3, [sp, #28]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	dc19      	bgt.n	8008a74 <_dtoa_r+0x904>
 8008a40:	9b02      	ldr	r3, [sp, #8]
 8008a42:	b9bb      	cbnz	r3, 8008a74 <_dtoa_r+0x904>
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a4a:	b99b      	cbnz	r3, 8008a74 <_dtoa_r+0x904>
 8008a4c:	9b03      	ldr	r3, [sp, #12]
 8008a4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a52:	0d1b      	lsrs	r3, r3, #20
 8008a54:	051b      	lsls	r3, r3, #20
 8008a56:	b183      	cbz	r3, 8008a7a <_dtoa_r+0x90a>
 8008a58:	9b05      	ldr	r3, [sp, #20]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	9b06      	ldr	r3, [sp, #24]
 8008a60:	3301      	adds	r3, #1
 8008a62:	9306      	str	r3, [sp, #24]
 8008a64:	f04f 0801 	mov.w	r8, #1
 8008a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f47f af6f 	bne.w	800894e <_dtoa_r+0x7de>
 8008a70:	2001      	movs	r0, #1
 8008a72:	e774      	b.n	800895e <_dtoa_r+0x7ee>
 8008a74:	f04f 0800 	mov.w	r8, #0
 8008a78:	e7f6      	b.n	8008a68 <_dtoa_r+0x8f8>
 8008a7a:	4698      	mov	r8, r3
 8008a7c:	e7f4      	b.n	8008a68 <_dtoa_r+0x8f8>
 8008a7e:	d082      	beq.n	8008986 <_dtoa_r+0x816>
 8008a80:	9a05      	ldr	r2, [sp, #20]
 8008a82:	331c      	adds	r3, #28
 8008a84:	441a      	add	r2, r3
 8008a86:	9205      	str	r2, [sp, #20]
 8008a88:	9a06      	ldr	r2, [sp, #24]
 8008a8a:	441a      	add	r2, r3
 8008a8c:	441d      	add	r5, r3
 8008a8e:	9206      	str	r2, [sp, #24]
 8008a90:	e779      	b.n	8008986 <_dtoa_r+0x816>
 8008a92:	4603      	mov	r3, r0
 8008a94:	e7f4      	b.n	8008a80 <_dtoa_r+0x910>
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	dc37      	bgt.n	8008b0c <_dtoa_r+0x99c>
 8008a9c:	9b07      	ldr	r3, [sp, #28]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	dd34      	ble.n	8008b0c <_dtoa_r+0x99c>
 8008aa2:	9b04      	ldr	r3, [sp, #16]
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	9b01      	ldr	r3, [sp, #4]
 8008aa8:	b963      	cbnz	r3, 8008ac4 <_dtoa_r+0x954>
 8008aaa:	4631      	mov	r1, r6
 8008aac:	2205      	movs	r2, #5
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 fab2 	bl	8009018 <__multadd>
 8008ab4:	4601      	mov	r1, r0
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	4650      	mov	r0, sl
 8008aba:	f000 fd11 	bl	80094e0 <__mcmp>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	f73f adbb 	bgt.w	800863a <_dtoa_r+0x4ca>
 8008ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac6:	9d00      	ldr	r5, [sp, #0]
 8008ac8:	ea6f 0b03 	mvn.w	fp, r3
 8008acc:	f04f 0800 	mov.w	r8, #0
 8008ad0:	4631      	mov	r1, r6
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 fa7e 	bl	8008fd4 <_Bfree>
 8008ad8:	2f00      	cmp	r7, #0
 8008ada:	f43f aeab 	beq.w	8008834 <_dtoa_r+0x6c4>
 8008ade:	f1b8 0f00 	cmp.w	r8, #0
 8008ae2:	d005      	beq.n	8008af0 <_dtoa_r+0x980>
 8008ae4:	45b8      	cmp	r8, r7
 8008ae6:	d003      	beq.n	8008af0 <_dtoa_r+0x980>
 8008ae8:	4641      	mov	r1, r8
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 fa72 	bl	8008fd4 <_Bfree>
 8008af0:	4639      	mov	r1, r7
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 fa6e 	bl	8008fd4 <_Bfree>
 8008af8:	e69c      	b.n	8008834 <_dtoa_r+0x6c4>
 8008afa:	2600      	movs	r6, #0
 8008afc:	4637      	mov	r7, r6
 8008afe:	e7e1      	b.n	8008ac4 <_dtoa_r+0x954>
 8008b00:	46bb      	mov	fp, r7
 8008b02:	4637      	mov	r7, r6
 8008b04:	e599      	b.n	800863a <_dtoa_r+0x4ca>
 8008b06:	bf00      	nop
 8008b08:	40240000 	.word	0x40240000
 8008b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 80c8 	beq.w	8008ca4 <_dtoa_r+0xb34>
 8008b14:	9b04      	ldr	r3, [sp, #16]
 8008b16:	9301      	str	r3, [sp, #4]
 8008b18:	2d00      	cmp	r5, #0
 8008b1a:	dd05      	ble.n	8008b28 <_dtoa_r+0x9b8>
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	462a      	mov	r2, r5
 8008b20:	4620      	mov	r0, r4
 8008b22:	f000 fc71 	bl	8009408 <__lshift>
 8008b26:	4607      	mov	r7, r0
 8008b28:	f1b8 0f00 	cmp.w	r8, #0
 8008b2c:	d05b      	beq.n	8008be6 <_dtoa_r+0xa76>
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 fa0f 	bl	8008f54 <_Balloc>
 8008b36:	4605      	mov	r5, r0
 8008b38:	b928      	cbnz	r0, 8008b46 <_dtoa_r+0x9d6>
 8008b3a:	4b83      	ldr	r3, [pc, #524]	; (8008d48 <_dtoa_r+0xbd8>)
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008b42:	f7ff bb2e 	b.w	80081a2 <_dtoa_r+0x32>
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	3202      	adds	r2, #2
 8008b4a:	0092      	lsls	r2, r2, #2
 8008b4c:	f107 010c 	add.w	r1, r7, #12
 8008b50:	300c      	adds	r0, #12
 8008b52:	f7ff fa6e 	bl	8008032 <memcpy>
 8008b56:	2201      	movs	r2, #1
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 fc54 	bl	8009408 <__lshift>
 8008b60:	9b00      	ldr	r3, [sp, #0]
 8008b62:	3301      	adds	r3, #1
 8008b64:	9304      	str	r3, [sp, #16]
 8008b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	9308      	str	r3, [sp, #32]
 8008b6e:	9b02      	ldr	r3, [sp, #8]
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	46b8      	mov	r8, r7
 8008b76:	9306      	str	r3, [sp, #24]
 8008b78:	4607      	mov	r7, r0
 8008b7a:	9b04      	ldr	r3, [sp, #16]
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	4650      	mov	r0, sl
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	f7ff fa6a 	bl	800805c <quorem>
 8008b88:	4641      	mov	r1, r8
 8008b8a:	9002      	str	r0, [sp, #8]
 8008b8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008b90:	4650      	mov	r0, sl
 8008b92:	f000 fca5 	bl	80094e0 <__mcmp>
 8008b96:	463a      	mov	r2, r7
 8008b98:	9005      	str	r0, [sp, #20]
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f000 fcbb 	bl	8009518 <__mdiff>
 8008ba2:	68c2      	ldr	r2, [r0, #12]
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	bb02      	cbnz	r2, 8008bea <_dtoa_r+0xa7a>
 8008ba8:	4601      	mov	r1, r0
 8008baa:	4650      	mov	r0, sl
 8008bac:	f000 fc98 	bl	80094e0 <__mcmp>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8008bb8:	f000 fa0c 	bl	8008fd4 <_Bfree>
 8008bbc:	9b07      	ldr	r3, [sp, #28]
 8008bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bc0:	9d04      	ldr	r5, [sp, #16]
 8008bc2:	ea43 0102 	orr.w	r1, r3, r2
 8008bc6:	9b06      	ldr	r3, [sp, #24]
 8008bc8:	4319      	orrs	r1, r3
 8008bca:	d110      	bne.n	8008bee <_dtoa_r+0xa7e>
 8008bcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008bd0:	d029      	beq.n	8008c26 <_dtoa_r+0xab6>
 8008bd2:	9b05      	ldr	r3, [sp, #20]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	dd02      	ble.n	8008bde <_dtoa_r+0xa6e>
 8008bd8:	9b02      	ldr	r3, [sp, #8]
 8008bda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008bde:	9b01      	ldr	r3, [sp, #4]
 8008be0:	f883 9000 	strb.w	r9, [r3]
 8008be4:	e774      	b.n	8008ad0 <_dtoa_r+0x960>
 8008be6:	4638      	mov	r0, r7
 8008be8:	e7ba      	b.n	8008b60 <_dtoa_r+0x9f0>
 8008bea:	2201      	movs	r2, #1
 8008bec:	e7e1      	b.n	8008bb2 <_dtoa_r+0xa42>
 8008bee:	9b05      	ldr	r3, [sp, #20]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	db04      	blt.n	8008bfe <_dtoa_r+0xa8e>
 8008bf4:	9907      	ldr	r1, [sp, #28]
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	9906      	ldr	r1, [sp, #24]
 8008bfa:	430b      	orrs	r3, r1
 8008bfc:	d120      	bne.n	8008c40 <_dtoa_r+0xad0>
 8008bfe:	2a00      	cmp	r2, #0
 8008c00:	dded      	ble.n	8008bde <_dtoa_r+0xa6e>
 8008c02:	4651      	mov	r1, sl
 8008c04:	2201      	movs	r2, #1
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 fbfe 	bl	8009408 <__lshift>
 8008c0c:	4631      	mov	r1, r6
 8008c0e:	4682      	mov	sl, r0
 8008c10:	f000 fc66 	bl	80094e0 <__mcmp>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	dc03      	bgt.n	8008c20 <_dtoa_r+0xab0>
 8008c18:	d1e1      	bne.n	8008bde <_dtoa_r+0xa6e>
 8008c1a:	f019 0f01 	tst.w	r9, #1
 8008c1e:	d0de      	beq.n	8008bde <_dtoa_r+0xa6e>
 8008c20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c24:	d1d8      	bne.n	8008bd8 <_dtoa_r+0xa68>
 8008c26:	9a01      	ldr	r2, [sp, #4]
 8008c28:	2339      	movs	r3, #57	; 0x39
 8008c2a:	7013      	strb	r3, [r2, #0]
 8008c2c:	462b      	mov	r3, r5
 8008c2e:	461d      	mov	r5, r3
 8008c30:	3b01      	subs	r3, #1
 8008c32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c36:	2a39      	cmp	r2, #57	; 0x39
 8008c38:	d06c      	beq.n	8008d14 <_dtoa_r+0xba4>
 8008c3a:	3201      	adds	r2, #1
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	e747      	b.n	8008ad0 <_dtoa_r+0x960>
 8008c40:	2a00      	cmp	r2, #0
 8008c42:	dd07      	ble.n	8008c54 <_dtoa_r+0xae4>
 8008c44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c48:	d0ed      	beq.n	8008c26 <_dtoa_r+0xab6>
 8008c4a:	9a01      	ldr	r2, [sp, #4]
 8008c4c:	f109 0301 	add.w	r3, r9, #1
 8008c50:	7013      	strb	r3, [r2, #0]
 8008c52:	e73d      	b.n	8008ad0 <_dtoa_r+0x960>
 8008c54:	9b04      	ldr	r3, [sp, #16]
 8008c56:	9a08      	ldr	r2, [sp, #32]
 8008c58:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d043      	beq.n	8008ce8 <_dtoa_r+0xb78>
 8008c60:	4651      	mov	r1, sl
 8008c62:	2300      	movs	r3, #0
 8008c64:	220a      	movs	r2, #10
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 f9d6 	bl	8009018 <__multadd>
 8008c6c:	45b8      	cmp	r8, r7
 8008c6e:	4682      	mov	sl, r0
 8008c70:	f04f 0300 	mov.w	r3, #0
 8008c74:	f04f 020a 	mov.w	r2, #10
 8008c78:	4641      	mov	r1, r8
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	d107      	bne.n	8008c8e <_dtoa_r+0xb1e>
 8008c7e:	f000 f9cb 	bl	8009018 <__multadd>
 8008c82:	4680      	mov	r8, r0
 8008c84:	4607      	mov	r7, r0
 8008c86:	9b04      	ldr	r3, [sp, #16]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	e775      	b.n	8008b7a <_dtoa_r+0xa0a>
 8008c8e:	f000 f9c3 	bl	8009018 <__multadd>
 8008c92:	4639      	mov	r1, r7
 8008c94:	4680      	mov	r8, r0
 8008c96:	2300      	movs	r3, #0
 8008c98:	220a      	movs	r2, #10
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f000 f9bc 	bl	8009018 <__multadd>
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	e7f0      	b.n	8008c86 <_dtoa_r+0xb16>
 8008ca4:	9b04      	ldr	r3, [sp, #16]
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	9d00      	ldr	r5, [sp, #0]
 8008caa:	4631      	mov	r1, r6
 8008cac:	4650      	mov	r0, sl
 8008cae:	f7ff f9d5 	bl	800805c <quorem>
 8008cb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008cb6:	9b00      	ldr	r3, [sp, #0]
 8008cb8:	f805 9b01 	strb.w	r9, [r5], #1
 8008cbc:	1aea      	subs	r2, r5, r3
 8008cbe:	9b01      	ldr	r3, [sp, #4]
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	dd07      	ble.n	8008cd4 <_dtoa_r+0xb64>
 8008cc4:	4651      	mov	r1, sl
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	220a      	movs	r2, #10
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f000 f9a4 	bl	8009018 <__multadd>
 8008cd0:	4682      	mov	sl, r0
 8008cd2:	e7ea      	b.n	8008caa <_dtoa_r+0xb3a>
 8008cd4:	9b01      	ldr	r3, [sp, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	bfc8      	it	gt
 8008cda:	461d      	movgt	r5, r3
 8008cdc:	9b00      	ldr	r3, [sp, #0]
 8008cde:	bfd8      	it	le
 8008ce0:	2501      	movle	r5, #1
 8008ce2:	441d      	add	r5, r3
 8008ce4:	f04f 0800 	mov.w	r8, #0
 8008ce8:	4651      	mov	r1, sl
 8008cea:	2201      	movs	r2, #1
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 fb8b 	bl	8009408 <__lshift>
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4682      	mov	sl, r0
 8008cf6:	f000 fbf3 	bl	80094e0 <__mcmp>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	dc96      	bgt.n	8008c2c <_dtoa_r+0xabc>
 8008cfe:	d102      	bne.n	8008d06 <_dtoa_r+0xb96>
 8008d00:	f019 0f01 	tst.w	r9, #1
 8008d04:	d192      	bne.n	8008c2c <_dtoa_r+0xabc>
 8008d06:	462b      	mov	r3, r5
 8008d08:	461d      	mov	r5, r3
 8008d0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d0e:	2a30      	cmp	r2, #48	; 0x30
 8008d10:	d0fa      	beq.n	8008d08 <_dtoa_r+0xb98>
 8008d12:	e6dd      	b.n	8008ad0 <_dtoa_r+0x960>
 8008d14:	9a00      	ldr	r2, [sp, #0]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d189      	bne.n	8008c2e <_dtoa_r+0xabe>
 8008d1a:	f10b 0b01 	add.w	fp, fp, #1
 8008d1e:	2331      	movs	r3, #49	; 0x31
 8008d20:	e796      	b.n	8008c50 <_dtoa_r+0xae0>
 8008d22:	4b0a      	ldr	r3, [pc, #40]	; (8008d4c <_dtoa_r+0xbdc>)
 8008d24:	f7ff ba99 	b.w	800825a <_dtoa_r+0xea>
 8008d28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f47f aa6d 	bne.w	800820a <_dtoa_r+0x9a>
 8008d30:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <_dtoa_r+0xbe0>)
 8008d32:	f7ff ba92 	b.w	800825a <_dtoa_r+0xea>
 8008d36:	9b01      	ldr	r3, [sp, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	dcb5      	bgt.n	8008ca8 <_dtoa_r+0xb38>
 8008d3c:	9b07      	ldr	r3, [sp, #28]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	f73f aeb1 	bgt.w	8008aa6 <_dtoa_r+0x936>
 8008d44:	e7b0      	b.n	8008ca8 <_dtoa_r+0xb38>
 8008d46:	bf00      	nop
 8008d48:	0800b981 	.word	0x0800b981
 8008d4c:	0800b8dc 	.word	0x0800b8dc
 8008d50:	0800b905 	.word	0x0800b905

08008d54 <_free_r>:
 8008d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d56:	2900      	cmp	r1, #0
 8008d58:	d044      	beq.n	8008de4 <_free_r+0x90>
 8008d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d5e:	9001      	str	r0, [sp, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f1a1 0404 	sub.w	r4, r1, #4
 8008d66:	bfb8      	it	lt
 8008d68:	18e4      	addlt	r4, r4, r3
 8008d6a:	f000 f8e7 	bl	8008f3c <__malloc_lock>
 8008d6e:	4a1e      	ldr	r2, [pc, #120]	; (8008de8 <_free_r+0x94>)
 8008d70:	9801      	ldr	r0, [sp, #4]
 8008d72:	6813      	ldr	r3, [r2, #0]
 8008d74:	b933      	cbnz	r3, 8008d84 <_free_r+0x30>
 8008d76:	6063      	str	r3, [r4, #4]
 8008d78:	6014      	str	r4, [r2, #0]
 8008d7a:	b003      	add	sp, #12
 8008d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d80:	f000 b8e2 	b.w	8008f48 <__malloc_unlock>
 8008d84:	42a3      	cmp	r3, r4
 8008d86:	d908      	bls.n	8008d9a <_free_r+0x46>
 8008d88:	6825      	ldr	r5, [r4, #0]
 8008d8a:	1961      	adds	r1, r4, r5
 8008d8c:	428b      	cmp	r3, r1
 8008d8e:	bf01      	itttt	eq
 8008d90:	6819      	ldreq	r1, [r3, #0]
 8008d92:	685b      	ldreq	r3, [r3, #4]
 8008d94:	1949      	addeq	r1, r1, r5
 8008d96:	6021      	streq	r1, [r4, #0]
 8008d98:	e7ed      	b.n	8008d76 <_free_r+0x22>
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	b10b      	cbz	r3, 8008da4 <_free_r+0x50>
 8008da0:	42a3      	cmp	r3, r4
 8008da2:	d9fa      	bls.n	8008d9a <_free_r+0x46>
 8008da4:	6811      	ldr	r1, [r2, #0]
 8008da6:	1855      	adds	r5, r2, r1
 8008da8:	42a5      	cmp	r5, r4
 8008daa:	d10b      	bne.n	8008dc4 <_free_r+0x70>
 8008dac:	6824      	ldr	r4, [r4, #0]
 8008dae:	4421      	add	r1, r4
 8008db0:	1854      	adds	r4, r2, r1
 8008db2:	42a3      	cmp	r3, r4
 8008db4:	6011      	str	r1, [r2, #0]
 8008db6:	d1e0      	bne.n	8008d7a <_free_r+0x26>
 8008db8:	681c      	ldr	r4, [r3, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	6053      	str	r3, [r2, #4]
 8008dbe:	440c      	add	r4, r1
 8008dc0:	6014      	str	r4, [r2, #0]
 8008dc2:	e7da      	b.n	8008d7a <_free_r+0x26>
 8008dc4:	d902      	bls.n	8008dcc <_free_r+0x78>
 8008dc6:	230c      	movs	r3, #12
 8008dc8:	6003      	str	r3, [r0, #0]
 8008dca:	e7d6      	b.n	8008d7a <_free_r+0x26>
 8008dcc:	6825      	ldr	r5, [r4, #0]
 8008dce:	1961      	adds	r1, r4, r5
 8008dd0:	428b      	cmp	r3, r1
 8008dd2:	bf04      	itt	eq
 8008dd4:	6819      	ldreq	r1, [r3, #0]
 8008dd6:	685b      	ldreq	r3, [r3, #4]
 8008dd8:	6063      	str	r3, [r4, #4]
 8008dda:	bf04      	itt	eq
 8008ddc:	1949      	addeq	r1, r1, r5
 8008dde:	6021      	streq	r1, [r4, #0]
 8008de0:	6054      	str	r4, [r2, #4]
 8008de2:	e7ca      	b.n	8008d7a <_free_r+0x26>
 8008de4:	b003      	add	sp, #12
 8008de6:	bd30      	pop	{r4, r5, pc}
 8008de8:	20004d30 	.word	0x20004d30

08008dec <malloc>:
 8008dec:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <malloc+0xc>)
 8008dee:	4601      	mov	r1, r0
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	f000 b823 	b.w	8008e3c <_malloc_r>
 8008df6:	bf00      	nop
 8008df8:	20000068 	.word	0x20000068

08008dfc <sbrk_aligned>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	4e0e      	ldr	r6, [pc, #56]	; (8008e38 <sbrk_aligned+0x3c>)
 8008e00:	460c      	mov	r4, r1
 8008e02:	6831      	ldr	r1, [r6, #0]
 8008e04:	4605      	mov	r5, r0
 8008e06:	b911      	cbnz	r1, 8008e0e <sbrk_aligned+0x12>
 8008e08:	f001 fe1a 	bl	800aa40 <_sbrk_r>
 8008e0c:	6030      	str	r0, [r6, #0]
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4628      	mov	r0, r5
 8008e12:	f001 fe15 	bl	800aa40 <_sbrk_r>
 8008e16:	1c43      	adds	r3, r0, #1
 8008e18:	d00a      	beq.n	8008e30 <sbrk_aligned+0x34>
 8008e1a:	1cc4      	adds	r4, r0, #3
 8008e1c:	f024 0403 	bic.w	r4, r4, #3
 8008e20:	42a0      	cmp	r0, r4
 8008e22:	d007      	beq.n	8008e34 <sbrk_aligned+0x38>
 8008e24:	1a21      	subs	r1, r4, r0
 8008e26:	4628      	mov	r0, r5
 8008e28:	f001 fe0a 	bl	800aa40 <_sbrk_r>
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	d101      	bne.n	8008e34 <sbrk_aligned+0x38>
 8008e30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008e34:	4620      	mov	r0, r4
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	20004d34 	.word	0x20004d34

08008e3c <_malloc_r>:
 8008e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e40:	1ccd      	adds	r5, r1, #3
 8008e42:	f025 0503 	bic.w	r5, r5, #3
 8008e46:	3508      	adds	r5, #8
 8008e48:	2d0c      	cmp	r5, #12
 8008e4a:	bf38      	it	cc
 8008e4c:	250c      	movcc	r5, #12
 8008e4e:	2d00      	cmp	r5, #0
 8008e50:	4607      	mov	r7, r0
 8008e52:	db01      	blt.n	8008e58 <_malloc_r+0x1c>
 8008e54:	42a9      	cmp	r1, r5
 8008e56:	d905      	bls.n	8008e64 <_malloc_r+0x28>
 8008e58:	230c      	movs	r3, #12
 8008e5a:	603b      	str	r3, [r7, #0]
 8008e5c:	2600      	movs	r6, #0
 8008e5e:	4630      	mov	r0, r6
 8008e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f38 <_malloc_r+0xfc>
 8008e68:	f000 f868 	bl	8008f3c <__malloc_lock>
 8008e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e70:	461c      	mov	r4, r3
 8008e72:	bb5c      	cbnz	r4, 8008ecc <_malloc_r+0x90>
 8008e74:	4629      	mov	r1, r5
 8008e76:	4638      	mov	r0, r7
 8008e78:	f7ff ffc0 	bl	8008dfc <sbrk_aligned>
 8008e7c:	1c43      	adds	r3, r0, #1
 8008e7e:	4604      	mov	r4, r0
 8008e80:	d155      	bne.n	8008f2e <_malloc_r+0xf2>
 8008e82:	f8d8 4000 	ldr.w	r4, [r8]
 8008e86:	4626      	mov	r6, r4
 8008e88:	2e00      	cmp	r6, #0
 8008e8a:	d145      	bne.n	8008f18 <_malloc_r+0xdc>
 8008e8c:	2c00      	cmp	r4, #0
 8008e8e:	d048      	beq.n	8008f22 <_malloc_r+0xe6>
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	4631      	mov	r1, r6
 8008e94:	4638      	mov	r0, r7
 8008e96:	eb04 0903 	add.w	r9, r4, r3
 8008e9a:	f001 fdd1 	bl	800aa40 <_sbrk_r>
 8008e9e:	4581      	cmp	r9, r0
 8008ea0:	d13f      	bne.n	8008f22 <_malloc_r+0xe6>
 8008ea2:	6821      	ldr	r1, [r4, #0]
 8008ea4:	1a6d      	subs	r5, r5, r1
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	4638      	mov	r0, r7
 8008eaa:	f7ff ffa7 	bl	8008dfc <sbrk_aligned>
 8008eae:	3001      	adds	r0, #1
 8008eb0:	d037      	beq.n	8008f22 <_malloc_r+0xe6>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	442b      	add	r3, r5
 8008eb6:	6023      	str	r3, [r4, #0]
 8008eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d038      	beq.n	8008f32 <_malloc_r+0xf6>
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	42a2      	cmp	r2, r4
 8008ec4:	d12b      	bne.n	8008f1e <_malloc_r+0xe2>
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	605a      	str	r2, [r3, #4]
 8008eca:	e00f      	b.n	8008eec <_malloc_r+0xb0>
 8008ecc:	6822      	ldr	r2, [r4, #0]
 8008ece:	1b52      	subs	r2, r2, r5
 8008ed0:	d41f      	bmi.n	8008f12 <_malloc_r+0xd6>
 8008ed2:	2a0b      	cmp	r2, #11
 8008ed4:	d917      	bls.n	8008f06 <_malloc_r+0xca>
 8008ed6:	1961      	adds	r1, r4, r5
 8008ed8:	42a3      	cmp	r3, r4
 8008eda:	6025      	str	r5, [r4, #0]
 8008edc:	bf18      	it	ne
 8008ede:	6059      	strne	r1, [r3, #4]
 8008ee0:	6863      	ldr	r3, [r4, #4]
 8008ee2:	bf08      	it	eq
 8008ee4:	f8c8 1000 	streq.w	r1, [r8]
 8008ee8:	5162      	str	r2, [r4, r5]
 8008eea:	604b      	str	r3, [r1, #4]
 8008eec:	4638      	mov	r0, r7
 8008eee:	f104 060b 	add.w	r6, r4, #11
 8008ef2:	f000 f829 	bl	8008f48 <__malloc_unlock>
 8008ef6:	f026 0607 	bic.w	r6, r6, #7
 8008efa:	1d23      	adds	r3, r4, #4
 8008efc:	1af2      	subs	r2, r6, r3
 8008efe:	d0ae      	beq.n	8008e5e <_malloc_r+0x22>
 8008f00:	1b9b      	subs	r3, r3, r6
 8008f02:	50a3      	str	r3, [r4, r2]
 8008f04:	e7ab      	b.n	8008e5e <_malloc_r+0x22>
 8008f06:	42a3      	cmp	r3, r4
 8008f08:	6862      	ldr	r2, [r4, #4]
 8008f0a:	d1dd      	bne.n	8008ec8 <_malloc_r+0x8c>
 8008f0c:	f8c8 2000 	str.w	r2, [r8]
 8008f10:	e7ec      	b.n	8008eec <_malloc_r+0xb0>
 8008f12:	4623      	mov	r3, r4
 8008f14:	6864      	ldr	r4, [r4, #4]
 8008f16:	e7ac      	b.n	8008e72 <_malloc_r+0x36>
 8008f18:	4634      	mov	r4, r6
 8008f1a:	6876      	ldr	r6, [r6, #4]
 8008f1c:	e7b4      	b.n	8008e88 <_malloc_r+0x4c>
 8008f1e:	4613      	mov	r3, r2
 8008f20:	e7cc      	b.n	8008ebc <_malloc_r+0x80>
 8008f22:	230c      	movs	r3, #12
 8008f24:	603b      	str	r3, [r7, #0]
 8008f26:	4638      	mov	r0, r7
 8008f28:	f000 f80e 	bl	8008f48 <__malloc_unlock>
 8008f2c:	e797      	b.n	8008e5e <_malloc_r+0x22>
 8008f2e:	6025      	str	r5, [r4, #0]
 8008f30:	e7dc      	b.n	8008eec <_malloc_r+0xb0>
 8008f32:	605b      	str	r3, [r3, #4]
 8008f34:	deff      	udf	#255	; 0xff
 8008f36:	bf00      	nop
 8008f38:	20004d30 	.word	0x20004d30

08008f3c <__malloc_lock>:
 8008f3c:	4801      	ldr	r0, [pc, #4]	; (8008f44 <__malloc_lock+0x8>)
 8008f3e:	f7ff b876 	b.w	800802e <__retarget_lock_acquire_recursive>
 8008f42:	bf00      	nop
 8008f44:	20004d2c 	.word	0x20004d2c

08008f48 <__malloc_unlock>:
 8008f48:	4801      	ldr	r0, [pc, #4]	; (8008f50 <__malloc_unlock+0x8>)
 8008f4a:	f7ff b871 	b.w	8008030 <__retarget_lock_release_recursive>
 8008f4e:	bf00      	nop
 8008f50:	20004d2c 	.word	0x20004d2c

08008f54 <_Balloc>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	69c6      	ldr	r6, [r0, #28]
 8008f58:	4604      	mov	r4, r0
 8008f5a:	460d      	mov	r5, r1
 8008f5c:	b976      	cbnz	r6, 8008f7c <_Balloc+0x28>
 8008f5e:	2010      	movs	r0, #16
 8008f60:	f7ff ff44 	bl	8008dec <malloc>
 8008f64:	4602      	mov	r2, r0
 8008f66:	61e0      	str	r0, [r4, #28]
 8008f68:	b920      	cbnz	r0, 8008f74 <_Balloc+0x20>
 8008f6a:	4b18      	ldr	r3, [pc, #96]	; (8008fcc <_Balloc+0x78>)
 8008f6c:	4818      	ldr	r0, [pc, #96]	; (8008fd0 <_Balloc+0x7c>)
 8008f6e:	216b      	movs	r1, #107	; 0x6b
 8008f70:	f001 fd7e 	bl	800aa70 <__assert_func>
 8008f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f78:	6006      	str	r6, [r0, #0]
 8008f7a:	60c6      	str	r6, [r0, #12]
 8008f7c:	69e6      	ldr	r6, [r4, #28]
 8008f7e:	68f3      	ldr	r3, [r6, #12]
 8008f80:	b183      	cbz	r3, 8008fa4 <_Balloc+0x50>
 8008f82:	69e3      	ldr	r3, [r4, #28]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f8a:	b9b8      	cbnz	r0, 8008fbc <_Balloc+0x68>
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	fa01 f605 	lsl.w	r6, r1, r5
 8008f92:	1d72      	adds	r2, r6, #5
 8008f94:	0092      	lsls	r2, r2, #2
 8008f96:	4620      	mov	r0, r4
 8008f98:	f001 fd88 	bl	800aaac <_calloc_r>
 8008f9c:	b160      	cbz	r0, 8008fb8 <_Balloc+0x64>
 8008f9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fa2:	e00e      	b.n	8008fc2 <_Balloc+0x6e>
 8008fa4:	2221      	movs	r2, #33	; 0x21
 8008fa6:	2104      	movs	r1, #4
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f001 fd7f 	bl	800aaac <_calloc_r>
 8008fae:	69e3      	ldr	r3, [r4, #28]
 8008fb0:	60f0      	str	r0, [r6, #12]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e4      	bne.n	8008f82 <_Balloc+0x2e>
 8008fb8:	2000      	movs	r0, #0
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	6802      	ldr	r2, [r0, #0]
 8008fbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fc8:	e7f7      	b.n	8008fba <_Balloc+0x66>
 8008fca:	bf00      	nop
 8008fcc:	0800b912 	.word	0x0800b912
 8008fd0:	0800b992 	.word	0x0800b992

08008fd4 <_Bfree>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	69c6      	ldr	r6, [r0, #28]
 8008fd8:	4605      	mov	r5, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	b976      	cbnz	r6, 8008ffc <_Bfree+0x28>
 8008fde:	2010      	movs	r0, #16
 8008fe0:	f7ff ff04 	bl	8008dec <malloc>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	61e8      	str	r0, [r5, #28]
 8008fe8:	b920      	cbnz	r0, 8008ff4 <_Bfree+0x20>
 8008fea:	4b09      	ldr	r3, [pc, #36]	; (8009010 <_Bfree+0x3c>)
 8008fec:	4809      	ldr	r0, [pc, #36]	; (8009014 <_Bfree+0x40>)
 8008fee:	218f      	movs	r1, #143	; 0x8f
 8008ff0:	f001 fd3e 	bl	800aa70 <__assert_func>
 8008ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ff8:	6006      	str	r6, [r0, #0]
 8008ffa:	60c6      	str	r6, [r0, #12]
 8008ffc:	b13c      	cbz	r4, 800900e <_Bfree+0x3a>
 8008ffe:	69eb      	ldr	r3, [r5, #28]
 8009000:	6862      	ldr	r2, [r4, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009008:	6021      	str	r1, [r4, #0]
 800900a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800900e:	bd70      	pop	{r4, r5, r6, pc}
 8009010:	0800b912 	.word	0x0800b912
 8009014:	0800b992 	.word	0x0800b992

08009018 <__multadd>:
 8009018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800901c:	690d      	ldr	r5, [r1, #16]
 800901e:	4607      	mov	r7, r0
 8009020:	460c      	mov	r4, r1
 8009022:	461e      	mov	r6, r3
 8009024:	f101 0c14 	add.w	ip, r1, #20
 8009028:	2000      	movs	r0, #0
 800902a:	f8dc 3000 	ldr.w	r3, [ip]
 800902e:	b299      	uxth	r1, r3
 8009030:	fb02 6101 	mla	r1, r2, r1, r6
 8009034:	0c1e      	lsrs	r6, r3, #16
 8009036:	0c0b      	lsrs	r3, r1, #16
 8009038:	fb02 3306 	mla	r3, r2, r6, r3
 800903c:	b289      	uxth	r1, r1
 800903e:	3001      	adds	r0, #1
 8009040:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009044:	4285      	cmp	r5, r0
 8009046:	f84c 1b04 	str.w	r1, [ip], #4
 800904a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800904e:	dcec      	bgt.n	800902a <__multadd+0x12>
 8009050:	b30e      	cbz	r6, 8009096 <__multadd+0x7e>
 8009052:	68a3      	ldr	r3, [r4, #8]
 8009054:	42ab      	cmp	r3, r5
 8009056:	dc19      	bgt.n	800908c <__multadd+0x74>
 8009058:	6861      	ldr	r1, [r4, #4]
 800905a:	4638      	mov	r0, r7
 800905c:	3101      	adds	r1, #1
 800905e:	f7ff ff79 	bl	8008f54 <_Balloc>
 8009062:	4680      	mov	r8, r0
 8009064:	b928      	cbnz	r0, 8009072 <__multadd+0x5a>
 8009066:	4602      	mov	r2, r0
 8009068:	4b0c      	ldr	r3, [pc, #48]	; (800909c <__multadd+0x84>)
 800906a:	480d      	ldr	r0, [pc, #52]	; (80090a0 <__multadd+0x88>)
 800906c:	21ba      	movs	r1, #186	; 0xba
 800906e:	f001 fcff 	bl	800aa70 <__assert_func>
 8009072:	6922      	ldr	r2, [r4, #16]
 8009074:	3202      	adds	r2, #2
 8009076:	f104 010c 	add.w	r1, r4, #12
 800907a:	0092      	lsls	r2, r2, #2
 800907c:	300c      	adds	r0, #12
 800907e:	f7fe ffd8 	bl	8008032 <memcpy>
 8009082:	4621      	mov	r1, r4
 8009084:	4638      	mov	r0, r7
 8009086:	f7ff ffa5 	bl	8008fd4 <_Bfree>
 800908a:	4644      	mov	r4, r8
 800908c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009090:	3501      	adds	r5, #1
 8009092:	615e      	str	r6, [r3, #20]
 8009094:	6125      	str	r5, [r4, #16]
 8009096:	4620      	mov	r0, r4
 8009098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800909c:	0800b981 	.word	0x0800b981
 80090a0:	0800b992 	.word	0x0800b992

080090a4 <__s2b>:
 80090a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a8:	460c      	mov	r4, r1
 80090aa:	4615      	mov	r5, r2
 80090ac:	461f      	mov	r7, r3
 80090ae:	2209      	movs	r2, #9
 80090b0:	3308      	adds	r3, #8
 80090b2:	4606      	mov	r6, r0
 80090b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80090b8:	2100      	movs	r1, #0
 80090ba:	2201      	movs	r2, #1
 80090bc:	429a      	cmp	r2, r3
 80090be:	db09      	blt.n	80090d4 <__s2b+0x30>
 80090c0:	4630      	mov	r0, r6
 80090c2:	f7ff ff47 	bl	8008f54 <_Balloc>
 80090c6:	b940      	cbnz	r0, 80090da <__s2b+0x36>
 80090c8:	4602      	mov	r2, r0
 80090ca:	4b19      	ldr	r3, [pc, #100]	; (8009130 <__s2b+0x8c>)
 80090cc:	4819      	ldr	r0, [pc, #100]	; (8009134 <__s2b+0x90>)
 80090ce:	21d3      	movs	r1, #211	; 0xd3
 80090d0:	f001 fcce 	bl	800aa70 <__assert_func>
 80090d4:	0052      	lsls	r2, r2, #1
 80090d6:	3101      	adds	r1, #1
 80090d8:	e7f0      	b.n	80090bc <__s2b+0x18>
 80090da:	9b08      	ldr	r3, [sp, #32]
 80090dc:	6143      	str	r3, [r0, #20]
 80090de:	2d09      	cmp	r5, #9
 80090e0:	f04f 0301 	mov.w	r3, #1
 80090e4:	6103      	str	r3, [r0, #16]
 80090e6:	dd16      	ble.n	8009116 <__s2b+0x72>
 80090e8:	f104 0909 	add.w	r9, r4, #9
 80090ec:	46c8      	mov	r8, r9
 80090ee:	442c      	add	r4, r5
 80090f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80090f4:	4601      	mov	r1, r0
 80090f6:	3b30      	subs	r3, #48	; 0x30
 80090f8:	220a      	movs	r2, #10
 80090fa:	4630      	mov	r0, r6
 80090fc:	f7ff ff8c 	bl	8009018 <__multadd>
 8009100:	45a0      	cmp	r8, r4
 8009102:	d1f5      	bne.n	80090f0 <__s2b+0x4c>
 8009104:	f1a5 0408 	sub.w	r4, r5, #8
 8009108:	444c      	add	r4, r9
 800910a:	1b2d      	subs	r5, r5, r4
 800910c:	1963      	adds	r3, r4, r5
 800910e:	42bb      	cmp	r3, r7
 8009110:	db04      	blt.n	800911c <__s2b+0x78>
 8009112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009116:	340a      	adds	r4, #10
 8009118:	2509      	movs	r5, #9
 800911a:	e7f6      	b.n	800910a <__s2b+0x66>
 800911c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009120:	4601      	mov	r1, r0
 8009122:	3b30      	subs	r3, #48	; 0x30
 8009124:	220a      	movs	r2, #10
 8009126:	4630      	mov	r0, r6
 8009128:	f7ff ff76 	bl	8009018 <__multadd>
 800912c:	e7ee      	b.n	800910c <__s2b+0x68>
 800912e:	bf00      	nop
 8009130:	0800b981 	.word	0x0800b981
 8009134:	0800b992 	.word	0x0800b992

08009138 <__hi0bits>:
 8009138:	0c03      	lsrs	r3, r0, #16
 800913a:	041b      	lsls	r3, r3, #16
 800913c:	b9d3      	cbnz	r3, 8009174 <__hi0bits+0x3c>
 800913e:	0400      	lsls	r0, r0, #16
 8009140:	2310      	movs	r3, #16
 8009142:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009146:	bf04      	itt	eq
 8009148:	0200      	lsleq	r0, r0, #8
 800914a:	3308      	addeq	r3, #8
 800914c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009150:	bf04      	itt	eq
 8009152:	0100      	lsleq	r0, r0, #4
 8009154:	3304      	addeq	r3, #4
 8009156:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800915a:	bf04      	itt	eq
 800915c:	0080      	lsleq	r0, r0, #2
 800915e:	3302      	addeq	r3, #2
 8009160:	2800      	cmp	r0, #0
 8009162:	db05      	blt.n	8009170 <__hi0bits+0x38>
 8009164:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009168:	f103 0301 	add.w	r3, r3, #1
 800916c:	bf08      	it	eq
 800916e:	2320      	moveq	r3, #32
 8009170:	4618      	mov	r0, r3
 8009172:	4770      	bx	lr
 8009174:	2300      	movs	r3, #0
 8009176:	e7e4      	b.n	8009142 <__hi0bits+0xa>

08009178 <__lo0bits>:
 8009178:	6803      	ldr	r3, [r0, #0]
 800917a:	f013 0207 	ands.w	r2, r3, #7
 800917e:	d00c      	beq.n	800919a <__lo0bits+0x22>
 8009180:	07d9      	lsls	r1, r3, #31
 8009182:	d422      	bmi.n	80091ca <__lo0bits+0x52>
 8009184:	079a      	lsls	r2, r3, #30
 8009186:	bf49      	itett	mi
 8009188:	085b      	lsrmi	r3, r3, #1
 800918a:	089b      	lsrpl	r3, r3, #2
 800918c:	6003      	strmi	r3, [r0, #0]
 800918e:	2201      	movmi	r2, #1
 8009190:	bf5c      	itt	pl
 8009192:	6003      	strpl	r3, [r0, #0]
 8009194:	2202      	movpl	r2, #2
 8009196:	4610      	mov	r0, r2
 8009198:	4770      	bx	lr
 800919a:	b299      	uxth	r1, r3
 800919c:	b909      	cbnz	r1, 80091a2 <__lo0bits+0x2a>
 800919e:	0c1b      	lsrs	r3, r3, #16
 80091a0:	2210      	movs	r2, #16
 80091a2:	b2d9      	uxtb	r1, r3
 80091a4:	b909      	cbnz	r1, 80091aa <__lo0bits+0x32>
 80091a6:	3208      	adds	r2, #8
 80091a8:	0a1b      	lsrs	r3, r3, #8
 80091aa:	0719      	lsls	r1, r3, #28
 80091ac:	bf04      	itt	eq
 80091ae:	091b      	lsreq	r3, r3, #4
 80091b0:	3204      	addeq	r2, #4
 80091b2:	0799      	lsls	r1, r3, #30
 80091b4:	bf04      	itt	eq
 80091b6:	089b      	lsreq	r3, r3, #2
 80091b8:	3202      	addeq	r2, #2
 80091ba:	07d9      	lsls	r1, r3, #31
 80091bc:	d403      	bmi.n	80091c6 <__lo0bits+0x4e>
 80091be:	085b      	lsrs	r3, r3, #1
 80091c0:	f102 0201 	add.w	r2, r2, #1
 80091c4:	d003      	beq.n	80091ce <__lo0bits+0x56>
 80091c6:	6003      	str	r3, [r0, #0]
 80091c8:	e7e5      	b.n	8009196 <__lo0bits+0x1e>
 80091ca:	2200      	movs	r2, #0
 80091cc:	e7e3      	b.n	8009196 <__lo0bits+0x1e>
 80091ce:	2220      	movs	r2, #32
 80091d0:	e7e1      	b.n	8009196 <__lo0bits+0x1e>
	...

080091d4 <__i2b>:
 80091d4:	b510      	push	{r4, lr}
 80091d6:	460c      	mov	r4, r1
 80091d8:	2101      	movs	r1, #1
 80091da:	f7ff febb 	bl	8008f54 <_Balloc>
 80091de:	4602      	mov	r2, r0
 80091e0:	b928      	cbnz	r0, 80091ee <__i2b+0x1a>
 80091e2:	4b05      	ldr	r3, [pc, #20]	; (80091f8 <__i2b+0x24>)
 80091e4:	4805      	ldr	r0, [pc, #20]	; (80091fc <__i2b+0x28>)
 80091e6:	f240 1145 	movw	r1, #325	; 0x145
 80091ea:	f001 fc41 	bl	800aa70 <__assert_func>
 80091ee:	2301      	movs	r3, #1
 80091f0:	6144      	str	r4, [r0, #20]
 80091f2:	6103      	str	r3, [r0, #16]
 80091f4:	bd10      	pop	{r4, pc}
 80091f6:	bf00      	nop
 80091f8:	0800b981 	.word	0x0800b981
 80091fc:	0800b992 	.word	0x0800b992

08009200 <__multiply>:
 8009200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	4691      	mov	r9, r2
 8009206:	690a      	ldr	r2, [r1, #16]
 8009208:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800920c:	429a      	cmp	r2, r3
 800920e:	bfb8      	it	lt
 8009210:	460b      	movlt	r3, r1
 8009212:	460c      	mov	r4, r1
 8009214:	bfbc      	itt	lt
 8009216:	464c      	movlt	r4, r9
 8009218:	4699      	movlt	r9, r3
 800921a:	6927      	ldr	r7, [r4, #16]
 800921c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009220:	68a3      	ldr	r3, [r4, #8]
 8009222:	6861      	ldr	r1, [r4, #4]
 8009224:	eb07 060a 	add.w	r6, r7, sl
 8009228:	42b3      	cmp	r3, r6
 800922a:	b085      	sub	sp, #20
 800922c:	bfb8      	it	lt
 800922e:	3101      	addlt	r1, #1
 8009230:	f7ff fe90 	bl	8008f54 <_Balloc>
 8009234:	b930      	cbnz	r0, 8009244 <__multiply+0x44>
 8009236:	4602      	mov	r2, r0
 8009238:	4b44      	ldr	r3, [pc, #272]	; (800934c <__multiply+0x14c>)
 800923a:	4845      	ldr	r0, [pc, #276]	; (8009350 <__multiply+0x150>)
 800923c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009240:	f001 fc16 	bl	800aa70 <__assert_func>
 8009244:	f100 0514 	add.w	r5, r0, #20
 8009248:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800924c:	462b      	mov	r3, r5
 800924e:	2200      	movs	r2, #0
 8009250:	4543      	cmp	r3, r8
 8009252:	d321      	bcc.n	8009298 <__multiply+0x98>
 8009254:	f104 0314 	add.w	r3, r4, #20
 8009258:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800925c:	f109 0314 	add.w	r3, r9, #20
 8009260:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009264:	9202      	str	r2, [sp, #8]
 8009266:	1b3a      	subs	r2, r7, r4
 8009268:	3a15      	subs	r2, #21
 800926a:	f022 0203 	bic.w	r2, r2, #3
 800926e:	3204      	adds	r2, #4
 8009270:	f104 0115 	add.w	r1, r4, #21
 8009274:	428f      	cmp	r7, r1
 8009276:	bf38      	it	cc
 8009278:	2204      	movcc	r2, #4
 800927a:	9201      	str	r2, [sp, #4]
 800927c:	9a02      	ldr	r2, [sp, #8]
 800927e:	9303      	str	r3, [sp, #12]
 8009280:	429a      	cmp	r2, r3
 8009282:	d80c      	bhi.n	800929e <__multiply+0x9e>
 8009284:	2e00      	cmp	r6, #0
 8009286:	dd03      	ble.n	8009290 <__multiply+0x90>
 8009288:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800928c:	2b00      	cmp	r3, #0
 800928e:	d05b      	beq.n	8009348 <__multiply+0x148>
 8009290:	6106      	str	r6, [r0, #16]
 8009292:	b005      	add	sp, #20
 8009294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009298:	f843 2b04 	str.w	r2, [r3], #4
 800929c:	e7d8      	b.n	8009250 <__multiply+0x50>
 800929e:	f8b3 a000 	ldrh.w	sl, [r3]
 80092a2:	f1ba 0f00 	cmp.w	sl, #0
 80092a6:	d024      	beq.n	80092f2 <__multiply+0xf2>
 80092a8:	f104 0e14 	add.w	lr, r4, #20
 80092ac:	46a9      	mov	r9, r5
 80092ae:	f04f 0c00 	mov.w	ip, #0
 80092b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80092b6:	f8d9 1000 	ldr.w	r1, [r9]
 80092ba:	fa1f fb82 	uxth.w	fp, r2
 80092be:	b289      	uxth	r1, r1
 80092c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80092c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80092c8:	f8d9 2000 	ldr.w	r2, [r9]
 80092cc:	4461      	add	r1, ip
 80092ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80092d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80092da:	b289      	uxth	r1, r1
 80092dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092e0:	4577      	cmp	r7, lr
 80092e2:	f849 1b04 	str.w	r1, [r9], #4
 80092e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092ea:	d8e2      	bhi.n	80092b2 <__multiply+0xb2>
 80092ec:	9a01      	ldr	r2, [sp, #4]
 80092ee:	f845 c002 	str.w	ip, [r5, r2]
 80092f2:	9a03      	ldr	r2, [sp, #12]
 80092f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092f8:	3304      	adds	r3, #4
 80092fa:	f1b9 0f00 	cmp.w	r9, #0
 80092fe:	d021      	beq.n	8009344 <__multiply+0x144>
 8009300:	6829      	ldr	r1, [r5, #0]
 8009302:	f104 0c14 	add.w	ip, r4, #20
 8009306:	46ae      	mov	lr, r5
 8009308:	f04f 0a00 	mov.w	sl, #0
 800930c:	f8bc b000 	ldrh.w	fp, [ip]
 8009310:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009314:	fb09 220b 	mla	r2, r9, fp, r2
 8009318:	4452      	add	r2, sl
 800931a:	b289      	uxth	r1, r1
 800931c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009320:	f84e 1b04 	str.w	r1, [lr], #4
 8009324:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009328:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800932c:	f8be 1000 	ldrh.w	r1, [lr]
 8009330:	fb09 110a 	mla	r1, r9, sl, r1
 8009334:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009338:	4567      	cmp	r7, ip
 800933a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800933e:	d8e5      	bhi.n	800930c <__multiply+0x10c>
 8009340:	9a01      	ldr	r2, [sp, #4]
 8009342:	50a9      	str	r1, [r5, r2]
 8009344:	3504      	adds	r5, #4
 8009346:	e799      	b.n	800927c <__multiply+0x7c>
 8009348:	3e01      	subs	r6, #1
 800934a:	e79b      	b.n	8009284 <__multiply+0x84>
 800934c:	0800b981 	.word	0x0800b981
 8009350:	0800b992 	.word	0x0800b992

08009354 <__pow5mult>:
 8009354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009358:	4615      	mov	r5, r2
 800935a:	f012 0203 	ands.w	r2, r2, #3
 800935e:	4606      	mov	r6, r0
 8009360:	460f      	mov	r7, r1
 8009362:	d007      	beq.n	8009374 <__pow5mult+0x20>
 8009364:	4c25      	ldr	r4, [pc, #148]	; (80093fc <__pow5mult+0xa8>)
 8009366:	3a01      	subs	r2, #1
 8009368:	2300      	movs	r3, #0
 800936a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800936e:	f7ff fe53 	bl	8009018 <__multadd>
 8009372:	4607      	mov	r7, r0
 8009374:	10ad      	asrs	r5, r5, #2
 8009376:	d03d      	beq.n	80093f4 <__pow5mult+0xa0>
 8009378:	69f4      	ldr	r4, [r6, #28]
 800937a:	b97c      	cbnz	r4, 800939c <__pow5mult+0x48>
 800937c:	2010      	movs	r0, #16
 800937e:	f7ff fd35 	bl	8008dec <malloc>
 8009382:	4602      	mov	r2, r0
 8009384:	61f0      	str	r0, [r6, #28]
 8009386:	b928      	cbnz	r0, 8009394 <__pow5mult+0x40>
 8009388:	4b1d      	ldr	r3, [pc, #116]	; (8009400 <__pow5mult+0xac>)
 800938a:	481e      	ldr	r0, [pc, #120]	; (8009404 <__pow5mult+0xb0>)
 800938c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009390:	f001 fb6e 	bl	800aa70 <__assert_func>
 8009394:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009398:	6004      	str	r4, [r0, #0]
 800939a:	60c4      	str	r4, [r0, #12]
 800939c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80093a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093a4:	b94c      	cbnz	r4, 80093ba <__pow5mult+0x66>
 80093a6:	f240 2171 	movw	r1, #625	; 0x271
 80093aa:	4630      	mov	r0, r6
 80093ac:	f7ff ff12 	bl	80091d4 <__i2b>
 80093b0:	2300      	movs	r3, #0
 80093b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80093b6:	4604      	mov	r4, r0
 80093b8:	6003      	str	r3, [r0, #0]
 80093ba:	f04f 0900 	mov.w	r9, #0
 80093be:	07eb      	lsls	r3, r5, #31
 80093c0:	d50a      	bpl.n	80093d8 <__pow5mult+0x84>
 80093c2:	4639      	mov	r1, r7
 80093c4:	4622      	mov	r2, r4
 80093c6:	4630      	mov	r0, r6
 80093c8:	f7ff ff1a 	bl	8009200 <__multiply>
 80093cc:	4639      	mov	r1, r7
 80093ce:	4680      	mov	r8, r0
 80093d0:	4630      	mov	r0, r6
 80093d2:	f7ff fdff 	bl	8008fd4 <_Bfree>
 80093d6:	4647      	mov	r7, r8
 80093d8:	106d      	asrs	r5, r5, #1
 80093da:	d00b      	beq.n	80093f4 <__pow5mult+0xa0>
 80093dc:	6820      	ldr	r0, [r4, #0]
 80093de:	b938      	cbnz	r0, 80093f0 <__pow5mult+0x9c>
 80093e0:	4622      	mov	r2, r4
 80093e2:	4621      	mov	r1, r4
 80093e4:	4630      	mov	r0, r6
 80093e6:	f7ff ff0b 	bl	8009200 <__multiply>
 80093ea:	6020      	str	r0, [r4, #0]
 80093ec:	f8c0 9000 	str.w	r9, [r0]
 80093f0:	4604      	mov	r4, r0
 80093f2:	e7e4      	b.n	80093be <__pow5mult+0x6a>
 80093f4:	4638      	mov	r0, r7
 80093f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093fa:	bf00      	nop
 80093fc:	0800bae0 	.word	0x0800bae0
 8009400:	0800b912 	.word	0x0800b912
 8009404:	0800b992 	.word	0x0800b992

08009408 <__lshift>:
 8009408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800940c:	460c      	mov	r4, r1
 800940e:	6849      	ldr	r1, [r1, #4]
 8009410:	6923      	ldr	r3, [r4, #16]
 8009412:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009416:	68a3      	ldr	r3, [r4, #8]
 8009418:	4607      	mov	r7, r0
 800941a:	4691      	mov	r9, r2
 800941c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009420:	f108 0601 	add.w	r6, r8, #1
 8009424:	42b3      	cmp	r3, r6
 8009426:	db0b      	blt.n	8009440 <__lshift+0x38>
 8009428:	4638      	mov	r0, r7
 800942a:	f7ff fd93 	bl	8008f54 <_Balloc>
 800942e:	4605      	mov	r5, r0
 8009430:	b948      	cbnz	r0, 8009446 <__lshift+0x3e>
 8009432:	4602      	mov	r2, r0
 8009434:	4b28      	ldr	r3, [pc, #160]	; (80094d8 <__lshift+0xd0>)
 8009436:	4829      	ldr	r0, [pc, #164]	; (80094dc <__lshift+0xd4>)
 8009438:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800943c:	f001 fb18 	bl	800aa70 <__assert_func>
 8009440:	3101      	adds	r1, #1
 8009442:	005b      	lsls	r3, r3, #1
 8009444:	e7ee      	b.n	8009424 <__lshift+0x1c>
 8009446:	2300      	movs	r3, #0
 8009448:	f100 0114 	add.w	r1, r0, #20
 800944c:	f100 0210 	add.w	r2, r0, #16
 8009450:	4618      	mov	r0, r3
 8009452:	4553      	cmp	r3, sl
 8009454:	db33      	blt.n	80094be <__lshift+0xb6>
 8009456:	6920      	ldr	r0, [r4, #16]
 8009458:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800945c:	f104 0314 	add.w	r3, r4, #20
 8009460:	f019 091f 	ands.w	r9, r9, #31
 8009464:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009468:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800946c:	d02b      	beq.n	80094c6 <__lshift+0xbe>
 800946e:	f1c9 0e20 	rsb	lr, r9, #32
 8009472:	468a      	mov	sl, r1
 8009474:	2200      	movs	r2, #0
 8009476:	6818      	ldr	r0, [r3, #0]
 8009478:	fa00 f009 	lsl.w	r0, r0, r9
 800947c:	4310      	orrs	r0, r2
 800947e:	f84a 0b04 	str.w	r0, [sl], #4
 8009482:	f853 2b04 	ldr.w	r2, [r3], #4
 8009486:	459c      	cmp	ip, r3
 8009488:	fa22 f20e 	lsr.w	r2, r2, lr
 800948c:	d8f3      	bhi.n	8009476 <__lshift+0x6e>
 800948e:	ebac 0304 	sub.w	r3, ip, r4
 8009492:	3b15      	subs	r3, #21
 8009494:	f023 0303 	bic.w	r3, r3, #3
 8009498:	3304      	adds	r3, #4
 800949a:	f104 0015 	add.w	r0, r4, #21
 800949e:	4584      	cmp	ip, r0
 80094a0:	bf38      	it	cc
 80094a2:	2304      	movcc	r3, #4
 80094a4:	50ca      	str	r2, [r1, r3]
 80094a6:	b10a      	cbz	r2, 80094ac <__lshift+0xa4>
 80094a8:	f108 0602 	add.w	r6, r8, #2
 80094ac:	3e01      	subs	r6, #1
 80094ae:	4638      	mov	r0, r7
 80094b0:	612e      	str	r6, [r5, #16]
 80094b2:	4621      	mov	r1, r4
 80094b4:	f7ff fd8e 	bl	8008fd4 <_Bfree>
 80094b8:	4628      	mov	r0, r5
 80094ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094be:	f842 0f04 	str.w	r0, [r2, #4]!
 80094c2:	3301      	adds	r3, #1
 80094c4:	e7c5      	b.n	8009452 <__lshift+0x4a>
 80094c6:	3904      	subs	r1, #4
 80094c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80094cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80094d0:	459c      	cmp	ip, r3
 80094d2:	d8f9      	bhi.n	80094c8 <__lshift+0xc0>
 80094d4:	e7ea      	b.n	80094ac <__lshift+0xa4>
 80094d6:	bf00      	nop
 80094d8:	0800b981 	.word	0x0800b981
 80094dc:	0800b992 	.word	0x0800b992

080094e0 <__mcmp>:
 80094e0:	b530      	push	{r4, r5, lr}
 80094e2:	6902      	ldr	r2, [r0, #16]
 80094e4:	690c      	ldr	r4, [r1, #16]
 80094e6:	1b12      	subs	r2, r2, r4
 80094e8:	d10e      	bne.n	8009508 <__mcmp+0x28>
 80094ea:	f100 0314 	add.w	r3, r0, #20
 80094ee:	3114      	adds	r1, #20
 80094f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009500:	42a5      	cmp	r5, r4
 8009502:	d003      	beq.n	800950c <__mcmp+0x2c>
 8009504:	d305      	bcc.n	8009512 <__mcmp+0x32>
 8009506:	2201      	movs	r2, #1
 8009508:	4610      	mov	r0, r2
 800950a:	bd30      	pop	{r4, r5, pc}
 800950c:	4283      	cmp	r3, r0
 800950e:	d3f3      	bcc.n	80094f8 <__mcmp+0x18>
 8009510:	e7fa      	b.n	8009508 <__mcmp+0x28>
 8009512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009516:	e7f7      	b.n	8009508 <__mcmp+0x28>

08009518 <__mdiff>:
 8009518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	460c      	mov	r4, r1
 800951e:	4606      	mov	r6, r0
 8009520:	4611      	mov	r1, r2
 8009522:	4620      	mov	r0, r4
 8009524:	4690      	mov	r8, r2
 8009526:	f7ff ffdb 	bl	80094e0 <__mcmp>
 800952a:	1e05      	subs	r5, r0, #0
 800952c:	d110      	bne.n	8009550 <__mdiff+0x38>
 800952e:	4629      	mov	r1, r5
 8009530:	4630      	mov	r0, r6
 8009532:	f7ff fd0f 	bl	8008f54 <_Balloc>
 8009536:	b930      	cbnz	r0, 8009546 <__mdiff+0x2e>
 8009538:	4b3a      	ldr	r3, [pc, #232]	; (8009624 <__mdiff+0x10c>)
 800953a:	4602      	mov	r2, r0
 800953c:	f240 2137 	movw	r1, #567	; 0x237
 8009540:	4839      	ldr	r0, [pc, #228]	; (8009628 <__mdiff+0x110>)
 8009542:	f001 fa95 	bl	800aa70 <__assert_func>
 8009546:	2301      	movs	r3, #1
 8009548:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800954c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009550:	bfa4      	itt	ge
 8009552:	4643      	movge	r3, r8
 8009554:	46a0      	movge	r8, r4
 8009556:	4630      	mov	r0, r6
 8009558:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800955c:	bfa6      	itte	ge
 800955e:	461c      	movge	r4, r3
 8009560:	2500      	movge	r5, #0
 8009562:	2501      	movlt	r5, #1
 8009564:	f7ff fcf6 	bl	8008f54 <_Balloc>
 8009568:	b920      	cbnz	r0, 8009574 <__mdiff+0x5c>
 800956a:	4b2e      	ldr	r3, [pc, #184]	; (8009624 <__mdiff+0x10c>)
 800956c:	4602      	mov	r2, r0
 800956e:	f240 2145 	movw	r1, #581	; 0x245
 8009572:	e7e5      	b.n	8009540 <__mdiff+0x28>
 8009574:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009578:	6926      	ldr	r6, [r4, #16]
 800957a:	60c5      	str	r5, [r0, #12]
 800957c:	f104 0914 	add.w	r9, r4, #20
 8009580:	f108 0514 	add.w	r5, r8, #20
 8009584:	f100 0e14 	add.w	lr, r0, #20
 8009588:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800958c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009590:	f108 0210 	add.w	r2, r8, #16
 8009594:	46f2      	mov	sl, lr
 8009596:	2100      	movs	r1, #0
 8009598:	f859 3b04 	ldr.w	r3, [r9], #4
 800959c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80095a0:	fa11 f88b 	uxtah	r8, r1, fp
 80095a4:	b299      	uxth	r1, r3
 80095a6:	0c1b      	lsrs	r3, r3, #16
 80095a8:	eba8 0801 	sub.w	r8, r8, r1
 80095ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80095b0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80095b4:	fa1f f888 	uxth.w	r8, r8
 80095b8:	1419      	asrs	r1, r3, #16
 80095ba:	454e      	cmp	r6, r9
 80095bc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80095c0:	f84a 3b04 	str.w	r3, [sl], #4
 80095c4:	d8e8      	bhi.n	8009598 <__mdiff+0x80>
 80095c6:	1b33      	subs	r3, r6, r4
 80095c8:	3b15      	subs	r3, #21
 80095ca:	f023 0303 	bic.w	r3, r3, #3
 80095ce:	3304      	adds	r3, #4
 80095d0:	3415      	adds	r4, #21
 80095d2:	42a6      	cmp	r6, r4
 80095d4:	bf38      	it	cc
 80095d6:	2304      	movcc	r3, #4
 80095d8:	441d      	add	r5, r3
 80095da:	4473      	add	r3, lr
 80095dc:	469e      	mov	lr, r3
 80095de:	462e      	mov	r6, r5
 80095e0:	4566      	cmp	r6, ip
 80095e2:	d30e      	bcc.n	8009602 <__mdiff+0xea>
 80095e4:	f10c 0203 	add.w	r2, ip, #3
 80095e8:	1b52      	subs	r2, r2, r5
 80095ea:	f022 0203 	bic.w	r2, r2, #3
 80095ee:	3d03      	subs	r5, #3
 80095f0:	45ac      	cmp	ip, r5
 80095f2:	bf38      	it	cc
 80095f4:	2200      	movcc	r2, #0
 80095f6:	4413      	add	r3, r2
 80095f8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80095fc:	b17a      	cbz	r2, 800961e <__mdiff+0x106>
 80095fe:	6107      	str	r7, [r0, #16]
 8009600:	e7a4      	b.n	800954c <__mdiff+0x34>
 8009602:	f856 8b04 	ldr.w	r8, [r6], #4
 8009606:	fa11 f288 	uxtah	r2, r1, r8
 800960a:	1414      	asrs	r4, r2, #16
 800960c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009610:	b292      	uxth	r2, r2
 8009612:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009616:	f84e 2b04 	str.w	r2, [lr], #4
 800961a:	1421      	asrs	r1, r4, #16
 800961c:	e7e0      	b.n	80095e0 <__mdiff+0xc8>
 800961e:	3f01      	subs	r7, #1
 8009620:	e7ea      	b.n	80095f8 <__mdiff+0xe0>
 8009622:	bf00      	nop
 8009624:	0800b981 	.word	0x0800b981
 8009628:	0800b992 	.word	0x0800b992

0800962c <__ulp>:
 800962c:	b082      	sub	sp, #8
 800962e:	ed8d 0b00 	vstr	d0, [sp]
 8009632:	9a01      	ldr	r2, [sp, #4]
 8009634:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <__ulp+0x48>)
 8009636:	4013      	ands	r3, r2
 8009638:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800963c:	2b00      	cmp	r3, #0
 800963e:	dc08      	bgt.n	8009652 <__ulp+0x26>
 8009640:	425b      	negs	r3, r3
 8009642:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009646:	ea4f 5223 	mov.w	r2, r3, asr #20
 800964a:	da04      	bge.n	8009656 <__ulp+0x2a>
 800964c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009650:	4113      	asrs	r3, r2
 8009652:	2200      	movs	r2, #0
 8009654:	e008      	b.n	8009668 <__ulp+0x3c>
 8009656:	f1a2 0314 	sub.w	r3, r2, #20
 800965a:	2b1e      	cmp	r3, #30
 800965c:	bfda      	itte	le
 800965e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009662:	40da      	lsrle	r2, r3
 8009664:	2201      	movgt	r2, #1
 8009666:	2300      	movs	r3, #0
 8009668:	4619      	mov	r1, r3
 800966a:	4610      	mov	r0, r2
 800966c:	ec41 0b10 	vmov	d0, r0, r1
 8009670:	b002      	add	sp, #8
 8009672:	4770      	bx	lr
 8009674:	7ff00000 	.word	0x7ff00000

08009678 <__b2d>:
 8009678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967c:	6906      	ldr	r6, [r0, #16]
 800967e:	f100 0814 	add.w	r8, r0, #20
 8009682:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009686:	1f37      	subs	r7, r6, #4
 8009688:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800968c:	4610      	mov	r0, r2
 800968e:	f7ff fd53 	bl	8009138 <__hi0bits>
 8009692:	f1c0 0320 	rsb	r3, r0, #32
 8009696:	280a      	cmp	r0, #10
 8009698:	600b      	str	r3, [r1, #0]
 800969a:	491b      	ldr	r1, [pc, #108]	; (8009708 <__b2d+0x90>)
 800969c:	dc15      	bgt.n	80096ca <__b2d+0x52>
 800969e:	f1c0 0c0b 	rsb	ip, r0, #11
 80096a2:	fa22 f30c 	lsr.w	r3, r2, ip
 80096a6:	45b8      	cmp	r8, r7
 80096a8:	ea43 0501 	orr.w	r5, r3, r1
 80096ac:	bf34      	ite	cc
 80096ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80096b2:	2300      	movcs	r3, #0
 80096b4:	3015      	adds	r0, #21
 80096b6:	fa02 f000 	lsl.w	r0, r2, r0
 80096ba:	fa23 f30c 	lsr.w	r3, r3, ip
 80096be:	4303      	orrs	r3, r0
 80096c0:	461c      	mov	r4, r3
 80096c2:	ec45 4b10 	vmov	d0, r4, r5
 80096c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ca:	45b8      	cmp	r8, r7
 80096cc:	bf3a      	itte	cc
 80096ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80096d2:	f1a6 0708 	subcc.w	r7, r6, #8
 80096d6:	2300      	movcs	r3, #0
 80096d8:	380b      	subs	r0, #11
 80096da:	d012      	beq.n	8009702 <__b2d+0x8a>
 80096dc:	f1c0 0120 	rsb	r1, r0, #32
 80096e0:	fa23 f401 	lsr.w	r4, r3, r1
 80096e4:	4082      	lsls	r2, r0
 80096e6:	4322      	orrs	r2, r4
 80096e8:	4547      	cmp	r7, r8
 80096ea:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80096ee:	bf8c      	ite	hi
 80096f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80096f4:	2200      	movls	r2, #0
 80096f6:	4083      	lsls	r3, r0
 80096f8:	40ca      	lsrs	r2, r1
 80096fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80096fe:	4313      	orrs	r3, r2
 8009700:	e7de      	b.n	80096c0 <__b2d+0x48>
 8009702:	ea42 0501 	orr.w	r5, r2, r1
 8009706:	e7db      	b.n	80096c0 <__b2d+0x48>
 8009708:	3ff00000 	.word	0x3ff00000

0800970c <__d2b>:
 800970c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009710:	460f      	mov	r7, r1
 8009712:	2101      	movs	r1, #1
 8009714:	ec59 8b10 	vmov	r8, r9, d0
 8009718:	4616      	mov	r6, r2
 800971a:	f7ff fc1b 	bl	8008f54 <_Balloc>
 800971e:	4604      	mov	r4, r0
 8009720:	b930      	cbnz	r0, 8009730 <__d2b+0x24>
 8009722:	4602      	mov	r2, r0
 8009724:	4b24      	ldr	r3, [pc, #144]	; (80097b8 <__d2b+0xac>)
 8009726:	4825      	ldr	r0, [pc, #148]	; (80097bc <__d2b+0xb0>)
 8009728:	f240 310f 	movw	r1, #783	; 0x30f
 800972c:	f001 f9a0 	bl	800aa70 <__assert_func>
 8009730:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009734:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009738:	bb2d      	cbnz	r5, 8009786 <__d2b+0x7a>
 800973a:	9301      	str	r3, [sp, #4]
 800973c:	f1b8 0300 	subs.w	r3, r8, #0
 8009740:	d026      	beq.n	8009790 <__d2b+0x84>
 8009742:	4668      	mov	r0, sp
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	f7ff fd17 	bl	8009178 <__lo0bits>
 800974a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800974e:	b1e8      	cbz	r0, 800978c <__d2b+0x80>
 8009750:	f1c0 0320 	rsb	r3, r0, #32
 8009754:	fa02 f303 	lsl.w	r3, r2, r3
 8009758:	430b      	orrs	r3, r1
 800975a:	40c2      	lsrs	r2, r0
 800975c:	6163      	str	r3, [r4, #20]
 800975e:	9201      	str	r2, [sp, #4]
 8009760:	9b01      	ldr	r3, [sp, #4]
 8009762:	61a3      	str	r3, [r4, #24]
 8009764:	2b00      	cmp	r3, #0
 8009766:	bf14      	ite	ne
 8009768:	2202      	movne	r2, #2
 800976a:	2201      	moveq	r2, #1
 800976c:	6122      	str	r2, [r4, #16]
 800976e:	b1bd      	cbz	r5, 80097a0 <__d2b+0x94>
 8009770:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009774:	4405      	add	r5, r0
 8009776:	603d      	str	r5, [r7, #0]
 8009778:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800977c:	6030      	str	r0, [r6, #0]
 800977e:	4620      	mov	r0, r4
 8009780:	b003      	add	sp, #12
 8009782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800978a:	e7d6      	b.n	800973a <__d2b+0x2e>
 800978c:	6161      	str	r1, [r4, #20]
 800978e:	e7e7      	b.n	8009760 <__d2b+0x54>
 8009790:	a801      	add	r0, sp, #4
 8009792:	f7ff fcf1 	bl	8009178 <__lo0bits>
 8009796:	9b01      	ldr	r3, [sp, #4]
 8009798:	6163      	str	r3, [r4, #20]
 800979a:	3020      	adds	r0, #32
 800979c:	2201      	movs	r2, #1
 800979e:	e7e5      	b.n	800976c <__d2b+0x60>
 80097a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097a8:	6038      	str	r0, [r7, #0]
 80097aa:	6918      	ldr	r0, [r3, #16]
 80097ac:	f7ff fcc4 	bl	8009138 <__hi0bits>
 80097b0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097b4:	e7e2      	b.n	800977c <__d2b+0x70>
 80097b6:	bf00      	nop
 80097b8:	0800b981 	.word	0x0800b981
 80097bc:	0800b992 	.word	0x0800b992

080097c0 <__ratio>:
 80097c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	4688      	mov	r8, r1
 80097c6:	4669      	mov	r1, sp
 80097c8:	4681      	mov	r9, r0
 80097ca:	f7ff ff55 	bl	8009678 <__b2d>
 80097ce:	a901      	add	r1, sp, #4
 80097d0:	4640      	mov	r0, r8
 80097d2:	ec55 4b10 	vmov	r4, r5, d0
 80097d6:	f7ff ff4f 	bl	8009678 <__b2d>
 80097da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80097e2:	eba3 0c02 	sub.w	ip, r3, r2
 80097e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80097ea:	1a9b      	subs	r3, r3, r2
 80097ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80097f0:	ec51 0b10 	vmov	r0, r1, d0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	bfd6      	itet	le
 80097f8:	460a      	movle	r2, r1
 80097fa:	462a      	movgt	r2, r5
 80097fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009800:	468b      	mov	fp, r1
 8009802:	462f      	mov	r7, r5
 8009804:	bfd4      	ite	le
 8009806:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800980a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800980e:	4620      	mov	r0, r4
 8009810:	ee10 2a10 	vmov	r2, s0
 8009814:	465b      	mov	r3, fp
 8009816:	4639      	mov	r1, r7
 8009818:	f7f7 f820 	bl	800085c <__aeabi_ddiv>
 800981c:	ec41 0b10 	vmov	d0, r0, r1
 8009820:	b003      	add	sp, #12
 8009822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009826 <__copybits>:
 8009826:	3901      	subs	r1, #1
 8009828:	b570      	push	{r4, r5, r6, lr}
 800982a:	1149      	asrs	r1, r1, #5
 800982c:	6914      	ldr	r4, [r2, #16]
 800982e:	3101      	adds	r1, #1
 8009830:	f102 0314 	add.w	r3, r2, #20
 8009834:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009838:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800983c:	1f05      	subs	r5, r0, #4
 800983e:	42a3      	cmp	r3, r4
 8009840:	d30c      	bcc.n	800985c <__copybits+0x36>
 8009842:	1aa3      	subs	r3, r4, r2
 8009844:	3b11      	subs	r3, #17
 8009846:	f023 0303 	bic.w	r3, r3, #3
 800984a:	3211      	adds	r2, #17
 800984c:	42a2      	cmp	r2, r4
 800984e:	bf88      	it	hi
 8009850:	2300      	movhi	r3, #0
 8009852:	4418      	add	r0, r3
 8009854:	2300      	movs	r3, #0
 8009856:	4288      	cmp	r0, r1
 8009858:	d305      	bcc.n	8009866 <__copybits+0x40>
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009860:	f845 6f04 	str.w	r6, [r5, #4]!
 8009864:	e7eb      	b.n	800983e <__copybits+0x18>
 8009866:	f840 3b04 	str.w	r3, [r0], #4
 800986a:	e7f4      	b.n	8009856 <__copybits+0x30>

0800986c <__any_on>:
 800986c:	f100 0214 	add.w	r2, r0, #20
 8009870:	6900      	ldr	r0, [r0, #16]
 8009872:	114b      	asrs	r3, r1, #5
 8009874:	4298      	cmp	r0, r3
 8009876:	b510      	push	{r4, lr}
 8009878:	db11      	blt.n	800989e <__any_on+0x32>
 800987a:	dd0a      	ble.n	8009892 <__any_on+0x26>
 800987c:	f011 011f 	ands.w	r1, r1, #31
 8009880:	d007      	beq.n	8009892 <__any_on+0x26>
 8009882:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009886:	fa24 f001 	lsr.w	r0, r4, r1
 800988a:	fa00 f101 	lsl.w	r1, r0, r1
 800988e:	428c      	cmp	r4, r1
 8009890:	d10b      	bne.n	80098aa <__any_on+0x3e>
 8009892:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009896:	4293      	cmp	r3, r2
 8009898:	d803      	bhi.n	80098a2 <__any_on+0x36>
 800989a:	2000      	movs	r0, #0
 800989c:	bd10      	pop	{r4, pc}
 800989e:	4603      	mov	r3, r0
 80098a0:	e7f7      	b.n	8009892 <__any_on+0x26>
 80098a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098a6:	2900      	cmp	r1, #0
 80098a8:	d0f5      	beq.n	8009896 <__any_on+0x2a>
 80098aa:	2001      	movs	r0, #1
 80098ac:	e7f6      	b.n	800989c <__any_on+0x30>

080098ae <sulp>:
 80098ae:	b570      	push	{r4, r5, r6, lr}
 80098b0:	4604      	mov	r4, r0
 80098b2:	460d      	mov	r5, r1
 80098b4:	ec45 4b10 	vmov	d0, r4, r5
 80098b8:	4616      	mov	r6, r2
 80098ba:	f7ff feb7 	bl	800962c <__ulp>
 80098be:	ec51 0b10 	vmov	r0, r1, d0
 80098c2:	b17e      	cbz	r6, 80098e4 <sulp+0x36>
 80098c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80098c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	dd09      	ble.n	80098e4 <sulp+0x36>
 80098d0:	051b      	lsls	r3, r3, #20
 80098d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80098d6:	2400      	movs	r4, #0
 80098d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80098dc:	4622      	mov	r2, r4
 80098de:	462b      	mov	r3, r5
 80098e0:	f7f6 fe92 	bl	8000608 <__aeabi_dmul>
 80098e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080098e8 <_strtod_l>:
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	ed2d 8b02 	vpush	{d8}
 80098f0:	b09b      	sub	sp, #108	; 0x6c
 80098f2:	4604      	mov	r4, r0
 80098f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80098f6:	2200      	movs	r2, #0
 80098f8:	9216      	str	r2, [sp, #88]	; 0x58
 80098fa:	460d      	mov	r5, r1
 80098fc:	f04f 0800 	mov.w	r8, #0
 8009900:	f04f 0900 	mov.w	r9, #0
 8009904:	460a      	mov	r2, r1
 8009906:	9215      	str	r2, [sp, #84]	; 0x54
 8009908:	7811      	ldrb	r1, [r2, #0]
 800990a:	292b      	cmp	r1, #43	; 0x2b
 800990c:	d04c      	beq.n	80099a8 <_strtod_l+0xc0>
 800990e:	d83a      	bhi.n	8009986 <_strtod_l+0x9e>
 8009910:	290d      	cmp	r1, #13
 8009912:	d834      	bhi.n	800997e <_strtod_l+0x96>
 8009914:	2908      	cmp	r1, #8
 8009916:	d834      	bhi.n	8009982 <_strtod_l+0x9a>
 8009918:	2900      	cmp	r1, #0
 800991a:	d03d      	beq.n	8009998 <_strtod_l+0xb0>
 800991c:	2200      	movs	r2, #0
 800991e:	920a      	str	r2, [sp, #40]	; 0x28
 8009920:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009922:	7832      	ldrb	r2, [r6, #0]
 8009924:	2a30      	cmp	r2, #48	; 0x30
 8009926:	f040 80b4 	bne.w	8009a92 <_strtod_l+0x1aa>
 800992a:	7872      	ldrb	r2, [r6, #1]
 800992c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009930:	2a58      	cmp	r2, #88	; 0x58
 8009932:	d170      	bne.n	8009a16 <_strtod_l+0x12e>
 8009934:	9302      	str	r3, [sp, #8]
 8009936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009938:	9301      	str	r3, [sp, #4]
 800993a:	ab16      	add	r3, sp, #88	; 0x58
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	4a8e      	ldr	r2, [pc, #568]	; (8009b78 <_strtod_l+0x290>)
 8009940:	ab17      	add	r3, sp, #92	; 0x5c
 8009942:	a915      	add	r1, sp, #84	; 0x54
 8009944:	4620      	mov	r0, r4
 8009946:	f001 f92f 	bl	800aba8 <__gethex>
 800994a:	f010 070f 	ands.w	r7, r0, #15
 800994e:	4605      	mov	r5, r0
 8009950:	d005      	beq.n	800995e <_strtod_l+0x76>
 8009952:	2f06      	cmp	r7, #6
 8009954:	d12a      	bne.n	80099ac <_strtod_l+0xc4>
 8009956:	3601      	adds	r6, #1
 8009958:	2300      	movs	r3, #0
 800995a:	9615      	str	r6, [sp, #84]	; 0x54
 800995c:	930a      	str	r3, [sp, #40]	; 0x28
 800995e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009960:	2b00      	cmp	r3, #0
 8009962:	f040 857f 	bne.w	800a464 <_strtod_l+0xb7c>
 8009966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009968:	b1db      	cbz	r3, 80099a2 <_strtod_l+0xba>
 800996a:	4642      	mov	r2, r8
 800996c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009970:	ec43 2b10 	vmov	d0, r2, r3
 8009974:	b01b      	add	sp, #108	; 0x6c
 8009976:	ecbd 8b02 	vpop	{d8}
 800997a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997e:	2920      	cmp	r1, #32
 8009980:	d1cc      	bne.n	800991c <_strtod_l+0x34>
 8009982:	3201      	adds	r2, #1
 8009984:	e7bf      	b.n	8009906 <_strtod_l+0x1e>
 8009986:	292d      	cmp	r1, #45	; 0x2d
 8009988:	d1c8      	bne.n	800991c <_strtod_l+0x34>
 800998a:	2101      	movs	r1, #1
 800998c:	910a      	str	r1, [sp, #40]	; 0x28
 800998e:	1c51      	adds	r1, r2, #1
 8009990:	9115      	str	r1, [sp, #84]	; 0x54
 8009992:	7852      	ldrb	r2, [r2, #1]
 8009994:	2a00      	cmp	r2, #0
 8009996:	d1c3      	bne.n	8009920 <_strtod_l+0x38>
 8009998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800999a:	9515      	str	r5, [sp, #84]	; 0x54
 800999c:	2b00      	cmp	r3, #0
 800999e:	f040 855f 	bne.w	800a460 <_strtod_l+0xb78>
 80099a2:	4642      	mov	r2, r8
 80099a4:	464b      	mov	r3, r9
 80099a6:	e7e3      	b.n	8009970 <_strtod_l+0x88>
 80099a8:	2100      	movs	r1, #0
 80099aa:	e7ef      	b.n	800998c <_strtod_l+0xa4>
 80099ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80099ae:	b13a      	cbz	r2, 80099c0 <_strtod_l+0xd8>
 80099b0:	2135      	movs	r1, #53	; 0x35
 80099b2:	a818      	add	r0, sp, #96	; 0x60
 80099b4:	f7ff ff37 	bl	8009826 <__copybits>
 80099b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80099ba:	4620      	mov	r0, r4
 80099bc:	f7ff fb0a 	bl	8008fd4 <_Bfree>
 80099c0:	3f01      	subs	r7, #1
 80099c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099c4:	2f04      	cmp	r7, #4
 80099c6:	d806      	bhi.n	80099d6 <_strtod_l+0xee>
 80099c8:	e8df f007 	tbb	[pc, r7]
 80099cc:	201d0314 	.word	0x201d0314
 80099d0:	14          	.byte	0x14
 80099d1:	00          	.byte	0x00
 80099d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80099d6:	05e9      	lsls	r1, r5, #23
 80099d8:	bf48      	it	mi
 80099da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80099de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099e2:	0d1b      	lsrs	r3, r3, #20
 80099e4:	051b      	lsls	r3, r3, #20
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1b9      	bne.n	800995e <_strtod_l+0x76>
 80099ea:	f7fe faf5 	bl	8007fd8 <__errno>
 80099ee:	2322      	movs	r3, #34	; 0x22
 80099f0:	6003      	str	r3, [r0, #0]
 80099f2:	e7b4      	b.n	800995e <_strtod_l+0x76>
 80099f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80099f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80099fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009a00:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009a04:	e7e7      	b.n	80099d6 <_strtod_l+0xee>
 8009a06:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009b80 <_strtod_l+0x298>
 8009a0a:	e7e4      	b.n	80099d6 <_strtod_l+0xee>
 8009a0c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009a10:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009a14:	e7df      	b.n	80099d6 <_strtod_l+0xee>
 8009a16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	9215      	str	r2, [sp, #84]	; 0x54
 8009a1c:	785b      	ldrb	r3, [r3, #1]
 8009a1e:	2b30      	cmp	r3, #48	; 0x30
 8009a20:	d0f9      	beq.n	8009a16 <_strtod_l+0x12e>
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d09b      	beq.n	800995e <_strtod_l+0x76>
 8009a26:	2301      	movs	r3, #1
 8009a28:	f04f 0a00 	mov.w	sl, #0
 8009a2c:	9304      	str	r3, [sp, #16]
 8009a2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a30:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a32:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009a36:	46d3      	mov	fp, sl
 8009a38:	220a      	movs	r2, #10
 8009a3a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009a3c:	7806      	ldrb	r6, [r0, #0]
 8009a3e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009a42:	b2d9      	uxtb	r1, r3
 8009a44:	2909      	cmp	r1, #9
 8009a46:	d926      	bls.n	8009a96 <_strtod_l+0x1ae>
 8009a48:	494c      	ldr	r1, [pc, #304]	; (8009b7c <_strtod_l+0x294>)
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f000 ffe6 	bl	800aa1c <strncmp>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d030      	beq.n	8009ab6 <_strtod_l+0x1ce>
 8009a54:	2000      	movs	r0, #0
 8009a56:	4632      	mov	r2, r6
 8009a58:	9005      	str	r0, [sp, #20]
 8009a5a:	465e      	mov	r6, fp
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2a65      	cmp	r2, #101	; 0x65
 8009a60:	d001      	beq.n	8009a66 <_strtod_l+0x17e>
 8009a62:	2a45      	cmp	r2, #69	; 0x45
 8009a64:	d113      	bne.n	8009a8e <_strtod_l+0x1a6>
 8009a66:	b91e      	cbnz	r6, 8009a70 <_strtod_l+0x188>
 8009a68:	9a04      	ldr	r2, [sp, #16]
 8009a6a:	4302      	orrs	r2, r0
 8009a6c:	d094      	beq.n	8009998 <_strtod_l+0xb0>
 8009a6e:	2600      	movs	r6, #0
 8009a70:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009a72:	1c6a      	adds	r2, r5, #1
 8009a74:	9215      	str	r2, [sp, #84]	; 0x54
 8009a76:	786a      	ldrb	r2, [r5, #1]
 8009a78:	2a2b      	cmp	r2, #43	; 0x2b
 8009a7a:	d074      	beq.n	8009b66 <_strtod_l+0x27e>
 8009a7c:	2a2d      	cmp	r2, #45	; 0x2d
 8009a7e:	d078      	beq.n	8009b72 <_strtod_l+0x28a>
 8009a80:	f04f 0c00 	mov.w	ip, #0
 8009a84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009a88:	2909      	cmp	r1, #9
 8009a8a:	d97f      	bls.n	8009b8c <_strtod_l+0x2a4>
 8009a8c:	9515      	str	r5, [sp, #84]	; 0x54
 8009a8e:	2700      	movs	r7, #0
 8009a90:	e09e      	b.n	8009bd0 <_strtod_l+0x2e8>
 8009a92:	2300      	movs	r3, #0
 8009a94:	e7c8      	b.n	8009a28 <_strtod_l+0x140>
 8009a96:	f1bb 0f08 	cmp.w	fp, #8
 8009a9a:	bfd8      	it	le
 8009a9c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009a9e:	f100 0001 	add.w	r0, r0, #1
 8009aa2:	bfda      	itte	le
 8009aa4:	fb02 3301 	mlale	r3, r2, r1, r3
 8009aa8:	9309      	strle	r3, [sp, #36]	; 0x24
 8009aaa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009aae:	f10b 0b01 	add.w	fp, fp, #1
 8009ab2:	9015      	str	r0, [sp, #84]	; 0x54
 8009ab4:	e7c1      	b.n	8009a3a <_strtod_l+0x152>
 8009ab6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	9215      	str	r2, [sp, #84]	; 0x54
 8009abc:	785a      	ldrb	r2, [r3, #1]
 8009abe:	f1bb 0f00 	cmp.w	fp, #0
 8009ac2:	d037      	beq.n	8009b34 <_strtod_l+0x24c>
 8009ac4:	9005      	str	r0, [sp, #20]
 8009ac6:	465e      	mov	r6, fp
 8009ac8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009acc:	2b09      	cmp	r3, #9
 8009ace:	d912      	bls.n	8009af6 <_strtod_l+0x20e>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e7c4      	b.n	8009a5e <_strtod_l+0x176>
 8009ad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	9215      	str	r2, [sp, #84]	; 0x54
 8009ada:	785a      	ldrb	r2, [r3, #1]
 8009adc:	3001      	adds	r0, #1
 8009ade:	2a30      	cmp	r2, #48	; 0x30
 8009ae0:	d0f8      	beq.n	8009ad4 <_strtod_l+0x1ec>
 8009ae2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009ae6:	2b08      	cmp	r3, #8
 8009ae8:	f200 84c1 	bhi.w	800a46e <_strtod_l+0xb86>
 8009aec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009aee:	9005      	str	r0, [sp, #20]
 8009af0:	2000      	movs	r0, #0
 8009af2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009af4:	4606      	mov	r6, r0
 8009af6:	3a30      	subs	r2, #48	; 0x30
 8009af8:	f100 0301 	add.w	r3, r0, #1
 8009afc:	d014      	beq.n	8009b28 <_strtod_l+0x240>
 8009afe:	9905      	ldr	r1, [sp, #20]
 8009b00:	4419      	add	r1, r3
 8009b02:	9105      	str	r1, [sp, #20]
 8009b04:	4633      	mov	r3, r6
 8009b06:	eb00 0c06 	add.w	ip, r0, r6
 8009b0a:	210a      	movs	r1, #10
 8009b0c:	4563      	cmp	r3, ip
 8009b0e:	d113      	bne.n	8009b38 <_strtod_l+0x250>
 8009b10:	1833      	adds	r3, r6, r0
 8009b12:	2b08      	cmp	r3, #8
 8009b14:	f106 0601 	add.w	r6, r6, #1
 8009b18:	4406      	add	r6, r0
 8009b1a:	dc1a      	bgt.n	8009b52 <_strtod_l+0x26a>
 8009b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b1e:	230a      	movs	r3, #10
 8009b20:	fb03 2301 	mla	r3, r3, r1, r2
 8009b24:	9309      	str	r3, [sp, #36]	; 0x24
 8009b26:	2300      	movs	r3, #0
 8009b28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b2a:	1c51      	adds	r1, r2, #1
 8009b2c:	9115      	str	r1, [sp, #84]	; 0x54
 8009b2e:	7852      	ldrb	r2, [r2, #1]
 8009b30:	4618      	mov	r0, r3
 8009b32:	e7c9      	b.n	8009ac8 <_strtod_l+0x1e0>
 8009b34:	4658      	mov	r0, fp
 8009b36:	e7d2      	b.n	8009ade <_strtod_l+0x1f6>
 8009b38:	2b08      	cmp	r3, #8
 8009b3a:	f103 0301 	add.w	r3, r3, #1
 8009b3e:	dc03      	bgt.n	8009b48 <_strtod_l+0x260>
 8009b40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009b42:	434f      	muls	r7, r1
 8009b44:	9709      	str	r7, [sp, #36]	; 0x24
 8009b46:	e7e1      	b.n	8009b0c <_strtod_l+0x224>
 8009b48:	2b10      	cmp	r3, #16
 8009b4a:	bfd8      	it	le
 8009b4c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009b50:	e7dc      	b.n	8009b0c <_strtod_l+0x224>
 8009b52:	2e10      	cmp	r6, #16
 8009b54:	bfdc      	itt	le
 8009b56:	230a      	movle	r3, #10
 8009b58:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009b5c:	e7e3      	b.n	8009b26 <_strtod_l+0x23e>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	9305      	str	r3, [sp, #20]
 8009b62:	2301      	movs	r3, #1
 8009b64:	e780      	b.n	8009a68 <_strtod_l+0x180>
 8009b66:	f04f 0c00 	mov.w	ip, #0
 8009b6a:	1caa      	adds	r2, r5, #2
 8009b6c:	9215      	str	r2, [sp, #84]	; 0x54
 8009b6e:	78aa      	ldrb	r2, [r5, #2]
 8009b70:	e788      	b.n	8009a84 <_strtod_l+0x19c>
 8009b72:	f04f 0c01 	mov.w	ip, #1
 8009b76:	e7f8      	b.n	8009b6a <_strtod_l+0x282>
 8009b78:	0800baf0 	.word	0x0800baf0
 8009b7c:	0800baec 	.word	0x0800baec
 8009b80:	7ff00000 	.word	0x7ff00000
 8009b84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b86:	1c51      	adds	r1, r2, #1
 8009b88:	9115      	str	r1, [sp, #84]	; 0x54
 8009b8a:	7852      	ldrb	r2, [r2, #1]
 8009b8c:	2a30      	cmp	r2, #48	; 0x30
 8009b8e:	d0f9      	beq.n	8009b84 <_strtod_l+0x29c>
 8009b90:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009b94:	2908      	cmp	r1, #8
 8009b96:	f63f af7a 	bhi.w	8009a8e <_strtod_l+0x1a6>
 8009b9a:	3a30      	subs	r2, #48	; 0x30
 8009b9c:	9208      	str	r2, [sp, #32]
 8009b9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009ba0:	920c      	str	r2, [sp, #48]	; 0x30
 8009ba2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009ba4:	1c57      	adds	r7, r2, #1
 8009ba6:	9715      	str	r7, [sp, #84]	; 0x54
 8009ba8:	7852      	ldrb	r2, [r2, #1]
 8009baa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009bae:	f1be 0f09 	cmp.w	lr, #9
 8009bb2:	d938      	bls.n	8009c26 <_strtod_l+0x33e>
 8009bb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009bb6:	1a7f      	subs	r7, r7, r1
 8009bb8:	2f08      	cmp	r7, #8
 8009bba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009bbe:	dc03      	bgt.n	8009bc8 <_strtod_l+0x2e0>
 8009bc0:	9908      	ldr	r1, [sp, #32]
 8009bc2:	428f      	cmp	r7, r1
 8009bc4:	bfa8      	it	ge
 8009bc6:	460f      	movge	r7, r1
 8009bc8:	f1bc 0f00 	cmp.w	ip, #0
 8009bcc:	d000      	beq.n	8009bd0 <_strtod_l+0x2e8>
 8009bce:	427f      	negs	r7, r7
 8009bd0:	2e00      	cmp	r6, #0
 8009bd2:	d14f      	bne.n	8009c74 <_strtod_l+0x38c>
 8009bd4:	9904      	ldr	r1, [sp, #16]
 8009bd6:	4301      	orrs	r1, r0
 8009bd8:	f47f aec1 	bne.w	800995e <_strtod_l+0x76>
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f47f aedb 	bne.w	8009998 <_strtod_l+0xb0>
 8009be2:	2a69      	cmp	r2, #105	; 0x69
 8009be4:	d029      	beq.n	8009c3a <_strtod_l+0x352>
 8009be6:	dc26      	bgt.n	8009c36 <_strtod_l+0x34e>
 8009be8:	2a49      	cmp	r2, #73	; 0x49
 8009bea:	d026      	beq.n	8009c3a <_strtod_l+0x352>
 8009bec:	2a4e      	cmp	r2, #78	; 0x4e
 8009bee:	f47f aed3 	bne.w	8009998 <_strtod_l+0xb0>
 8009bf2:	499b      	ldr	r1, [pc, #620]	; (8009e60 <_strtod_l+0x578>)
 8009bf4:	a815      	add	r0, sp, #84	; 0x54
 8009bf6:	f001 fa17 	bl	800b028 <__match>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	f43f aecc 	beq.w	8009998 <_strtod_l+0xb0>
 8009c00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	2b28      	cmp	r3, #40	; 0x28
 8009c06:	d12f      	bne.n	8009c68 <_strtod_l+0x380>
 8009c08:	4996      	ldr	r1, [pc, #600]	; (8009e64 <_strtod_l+0x57c>)
 8009c0a:	aa18      	add	r2, sp, #96	; 0x60
 8009c0c:	a815      	add	r0, sp, #84	; 0x54
 8009c0e:	f001 fa1f 	bl	800b050 <__hexnan>
 8009c12:	2805      	cmp	r0, #5
 8009c14:	d128      	bne.n	8009c68 <_strtod_l+0x380>
 8009c16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009c20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009c24:	e69b      	b.n	800995e <_strtod_l+0x76>
 8009c26:	9f08      	ldr	r7, [sp, #32]
 8009c28:	210a      	movs	r1, #10
 8009c2a:	fb01 2107 	mla	r1, r1, r7, r2
 8009c2e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009c32:	9208      	str	r2, [sp, #32]
 8009c34:	e7b5      	b.n	8009ba2 <_strtod_l+0x2ba>
 8009c36:	2a6e      	cmp	r2, #110	; 0x6e
 8009c38:	e7d9      	b.n	8009bee <_strtod_l+0x306>
 8009c3a:	498b      	ldr	r1, [pc, #556]	; (8009e68 <_strtod_l+0x580>)
 8009c3c:	a815      	add	r0, sp, #84	; 0x54
 8009c3e:	f001 f9f3 	bl	800b028 <__match>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	f43f aea8 	beq.w	8009998 <_strtod_l+0xb0>
 8009c48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c4a:	4988      	ldr	r1, [pc, #544]	; (8009e6c <_strtod_l+0x584>)
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	a815      	add	r0, sp, #84	; 0x54
 8009c50:	9315      	str	r3, [sp, #84]	; 0x54
 8009c52:	f001 f9e9 	bl	800b028 <__match>
 8009c56:	b910      	cbnz	r0, 8009c5e <_strtod_l+0x376>
 8009c58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	9315      	str	r3, [sp, #84]	; 0x54
 8009c5e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009e7c <_strtod_l+0x594>
 8009c62:	f04f 0800 	mov.w	r8, #0
 8009c66:	e67a      	b.n	800995e <_strtod_l+0x76>
 8009c68:	4881      	ldr	r0, [pc, #516]	; (8009e70 <_strtod_l+0x588>)
 8009c6a:	f000 fef9 	bl	800aa60 <nan>
 8009c6e:	ec59 8b10 	vmov	r8, r9, d0
 8009c72:	e674      	b.n	800995e <_strtod_l+0x76>
 8009c74:	9b05      	ldr	r3, [sp, #20]
 8009c76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c78:	1afb      	subs	r3, r7, r3
 8009c7a:	f1bb 0f00 	cmp.w	fp, #0
 8009c7e:	bf08      	it	eq
 8009c80:	46b3      	moveq	fp, r6
 8009c82:	2e10      	cmp	r6, #16
 8009c84:	9308      	str	r3, [sp, #32]
 8009c86:	4635      	mov	r5, r6
 8009c88:	bfa8      	it	ge
 8009c8a:	2510      	movge	r5, #16
 8009c8c:	f7f6 fc42 	bl	8000514 <__aeabi_ui2d>
 8009c90:	2e09      	cmp	r6, #9
 8009c92:	4680      	mov	r8, r0
 8009c94:	4689      	mov	r9, r1
 8009c96:	dd13      	ble.n	8009cc0 <_strtod_l+0x3d8>
 8009c98:	4b76      	ldr	r3, [pc, #472]	; (8009e74 <_strtod_l+0x58c>)
 8009c9a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009c9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ca2:	f7f6 fcb1 	bl	8000608 <__aeabi_dmul>
 8009ca6:	4680      	mov	r8, r0
 8009ca8:	4650      	mov	r0, sl
 8009caa:	4689      	mov	r9, r1
 8009cac:	f7f6 fc32 	bl	8000514 <__aeabi_ui2d>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	f7f6 faf0 	bl	800029c <__adddf3>
 8009cbc:	4680      	mov	r8, r0
 8009cbe:	4689      	mov	r9, r1
 8009cc0:	2e0f      	cmp	r6, #15
 8009cc2:	dc38      	bgt.n	8009d36 <_strtod_l+0x44e>
 8009cc4:	9b08      	ldr	r3, [sp, #32]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f43f ae49 	beq.w	800995e <_strtod_l+0x76>
 8009ccc:	dd24      	ble.n	8009d18 <_strtod_l+0x430>
 8009cce:	2b16      	cmp	r3, #22
 8009cd0:	dc0b      	bgt.n	8009cea <_strtod_l+0x402>
 8009cd2:	4968      	ldr	r1, [pc, #416]	; (8009e74 <_strtod_l+0x58c>)
 8009cd4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cdc:	4642      	mov	r2, r8
 8009cde:	464b      	mov	r3, r9
 8009ce0:	f7f6 fc92 	bl	8000608 <__aeabi_dmul>
 8009ce4:	4680      	mov	r8, r0
 8009ce6:	4689      	mov	r9, r1
 8009ce8:	e639      	b.n	800995e <_strtod_l+0x76>
 8009cea:	9a08      	ldr	r2, [sp, #32]
 8009cec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	db20      	blt.n	8009d36 <_strtod_l+0x44e>
 8009cf4:	4c5f      	ldr	r4, [pc, #380]	; (8009e74 <_strtod_l+0x58c>)
 8009cf6:	f1c6 060f 	rsb	r6, r6, #15
 8009cfa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009cfe:	4642      	mov	r2, r8
 8009d00:	464b      	mov	r3, r9
 8009d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d06:	f7f6 fc7f 	bl	8000608 <__aeabi_dmul>
 8009d0a:	9b08      	ldr	r3, [sp, #32]
 8009d0c:	1b9e      	subs	r6, r3, r6
 8009d0e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009d12:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009d16:	e7e3      	b.n	8009ce0 <_strtod_l+0x3f8>
 8009d18:	9b08      	ldr	r3, [sp, #32]
 8009d1a:	3316      	adds	r3, #22
 8009d1c:	db0b      	blt.n	8009d36 <_strtod_l+0x44e>
 8009d1e:	9b05      	ldr	r3, [sp, #20]
 8009d20:	1bdf      	subs	r7, r3, r7
 8009d22:	4b54      	ldr	r3, [pc, #336]	; (8009e74 <_strtod_l+0x58c>)
 8009d24:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	4649      	mov	r1, r9
 8009d30:	f7f6 fd94 	bl	800085c <__aeabi_ddiv>
 8009d34:	e7d6      	b.n	8009ce4 <_strtod_l+0x3fc>
 8009d36:	9b08      	ldr	r3, [sp, #32]
 8009d38:	1b75      	subs	r5, r6, r5
 8009d3a:	441d      	add	r5, r3
 8009d3c:	2d00      	cmp	r5, #0
 8009d3e:	dd70      	ble.n	8009e22 <_strtod_l+0x53a>
 8009d40:	f015 030f 	ands.w	r3, r5, #15
 8009d44:	d00a      	beq.n	8009d5c <_strtod_l+0x474>
 8009d46:	494b      	ldr	r1, [pc, #300]	; (8009e74 <_strtod_l+0x58c>)
 8009d48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d4c:	4642      	mov	r2, r8
 8009d4e:	464b      	mov	r3, r9
 8009d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d54:	f7f6 fc58 	bl	8000608 <__aeabi_dmul>
 8009d58:	4680      	mov	r8, r0
 8009d5a:	4689      	mov	r9, r1
 8009d5c:	f035 050f 	bics.w	r5, r5, #15
 8009d60:	d04d      	beq.n	8009dfe <_strtod_l+0x516>
 8009d62:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009d66:	dd22      	ble.n	8009dae <_strtod_l+0x4c6>
 8009d68:	2500      	movs	r5, #0
 8009d6a:	46ab      	mov	fp, r5
 8009d6c:	9509      	str	r5, [sp, #36]	; 0x24
 8009d6e:	9505      	str	r5, [sp, #20]
 8009d70:	2322      	movs	r3, #34	; 0x22
 8009d72:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009e7c <_strtod_l+0x594>
 8009d76:	6023      	str	r3, [r4, #0]
 8009d78:	f04f 0800 	mov.w	r8, #0
 8009d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f43f aded 	beq.w	800995e <_strtod_l+0x76>
 8009d84:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009d86:	4620      	mov	r0, r4
 8009d88:	f7ff f924 	bl	8008fd4 <_Bfree>
 8009d8c:	9905      	ldr	r1, [sp, #20]
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f7ff f920 	bl	8008fd4 <_Bfree>
 8009d94:	4659      	mov	r1, fp
 8009d96:	4620      	mov	r0, r4
 8009d98:	f7ff f91c 	bl	8008fd4 <_Bfree>
 8009d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f7ff f918 	bl	8008fd4 <_Bfree>
 8009da4:	4629      	mov	r1, r5
 8009da6:	4620      	mov	r0, r4
 8009da8:	f7ff f914 	bl	8008fd4 <_Bfree>
 8009dac:	e5d7      	b.n	800995e <_strtod_l+0x76>
 8009dae:	4b32      	ldr	r3, [pc, #200]	; (8009e78 <_strtod_l+0x590>)
 8009db0:	9304      	str	r3, [sp, #16]
 8009db2:	2300      	movs	r3, #0
 8009db4:	112d      	asrs	r5, r5, #4
 8009db6:	4640      	mov	r0, r8
 8009db8:	4649      	mov	r1, r9
 8009dba:	469a      	mov	sl, r3
 8009dbc:	2d01      	cmp	r5, #1
 8009dbe:	dc21      	bgt.n	8009e04 <_strtod_l+0x51c>
 8009dc0:	b10b      	cbz	r3, 8009dc6 <_strtod_l+0x4de>
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	4689      	mov	r9, r1
 8009dc6:	492c      	ldr	r1, [pc, #176]	; (8009e78 <_strtod_l+0x590>)
 8009dc8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009dcc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009dd0:	4642      	mov	r2, r8
 8009dd2:	464b      	mov	r3, r9
 8009dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dd8:	f7f6 fc16 	bl	8000608 <__aeabi_dmul>
 8009ddc:	4b27      	ldr	r3, [pc, #156]	; (8009e7c <_strtod_l+0x594>)
 8009dde:	460a      	mov	r2, r1
 8009de0:	400b      	ands	r3, r1
 8009de2:	4927      	ldr	r1, [pc, #156]	; (8009e80 <_strtod_l+0x598>)
 8009de4:	428b      	cmp	r3, r1
 8009de6:	4680      	mov	r8, r0
 8009de8:	d8be      	bhi.n	8009d68 <_strtod_l+0x480>
 8009dea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009dee:	428b      	cmp	r3, r1
 8009df0:	bf86      	itte	hi
 8009df2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009e84 <_strtod_l+0x59c>
 8009df6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8009dfa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009dfe:	2300      	movs	r3, #0
 8009e00:	9304      	str	r3, [sp, #16]
 8009e02:	e07b      	b.n	8009efc <_strtod_l+0x614>
 8009e04:	07ea      	lsls	r2, r5, #31
 8009e06:	d505      	bpl.n	8009e14 <_strtod_l+0x52c>
 8009e08:	9b04      	ldr	r3, [sp, #16]
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	f7f6 fbfb 	bl	8000608 <__aeabi_dmul>
 8009e12:	2301      	movs	r3, #1
 8009e14:	9a04      	ldr	r2, [sp, #16]
 8009e16:	3208      	adds	r2, #8
 8009e18:	f10a 0a01 	add.w	sl, sl, #1
 8009e1c:	106d      	asrs	r5, r5, #1
 8009e1e:	9204      	str	r2, [sp, #16]
 8009e20:	e7cc      	b.n	8009dbc <_strtod_l+0x4d4>
 8009e22:	d0ec      	beq.n	8009dfe <_strtod_l+0x516>
 8009e24:	426d      	negs	r5, r5
 8009e26:	f015 020f 	ands.w	r2, r5, #15
 8009e2a:	d00a      	beq.n	8009e42 <_strtod_l+0x55a>
 8009e2c:	4b11      	ldr	r3, [pc, #68]	; (8009e74 <_strtod_l+0x58c>)
 8009e2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e32:	4640      	mov	r0, r8
 8009e34:	4649      	mov	r1, r9
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	f7f6 fd0f 	bl	800085c <__aeabi_ddiv>
 8009e3e:	4680      	mov	r8, r0
 8009e40:	4689      	mov	r9, r1
 8009e42:	112d      	asrs	r5, r5, #4
 8009e44:	d0db      	beq.n	8009dfe <_strtod_l+0x516>
 8009e46:	2d1f      	cmp	r5, #31
 8009e48:	dd1e      	ble.n	8009e88 <_strtod_l+0x5a0>
 8009e4a:	2500      	movs	r5, #0
 8009e4c:	46ab      	mov	fp, r5
 8009e4e:	9509      	str	r5, [sp, #36]	; 0x24
 8009e50:	9505      	str	r5, [sp, #20]
 8009e52:	2322      	movs	r3, #34	; 0x22
 8009e54:	f04f 0800 	mov.w	r8, #0
 8009e58:	f04f 0900 	mov.w	r9, #0
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	e78d      	b.n	8009d7c <_strtod_l+0x494>
 8009e60:	0800b8d9 	.word	0x0800b8d9
 8009e64:	0800bb04 	.word	0x0800bb04
 8009e68:	0800b8d1 	.word	0x0800b8d1
 8009e6c:	0800b908 	.word	0x0800b908
 8009e70:	0800bc95 	.word	0x0800bc95
 8009e74:	0800ba18 	.word	0x0800ba18
 8009e78:	0800b9f0 	.word	0x0800b9f0
 8009e7c:	7ff00000 	.word	0x7ff00000
 8009e80:	7ca00000 	.word	0x7ca00000
 8009e84:	7fefffff 	.word	0x7fefffff
 8009e88:	f015 0310 	ands.w	r3, r5, #16
 8009e8c:	bf18      	it	ne
 8009e8e:	236a      	movne	r3, #106	; 0x6a
 8009e90:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a234 <_strtod_l+0x94c>
 8009e94:	9304      	str	r3, [sp, #16]
 8009e96:	4640      	mov	r0, r8
 8009e98:	4649      	mov	r1, r9
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	07ea      	lsls	r2, r5, #31
 8009e9e:	d504      	bpl.n	8009eaa <_strtod_l+0x5c2>
 8009ea0:	e9da 2300 	ldrd	r2, r3, [sl]
 8009ea4:	f7f6 fbb0 	bl	8000608 <__aeabi_dmul>
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	106d      	asrs	r5, r5, #1
 8009eac:	f10a 0a08 	add.w	sl, sl, #8
 8009eb0:	d1f4      	bne.n	8009e9c <_strtod_l+0x5b4>
 8009eb2:	b10b      	cbz	r3, 8009eb8 <_strtod_l+0x5d0>
 8009eb4:	4680      	mov	r8, r0
 8009eb6:	4689      	mov	r9, r1
 8009eb8:	9b04      	ldr	r3, [sp, #16]
 8009eba:	b1bb      	cbz	r3, 8009eec <_strtod_l+0x604>
 8009ebc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009ec0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	4649      	mov	r1, r9
 8009ec8:	dd10      	ble.n	8009eec <_strtod_l+0x604>
 8009eca:	2b1f      	cmp	r3, #31
 8009ecc:	f340 811e 	ble.w	800a10c <_strtod_l+0x824>
 8009ed0:	2b34      	cmp	r3, #52	; 0x34
 8009ed2:	bfde      	ittt	le
 8009ed4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8009ed8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009edc:	4093      	lslle	r3, r2
 8009ede:	f04f 0800 	mov.w	r8, #0
 8009ee2:	bfcc      	ite	gt
 8009ee4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009ee8:	ea03 0901 	andle.w	r9, r3, r1
 8009eec:	2200      	movs	r2, #0
 8009eee:	2300      	movs	r3, #0
 8009ef0:	4640      	mov	r0, r8
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	f7f6 fdf0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d1a6      	bne.n	8009e4a <_strtod_l+0x562>
 8009efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f02:	4633      	mov	r3, r6
 8009f04:	465a      	mov	r2, fp
 8009f06:	4620      	mov	r0, r4
 8009f08:	f7ff f8cc 	bl	80090a4 <__s2b>
 8009f0c:	9009      	str	r0, [sp, #36]	; 0x24
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	f43f af2a 	beq.w	8009d68 <_strtod_l+0x480>
 8009f14:	9a08      	ldr	r2, [sp, #32]
 8009f16:	9b05      	ldr	r3, [sp, #20]
 8009f18:	2a00      	cmp	r2, #0
 8009f1a:	eba3 0307 	sub.w	r3, r3, r7
 8009f1e:	bfa8      	it	ge
 8009f20:	2300      	movge	r3, #0
 8009f22:	930c      	str	r3, [sp, #48]	; 0x30
 8009f24:	2500      	movs	r5, #0
 8009f26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009f2a:	9312      	str	r3, [sp, #72]	; 0x48
 8009f2c:	46ab      	mov	fp, r5
 8009f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f30:	4620      	mov	r0, r4
 8009f32:	6859      	ldr	r1, [r3, #4]
 8009f34:	f7ff f80e 	bl	8008f54 <_Balloc>
 8009f38:	9005      	str	r0, [sp, #20]
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	f43f af18 	beq.w	8009d70 <_strtod_l+0x488>
 8009f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f42:	691a      	ldr	r2, [r3, #16]
 8009f44:	3202      	adds	r2, #2
 8009f46:	f103 010c 	add.w	r1, r3, #12
 8009f4a:	0092      	lsls	r2, r2, #2
 8009f4c:	300c      	adds	r0, #12
 8009f4e:	f7fe f870 	bl	8008032 <memcpy>
 8009f52:	ec49 8b10 	vmov	d0, r8, r9
 8009f56:	aa18      	add	r2, sp, #96	; 0x60
 8009f58:	a917      	add	r1, sp, #92	; 0x5c
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f7ff fbd6 	bl	800970c <__d2b>
 8009f60:	ec49 8b18 	vmov	d8, r8, r9
 8009f64:	9016      	str	r0, [sp, #88]	; 0x58
 8009f66:	2800      	cmp	r0, #0
 8009f68:	f43f af02 	beq.w	8009d70 <_strtod_l+0x488>
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f7ff f930 	bl	80091d4 <__i2b>
 8009f74:	4683      	mov	fp, r0
 8009f76:	2800      	cmp	r0, #0
 8009f78:	f43f aefa 	beq.w	8009d70 <_strtod_l+0x488>
 8009f7c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009f7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009f80:	2e00      	cmp	r6, #0
 8009f82:	bfab      	itete	ge
 8009f84:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009f86:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009f88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009f8a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009f8e:	bfac      	ite	ge
 8009f90:	eb06 0a03 	addge.w	sl, r6, r3
 8009f94:	1b9f      	sublt	r7, r3, r6
 8009f96:	9b04      	ldr	r3, [sp, #16]
 8009f98:	1af6      	subs	r6, r6, r3
 8009f9a:	4416      	add	r6, r2
 8009f9c:	4ba0      	ldr	r3, [pc, #640]	; (800a220 <_strtod_l+0x938>)
 8009f9e:	3e01      	subs	r6, #1
 8009fa0:	429e      	cmp	r6, r3
 8009fa2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009fa6:	f280 80c4 	bge.w	800a132 <_strtod_l+0x84a>
 8009faa:	1b9b      	subs	r3, r3, r6
 8009fac:	2b1f      	cmp	r3, #31
 8009fae:	eba2 0203 	sub.w	r2, r2, r3
 8009fb2:	f04f 0101 	mov.w	r1, #1
 8009fb6:	f300 80b0 	bgt.w	800a11a <_strtod_l+0x832>
 8009fba:	fa01 f303 	lsl.w	r3, r1, r3
 8009fbe:	930e      	str	r3, [sp, #56]	; 0x38
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	930d      	str	r3, [sp, #52]	; 0x34
 8009fc4:	eb0a 0602 	add.w	r6, sl, r2
 8009fc8:	9b04      	ldr	r3, [sp, #16]
 8009fca:	45b2      	cmp	sl, r6
 8009fcc:	4417      	add	r7, r2
 8009fce:	441f      	add	r7, r3
 8009fd0:	4653      	mov	r3, sl
 8009fd2:	bfa8      	it	ge
 8009fd4:	4633      	movge	r3, r6
 8009fd6:	42bb      	cmp	r3, r7
 8009fd8:	bfa8      	it	ge
 8009fda:	463b      	movge	r3, r7
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	bfc2      	ittt	gt
 8009fe0:	1af6      	subgt	r6, r6, r3
 8009fe2:	1aff      	subgt	r7, r7, r3
 8009fe4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	dd17      	ble.n	800a01e <_strtod_l+0x736>
 8009fee:	4659      	mov	r1, fp
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7ff f9ae 	bl	8009354 <__pow5mult>
 8009ff8:	4683      	mov	fp, r0
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	f43f aeb8 	beq.w	8009d70 <_strtod_l+0x488>
 800a000:	4601      	mov	r1, r0
 800a002:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a004:	4620      	mov	r0, r4
 800a006:	f7ff f8fb 	bl	8009200 <__multiply>
 800a00a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a00c:	2800      	cmp	r0, #0
 800a00e:	f43f aeaf 	beq.w	8009d70 <_strtod_l+0x488>
 800a012:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a014:	4620      	mov	r0, r4
 800a016:	f7fe ffdd 	bl	8008fd4 <_Bfree>
 800a01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a01c:	9316      	str	r3, [sp, #88]	; 0x58
 800a01e:	2e00      	cmp	r6, #0
 800a020:	f300 808c 	bgt.w	800a13c <_strtod_l+0x854>
 800a024:	9b08      	ldr	r3, [sp, #32]
 800a026:	2b00      	cmp	r3, #0
 800a028:	dd08      	ble.n	800a03c <_strtod_l+0x754>
 800a02a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a02c:	9905      	ldr	r1, [sp, #20]
 800a02e:	4620      	mov	r0, r4
 800a030:	f7ff f990 	bl	8009354 <__pow5mult>
 800a034:	9005      	str	r0, [sp, #20]
 800a036:	2800      	cmp	r0, #0
 800a038:	f43f ae9a 	beq.w	8009d70 <_strtod_l+0x488>
 800a03c:	2f00      	cmp	r7, #0
 800a03e:	dd08      	ble.n	800a052 <_strtod_l+0x76a>
 800a040:	9905      	ldr	r1, [sp, #20]
 800a042:	463a      	mov	r2, r7
 800a044:	4620      	mov	r0, r4
 800a046:	f7ff f9df 	bl	8009408 <__lshift>
 800a04a:	9005      	str	r0, [sp, #20]
 800a04c:	2800      	cmp	r0, #0
 800a04e:	f43f ae8f 	beq.w	8009d70 <_strtod_l+0x488>
 800a052:	f1ba 0f00 	cmp.w	sl, #0
 800a056:	dd08      	ble.n	800a06a <_strtod_l+0x782>
 800a058:	4659      	mov	r1, fp
 800a05a:	4652      	mov	r2, sl
 800a05c:	4620      	mov	r0, r4
 800a05e:	f7ff f9d3 	bl	8009408 <__lshift>
 800a062:	4683      	mov	fp, r0
 800a064:	2800      	cmp	r0, #0
 800a066:	f43f ae83 	beq.w	8009d70 <_strtod_l+0x488>
 800a06a:	9a05      	ldr	r2, [sp, #20]
 800a06c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a06e:	4620      	mov	r0, r4
 800a070:	f7ff fa52 	bl	8009518 <__mdiff>
 800a074:	4605      	mov	r5, r0
 800a076:	2800      	cmp	r0, #0
 800a078:	f43f ae7a 	beq.w	8009d70 <_strtod_l+0x488>
 800a07c:	68c3      	ldr	r3, [r0, #12]
 800a07e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a080:	2300      	movs	r3, #0
 800a082:	60c3      	str	r3, [r0, #12]
 800a084:	4659      	mov	r1, fp
 800a086:	f7ff fa2b 	bl	80094e0 <__mcmp>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	da60      	bge.n	800a150 <_strtod_l+0x868>
 800a08e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a090:	ea53 0308 	orrs.w	r3, r3, r8
 800a094:	f040 8084 	bne.w	800a1a0 <_strtod_l+0x8b8>
 800a098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d17f      	bne.n	800a1a0 <_strtod_l+0x8b8>
 800a0a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0a4:	0d1b      	lsrs	r3, r3, #20
 800a0a6:	051b      	lsls	r3, r3, #20
 800a0a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a0ac:	d978      	bls.n	800a1a0 <_strtod_l+0x8b8>
 800a0ae:	696b      	ldr	r3, [r5, #20]
 800a0b0:	b913      	cbnz	r3, 800a0b8 <_strtod_l+0x7d0>
 800a0b2:	692b      	ldr	r3, [r5, #16]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	dd73      	ble.n	800a1a0 <_strtod_l+0x8b8>
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f7ff f9a3 	bl	8009408 <__lshift>
 800a0c2:	4659      	mov	r1, fp
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	f7ff fa0b 	bl	80094e0 <__mcmp>
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	dd68      	ble.n	800a1a0 <_strtod_l+0x8b8>
 800a0ce:	9904      	ldr	r1, [sp, #16]
 800a0d0:	4a54      	ldr	r2, [pc, #336]	; (800a224 <_strtod_l+0x93c>)
 800a0d2:	464b      	mov	r3, r9
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	f000 8084 	beq.w	800a1e2 <_strtod_l+0x8fa>
 800a0da:	ea02 0109 	and.w	r1, r2, r9
 800a0de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a0e2:	dc7e      	bgt.n	800a1e2 <_strtod_l+0x8fa>
 800a0e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a0e8:	f77f aeb3 	ble.w	8009e52 <_strtod_l+0x56a>
 800a0ec:	4b4e      	ldr	r3, [pc, #312]	; (800a228 <_strtod_l+0x940>)
 800a0ee:	4640      	mov	r0, r8
 800a0f0:	4649      	mov	r1, r9
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f7f6 fa88 	bl	8000608 <__aeabi_dmul>
 800a0f8:	4b4a      	ldr	r3, [pc, #296]	; (800a224 <_strtod_l+0x93c>)
 800a0fa:	400b      	ands	r3, r1
 800a0fc:	4680      	mov	r8, r0
 800a0fe:	4689      	mov	r9, r1
 800a100:	2b00      	cmp	r3, #0
 800a102:	f47f ae3f 	bne.w	8009d84 <_strtod_l+0x49c>
 800a106:	2322      	movs	r3, #34	; 0x22
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	e63b      	b.n	8009d84 <_strtod_l+0x49c>
 800a10c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a110:	fa02 f303 	lsl.w	r3, r2, r3
 800a114:	ea03 0808 	and.w	r8, r3, r8
 800a118:	e6e8      	b.n	8009eec <_strtod_l+0x604>
 800a11a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a11e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a122:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a126:	36e2      	adds	r6, #226	; 0xe2
 800a128:	fa01 f306 	lsl.w	r3, r1, r6
 800a12c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a130:	e748      	b.n	8009fc4 <_strtod_l+0x6dc>
 800a132:	2100      	movs	r1, #0
 800a134:	2301      	movs	r3, #1
 800a136:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a13a:	e743      	b.n	8009fc4 <_strtod_l+0x6dc>
 800a13c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a13e:	4632      	mov	r2, r6
 800a140:	4620      	mov	r0, r4
 800a142:	f7ff f961 	bl	8009408 <__lshift>
 800a146:	9016      	str	r0, [sp, #88]	; 0x58
 800a148:	2800      	cmp	r0, #0
 800a14a:	f47f af6b 	bne.w	800a024 <_strtod_l+0x73c>
 800a14e:	e60f      	b.n	8009d70 <_strtod_l+0x488>
 800a150:	46ca      	mov	sl, r9
 800a152:	d171      	bne.n	800a238 <_strtod_l+0x950>
 800a154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a156:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a15a:	b352      	cbz	r2, 800a1b2 <_strtod_l+0x8ca>
 800a15c:	4a33      	ldr	r2, [pc, #204]	; (800a22c <_strtod_l+0x944>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d12a      	bne.n	800a1b8 <_strtod_l+0x8d0>
 800a162:	9b04      	ldr	r3, [sp, #16]
 800a164:	4641      	mov	r1, r8
 800a166:	b1fb      	cbz	r3, 800a1a8 <_strtod_l+0x8c0>
 800a168:	4b2e      	ldr	r3, [pc, #184]	; (800a224 <_strtod_l+0x93c>)
 800a16a:	ea09 0303 	and.w	r3, r9, r3
 800a16e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a176:	d81a      	bhi.n	800a1ae <_strtod_l+0x8c6>
 800a178:	0d1b      	lsrs	r3, r3, #20
 800a17a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a17e:	fa02 f303 	lsl.w	r3, r2, r3
 800a182:	4299      	cmp	r1, r3
 800a184:	d118      	bne.n	800a1b8 <_strtod_l+0x8d0>
 800a186:	4b2a      	ldr	r3, [pc, #168]	; (800a230 <_strtod_l+0x948>)
 800a188:	459a      	cmp	sl, r3
 800a18a:	d102      	bne.n	800a192 <_strtod_l+0x8aa>
 800a18c:	3101      	adds	r1, #1
 800a18e:	f43f adef 	beq.w	8009d70 <_strtod_l+0x488>
 800a192:	4b24      	ldr	r3, [pc, #144]	; (800a224 <_strtod_l+0x93c>)
 800a194:	ea0a 0303 	and.w	r3, sl, r3
 800a198:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a19c:	f04f 0800 	mov.w	r8, #0
 800a1a0:	9b04      	ldr	r3, [sp, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1a2      	bne.n	800a0ec <_strtod_l+0x804>
 800a1a6:	e5ed      	b.n	8009d84 <_strtod_l+0x49c>
 800a1a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1ac:	e7e9      	b.n	800a182 <_strtod_l+0x89a>
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	e7e7      	b.n	800a182 <_strtod_l+0x89a>
 800a1b2:	ea53 0308 	orrs.w	r3, r3, r8
 800a1b6:	d08a      	beq.n	800a0ce <_strtod_l+0x7e6>
 800a1b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1ba:	b1e3      	cbz	r3, 800a1f6 <_strtod_l+0x90e>
 800a1bc:	ea13 0f0a 	tst.w	r3, sl
 800a1c0:	d0ee      	beq.n	800a1a0 <_strtod_l+0x8b8>
 800a1c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1c4:	9a04      	ldr	r2, [sp, #16]
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	b1c3      	cbz	r3, 800a1fe <_strtod_l+0x916>
 800a1cc:	f7ff fb6f 	bl	80098ae <sulp>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	ec51 0b18 	vmov	r0, r1, d8
 800a1d8:	f7f6 f860 	bl	800029c <__adddf3>
 800a1dc:	4680      	mov	r8, r0
 800a1de:	4689      	mov	r9, r1
 800a1e0:	e7de      	b.n	800a1a0 <_strtod_l+0x8b8>
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a1e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a1ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a1f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a1f4:	e7d4      	b.n	800a1a0 <_strtod_l+0x8b8>
 800a1f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1f8:	ea13 0f08 	tst.w	r3, r8
 800a1fc:	e7e0      	b.n	800a1c0 <_strtod_l+0x8d8>
 800a1fe:	f7ff fb56 	bl	80098ae <sulp>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	ec51 0b18 	vmov	r0, r1, d8
 800a20a:	f7f6 f845 	bl	8000298 <__aeabi_dsub>
 800a20e:	2200      	movs	r2, #0
 800a210:	2300      	movs	r3, #0
 800a212:	4680      	mov	r8, r0
 800a214:	4689      	mov	r9, r1
 800a216:	f7f6 fc5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d0c0      	beq.n	800a1a0 <_strtod_l+0x8b8>
 800a21e:	e618      	b.n	8009e52 <_strtod_l+0x56a>
 800a220:	fffffc02 	.word	0xfffffc02
 800a224:	7ff00000 	.word	0x7ff00000
 800a228:	39500000 	.word	0x39500000
 800a22c:	000fffff 	.word	0x000fffff
 800a230:	7fefffff 	.word	0x7fefffff
 800a234:	0800bb18 	.word	0x0800bb18
 800a238:	4659      	mov	r1, fp
 800a23a:	4628      	mov	r0, r5
 800a23c:	f7ff fac0 	bl	80097c0 <__ratio>
 800a240:	ec57 6b10 	vmov	r6, r7, d0
 800a244:	ee10 0a10 	vmov	r0, s0
 800a248:	2200      	movs	r2, #0
 800a24a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a24e:	4639      	mov	r1, r7
 800a250:	f7f6 fc56 	bl	8000b00 <__aeabi_dcmple>
 800a254:	2800      	cmp	r0, #0
 800a256:	d071      	beq.n	800a33c <_strtod_l+0xa54>
 800a258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d17c      	bne.n	800a358 <_strtod_l+0xa70>
 800a25e:	f1b8 0f00 	cmp.w	r8, #0
 800a262:	d15a      	bne.n	800a31a <_strtod_l+0xa32>
 800a264:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d15d      	bne.n	800a328 <_strtod_l+0xa40>
 800a26c:	4b90      	ldr	r3, [pc, #576]	; (800a4b0 <_strtod_l+0xbc8>)
 800a26e:	2200      	movs	r2, #0
 800a270:	4630      	mov	r0, r6
 800a272:	4639      	mov	r1, r7
 800a274:	f7f6 fc3a 	bl	8000aec <__aeabi_dcmplt>
 800a278:	2800      	cmp	r0, #0
 800a27a:	d15c      	bne.n	800a336 <_strtod_l+0xa4e>
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	4b8c      	ldr	r3, [pc, #560]	; (800a4b4 <_strtod_l+0xbcc>)
 800a282:	2200      	movs	r2, #0
 800a284:	f7f6 f9c0 	bl	8000608 <__aeabi_dmul>
 800a288:	4606      	mov	r6, r0
 800a28a:	460f      	mov	r7, r1
 800a28c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a290:	9606      	str	r6, [sp, #24]
 800a292:	9307      	str	r3, [sp, #28]
 800a294:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a298:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a29c:	4b86      	ldr	r3, [pc, #536]	; (800a4b8 <_strtod_l+0xbd0>)
 800a29e:	ea0a 0303 	and.w	r3, sl, r3
 800a2a2:	930d      	str	r3, [sp, #52]	; 0x34
 800a2a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2a6:	4b85      	ldr	r3, [pc, #532]	; (800a4bc <_strtod_l+0xbd4>)
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	f040 8090 	bne.w	800a3ce <_strtod_l+0xae6>
 800a2ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a2b2:	ec49 8b10 	vmov	d0, r8, r9
 800a2b6:	f7ff f9b9 	bl	800962c <__ulp>
 800a2ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2be:	ec51 0b10 	vmov	r0, r1, d0
 800a2c2:	f7f6 f9a1 	bl	8000608 <__aeabi_dmul>
 800a2c6:	4642      	mov	r2, r8
 800a2c8:	464b      	mov	r3, r9
 800a2ca:	f7f5 ffe7 	bl	800029c <__adddf3>
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4979      	ldr	r1, [pc, #484]	; (800a4b8 <_strtod_l+0xbd0>)
 800a2d2:	4a7b      	ldr	r2, [pc, #492]	; (800a4c0 <_strtod_l+0xbd8>)
 800a2d4:	4019      	ands	r1, r3
 800a2d6:	4291      	cmp	r1, r2
 800a2d8:	4680      	mov	r8, r0
 800a2da:	d944      	bls.n	800a366 <_strtod_l+0xa7e>
 800a2dc:	ee18 2a90 	vmov	r2, s17
 800a2e0:	4b78      	ldr	r3, [pc, #480]	; (800a4c4 <_strtod_l+0xbdc>)
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d104      	bne.n	800a2f0 <_strtod_l+0xa08>
 800a2e6:	ee18 3a10 	vmov	r3, s16
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	f43f ad40 	beq.w	8009d70 <_strtod_l+0x488>
 800a2f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a4c4 <_strtod_l+0xbdc>
 800a2f4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a2f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f7fe fe6a 	bl	8008fd4 <_Bfree>
 800a300:	9905      	ldr	r1, [sp, #20]
 800a302:	4620      	mov	r0, r4
 800a304:	f7fe fe66 	bl	8008fd4 <_Bfree>
 800a308:	4659      	mov	r1, fp
 800a30a:	4620      	mov	r0, r4
 800a30c:	f7fe fe62 	bl	8008fd4 <_Bfree>
 800a310:	4629      	mov	r1, r5
 800a312:	4620      	mov	r0, r4
 800a314:	f7fe fe5e 	bl	8008fd4 <_Bfree>
 800a318:	e609      	b.n	8009f2e <_strtod_l+0x646>
 800a31a:	f1b8 0f01 	cmp.w	r8, #1
 800a31e:	d103      	bne.n	800a328 <_strtod_l+0xa40>
 800a320:	f1b9 0f00 	cmp.w	r9, #0
 800a324:	f43f ad95 	beq.w	8009e52 <_strtod_l+0x56a>
 800a328:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a480 <_strtod_l+0xb98>
 800a32c:	4f60      	ldr	r7, [pc, #384]	; (800a4b0 <_strtod_l+0xbc8>)
 800a32e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a332:	2600      	movs	r6, #0
 800a334:	e7ae      	b.n	800a294 <_strtod_l+0x9ac>
 800a336:	4f5f      	ldr	r7, [pc, #380]	; (800a4b4 <_strtod_l+0xbcc>)
 800a338:	2600      	movs	r6, #0
 800a33a:	e7a7      	b.n	800a28c <_strtod_l+0x9a4>
 800a33c:	4b5d      	ldr	r3, [pc, #372]	; (800a4b4 <_strtod_l+0xbcc>)
 800a33e:	4630      	mov	r0, r6
 800a340:	4639      	mov	r1, r7
 800a342:	2200      	movs	r2, #0
 800a344:	f7f6 f960 	bl	8000608 <__aeabi_dmul>
 800a348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a34a:	4606      	mov	r6, r0
 800a34c:	460f      	mov	r7, r1
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d09c      	beq.n	800a28c <_strtod_l+0x9a4>
 800a352:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a356:	e79d      	b.n	800a294 <_strtod_l+0x9ac>
 800a358:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a488 <_strtod_l+0xba0>
 800a35c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a360:	ec57 6b17 	vmov	r6, r7, d7
 800a364:	e796      	b.n	800a294 <_strtod_l+0x9ac>
 800a366:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a36a:	9b04      	ldr	r3, [sp, #16]
 800a36c:	46ca      	mov	sl, r9
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1c2      	bne.n	800a2f8 <_strtod_l+0xa10>
 800a372:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a376:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a378:	0d1b      	lsrs	r3, r3, #20
 800a37a:	051b      	lsls	r3, r3, #20
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d1bb      	bne.n	800a2f8 <_strtod_l+0xa10>
 800a380:	4630      	mov	r0, r6
 800a382:	4639      	mov	r1, r7
 800a384:	f7f6 fca0 	bl	8000cc8 <__aeabi_d2lz>
 800a388:	f7f6 f910 	bl	80005ac <__aeabi_l2d>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	4630      	mov	r0, r6
 800a392:	4639      	mov	r1, r7
 800a394:	f7f5 ff80 	bl	8000298 <__aeabi_dsub>
 800a398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a39a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a39e:	ea43 0308 	orr.w	r3, r3, r8
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	4606      	mov	r6, r0
 800a3a6:	460f      	mov	r7, r1
 800a3a8:	d054      	beq.n	800a454 <_strtod_l+0xb6c>
 800a3aa:	a339      	add	r3, pc, #228	; (adr r3, 800a490 <_strtod_l+0xba8>)
 800a3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b0:	f7f6 fb9c 	bl	8000aec <__aeabi_dcmplt>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	f47f ace5 	bne.w	8009d84 <_strtod_l+0x49c>
 800a3ba:	a337      	add	r3, pc, #220	; (adr r3, 800a498 <_strtod_l+0xbb0>)
 800a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	4639      	mov	r1, r7
 800a3c4:	f7f6 fbb0 	bl	8000b28 <__aeabi_dcmpgt>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d095      	beq.n	800a2f8 <_strtod_l+0xa10>
 800a3cc:	e4da      	b.n	8009d84 <_strtod_l+0x49c>
 800a3ce:	9b04      	ldr	r3, [sp, #16]
 800a3d0:	b333      	cbz	r3, 800a420 <_strtod_l+0xb38>
 800a3d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a3d8:	d822      	bhi.n	800a420 <_strtod_l+0xb38>
 800a3da:	a331      	add	r3, pc, #196	; (adr r3, 800a4a0 <_strtod_l+0xbb8>)
 800a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	4639      	mov	r1, r7
 800a3e4:	f7f6 fb8c 	bl	8000b00 <__aeabi_dcmple>
 800a3e8:	b1a0      	cbz	r0, 800a414 <_strtod_l+0xb2c>
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	f7f6 fbe3 	bl	8000bb8 <__aeabi_d2uiz>
 800a3f2:	2801      	cmp	r0, #1
 800a3f4:	bf38      	it	cc
 800a3f6:	2001      	movcc	r0, #1
 800a3f8:	f7f6 f88c 	bl	8000514 <__aeabi_ui2d>
 800a3fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3fe:	4606      	mov	r6, r0
 800a400:	460f      	mov	r7, r1
 800a402:	bb23      	cbnz	r3, 800a44e <_strtod_l+0xb66>
 800a404:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a408:	9010      	str	r0, [sp, #64]	; 0x40
 800a40a:	9311      	str	r3, [sp, #68]	; 0x44
 800a40c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a410:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a418:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a41c:	1a9b      	subs	r3, r3, r2
 800a41e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a420:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a424:	eeb0 0a48 	vmov.f32	s0, s16
 800a428:	eef0 0a68 	vmov.f32	s1, s17
 800a42c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a430:	f7ff f8fc 	bl	800962c <__ulp>
 800a434:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a438:	ec53 2b10 	vmov	r2, r3, d0
 800a43c:	f7f6 f8e4 	bl	8000608 <__aeabi_dmul>
 800a440:	ec53 2b18 	vmov	r2, r3, d8
 800a444:	f7f5 ff2a 	bl	800029c <__adddf3>
 800a448:	4680      	mov	r8, r0
 800a44a:	4689      	mov	r9, r1
 800a44c:	e78d      	b.n	800a36a <_strtod_l+0xa82>
 800a44e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a452:	e7db      	b.n	800a40c <_strtod_l+0xb24>
 800a454:	a314      	add	r3, pc, #80	; (adr r3, 800a4a8 <_strtod_l+0xbc0>)
 800a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45a:	f7f6 fb47 	bl	8000aec <__aeabi_dcmplt>
 800a45e:	e7b3      	b.n	800a3c8 <_strtod_l+0xae0>
 800a460:	2300      	movs	r3, #0
 800a462:	930a      	str	r3, [sp, #40]	; 0x28
 800a464:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a468:	6013      	str	r3, [r2, #0]
 800a46a:	f7ff ba7c 	b.w	8009966 <_strtod_l+0x7e>
 800a46e:	2a65      	cmp	r2, #101	; 0x65
 800a470:	f43f ab75 	beq.w	8009b5e <_strtod_l+0x276>
 800a474:	2a45      	cmp	r2, #69	; 0x45
 800a476:	f43f ab72 	beq.w	8009b5e <_strtod_l+0x276>
 800a47a:	2301      	movs	r3, #1
 800a47c:	f7ff bbaa 	b.w	8009bd4 <_strtod_l+0x2ec>
 800a480:	00000000 	.word	0x00000000
 800a484:	bff00000 	.word	0xbff00000
 800a488:	00000000 	.word	0x00000000
 800a48c:	3ff00000 	.word	0x3ff00000
 800a490:	94a03595 	.word	0x94a03595
 800a494:	3fdfffff 	.word	0x3fdfffff
 800a498:	35afe535 	.word	0x35afe535
 800a49c:	3fe00000 	.word	0x3fe00000
 800a4a0:	ffc00000 	.word	0xffc00000
 800a4a4:	41dfffff 	.word	0x41dfffff
 800a4a8:	94a03595 	.word	0x94a03595
 800a4ac:	3fcfffff 	.word	0x3fcfffff
 800a4b0:	3ff00000 	.word	0x3ff00000
 800a4b4:	3fe00000 	.word	0x3fe00000
 800a4b8:	7ff00000 	.word	0x7ff00000
 800a4bc:	7fe00000 	.word	0x7fe00000
 800a4c0:	7c9fffff 	.word	0x7c9fffff
 800a4c4:	7fefffff 	.word	0x7fefffff

0800a4c8 <_strtod_r>:
 800a4c8:	4b01      	ldr	r3, [pc, #4]	; (800a4d0 <_strtod_r+0x8>)
 800a4ca:	f7ff ba0d 	b.w	80098e8 <_strtod_l>
 800a4ce:	bf00      	nop
 800a4d0:	2000006c 	.word	0x2000006c

0800a4d4 <_strtol_l.constprop.0>:
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4da:	d001      	beq.n	800a4e0 <_strtol_l.constprop.0+0xc>
 800a4dc:	2b24      	cmp	r3, #36	; 0x24
 800a4de:	d906      	bls.n	800a4ee <_strtol_l.constprop.0+0x1a>
 800a4e0:	f7fd fd7a 	bl	8007fd8 <__errno>
 800a4e4:	2316      	movs	r3, #22
 800a4e6:	6003      	str	r3, [r0, #0]
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a5d4 <_strtol_l.constprop.0+0x100>
 800a4f2:	460d      	mov	r5, r1
 800a4f4:	462e      	mov	r6, r5
 800a4f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4fa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a4fe:	f017 0708 	ands.w	r7, r7, #8
 800a502:	d1f7      	bne.n	800a4f4 <_strtol_l.constprop.0+0x20>
 800a504:	2c2d      	cmp	r4, #45	; 0x2d
 800a506:	d132      	bne.n	800a56e <_strtol_l.constprop.0+0x9a>
 800a508:	782c      	ldrb	r4, [r5, #0]
 800a50a:	2701      	movs	r7, #1
 800a50c:	1cb5      	adds	r5, r6, #2
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d05b      	beq.n	800a5ca <_strtol_l.constprop.0+0xf6>
 800a512:	2b10      	cmp	r3, #16
 800a514:	d109      	bne.n	800a52a <_strtol_l.constprop.0+0x56>
 800a516:	2c30      	cmp	r4, #48	; 0x30
 800a518:	d107      	bne.n	800a52a <_strtol_l.constprop.0+0x56>
 800a51a:	782c      	ldrb	r4, [r5, #0]
 800a51c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a520:	2c58      	cmp	r4, #88	; 0x58
 800a522:	d14d      	bne.n	800a5c0 <_strtol_l.constprop.0+0xec>
 800a524:	786c      	ldrb	r4, [r5, #1]
 800a526:	2310      	movs	r3, #16
 800a528:	3502      	adds	r5, #2
 800a52a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a52e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a532:	f04f 0e00 	mov.w	lr, #0
 800a536:	fbb8 f9f3 	udiv	r9, r8, r3
 800a53a:	4676      	mov	r6, lr
 800a53c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a540:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a544:	f1bc 0f09 	cmp.w	ip, #9
 800a548:	d816      	bhi.n	800a578 <_strtol_l.constprop.0+0xa4>
 800a54a:	4664      	mov	r4, ip
 800a54c:	42a3      	cmp	r3, r4
 800a54e:	dd24      	ble.n	800a59a <_strtol_l.constprop.0+0xc6>
 800a550:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a554:	d008      	beq.n	800a568 <_strtol_l.constprop.0+0x94>
 800a556:	45b1      	cmp	r9, r6
 800a558:	d31c      	bcc.n	800a594 <_strtol_l.constprop.0+0xc0>
 800a55a:	d101      	bne.n	800a560 <_strtol_l.constprop.0+0x8c>
 800a55c:	45a2      	cmp	sl, r4
 800a55e:	db19      	blt.n	800a594 <_strtol_l.constprop.0+0xc0>
 800a560:	fb06 4603 	mla	r6, r6, r3, r4
 800a564:	f04f 0e01 	mov.w	lr, #1
 800a568:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a56c:	e7e8      	b.n	800a540 <_strtol_l.constprop.0+0x6c>
 800a56e:	2c2b      	cmp	r4, #43	; 0x2b
 800a570:	bf04      	itt	eq
 800a572:	782c      	ldrbeq	r4, [r5, #0]
 800a574:	1cb5      	addeq	r5, r6, #2
 800a576:	e7ca      	b.n	800a50e <_strtol_l.constprop.0+0x3a>
 800a578:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a57c:	f1bc 0f19 	cmp.w	ip, #25
 800a580:	d801      	bhi.n	800a586 <_strtol_l.constprop.0+0xb2>
 800a582:	3c37      	subs	r4, #55	; 0x37
 800a584:	e7e2      	b.n	800a54c <_strtol_l.constprop.0+0x78>
 800a586:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a58a:	f1bc 0f19 	cmp.w	ip, #25
 800a58e:	d804      	bhi.n	800a59a <_strtol_l.constprop.0+0xc6>
 800a590:	3c57      	subs	r4, #87	; 0x57
 800a592:	e7db      	b.n	800a54c <_strtol_l.constprop.0+0x78>
 800a594:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800a598:	e7e6      	b.n	800a568 <_strtol_l.constprop.0+0x94>
 800a59a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a59e:	d105      	bne.n	800a5ac <_strtol_l.constprop.0+0xd8>
 800a5a0:	2322      	movs	r3, #34	; 0x22
 800a5a2:	6003      	str	r3, [r0, #0]
 800a5a4:	4646      	mov	r6, r8
 800a5a6:	b942      	cbnz	r2, 800a5ba <_strtol_l.constprop.0+0xe6>
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	e79e      	b.n	800a4ea <_strtol_l.constprop.0+0x16>
 800a5ac:	b107      	cbz	r7, 800a5b0 <_strtol_l.constprop.0+0xdc>
 800a5ae:	4276      	negs	r6, r6
 800a5b0:	2a00      	cmp	r2, #0
 800a5b2:	d0f9      	beq.n	800a5a8 <_strtol_l.constprop.0+0xd4>
 800a5b4:	f1be 0f00 	cmp.w	lr, #0
 800a5b8:	d000      	beq.n	800a5bc <_strtol_l.constprop.0+0xe8>
 800a5ba:	1e69      	subs	r1, r5, #1
 800a5bc:	6011      	str	r1, [r2, #0]
 800a5be:	e7f3      	b.n	800a5a8 <_strtol_l.constprop.0+0xd4>
 800a5c0:	2430      	movs	r4, #48	; 0x30
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1b1      	bne.n	800a52a <_strtol_l.constprop.0+0x56>
 800a5c6:	2308      	movs	r3, #8
 800a5c8:	e7af      	b.n	800a52a <_strtol_l.constprop.0+0x56>
 800a5ca:	2c30      	cmp	r4, #48	; 0x30
 800a5cc:	d0a5      	beq.n	800a51a <_strtol_l.constprop.0+0x46>
 800a5ce:	230a      	movs	r3, #10
 800a5d0:	e7ab      	b.n	800a52a <_strtol_l.constprop.0+0x56>
 800a5d2:	bf00      	nop
 800a5d4:	0800bb41 	.word	0x0800bb41

0800a5d8 <_strtol_r>:
 800a5d8:	f7ff bf7c 	b.w	800a4d4 <_strtol_l.constprop.0>

0800a5dc <__ssputs_r>:
 800a5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e0:	688e      	ldr	r6, [r1, #8]
 800a5e2:	461f      	mov	r7, r3
 800a5e4:	42be      	cmp	r6, r7
 800a5e6:	680b      	ldr	r3, [r1, #0]
 800a5e8:	4682      	mov	sl, r0
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	4690      	mov	r8, r2
 800a5ee:	d82c      	bhi.n	800a64a <__ssputs_r+0x6e>
 800a5f0:	898a      	ldrh	r2, [r1, #12]
 800a5f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5f6:	d026      	beq.n	800a646 <__ssputs_r+0x6a>
 800a5f8:	6965      	ldr	r5, [r4, #20]
 800a5fa:	6909      	ldr	r1, [r1, #16]
 800a5fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a600:	eba3 0901 	sub.w	r9, r3, r1
 800a604:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a608:	1c7b      	adds	r3, r7, #1
 800a60a:	444b      	add	r3, r9
 800a60c:	106d      	asrs	r5, r5, #1
 800a60e:	429d      	cmp	r5, r3
 800a610:	bf38      	it	cc
 800a612:	461d      	movcc	r5, r3
 800a614:	0553      	lsls	r3, r2, #21
 800a616:	d527      	bpl.n	800a668 <__ssputs_r+0x8c>
 800a618:	4629      	mov	r1, r5
 800a61a:	f7fe fc0f 	bl	8008e3c <_malloc_r>
 800a61e:	4606      	mov	r6, r0
 800a620:	b360      	cbz	r0, 800a67c <__ssputs_r+0xa0>
 800a622:	6921      	ldr	r1, [r4, #16]
 800a624:	464a      	mov	r2, r9
 800a626:	f7fd fd04 	bl	8008032 <memcpy>
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a634:	81a3      	strh	r3, [r4, #12]
 800a636:	6126      	str	r6, [r4, #16]
 800a638:	6165      	str	r5, [r4, #20]
 800a63a:	444e      	add	r6, r9
 800a63c:	eba5 0509 	sub.w	r5, r5, r9
 800a640:	6026      	str	r6, [r4, #0]
 800a642:	60a5      	str	r5, [r4, #8]
 800a644:	463e      	mov	r6, r7
 800a646:	42be      	cmp	r6, r7
 800a648:	d900      	bls.n	800a64c <__ssputs_r+0x70>
 800a64a:	463e      	mov	r6, r7
 800a64c:	6820      	ldr	r0, [r4, #0]
 800a64e:	4632      	mov	r2, r6
 800a650:	4641      	mov	r1, r8
 800a652:	f000 f9c9 	bl	800a9e8 <memmove>
 800a656:	68a3      	ldr	r3, [r4, #8]
 800a658:	1b9b      	subs	r3, r3, r6
 800a65a:	60a3      	str	r3, [r4, #8]
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	4433      	add	r3, r6
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	2000      	movs	r0, #0
 800a664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a668:	462a      	mov	r2, r5
 800a66a:	f000 fd9e 	bl	800b1aa <_realloc_r>
 800a66e:	4606      	mov	r6, r0
 800a670:	2800      	cmp	r0, #0
 800a672:	d1e0      	bne.n	800a636 <__ssputs_r+0x5a>
 800a674:	6921      	ldr	r1, [r4, #16]
 800a676:	4650      	mov	r0, sl
 800a678:	f7fe fb6c 	bl	8008d54 <_free_r>
 800a67c:	230c      	movs	r3, #12
 800a67e:	f8ca 3000 	str.w	r3, [sl]
 800a682:	89a3      	ldrh	r3, [r4, #12]
 800a684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a688:	81a3      	strh	r3, [r4, #12]
 800a68a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a68e:	e7e9      	b.n	800a664 <__ssputs_r+0x88>

0800a690 <_svfiprintf_r>:
 800a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a694:	4698      	mov	r8, r3
 800a696:	898b      	ldrh	r3, [r1, #12]
 800a698:	061b      	lsls	r3, r3, #24
 800a69a:	b09d      	sub	sp, #116	; 0x74
 800a69c:	4607      	mov	r7, r0
 800a69e:	460d      	mov	r5, r1
 800a6a0:	4614      	mov	r4, r2
 800a6a2:	d50e      	bpl.n	800a6c2 <_svfiprintf_r+0x32>
 800a6a4:	690b      	ldr	r3, [r1, #16]
 800a6a6:	b963      	cbnz	r3, 800a6c2 <_svfiprintf_r+0x32>
 800a6a8:	2140      	movs	r1, #64	; 0x40
 800a6aa:	f7fe fbc7 	bl	8008e3c <_malloc_r>
 800a6ae:	6028      	str	r0, [r5, #0]
 800a6b0:	6128      	str	r0, [r5, #16]
 800a6b2:	b920      	cbnz	r0, 800a6be <_svfiprintf_r+0x2e>
 800a6b4:	230c      	movs	r3, #12
 800a6b6:	603b      	str	r3, [r7, #0]
 800a6b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6bc:	e0d0      	b.n	800a860 <_svfiprintf_r+0x1d0>
 800a6be:	2340      	movs	r3, #64	; 0x40
 800a6c0:	616b      	str	r3, [r5, #20]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c6:	2320      	movs	r3, #32
 800a6c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6d0:	2330      	movs	r3, #48	; 0x30
 800a6d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a878 <_svfiprintf_r+0x1e8>
 800a6d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6da:	f04f 0901 	mov.w	r9, #1
 800a6de:	4623      	mov	r3, r4
 800a6e0:	469a      	mov	sl, r3
 800a6e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6e6:	b10a      	cbz	r2, 800a6ec <_svfiprintf_r+0x5c>
 800a6e8:	2a25      	cmp	r2, #37	; 0x25
 800a6ea:	d1f9      	bne.n	800a6e0 <_svfiprintf_r+0x50>
 800a6ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a6f0:	d00b      	beq.n	800a70a <_svfiprintf_r+0x7a>
 800a6f2:	465b      	mov	r3, fp
 800a6f4:	4622      	mov	r2, r4
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	f7ff ff6f 	bl	800a5dc <__ssputs_r>
 800a6fe:	3001      	adds	r0, #1
 800a700:	f000 80a9 	beq.w	800a856 <_svfiprintf_r+0x1c6>
 800a704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a706:	445a      	add	r2, fp
 800a708:	9209      	str	r2, [sp, #36]	; 0x24
 800a70a:	f89a 3000 	ldrb.w	r3, [sl]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f000 80a1 	beq.w	800a856 <_svfiprintf_r+0x1c6>
 800a714:	2300      	movs	r3, #0
 800a716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a71a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a71e:	f10a 0a01 	add.w	sl, sl, #1
 800a722:	9304      	str	r3, [sp, #16]
 800a724:	9307      	str	r3, [sp, #28]
 800a726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a72a:	931a      	str	r3, [sp, #104]	; 0x68
 800a72c:	4654      	mov	r4, sl
 800a72e:	2205      	movs	r2, #5
 800a730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a734:	4850      	ldr	r0, [pc, #320]	; (800a878 <_svfiprintf_r+0x1e8>)
 800a736:	f7f5 fd53 	bl	80001e0 <memchr>
 800a73a:	9a04      	ldr	r2, [sp, #16]
 800a73c:	b9d8      	cbnz	r0, 800a776 <_svfiprintf_r+0xe6>
 800a73e:	06d0      	lsls	r0, r2, #27
 800a740:	bf44      	itt	mi
 800a742:	2320      	movmi	r3, #32
 800a744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a748:	0711      	lsls	r1, r2, #28
 800a74a:	bf44      	itt	mi
 800a74c:	232b      	movmi	r3, #43	; 0x2b
 800a74e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a752:	f89a 3000 	ldrb.w	r3, [sl]
 800a756:	2b2a      	cmp	r3, #42	; 0x2a
 800a758:	d015      	beq.n	800a786 <_svfiprintf_r+0xf6>
 800a75a:	9a07      	ldr	r2, [sp, #28]
 800a75c:	4654      	mov	r4, sl
 800a75e:	2000      	movs	r0, #0
 800a760:	f04f 0c0a 	mov.w	ip, #10
 800a764:	4621      	mov	r1, r4
 800a766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a76a:	3b30      	subs	r3, #48	; 0x30
 800a76c:	2b09      	cmp	r3, #9
 800a76e:	d94d      	bls.n	800a80c <_svfiprintf_r+0x17c>
 800a770:	b1b0      	cbz	r0, 800a7a0 <_svfiprintf_r+0x110>
 800a772:	9207      	str	r2, [sp, #28]
 800a774:	e014      	b.n	800a7a0 <_svfiprintf_r+0x110>
 800a776:	eba0 0308 	sub.w	r3, r0, r8
 800a77a:	fa09 f303 	lsl.w	r3, r9, r3
 800a77e:	4313      	orrs	r3, r2
 800a780:	9304      	str	r3, [sp, #16]
 800a782:	46a2      	mov	sl, r4
 800a784:	e7d2      	b.n	800a72c <_svfiprintf_r+0x9c>
 800a786:	9b03      	ldr	r3, [sp, #12]
 800a788:	1d19      	adds	r1, r3, #4
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	9103      	str	r1, [sp, #12]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	bfbb      	ittet	lt
 800a792:	425b      	neglt	r3, r3
 800a794:	f042 0202 	orrlt.w	r2, r2, #2
 800a798:	9307      	strge	r3, [sp, #28]
 800a79a:	9307      	strlt	r3, [sp, #28]
 800a79c:	bfb8      	it	lt
 800a79e:	9204      	strlt	r2, [sp, #16]
 800a7a0:	7823      	ldrb	r3, [r4, #0]
 800a7a2:	2b2e      	cmp	r3, #46	; 0x2e
 800a7a4:	d10c      	bne.n	800a7c0 <_svfiprintf_r+0x130>
 800a7a6:	7863      	ldrb	r3, [r4, #1]
 800a7a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7aa:	d134      	bne.n	800a816 <_svfiprintf_r+0x186>
 800a7ac:	9b03      	ldr	r3, [sp, #12]
 800a7ae:	1d1a      	adds	r2, r3, #4
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	9203      	str	r2, [sp, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	bfb8      	it	lt
 800a7b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a7bc:	3402      	adds	r4, #2
 800a7be:	9305      	str	r3, [sp, #20]
 800a7c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a888 <_svfiprintf_r+0x1f8>
 800a7c4:	7821      	ldrb	r1, [r4, #0]
 800a7c6:	2203      	movs	r2, #3
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	f7f5 fd09 	bl	80001e0 <memchr>
 800a7ce:	b138      	cbz	r0, 800a7e0 <_svfiprintf_r+0x150>
 800a7d0:	9b04      	ldr	r3, [sp, #16]
 800a7d2:	eba0 000a 	sub.w	r0, r0, sl
 800a7d6:	2240      	movs	r2, #64	; 0x40
 800a7d8:	4082      	lsls	r2, r0
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	3401      	adds	r4, #1
 800a7de:	9304      	str	r3, [sp, #16]
 800a7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7e4:	4825      	ldr	r0, [pc, #148]	; (800a87c <_svfiprintf_r+0x1ec>)
 800a7e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7ea:	2206      	movs	r2, #6
 800a7ec:	f7f5 fcf8 	bl	80001e0 <memchr>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d038      	beq.n	800a866 <_svfiprintf_r+0x1d6>
 800a7f4:	4b22      	ldr	r3, [pc, #136]	; (800a880 <_svfiprintf_r+0x1f0>)
 800a7f6:	bb1b      	cbnz	r3, 800a840 <_svfiprintf_r+0x1b0>
 800a7f8:	9b03      	ldr	r3, [sp, #12]
 800a7fa:	3307      	adds	r3, #7
 800a7fc:	f023 0307 	bic.w	r3, r3, #7
 800a800:	3308      	adds	r3, #8
 800a802:	9303      	str	r3, [sp, #12]
 800a804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a806:	4433      	add	r3, r6
 800a808:	9309      	str	r3, [sp, #36]	; 0x24
 800a80a:	e768      	b.n	800a6de <_svfiprintf_r+0x4e>
 800a80c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a810:	460c      	mov	r4, r1
 800a812:	2001      	movs	r0, #1
 800a814:	e7a6      	b.n	800a764 <_svfiprintf_r+0xd4>
 800a816:	2300      	movs	r3, #0
 800a818:	3401      	adds	r4, #1
 800a81a:	9305      	str	r3, [sp, #20]
 800a81c:	4619      	mov	r1, r3
 800a81e:	f04f 0c0a 	mov.w	ip, #10
 800a822:	4620      	mov	r0, r4
 800a824:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a828:	3a30      	subs	r2, #48	; 0x30
 800a82a:	2a09      	cmp	r2, #9
 800a82c:	d903      	bls.n	800a836 <_svfiprintf_r+0x1a6>
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d0c6      	beq.n	800a7c0 <_svfiprintf_r+0x130>
 800a832:	9105      	str	r1, [sp, #20]
 800a834:	e7c4      	b.n	800a7c0 <_svfiprintf_r+0x130>
 800a836:	fb0c 2101 	mla	r1, ip, r1, r2
 800a83a:	4604      	mov	r4, r0
 800a83c:	2301      	movs	r3, #1
 800a83e:	e7f0      	b.n	800a822 <_svfiprintf_r+0x192>
 800a840:	ab03      	add	r3, sp, #12
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	462a      	mov	r2, r5
 800a846:	4b0f      	ldr	r3, [pc, #60]	; (800a884 <_svfiprintf_r+0x1f4>)
 800a848:	a904      	add	r1, sp, #16
 800a84a:	4638      	mov	r0, r7
 800a84c:	f7fc fc76 	bl	800713c <_printf_float>
 800a850:	1c42      	adds	r2, r0, #1
 800a852:	4606      	mov	r6, r0
 800a854:	d1d6      	bne.n	800a804 <_svfiprintf_r+0x174>
 800a856:	89ab      	ldrh	r3, [r5, #12]
 800a858:	065b      	lsls	r3, r3, #25
 800a85a:	f53f af2d 	bmi.w	800a6b8 <_svfiprintf_r+0x28>
 800a85e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a860:	b01d      	add	sp, #116	; 0x74
 800a862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a866:	ab03      	add	r3, sp, #12
 800a868:	9300      	str	r3, [sp, #0]
 800a86a:	462a      	mov	r2, r5
 800a86c:	4b05      	ldr	r3, [pc, #20]	; (800a884 <_svfiprintf_r+0x1f4>)
 800a86e:	a904      	add	r1, sp, #16
 800a870:	4638      	mov	r0, r7
 800a872:	f7fc ff07 	bl	8007684 <_printf_i>
 800a876:	e7eb      	b.n	800a850 <_svfiprintf_r+0x1c0>
 800a878:	0800bc41 	.word	0x0800bc41
 800a87c:	0800bc4b 	.word	0x0800bc4b
 800a880:	0800713d 	.word	0x0800713d
 800a884:	0800a5dd 	.word	0x0800a5dd
 800a888:	0800bc47 	.word	0x0800bc47

0800a88c <__sflush_r>:
 800a88c:	898a      	ldrh	r2, [r1, #12]
 800a88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a892:	4605      	mov	r5, r0
 800a894:	0710      	lsls	r0, r2, #28
 800a896:	460c      	mov	r4, r1
 800a898:	d458      	bmi.n	800a94c <__sflush_r+0xc0>
 800a89a:	684b      	ldr	r3, [r1, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	dc05      	bgt.n	800a8ac <__sflush_r+0x20>
 800a8a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	dc02      	bgt.n	800a8ac <__sflush_r+0x20>
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8ae:	2e00      	cmp	r6, #0
 800a8b0:	d0f9      	beq.n	800a8a6 <__sflush_r+0x1a>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8b8:	682f      	ldr	r7, [r5, #0]
 800a8ba:	6a21      	ldr	r1, [r4, #32]
 800a8bc:	602b      	str	r3, [r5, #0]
 800a8be:	d032      	beq.n	800a926 <__sflush_r+0x9a>
 800a8c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	075a      	lsls	r2, r3, #29
 800a8c6:	d505      	bpl.n	800a8d4 <__sflush_r+0x48>
 800a8c8:	6863      	ldr	r3, [r4, #4]
 800a8ca:	1ac0      	subs	r0, r0, r3
 800a8cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8ce:	b10b      	cbz	r3, 800a8d4 <__sflush_r+0x48>
 800a8d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8d2:	1ac0      	subs	r0, r0, r3
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8da:	6a21      	ldr	r1, [r4, #32]
 800a8dc:	4628      	mov	r0, r5
 800a8de:	47b0      	blx	r6
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	d106      	bne.n	800a8f4 <__sflush_r+0x68>
 800a8e6:	6829      	ldr	r1, [r5, #0]
 800a8e8:	291d      	cmp	r1, #29
 800a8ea:	d82b      	bhi.n	800a944 <__sflush_r+0xb8>
 800a8ec:	4a29      	ldr	r2, [pc, #164]	; (800a994 <__sflush_r+0x108>)
 800a8ee:	410a      	asrs	r2, r1
 800a8f0:	07d6      	lsls	r6, r2, #31
 800a8f2:	d427      	bmi.n	800a944 <__sflush_r+0xb8>
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	6062      	str	r2, [r4, #4]
 800a8f8:	04d9      	lsls	r1, r3, #19
 800a8fa:	6922      	ldr	r2, [r4, #16]
 800a8fc:	6022      	str	r2, [r4, #0]
 800a8fe:	d504      	bpl.n	800a90a <__sflush_r+0x7e>
 800a900:	1c42      	adds	r2, r0, #1
 800a902:	d101      	bne.n	800a908 <__sflush_r+0x7c>
 800a904:	682b      	ldr	r3, [r5, #0]
 800a906:	b903      	cbnz	r3, 800a90a <__sflush_r+0x7e>
 800a908:	6560      	str	r0, [r4, #84]	; 0x54
 800a90a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a90c:	602f      	str	r7, [r5, #0]
 800a90e:	2900      	cmp	r1, #0
 800a910:	d0c9      	beq.n	800a8a6 <__sflush_r+0x1a>
 800a912:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a916:	4299      	cmp	r1, r3
 800a918:	d002      	beq.n	800a920 <__sflush_r+0x94>
 800a91a:	4628      	mov	r0, r5
 800a91c:	f7fe fa1a 	bl	8008d54 <_free_r>
 800a920:	2000      	movs	r0, #0
 800a922:	6360      	str	r0, [r4, #52]	; 0x34
 800a924:	e7c0      	b.n	800a8a8 <__sflush_r+0x1c>
 800a926:	2301      	movs	r3, #1
 800a928:	4628      	mov	r0, r5
 800a92a:	47b0      	blx	r6
 800a92c:	1c41      	adds	r1, r0, #1
 800a92e:	d1c8      	bne.n	800a8c2 <__sflush_r+0x36>
 800a930:	682b      	ldr	r3, [r5, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0c5      	beq.n	800a8c2 <__sflush_r+0x36>
 800a936:	2b1d      	cmp	r3, #29
 800a938:	d001      	beq.n	800a93e <__sflush_r+0xb2>
 800a93a:	2b16      	cmp	r3, #22
 800a93c:	d101      	bne.n	800a942 <__sflush_r+0xb6>
 800a93e:	602f      	str	r7, [r5, #0]
 800a940:	e7b1      	b.n	800a8a6 <__sflush_r+0x1a>
 800a942:	89a3      	ldrh	r3, [r4, #12]
 800a944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	e7ad      	b.n	800a8a8 <__sflush_r+0x1c>
 800a94c:	690f      	ldr	r7, [r1, #16]
 800a94e:	2f00      	cmp	r7, #0
 800a950:	d0a9      	beq.n	800a8a6 <__sflush_r+0x1a>
 800a952:	0793      	lsls	r3, r2, #30
 800a954:	680e      	ldr	r6, [r1, #0]
 800a956:	bf08      	it	eq
 800a958:	694b      	ldreq	r3, [r1, #20]
 800a95a:	600f      	str	r7, [r1, #0]
 800a95c:	bf18      	it	ne
 800a95e:	2300      	movne	r3, #0
 800a960:	eba6 0807 	sub.w	r8, r6, r7
 800a964:	608b      	str	r3, [r1, #8]
 800a966:	f1b8 0f00 	cmp.w	r8, #0
 800a96a:	dd9c      	ble.n	800a8a6 <__sflush_r+0x1a>
 800a96c:	6a21      	ldr	r1, [r4, #32]
 800a96e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a970:	4643      	mov	r3, r8
 800a972:	463a      	mov	r2, r7
 800a974:	4628      	mov	r0, r5
 800a976:	47b0      	blx	r6
 800a978:	2800      	cmp	r0, #0
 800a97a:	dc06      	bgt.n	800a98a <__sflush_r+0xfe>
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a982:	81a3      	strh	r3, [r4, #12]
 800a984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a988:	e78e      	b.n	800a8a8 <__sflush_r+0x1c>
 800a98a:	4407      	add	r7, r0
 800a98c:	eba8 0800 	sub.w	r8, r8, r0
 800a990:	e7e9      	b.n	800a966 <__sflush_r+0xda>
 800a992:	bf00      	nop
 800a994:	dfbffffe 	.word	0xdfbffffe

0800a998 <_fflush_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	690b      	ldr	r3, [r1, #16]
 800a99c:	4605      	mov	r5, r0
 800a99e:	460c      	mov	r4, r1
 800a9a0:	b913      	cbnz	r3, 800a9a8 <_fflush_r+0x10>
 800a9a2:	2500      	movs	r5, #0
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	b118      	cbz	r0, 800a9b2 <_fflush_r+0x1a>
 800a9aa:	6a03      	ldr	r3, [r0, #32]
 800a9ac:	b90b      	cbnz	r3, 800a9b2 <_fflush_r+0x1a>
 800a9ae:	f7fd fa27 	bl	8007e00 <__sinit>
 800a9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d0f3      	beq.n	800a9a2 <_fflush_r+0xa>
 800a9ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9bc:	07d0      	lsls	r0, r2, #31
 800a9be:	d404      	bmi.n	800a9ca <_fflush_r+0x32>
 800a9c0:	0599      	lsls	r1, r3, #22
 800a9c2:	d402      	bmi.n	800a9ca <_fflush_r+0x32>
 800a9c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9c6:	f7fd fb32 	bl	800802e <__retarget_lock_acquire_recursive>
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	f7ff ff5d 	bl	800a88c <__sflush_r>
 800a9d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9d4:	07da      	lsls	r2, r3, #31
 800a9d6:	4605      	mov	r5, r0
 800a9d8:	d4e4      	bmi.n	800a9a4 <_fflush_r+0xc>
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	059b      	lsls	r3, r3, #22
 800a9de:	d4e1      	bmi.n	800a9a4 <_fflush_r+0xc>
 800a9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9e2:	f7fd fb25 	bl	8008030 <__retarget_lock_release_recursive>
 800a9e6:	e7dd      	b.n	800a9a4 <_fflush_r+0xc>

0800a9e8 <memmove>:
 800a9e8:	4288      	cmp	r0, r1
 800a9ea:	b510      	push	{r4, lr}
 800a9ec:	eb01 0402 	add.w	r4, r1, r2
 800a9f0:	d902      	bls.n	800a9f8 <memmove+0x10>
 800a9f2:	4284      	cmp	r4, r0
 800a9f4:	4623      	mov	r3, r4
 800a9f6:	d807      	bhi.n	800aa08 <memmove+0x20>
 800a9f8:	1e43      	subs	r3, r0, #1
 800a9fa:	42a1      	cmp	r1, r4
 800a9fc:	d008      	beq.n	800aa10 <memmove+0x28>
 800a9fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa06:	e7f8      	b.n	800a9fa <memmove+0x12>
 800aa08:	4402      	add	r2, r0
 800aa0a:	4601      	mov	r1, r0
 800aa0c:	428a      	cmp	r2, r1
 800aa0e:	d100      	bne.n	800aa12 <memmove+0x2a>
 800aa10:	bd10      	pop	{r4, pc}
 800aa12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa1a:	e7f7      	b.n	800aa0c <memmove+0x24>

0800aa1c <strncmp>:
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	b16a      	cbz	r2, 800aa3c <strncmp+0x20>
 800aa20:	3901      	subs	r1, #1
 800aa22:	1884      	adds	r4, r0, r2
 800aa24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d103      	bne.n	800aa38 <strncmp+0x1c>
 800aa30:	42a0      	cmp	r0, r4
 800aa32:	d001      	beq.n	800aa38 <strncmp+0x1c>
 800aa34:	2a00      	cmp	r2, #0
 800aa36:	d1f5      	bne.n	800aa24 <strncmp+0x8>
 800aa38:	1ad0      	subs	r0, r2, r3
 800aa3a:	bd10      	pop	{r4, pc}
 800aa3c:	4610      	mov	r0, r2
 800aa3e:	e7fc      	b.n	800aa3a <strncmp+0x1e>

0800aa40 <_sbrk_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	4d06      	ldr	r5, [pc, #24]	; (800aa5c <_sbrk_r+0x1c>)
 800aa44:	2300      	movs	r3, #0
 800aa46:	4604      	mov	r4, r0
 800aa48:	4608      	mov	r0, r1
 800aa4a:	602b      	str	r3, [r5, #0]
 800aa4c:	f7f6 fe56 	bl	80016fc <_sbrk>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d102      	bne.n	800aa5a <_sbrk_r+0x1a>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	b103      	cbz	r3, 800aa5a <_sbrk_r+0x1a>
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	20004d28 	.word	0x20004d28

0800aa60 <nan>:
 800aa60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aa68 <nan+0x8>
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	00000000 	.word	0x00000000
 800aa6c:	7ff80000 	.word	0x7ff80000

0800aa70 <__assert_func>:
 800aa70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa72:	4614      	mov	r4, r2
 800aa74:	461a      	mov	r2, r3
 800aa76:	4b09      	ldr	r3, [pc, #36]	; (800aa9c <__assert_func+0x2c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4605      	mov	r5, r0
 800aa7c:	68d8      	ldr	r0, [r3, #12]
 800aa7e:	b14c      	cbz	r4, 800aa94 <__assert_func+0x24>
 800aa80:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <__assert_func+0x30>)
 800aa82:	9100      	str	r1, [sp, #0]
 800aa84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa88:	4906      	ldr	r1, [pc, #24]	; (800aaa4 <__assert_func+0x34>)
 800aa8a:	462b      	mov	r3, r5
 800aa8c:	f000 fbca 	bl	800b224 <fiprintf>
 800aa90:	f000 fbda 	bl	800b248 <abort>
 800aa94:	4b04      	ldr	r3, [pc, #16]	; (800aaa8 <__assert_func+0x38>)
 800aa96:	461c      	mov	r4, r3
 800aa98:	e7f3      	b.n	800aa82 <__assert_func+0x12>
 800aa9a:	bf00      	nop
 800aa9c:	20000068 	.word	0x20000068
 800aaa0:	0800bc5a 	.word	0x0800bc5a
 800aaa4:	0800bc67 	.word	0x0800bc67
 800aaa8:	0800bc95 	.word	0x0800bc95

0800aaac <_calloc_r>:
 800aaac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaae:	fba1 2402 	umull	r2, r4, r1, r2
 800aab2:	b94c      	cbnz	r4, 800aac8 <_calloc_r+0x1c>
 800aab4:	4611      	mov	r1, r2
 800aab6:	9201      	str	r2, [sp, #4]
 800aab8:	f7fe f9c0 	bl	8008e3c <_malloc_r>
 800aabc:	9a01      	ldr	r2, [sp, #4]
 800aabe:	4605      	mov	r5, r0
 800aac0:	b930      	cbnz	r0, 800aad0 <_calloc_r+0x24>
 800aac2:	4628      	mov	r0, r5
 800aac4:	b003      	add	sp, #12
 800aac6:	bd30      	pop	{r4, r5, pc}
 800aac8:	220c      	movs	r2, #12
 800aaca:	6002      	str	r2, [r0, #0]
 800aacc:	2500      	movs	r5, #0
 800aace:	e7f8      	b.n	800aac2 <_calloc_r+0x16>
 800aad0:	4621      	mov	r1, r4
 800aad2:	f7fd fa2e 	bl	8007f32 <memset>
 800aad6:	e7f4      	b.n	800aac2 <_calloc_r+0x16>

0800aad8 <rshift>:
 800aad8:	6903      	ldr	r3, [r0, #16]
 800aada:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aade:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aae2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aae6:	f100 0414 	add.w	r4, r0, #20
 800aaea:	dd45      	ble.n	800ab78 <rshift+0xa0>
 800aaec:	f011 011f 	ands.w	r1, r1, #31
 800aaf0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aaf4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aaf8:	d10c      	bne.n	800ab14 <rshift+0x3c>
 800aafa:	f100 0710 	add.w	r7, r0, #16
 800aafe:	4629      	mov	r1, r5
 800ab00:	42b1      	cmp	r1, r6
 800ab02:	d334      	bcc.n	800ab6e <rshift+0x96>
 800ab04:	1a9b      	subs	r3, r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	1eea      	subs	r2, r5, #3
 800ab0a:	4296      	cmp	r6, r2
 800ab0c:	bf38      	it	cc
 800ab0e:	2300      	movcc	r3, #0
 800ab10:	4423      	add	r3, r4
 800ab12:	e015      	b.n	800ab40 <rshift+0x68>
 800ab14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab18:	f1c1 0820 	rsb	r8, r1, #32
 800ab1c:	40cf      	lsrs	r7, r1
 800ab1e:	f105 0e04 	add.w	lr, r5, #4
 800ab22:	46a1      	mov	r9, r4
 800ab24:	4576      	cmp	r6, lr
 800ab26:	46f4      	mov	ip, lr
 800ab28:	d815      	bhi.n	800ab56 <rshift+0x7e>
 800ab2a:	1a9a      	subs	r2, r3, r2
 800ab2c:	0092      	lsls	r2, r2, #2
 800ab2e:	3a04      	subs	r2, #4
 800ab30:	3501      	adds	r5, #1
 800ab32:	42ae      	cmp	r6, r5
 800ab34:	bf38      	it	cc
 800ab36:	2200      	movcc	r2, #0
 800ab38:	18a3      	adds	r3, r4, r2
 800ab3a:	50a7      	str	r7, [r4, r2]
 800ab3c:	b107      	cbz	r7, 800ab40 <rshift+0x68>
 800ab3e:	3304      	adds	r3, #4
 800ab40:	1b1a      	subs	r2, r3, r4
 800ab42:	42a3      	cmp	r3, r4
 800ab44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab48:	bf08      	it	eq
 800ab4a:	2300      	moveq	r3, #0
 800ab4c:	6102      	str	r2, [r0, #16]
 800ab4e:	bf08      	it	eq
 800ab50:	6143      	streq	r3, [r0, #20]
 800ab52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab56:	f8dc c000 	ldr.w	ip, [ip]
 800ab5a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab5e:	ea4c 0707 	orr.w	r7, ip, r7
 800ab62:	f849 7b04 	str.w	r7, [r9], #4
 800ab66:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab6a:	40cf      	lsrs	r7, r1
 800ab6c:	e7da      	b.n	800ab24 <rshift+0x4c>
 800ab6e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab72:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab76:	e7c3      	b.n	800ab00 <rshift+0x28>
 800ab78:	4623      	mov	r3, r4
 800ab7a:	e7e1      	b.n	800ab40 <rshift+0x68>

0800ab7c <__hexdig_fun>:
 800ab7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab80:	2b09      	cmp	r3, #9
 800ab82:	d802      	bhi.n	800ab8a <__hexdig_fun+0xe>
 800ab84:	3820      	subs	r0, #32
 800ab86:	b2c0      	uxtb	r0, r0
 800ab88:	4770      	bx	lr
 800ab8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab8e:	2b05      	cmp	r3, #5
 800ab90:	d801      	bhi.n	800ab96 <__hexdig_fun+0x1a>
 800ab92:	3847      	subs	r0, #71	; 0x47
 800ab94:	e7f7      	b.n	800ab86 <__hexdig_fun+0xa>
 800ab96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ab9a:	2b05      	cmp	r3, #5
 800ab9c:	d801      	bhi.n	800aba2 <__hexdig_fun+0x26>
 800ab9e:	3827      	subs	r0, #39	; 0x27
 800aba0:	e7f1      	b.n	800ab86 <__hexdig_fun+0xa>
 800aba2:	2000      	movs	r0, #0
 800aba4:	4770      	bx	lr
	...

0800aba8 <__gethex>:
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	4617      	mov	r7, r2
 800abae:	680a      	ldr	r2, [r1, #0]
 800abb0:	b085      	sub	sp, #20
 800abb2:	f102 0b02 	add.w	fp, r2, #2
 800abb6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800abba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800abbe:	4681      	mov	r9, r0
 800abc0:	468a      	mov	sl, r1
 800abc2:	9302      	str	r3, [sp, #8]
 800abc4:	32fe      	adds	r2, #254	; 0xfe
 800abc6:	eb02 030b 	add.w	r3, r2, fp
 800abca:	46d8      	mov	r8, fp
 800abcc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800abd0:	9301      	str	r3, [sp, #4]
 800abd2:	2830      	cmp	r0, #48	; 0x30
 800abd4:	d0f7      	beq.n	800abc6 <__gethex+0x1e>
 800abd6:	f7ff ffd1 	bl	800ab7c <__hexdig_fun>
 800abda:	4604      	mov	r4, r0
 800abdc:	2800      	cmp	r0, #0
 800abde:	d138      	bne.n	800ac52 <__gethex+0xaa>
 800abe0:	49a7      	ldr	r1, [pc, #668]	; (800ae80 <__gethex+0x2d8>)
 800abe2:	2201      	movs	r2, #1
 800abe4:	4640      	mov	r0, r8
 800abe6:	f7ff ff19 	bl	800aa1c <strncmp>
 800abea:	4606      	mov	r6, r0
 800abec:	2800      	cmp	r0, #0
 800abee:	d169      	bne.n	800acc4 <__gethex+0x11c>
 800abf0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800abf4:	465d      	mov	r5, fp
 800abf6:	f7ff ffc1 	bl	800ab7c <__hexdig_fun>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d064      	beq.n	800acc8 <__gethex+0x120>
 800abfe:	465a      	mov	r2, fp
 800ac00:	7810      	ldrb	r0, [r2, #0]
 800ac02:	2830      	cmp	r0, #48	; 0x30
 800ac04:	4690      	mov	r8, r2
 800ac06:	f102 0201 	add.w	r2, r2, #1
 800ac0a:	d0f9      	beq.n	800ac00 <__gethex+0x58>
 800ac0c:	f7ff ffb6 	bl	800ab7c <__hexdig_fun>
 800ac10:	2301      	movs	r3, #1
 800ac12:	fab0 f480 	clz	r4, r0
 800ac16:	0964      	lsrs	r4, r4, #5
 800ac18:	465e      	mov	r6, fp
 800ac1a:	9301      	str	r3, [sp, #4]
 800ac1c:	4642      	mov	r2, r8
 800ac1e:	4615      	mov	r5, r2
 800ac20:	3201      	adds	r2, #1
 800ac22:	7828      	ldrb	r0, [r5, #0]
 800ac24:	f7ff ffaa 	bl	800ab7c <__hexdig_fun>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d1f8      	bne.n	800ac1e <__gethex+0x76>
 800ac2c:	4994      	ldr	r1, [pc, #592]	; (800ae80 <__gethex+0x2d8>)
 800ac2e:	2201      	movs	r2, #1
 800ac30:	4628      	mov	r0, r5
 800ac32:	f7ff fef3 	bl	800aa1c <strncmp>
 800ac36:	b978      	cbnz	r0, 800ac58 <__gethex+0xb0>
 800ac38:	b946      	cbnz	r6, 800ac4c <__gethex+0xa4>
 800ac3a:	1c6e      	adds	r6, r5, #1
 800ac3c:	4632      	mov	r2, r6
 800ac3e:	4615      	mov	r5, r2
 800ac40:	3201      	adds	r2, #1
 800ac42:	7828      	ldrb	r0, [r5, #0]
 800ac44:	f7ff ff9a 	bl	800ab7c <__hexdig_fun>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d1f8      	bne.n	800ac3e <__gethex+0x96>
 800ac4c:	1b73      	subs	r3, r6, r5
 800ac4e:	009e      	lsls	r6, r3, #2
 800ac50:	e004      	b.n	800ac5c <__gethex+0xb4>
 800ac52:	2400      	movs	r4, #0
 800ac54:	4626      	mov	r6, r4
 800ac56:	e7e1      	b.n	800ac1c <__gethex+0x74>
 800ac58:	2e00      	cmp	r6, #0
 800ac5a:	d1f7      	bne.n	800ac4c <__gethex+0xa4>
 800ac5c:	782b      	ldrb	r3, [r5, #0]
 800ac5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac62:	2b50      	cmp	r3, #80	; 0x50
 800ac64:	d13d      	bne.n	800ace2 <__gethex+0x13a>
 800ac66:	786b      	ldrb	r3, [r5, #1]
 800ac68:	2b2b      	cmp	r3, #43	; 0x2b
 800ac6a:	d02f      	beq.n	800accc <__gethex+0x124>
 800ac6c:	2b2d      	cmp	r3, #45	; 0x2d
 800ac6e:	d031      	beq.n	800acd4 <__gethex+0x12c>
 800ac70:	1c69      	adds	r1, r5, #1
 800ac72:	f04f 0b00 	mov.w	fp, #0
 800ac76:	7808      	ldrb	r0, [r1, #0]
 800ac78:	f7ff ff80 	bl	800ab7c <__hexdig_fun>
 800ac7c:	1e42      	subs	r2, r0, #1
 800ac7e:	b2d2      	uxtb	r2, r2
 800ac80:	2a18      	cmp	r2, #24
 800ac82:	d82e      	bhi.n	800ace2 <__gethex+0x13a>
 800ac84:	f1a0 0210 	sub.w	r2, r0, #16
 800ac88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac8c:	f7ff ff76 	bl	800ab7c <__hexdig_fun>
 800ac90:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800ac94:	fa5f fc8c 	uxtb.w	ip, ip
 800ac98:	f1bc 0f18 	cmp.w	ip, #24
 800ac9c:	d91d      	bls.n	800acda <__gethex+0x132>
 800ac9e:	f1bb 0f00 	cmp.w	fp, #0
 800aca2:	d000      	beq.n	800aca6 <__gethex+0xfe>
 800aca4:	4252      	negs	r2, r2
 800aca6:	4416      	add	r6, r2
 800aca8:	f8ca 1000 	str.w	r1, [sl]
 800acac:	b1dc      	cbz	r4, 800ace6 <__gethex+0x13e>
 800acae:	9b01      	ldr	r3, [sp, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	bf14      	ite	ne
 800acb4:	f04f 0800 	movne.w	r8, #0
 800acb8:	f04f 0806 	moveq.w	r8, #6
 800acbc:	4640      	mov	r0, r8
 800acbe:	b005      	add	sp, #20
 800acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc4:	4645      	mov	r5, r8
 800acc6:	4626      	mov	r6, r4
 800acc8:	2401      	movs	r4, #1
 800acca:	e7c7      	b.n	800ac5c <__gethex+0xb4>
 800accc:	f04f 0b00 	mov.w	fp, #0
 800acd0:	1ca9      	adds	r1, r5, #2
 800acd2:	e7d0      	b.n	800ac76 <__gethex+0xce>
 800acd4:	f04f 0b01 	mov.w	fp, #1
 800acd8:	e7fa      	b.n	800acd0 <__gethex+0x128>
 800acda:	230a      	movs	r3, #10
 800acdc:	fb03 0002 	mla	r0, r3, r2, r0
 800ace0:	e7d0      	b.n	800ac84 <__gethex+0xdc>
 800ace2:	4629      	mov	r1, r5
 800ace4:	e7e0      	b.n	800aca8 <__gethex+0x100>
 800ace6:	eba5 0308 	sub.w	r3, r5, r8
 800acea:	3b01      	subs	r3, #1
 800acec:	4621      	mov	r1, r4
 800acee:	2b07      	cmp	r3, #7
 800acf0:	dc0a      	bgt.n	800ad08 <__gethex+0x160>
 800acf2:	4648      	mov	r0, r9
 800acf4:	f7fe f92e 	bl	8008f54 <_Balloc>
 800acf8:	4604      	mov	r4, r0
 800acfa:	b940      	cbnz	r0, 800ad0e <__gethex+0x166>
 800acfc:	4b61      	ldr	r3, [pc, #388]	; (800ae84 <__gethex+0x2dc>)
 800acfe:	4602      	mov	r2, r0
 800ad00:	21e4      	movs	r1, #228	; 0xe4
 800ad02:	4861      	ldr	r0, [pc, #388]	; (800ae88 <__gethex+0x2e0>)
 800ad04:	f7ff feb4 	bl	800aa70 <__assert_func>
 800ad08:	3101      	adds	r1, #1
 800ad0a:	105b      	asrs	r3, r3, #1
 800ad0c:	e7ef      	b.n	800acee <__gethex+0x146>
 800ad0e:	f100 0a14 	add.w	sl, r0, #20
 800ad12:	2300      	movs	r3, #0
 800ad14:	495a      	ldr	r1, [pc, #360]	; (800ae80 <__gethex+0x2d8>)
 800ad16:	f8cd a004 	str.w	sl, [sp, #4]
 800ad1a:	469b      	mov	fp, r3
 800ad1c:	45a8      	cmp	r8, r5
 800ad1e:	d342      	bcc.n	800ada6 <__gethex+0x1fe>
 800ad20:	9801      	ldr	r0, [sp, #4]
 800ad22:	f840 bb04 	str.w	fp, [r0], #4
 800ad26:	eba0 000a 	sub.w	r0, r0, sl
 800ad2a:	1080      	asrs	r0, r0, #2
 800ad2c:	6120      	str	r0, [r4, #16]
 800ad2e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ad32:	4658      	mov	r0, fp
 800ad34:	f7fe fa00 	bl	8009138 <__hi0bits>
 800ad38:	683d      	ldr	r5, [r7, #0]
 800ad3a:	eba8 0000 	sub.w	r0, r8, r0
 800ad3e:	42a8      	cmp	r0, r5
 800ad40:	dd59      	ble.n	800adf6 <__gethex+0x24e>
 800ad42:	eba0 0805 	sub.w	r8, r0, r5
 800ad46:	4641      	mov	r1, r8
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f7fe fd8f 	bl	800986c <__any_on>
 800ad4e:	4683      	mov	fp, r0
 800ad50:	b1b8      	cbz	r0, 800ad82 <__gethex+0x1da>
 800ad52:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800ad56:	1159      	asrs	r1, r3, #5
 800ad58:	f003 021f 	and.w	r2, r3, #31
 800ad5c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ad60:	f04f 0b01 	mov.w	fp, #1
 800ad64:	fa0b f202 	lsl.w	r2, fp, r2
 800ad68:	420a      	tst	r2, r1
 800ad6a:	d00a      	beq.n	800ad82 <__gethex+0x1da>
 800ad6c:	455b      	cmp	r3, fp
 800ad6e:	dd06      	ble.n	800ad7e <__gethex+0x1d6>
 800ad70:	f1a8 0102 	sub.w	r1, r8, #2
 800ad74:	4620      	mov	r0, r4
 800ad76:	f7fe fd79 	bl	800986c <__any_on>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d138      	bne.n	800adf0 <__gethex+0x248>
 800ad7e:	f04f 0b02 	mov.w	fp, #2
 800ad82:	4641      	mov	r1, r8
 800ad84:	4620      	mov	r0, r4
 800ad86:	f7ff fea7 	bl	800aad8 <rshift>
 800ad8a:	4446      	add	r6, r8
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	42b3      	cmp	r3, r6
 800ad90:	da41      	bge.n	800ae16 <__gethex+0x26e>
 800ad92:	4621      	mov	r1, r4
 800ad94:	4648      	mov	r0, r9
 800ad96:	f7fe f91d 	bl	8008fd4 <_Bfree>
 800ad9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	6013      	str	r3, [r2, #0]
 800ada0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ada4:	e78a      	b.n	800acbc <__gethex+0x114>
 800ada6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800adaa:	2a2e      	cmp	r2, #46	; 0x2e
 800adac:	d014      	beq.n	800add8 <__gethex+0x230>
 800adae:	2b20      	cmp	r3, #32
 800adb0:	d106      	bne.n	800adc0 <__gethex+0x218>
 800adb2:	9b01      	ldr	r3, [sp, #4]
 800adb4:	f843 bb04 	str.w	fp, [r3], #4
 800adb8:	f04f 0b00 	mov.w	fp, #0
 800adbc:	9301      	str	r3, [sp, #4]
 800adbe:	465b      	mov	r3, fp
 800adc0:	7828      	ldrb	r0, [r5, #0]
 800adc2:	9303      	str	r3, [sp, #12]
 800adc4:	f7ff feda 	bl	800ab7c <__hexdig_fun>
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	f000 000f 	and.w	r0, r0, #15
 800adce:	4098      	lsls	r0, r3
 800add0:	ea4b 0b00 	orr.w	fp, fp, r0
 800add4:	3304      	adds	r3, #4
 800add6:	e7a1      	b.n	800ad1c <__gethex+0x174>
 800add8:	45a8      	cmp	r8, r5
 800adda:	d8e8      	bhi.n	800adae <__gethex+0x206>
 800addc:	2201      	movs	r2, #1
 800adde:	4628      	mov	r0, r5
 800ade0:	9303      	str	r3, [sp, #12]
 800ade2:	f7ff fe1b 	bl	800aa1c <strncmp>
 800ade6:	4926      	ldr	r1, [pc, #152]	; (800ae80 <__gethex+0x2d8>)
 800ade8:	9b03      	ldr	r3, [sp, #12]
 800adea:	2800      	cmp	r0, #0
 800adec:	d1df      	bne.n	800adae <__gethex+0x206>
 800adee:	e795      	b.n	800ad1c <__gethex+0x174>
 800adf0:	f04f 0b03 	mov.w	fp, #3
 800adf4:	e7c5      	b.n	800ad82 <__gethex+0x1da>
 800adf6:	da0b      	bge.n	800ae10 <__gethex+0x268>
 800adf8:	eba5 0800 	sub.w	r8, r5, r0
 800adfc:	4621      	mov	r1, r4
 800adfe:	4642      	mov	r2, r8
 800ae00:	4648      	mov	r0, r9
 800ae02:	f7fe fb01 	bl	8009408 <__lshift>
 800ae06:	eba6 0608 	sub.w	r6, r6, r8
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	f100 0a14 	add.w	sl, r0, #20
 800ae10:	f04f 0b00 	mov.w	fp, #0
 800ae14:	e7ba      	b.n	800ad8c <__gethex+0x1e4>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	42b3      	cmp	r3, r6
 800ae1a:	dd73      	ble.n	800af04 <__gethex+0x35c>
 800ae1c:	1b9e      	subs	r6, r3, r6
 800ae1e:	42b5      	cmp	r5, r6
 800ae20:	dc34      	bgt.n	800ae8c <__gethex+0x2e4>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d023      	beq.n	800ae70 <__gethex+0x2c8>
 800ae28:	2b03      	cmp	r3, #3
 800ae2a:	d025      	beq.n	800ae78 <__gethex+0x2d0>
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d115      	bne.n	800ae5c <__gethex+0x2b4>
 800ae30:	42b5      	cmp	r5, r6
 800ae32:	d113      	bne.n	800ae5c <__gethex+0x2b4>
 800ae34:	2d01      	cmp	r5, #1
 800ae36:	d10b      	bne.n	800ae50 <__gethex+0x2a8>
 800ae38:	9a02      	ldr	r2, [sp, #8]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6013      	str	r3, [r2, #0]
 800ae3e:	2301      	movs	r3, #1
 800ae40:	6123      	str	r3, [r4, #16]
 800ae42:	f8ca 3000 	str.w	r3, [sl]
 800ae46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae48:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ae4c:	601c      	str	r4, [r3, #0]
 800ae4e:	e735      	b.n	800acbc <__gethex+0x114>
 800ae50:	1e69      	subs	r1, r5, #1
 800ae52:	4620      	mov	r0, r4
 800ae54:	f7fe fd0a 	bl	800986c <__any_on>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d1ed      	bne.n	800ae38 <__gethex+0x290>
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	4648      	mov	r0, r9
 800ae60:	f7fe f8b8 	bl	8008fd4 <_Bfree>
 800ae64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae66:	2300      	movs	r3, #0
 800ae68:	6013      	str	r3, [r2, #0]
 800ae6a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ae6e:	e725      	b.n	800acbc <__gethex+0x114>
 800ae70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1f2      	bne.n	800ae5c <__gethex+0x2b4>
 800ae76:	e7df      	b.n	800ae38 <__gethex+0x290>
 800ae78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1dc      	bne.n	800ae38 <__gethex+0x290>
 800ae7e:	e7ed      	b.n	800ae5c <__gethex+0x2b4>
 800ae80:	0800baec 	.word	0x0800baec
 800ae84:	0800b981 	.word	0x0800b981
 800ae88:	0800bc96 	.word	0x0800bc96
 800ae8c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800ae90:	f1bb 0f00 	cmp.w	fp, #0
 800ae94:	d133      	bne.n	800aefe <__gethex+0x356>
 800ae96:	f1b8 0f00 	cmp.w	r8, #0
 800ae9a:	d004      	beq.n	800aea6 <__gethex+0x2fe>
 800ae9c:	4641      	mov	r1, r8
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f7fe fce4 	bl	800986c <__any_on>
 800aea4:	4683      	mov	fp, r0
 800aea6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800aeaa:	2301      	movs	r3, #1
 800aeac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aeb0:	f008 081f 	and.w	r8, r8, #31
 800aeb4:	fa03 f308 	lsl.w	r3, r3, r8
 800aeb8:	4213      	tst	r3, r2
 800aeba:	4631      	mov	r1, r6
 800aebc:	4620      	mov	r0, r4
 800aebe:	bf18      	it	ne
 800aec0:	f04b 0b02 	orrne.w	fp, fp, #2
 800aec4:	1bad      	subs	r5, r5, r6
 800aec6:	f7ff fe07 	bl	800aad8 <rshift>
 800aeca:	687e      	ldr	r6, [r7, #4]
 800aecc:	f04f 0802 	mov.w	r8, #2
 800aed0:	f1bb 0f00 	cmp.w	fp, #0
 800aed4:	d04a      	beq.n	800af6c <__gethex+0x3c4>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d016      	beq.n	800af0a <__gethex+0x362>
 800aedc:	2b03      	cmp	r3, #3
 800aede:	d018      	beq.n	800af12 <__gethex+0x36a>
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d109      	bne.n	800aef8 <__gethex+0x350>
 800aee4:	f01b 0f02 	tst.w	fp, #2
 800aee8:	d006      	beq.n	800aef8 <__gethex+0x350>
 800aeea:	f8da 3000 	ldr.w	r3, [sl]
 800aeee:	ea4b 0b03 	orr.w	fp, fp, r3
 800aef2:	f01b 0f01 	tst.w	fp, #1
 800aef6:	d10f      	bne.n	800af18 <__gethex+0x370>
 800aef8:	f048 0810 	orr.w	r8, r8, #16
 800aefc:	e036      	b.n	800af6c <__gethex+0x3c4>
 800aefe:	f04f 0b01 	mov.w	fp, #1
 800af02:	e7d0      	b.n	800aea6 <__gethex+0x2fe>
 800af04:	f04f 0801 	mov.w	r8, #1
 800af08:	e7e2      	b.n	800aed0 <__gethex+0x328>
 800af0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af0c:	f1c3 0301 	rsb	r3, r3, #1
 800af10:	930f      	str	r3, [sp, #60]	; 0x3c
 800af12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af14:	2b00      	cmp	r3, #0
 800af16:	d0ef      	beq.n	800aef8 <__gethex+0x350>
 800af18:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af1c:	f104 0214 	add.w	r2, r4, #20
 800af20:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800af2a:	2300      	movs	r3, #0
 800af2c:	4694      	mov	ip, r2
 800af2e:	f852 1b04 	ldr.w	r1, [r2], #4
 800af32:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800af36:	d01e      	beq.n	800af76 <__gethex+0x3ce>
 800af38:	3101      	adds	r1, #1
 800af3a:	f8cc 1000 	str.w	r1, [ip]
 800af3e:	f1b8 0f02 	cmp.w	r8, #2
 800af42:	f104 0214 	add.w	r2, r4, #20
 800af46:	d13d      	bne.n	800afc4 <__gethex+0x41c>
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	3b01      	subs	r3, #1
 800af4c:	42ab      	cmp	r3, r5
 800af4e:	d10b      	bne.n	800af68 <__gethex+0x3c0>
 800af50:	1169      	asrs	r1, r5, #5
 800af52:	2301      	movs	r3, #1
 800af54:	f005 051f 	and.w	r5, r5, #31
 800af58:	fa03 f505 	lsl.w	r5, r3, r5
 800af5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af60:	421d      	tst	r5, r3
 800af62:	bf18      	it	ne
 800af64:	f04f 0801 	movne.w	r8, #1
 800af68:	f048 0820 	orr.w	r8, r8, #32
 800af6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af6e:	601c      	str	r4, [r3, #0]
 800af70:	9b02      	ldr	r3, [sp, #8]
 800af72:	601e      	str	r6, [r3, #0]
 800af74:	e6a2      	b.n	800acbc <__gethex+0x114>
 800af76:	4290      	cmp	r0, r2
 800af78:	f842 3c04 	str.w	r3, [r2, #-4]
 800af7c:	d8d6      	bhi.n	800af2c <__gethex+0x384>
 800af7e:	68a2      	ldr	r2, [r4, #8]
 800af80:	4593      	cmp	fp, r2
 800af82:	db17      	blt.n	800afb4 <__gethex+0x40c>
 800af84:	6861      	ldr	r1, [r4, #4]
 800af86:	4648      	mov	r0, r9
 800af88:	3101      	adds	r1, #1
 800af8a:	f7fd ffe3 	bl	8008f54 <_Balloc>
 800af8e:	4682      	mov	sl, r0
 800af90:	b918      	cbnz	r0, 800af9a <__gethex+0x3f2>
 800af92:	4b1b      	ldr	r3, [pc, #108]	; (800b000 <__gethex+0x458>)
 800af94:	4602      	mov	r2, r0
 800af96:	2184      	movs	r1, #132	; 0x84
 800af98:	e6b3      	b.n	800ad02 <__gethex+0x15a>
 800af9a:	6922      	ldr	r2, [r4, #16]
 800af9c:	3202      	adds	r2, #2
 800af9e:	f104 010c 	add.w	r1, r4, #12
 800afa2:	0092      	lsls	r2, r2, #2
 800afa4:	300c      	adds	r0, #12
 800afa6:	f7fd f844 	bl	8008032 <memcpy>
 800afaa:	4621      	mov	r1, r4
 800afac:	4648      	mov	r0, r9
 800afae:	f7fe f811 	bl	8008fd4 <_Bfree>
 800afb2:	4654      	mov	r4, sl
 800afb4:	6922      	ldr	r2, [r4, #16]
 800afb6:	1c51      	adds	r1, r2, #1
 800afb8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800afbc:	6121      	str	r1, [r4, #16]
 800afbe:	2101      	movs	r1, #1
 800afc0:	6151      	str	r1, [r2, #20]
 800afc2:	e7bc      	b.n	800af3e <__gethex+0x396>
 800afc4:	6921      	ldr	r1, [r4, #16]
 800afc6:	4559      	cmp	r1, fp
 800afc8:	dd0b      	ble.n	800afe2 <__gethex+0x43a>
 800afca:	2101      	movs	r1, #1
 800afcc:	4620      	mov	r0, r4
 800afce:	f7ff fd83 	bl	800aad8 <rshift>
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	3601      	adds	r6, #1
 800afd6:	42b3      	cmp	r3, r6
 800afd8:	f6ff aedb 	blt.w	800ad92 <__gethex+0x1ea>
 800afdc:	f04f 0801 	mov.w	r8, #1
 800afe0:	e7c2      	b.n	800af68 <__gethex+0x3c0>
 800afe2:	f015 051f 	ands.w	r5, r5, #31
 800afe6:	d0f9      	beq.n	800afdc <__gethex+0x434>
 800afe8:	9b01      	ldr	r3, [sp, #4]
 800afea:	441a      	add	r2, r3
 800afec:	f1c5 0520 	rsb	r5, r5, #32
 800aff0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800aff4:	f7fe f8a0 	bl	8009138 <__hi0bits>
 800aff8:	42a8      	cmp	r0, r5
 800affa:	dbe6      	blt.n	800afca <__gethex+0x422>
 800affc:	e7ee      	b.n	800afdc <__gethex+0x434>
 800affe:	bf00      	nop
 800b000:	0800b981 	.word	0x0800b981

0800b004 <L_shift>:
 800b004:	f1c2 0208 	rsb	r2, r2, #8
 800b008:	0092      	lsls	r2, r2, #2
 800b00a:	b570      	push	{r4, r5, r6, lr}
 800b00c:	f1c2 0620 	rsb	r6, r2, #32
 800b010:	6843      	ldr	r3, [r0, #4]
 800b012:	6804      	ldr	r4, [r0, #0]
 800b014:	fa03 f506 	lsl.w	r5, r3, r6
 800b018:	432c      	orrs	r4, r5
 800b01a:	40d3      	lsrs	r3, r2
 800b01c:	6004      	str	r4, [r0, #0]
 800b01e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b022:	4288      	cmp	r0, r1
 800b024:	d3f4      	bcc.n	800b010 <L_shift+0xc>
 800b026:	bd70      	pop	{r4, r5, r6, pc}

0800b028 <__match>:
 800b028:	b530      	push	{r4, r5, lr}
 800b02a:	6803      	ldr	r3, [r0, #0]
 800b02c:	3301      	adds	r3, #1
 800b02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b032:	b914      	cbnz	r4, 800b03a <__match+0x12>
 800b034:	6003      	str	r3, [r0, #0]
 800b036:	2001      	movs	r0, #1
 800b038:	bd30      	pop	{r4, r5, pc}
 800b03a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b03e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b042:	2d19      	cmp	r5, #25
 800b044:	bf98      	it	ls
 800b046:	3220      	addls	r2, #32
 800b048:	42a2      	cmp	r2, r4
 800b04a:	d0f0      	beq.n	800b02e <__match+0x6>
 800b04c:	2000      	movs	r0, #0
 800b04e:	e7f3      	b.n	800b038 <__match+0x10>

0800b050 <__hexnan>:
 800b050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	680b      	ldr	r3, [r1, #0]
 800b056:	6801      	ldr	r1, [r0, #0]
 800b058:	115e      	asrs	r6, r3, #5
 800b05a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b05e:	f013 031f 	ands.w	r3, r3, #31
 800b062:	b087      	sub	sp, #28
 800b064:	bf18      	it	ne
 800b066:	3604      	addne	r6, #4
 800b068:	2500      	movs	r5, #0
 800b06a:	1f37      	subs	r7, r6, #4
 800b06c:	4682      	mov	sl, r0
 800b06e:	4690      	mov	r8, r2
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	f846 5c04 	str.w	r5, [r6, #-4]
 800b076:	46b9      	mov	r9, r7
 800b078:	463c      	mov	r4, r7
 800b07a:	9502      	str	r5, [sp, #8]
 800b07c:	46ab      	mov	fp, r5
 800b07e:	784a      	ldrb	r2, [r1, #1]
 800b080:	1c4b      	adds	r3, r1, #1
 800b082:	9303      	str	r3, [sp, #12]
 800b084:	b342      	cbz	r2, 800b0d8 <__hexnan+0x88>
 800b086:	4610      	mov	r0, r2
 800b088:	9105      	str	r1, [sp, #20]
 800b08a:	9204      	str	r2, [sp, #16]
 800b08c:	f7ff fd76 	bl	800ab7c <__hexdig_fun>
 800b090:	2800      	cmp	r0, #0
 800b092:	d14f      	bne.n	800b134 <__hexnan+0xe4>
 800b094:	9a04      	ldr	r2, [sp, #16]
 800b096:	9905      	ldr	r1, [sp, #20]
 800b098:	2a20      	cmp	r2, #32
 800b09a:	d818      	bhi.n	800b0ce <__hexnan+0x7e>
 800b09c:	9b02      	ldr	r3, [sp, #8]
 800b09e:	459b      	cmp	fp, r3
 800b0a0:	dd13      	ble.n	800b0ca <__hexnan+0x7a>
 800b0a2:	454c      	cmp	r4, r9
 800b0a4:	d206      	bcs.n	800b0b4 <__hexnan+0x64>
 800b0a6:	2d07      	cmp	r5, #7
 800b0a8:	dc04      	bgt.n	800b0b4 <__hexnan+0x64>
 800b0aa:	462a      	mov	r2, r5
 800b0ac:	4649      	mov	r1, r9
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f7ff ffa8 	bl	800b004 <L_shift>
 800b0b4:	4544      	cmp	r4, r8
 800b0b6:	d950      	bls.n	800b15a <__hexnan+0x10a>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	f1a4 0904 	sub.w	r9, r4, #4
 800b0be:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0c2:	f8cd b008 	str.w	fp, [sp, #8]
 800b0c6:	464c      	mov	r4, r9
 800b0c8:	461d      	mov	r5, r3
 800b0ca:	9903      	ldr	r1, [sp, #12]
 800b0cc:	e7d7      	b.n	800b07e <__hexnan+0x2e>
 800b0ce:	2a29      	cmp	r2, #41	; 0x29
 800b0d0:	d155      	bne.n	800b17e <__hexnan+0x12e>
 800b0d2:	3102      	adds	r1, #2
 800b0d4:	f8ca 1000 	str.w	r1, [sl]
 800b0d8:	f1bb 0f00 	cmp.w	fp, #0
 800b0dc:	d04f      	beq.n	800b17e <__hexnan+0x12e>
 800b0de:	454c      	cmp	r4, r9
 800b0e0:	d206      	bcs.n	800b0f0 <__hexnan+0xa0>
 800b0e2:	2d07      	cmp	r5, #7
 800b0e4:	dc04      	bgt.n	800b0f0 <__hexnan+0xa0>
 800b0e6:	462a      	mov	r2, r5
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f7ff ff8a 	bl	800b004 <L_shift>
 800b0f0:	4544      	cmp	r4, r8
 800b0f2:	d934      	bls.n	800b15e <__hexnan+0x10e>
 800b0f4:	f1a8 0204 	sub.w	r2, r8, #4
 800b0f8:	4623      	mov	r3, r4
 800b0fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800b0fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800b102:	429f      	cmp	r7, r3
 800b104:	d2f9      	bcs.n	800b0fa <__hexnan+0xaa>
 800b106:	1b3b      	subs	r3, r7, r4
 800b108:	f023 0303 	bic.w	r3, r3, #3
 800b10c:	3304      	adds	r3, #4
 800b10e:	3e03      	subs	r6, #3
 800b110:	3401      	adds	r4, #1
 800b112:	42a6      	cmp	r6, r4
 800b114:	bf38      	it	cc
 800b116:	2304      	movcc	r3, #4
 800b118:	4443      	add	r3, r8
 800b11a:	2200      	movs	r2, #0
 800b11c:	f843 2b04 	str.w	r2, [r3], #4
 800b120:	429f      	cmp	r7, r3
 800b122:	d2fb      	bcs.n	800b11c <__hexnan+0xcc>
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	b91b      	cbnz	r3, 800b130 <__hexnan+0xe0>
 800b128:	4547      	cmp	r7, r8
 800b12a:	d126      	bne.n	800b17a <__hexnan+0x12a>
 800b12c:	2301      	movs	r3, #1
 800b12e:	603b      	str	r3, [r7, #0]
 800b130:	2005      	movs	r0, #5
 800b132:	e025      	b.n	800b180 <__hexnan+0x130>
 800b134:	3501      	adds	r5, #1
 800b136:	2d08      	cmp	r5, #8
 800b138:	f10b 0b01 	add.w	fp, fp, #1
 800b13c:	dd06      	ble.n	800b14c <__hexnan+0xfc>
 800b13e:	4544      	cmp	r4, r8
 800b140:	d9c3      	bls.n	800b0ca <__hexnan+0x7a>
 800b142:	2300      	movs	r3, #0
 800b144:	f844 3c04 	str.w	r3, [r4, #-4]
 800b148:	2501      	movs	r5, #1
 800b14a:	3c04      	subs	r4, #4
 800b14c:	6822      	ldr	r2, [r4, #0]
 800b14e:	f000 000f 	and.w	r0, r0, #15
 800b152:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b156:	6020      	str	r0, [r4, #0]
 800b158:	e7b7      	b.n	800b0ca <__hexnan+0x7a>
 800b15a:	2508      	movs	r5, #8
 800b15c:	e7b5      	b.n	800b0ca <__hexnan+0x7a>
 800b15e:	9b01      	ldr	r3, [sp, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0df      	beq.n	800b124 <__hexnan+0xd4>
 800b164:	f1c3 0320 	rsb	r3, r3, #32
 800b168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b16c:	40da      	lsrs	r2, r3
 800b16e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b172:	4013      	ands	r3, r2
 800b174:	f846 3c04 	str.w	r3, [r6, #-4]
 800b178:	e7d4      	b.n	800b124 <__hexnan+0xd4>
 800b17a:	3f04      	subs	r7, #4
 800b17c:	e7d2      	b.n	800b124 <__hexnan+0xd4>
 800b17e:	2004      	movs	r0, #4
 800b180:	b007      	add	sp, #28
 800b182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b186 <__ascii_mbtowc>:
 800b186:	b082      	sub	sp, #8
 800b188:	b901      	cbnz	r1, 800b18c <__ascii_mbtowc+0x6>
 800b18a:	a901      	add	r1, sp, #4
 800b18c:	b142      	cbz	r2, 800b1a0 <__ascii_mbtowc+0x1a>
 800b18e:	b14b      	cbz	r3, 800b1a4 <__ascii_mbtowc+0x1e>
 800b190:	7813      	ldrb	r3, [r2, #0]
 800b192:	600b      	str	r3, [r1, #0]
 800b194:	7812      	ldrb	r2, [r2, #0]
 800b196:	1e10      	subs	r0, r2, #0
 800b198:	bf18      	it	ne
 800b19a:	2001      	movne	r0, #1
 800b19c:	b002      	add	sp, #8
 800b19e:	4770      	bx	lr
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	e7fb      	b.n	800b19c <__ascii_mbtowc+0x16>
 800b1a4:	f06f 0001 	mvn.w	r0, #1
 800b1a8:	e7f8      	b.n	800b19c <__ascii_mbtowc+0x16>

0800b1aa <_realloc_r>:
 800b1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ae:	4680      	mov	r8, r0
 800b1b0:	4614      	mov	r4, r2
 800b1b2:	460e      	mov	r6, r1
 800b1b4:	b921      	cbnz	r1, 800b1c0 <_realloc_r+0x16>
 800b1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	f7fd be3e 	b.w	8008e3c <_malloc_r>
 800b1c0:	b92a      	cbnz	r2, 800b1ce <_realloc_r+0x24>
 800b1c2:	f7fd fdc7 	bl	8008d54 <_free_r>
 800b1c6:	4625      	mov	r5, r4
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ce:	f000 f842 	bl	800b256 <_malloc_usable_size_r>
 800b1d2:	4284      	cmp	r4, r0
 800b1d4:	4607      	mov	r7, r0
 800b1d6:	d802      	bhi.n	800b1de <_realloc_r+0x34>
 800b1d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1dc:	d812      	bhi.n	800b204 <_realloc_r+0x5a>
 800b1de:	4621      	mov	r1, r4
 800b1e0:	4640      	mov	r0, r8
 800b1e2:	f7fd fe2b 	bl	8008e3c <_malloc_r>
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d0ed      	beq.n	800b1c8 <_realloc_r+0x1e>
 800b1ec:	42bc      	cmp	r4, r7
 800b1ee:	4622      	mov	r2, r4
 800b1f0:	4631      	mov	r1, r6
 800b1f2:	bf28      	it	cs
 800b1f4:	463a      	movcs	r2, r7
 800b1f6:	f7fc ff1c 	bl	8008032 <memcpy>
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	f7fd fda9 	bl	8008d54 <_free_r>
 800b202:	e7e1      	b.n	800b1c8 <_realloc_r+0x1e>
 800b204:	4635      	mov	r5, r6
 800b206:	e7df      	b.n	800b1c8 <_realloc_r+0x1e>

0800b208 <__ascii_wctomb>:
 800b208:	b149      	cbz	r1, 800b21e <__ascii_wctomb+0x16>
 800b20a:	2aff      	cmp	r2, #255	; 0xff
 800b20c:	bf85      	ittet	hi
 800b20e:	238a      	movhi	r3, #138	; 0x8a
 800b210:	6003      	strhi	r3, [r0, #0]
 800b212:	700a      	strbls	r2, [r1, #0]
 800b214:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b218:	bf98      	it	ls
 800b21a:	2001      	movls	r0, #1
 800b21c:	4770      	bx	lr
 800b21e:	4608      	mov	r0, r1
 800b220:	4770      	bx	lr
	...

0800b224 <fiprintf>:
 800b224:	b40e      	push	{r1, r2, r3}
 800b226:	b503      	push	{r0, r1, lr}
 800b228:	4601      	mov	r1, r0
 800b22a:	ab03      	add	r3, sp, #12
 800b22c:	4805      	ldr	r0, [pc, #20]	; (800b244 <fiprintf+0x20>)
 800b22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b232:	6800      	ldr	r0, [r0, #0]
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	f000 f83f 	bl	800b2b8 <_vfiprintf_r>
 800b23a:	b002      	add	sp, #8
 800b23c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b240:	b003      	add	sp, #12
 800b242:	4770      	bx	lr
 800b244:	20000068 	.word	0x20000068

0800b248 <abort>:
 800b248:	b508      	push	{r3, lr}
 800b24a:	2006      	movs	r0, #6
 800b24c:	f000 fa0c 	bl	800b668 <raise>
 800b250:	2001      	movs	r0, #1
 800b252:	f7f6 f9db 	bl	800160c <_exit>

0800b256 <_malloc_usable_size_r>:
 800b256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b25a:	1f18      	subs	r0, r3, #4
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	bfbc      	itt	lt
 800b260:	580b      	ldrlt	r3, [r1, r0]
 800b262:	18c0      	addlt	r0, r0, r3
 800b264:	4770      	bx	lr

0800b266 <__sfputc_r>:
 800b266:	6893      	ldr	r3, [r2, #8]
 800b268:	3b01      	subs	r3, #1
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	b410      	push	{r4}
 800b26e:	6093      	str	r3, [r2, #8]
 800b270:	da08      	bge.n	800b284 <__sfputc_r+0x1e>
 800b272:	6994      	ldr	r4, [r2, #24]
 800b274:	42a3      	cmp	r3, r4
 800b276:	db01      	blt.n	800b27c <__sfputc_r+0x16>
 800b278:	290a      	cmp	r1, #10
 800b27a:	d103      	bne.n	800b284 <__sfputc_r+0x1e>
 800b27c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b280:	f000 b934 	b.w	800b4ec <__swbuf_r>
 800b284:	6813      	ldr	r3, [r2, #0]
 800b286:	1c58      	adds	r0, r3, #1
 800b288:	6010      	str	r0, [r2, #0]
 800b28a:	7019      	strb	r1, [r3, #0]
 800b28c:	4608      	mov	r0, r1
 800b28e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <__sfputs_r>:
 800b294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b296:	4606      	mov	r6, r0
 800b298:	460f      	mov	r7, r1
 800b29a:	4614      	mov	r4, r2
 800b29c:	18d5      	adds	r5, r2, r3
 800b29e:	42ac      	cmp	r4, r5
 800b2a0:	d101      	bne.n	800b2a6 <__sfputs_r+0x12>
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	e007      	b.n	800b2b6 <__sfputs_r+0x22>
 800b2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2aa:	463a      	mov	r2, r7
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7ff ffda 	bl	800b266 <__sfputc_r>
 800b2b2:	1c43      	adds	r3, r0, #1
 800b2b4:	d1f3      	bne.n	800b29e <__sfputs_r+0xa>
 800b2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2b8 <_vfiprintf_r>:
 800b2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2bc:	460d      	mov	r5, r1
 800b2be:	b09d      	sub	sp, #116	; 0x74
 800b2c0:	4614      	mov	r4, r2
 800b2c2:	4698      	mov	r8, r3
 800b2c4:	4606      	mov	r6, r0
 800b2c6:	b118      	cbz	r0, 800b2d0 <_vfiprintf_r+0x18>
 800b2c8:	6a03      	ldr	r3, [r0, #32]
 800b2ca:	b90b      	cbnz	r3, 800b2d0 <_vfiprintf_r+0x18>
 800b2cc:	f7fc fd98 	bl	8007e00 <__sinit>
 800b2d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2d2:	07d9      	lsls	r1, r3, #31
 800b2d4:	d405      	bmi.n	800b2e2 <_vfiprintf_r+0x2a>
 800b2d6:	89ab      	ldrh	r3, [r5, #12]
 800b2d8:	059a      	lsls	r2, r3, #22
 800b2da:	d402      	bmi.n	800b2e2 <_vfiprintf_r+0x2a>
 800b2dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2de:	f7fc fea6 	bl	800802e <__retarget_lock_acquire_recursive>
 800b2e2:	89ab      	ldrh	r3, [r5, #12]
 800b2e4:	071b      	lsls	r3, r3, #28
 800b2e6:	d501      	bpl.n	800b2ec <_vfiprintf_r+0x34>
 800b2e8:	692b      	ldr	r3, [r5, #16]
 800b2ea:	b99b      	cbnz	r3, 800b314 <_vfiprintf_r+0x5c>
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	f000 f93a 	bl	800b568 <__swsetup_r>
 800b2f4:	b170      	cbz	r0, 800b314 <_vfiprintf_r+0x5c>
 800b2f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2f8:	07dc      	lsls	r4, r3, #31
 800b2fa:	d504      	bpl.n	800b306 <_vfiprintf_r+0x4e>
 800b2fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b300:	b01d      	add	sp, #116	; 0x74
 800b302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b306:	89ab      	ldrh	r3, [r5, #12]
 800b308:	0598      	lsls	r0, r3, #22
 800b30a:	d4f7      	bmi.n	800b2fc <_vfiprintf_r+0x44>
 800b30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b30e:	f7fc fe8f 	bl	8008030 <__retarget_lock_release_recursive>
 800b312:	e7f3      	b.n	800b2fc <_vfiprintf_r+0x44>
 800b314:	2300      	movs	r3, #0
 800b316:	9309      	str	r3, [sp, #36]	; 0x24
 800b318:	2320      	movs	r3, #32
 800b31a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b31e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b322:	2330      	movs	r3, #48	; 0x30
 800b324:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b4d8 <_vfiprintf_r+0x220>
 800b328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b32c:	f04f 0901 	mov.w	r9, #1
 800b330:	4623      	mov	r3, r4
 800b332:	469a      	mov	sl, r3
 800b334:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b338:	b10a      	cbz	r2, 800b33e <_vfiprintf_r+0x86>
 800b33a:	2a25      	cmp	r2, #37	; 0x25
 800b33c:	d1f9      	bne.n	800b332 <_vfiprintf_r+0x7a>
 800b33e:	ebba 0b04 	subs.w	fp, sl, r4
 800b342:	d00b      	beq.n	800b35c <_vfiprintf_r+0xa4>
 800b344:	465b      	mov	r3, fp
 800b346:	4622      	mov	r2, r4
 800b348:	4629      	mov	r1, r5
 800b34a:	4630      	mov	r0, r6
 800b34c:	f7ff ffa2 	bl	800b294 <__sfputs_r>
 800b350:	3001      	adds	r0, #1
 800b352:	f000 80a9 	beq.w	800b4a8 <_vfiprintf_r+0x1f0>
 800b356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b358:	445a      	add	r2, fp
 800b35a:	9209      	str	r2, [sp, #36]	; 0x24
 800b35c:	f89a 3000 	ldrb.w	r3, [sl]
 800b360:	2b00      	cmp	r3, #0
 800b362:	f000 80a1 	beq.w	800b4a8 <_vfiprintf_r+0x1f0>
 800b366:	2300      	movs	r3, #0
 800b368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b36c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b370:	f10a 0a01 	add.w	sl, sl, #1
 800b374:	9304      	str	r3, [sp, #16]
 800b376:	9307      	str	r3, [sp, #28]
 800b378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b37c:	931a      	str	r3, [sp, #104]	; 0x68
 800b37e:	4654      	mov	r4, sl
 800b380:	2205      	movs	r2, #5
 800b382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b386:	4854      	ldr	r0, [pc, #336]	; (800b4d8 <_vfiprintf_r+0x220>)
 800b388:	f7f4 ff2a 	bl	80001e0 <memchr>
 800b38c:	9a04      	ldr	r2, [sp, #16]
 800b38e:	b9d8      	cbnz	r0, 800b3c8 <_vfiprintf_r+0x110>
 800b390:	06d1      	lsls	r1, r2, #27
 800b392:	bf44      	itt	mi
 800b394:	2320      	movmi	r3, #32
 800b396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b39a:	0713      	lsls	r3, r2, #28
 800b39c:	bf44      	itt	mi
 800b39e:	232b      	movmi	r3, #43	; 0x2b
 800b3a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b3aa:	d015      	beq.n	800b3d8 <_vfiprintf_r+0x120>
 800b3ac:	9a07      	ldr	r2, [sp, #28]
 800b3ae:	4654      	mov	r4, sl
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	f04f 0c0a 	mov.w	ip, #10
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3bc:	3b30      	subs	r3, #48	; 0x30
 800b3be:	2b09      	cmp	r3, #9
 800b3c0:	d94d      	bls.n	800b45e <_vfiprintf_r+0x1a6>
 800b3c2:	b1b0      	cbz	r0, 800b3f2 <_vfiprintf_r+0x13a>
 800b3c4:	9207      	str	r2, [sp, #28]
 800b3c6:	e014      	b.n	800b3f2 <_vfiprintf_r+0x13a>
 800b3c8:	eba0 0308 	sub.w	r3, r0, r8
 800b3cc:	fa09 f303 	lsl.w	r3, r9, r3
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	9304      	str	r3, [sp, #16]
 800b3d4:	46a2      	mov	sl, r4
 800b3d6:	e7d2      	b.n	800b37e <_vfiprintf_r+0xc6>
 800b3d8:	9b03      	ldr	r3, [sp, #12]
 800b3da:	1d19      	adds	r1, r3, #4
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	9103      	str	r1, [sp, #12]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	bfbb      	ittet	lt
 800b3e4:	425b      	neglt	r3, r3
 800b3e6:	f042 0202 	orrlt.w	r2, r2, #2
 800b3ea:	9307      	strge	r3, [sp, #28]
 800b3ec:	9307      	strlt	r3, [sp, #28]
 800b3ee:	bfb8      	it	lt
 800b3f0:	9204      	strlt	r2, [sp, #16]
 800b3f2:	7823      	ldrb	r3, [r4, #0]
 800b3f4:	2b2e      	cmp	r3, #46	; 0x2e
 800b3f6:	d10c      	bne.n	800b412 <_vfiprintf_r+0x15a>
 800b3f8:	7863      	ldrb	r3, [r4, #1]
 800b3fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b3fc:	d134      	bne.n	800b468 <_vfiprintf_r+0x1b0>
 800b3fe:	9b03      	ldr	r3, [sp, #12]
 800b400:	1d1a      	adds	r2, r3, #4
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	9203      	str	r2, [sp, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	bfb8      	it	lt
 800b40a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b40e:	3402      	adds	r4, #2
 800b410:	9305      	str	r3, [sp, #20]
 800b412:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b4e8 <_vfiprintf_r+0x230>
 800b416:	7821      	ldrb	r1, [r4, #0]
 800b418:	2203      	movs	r2, #3
 800b41a:	4650      	mov	r0, sl
 800b41c:	f7f4 fee0 	bl	80001e0 <memchr>
 800b420:	b138      	cbz	r0, 800b432 <_vfiprintf_r+0x17a>
 800b422:	9b04      	ldr	r3, [sp, #16]
 800b424:	eba0 000a 	sub.w	r0, r0, sl
 800b428:	2240      	movs	r2, #64	; 0x40
 800b42a:	4082      	lsls	r2, r0
 800b42c:	4313      	orrs	r3, r2
 800b42e:	3401      	adds	r4, #1
 800b430:	9304      	str	r3, [sp, #16]
 800b432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b436:	4829      	ldr	r0, [pc, #164]	; (800b4dc <_vfiprintf_r+0x224>)
 800b438:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b43c:	2206      	movs	r2, #6
 800b43e:	f7f4 fecf 	bl	80001e0 <memchr>
 800b442:	2800      	cmp	r0, #0
 800b444:	d03f      	beq.n	800b4c6 <_vfiprintf_r+0x20e>
 800b446:	4b26      	ldr	r3, [pc, #152]	; (800b4e0 <_vfiprintf_r+0x228>)
 800b448:	bb1b      	cbnz	r3, 800b492 <_vfiprintf_r+0x1da>
 800b44a:	9b03      	ldr	r3, [sp, #12]
 800b44c:	3307      	adds	r3, #7
 800b44e:	f023 0307 	bic.w	r3, r3, #7
 800b452:	3308      	adds	r3, #8
 800b454:	9303      	str	r3, [sp, #12]
 800b456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b458:	443b      	add	r3, r7
 800b45a:	9309      	str	r3, [sp, #36]	; 0x24
 800b45c:	e768      	b.n	800b330 <_vfiprintf_r+0x78>
 800b45e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b462:	460c      	mov	r4, r1
 800b464:	2001      	movs	r0, #1
 800b466:	e7a6      	b.n	800b3b6 <_vfiprintf_r+0xfe>
 800b468:	2300      	movs	r3, #0
 800b46a:	3401      	adds	r4, #1
 800b46c:	9305      	str	r3, [sp, #20]
 800b46e:	4619      	mov	r1, r3
 800b470:	f04f 0c0a 	mov.w	ip, #10
 800b474:	4620      	mov	r0, r4
 800b476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b47a:	3a30      	subs	r2, #48	; 0x30
 800b47c:	2a09      	cmp	r2, #9
 800b47e:	d903      	bls.n	800b488 <_vfiprintf_r+0x1d0>
 800b480:	2b00      	cmp	r3, #0
 800b482:	d0c6      	beq.n	800b412 <_vfiprintf_r+0x15a>
 800b484:	9105      	str	r1, [sp, #20]
 800b486:	e7c4      	b.n	800b412 <_vfiprintf_r+0x15a>
 800b488:	fb0c 2101 	mla	r1, ip, r1, r2
 800b48c:	4604      	mov	r4, r0
 800b48e:	2301      	movs	r3, #1
 800b490:	e7f0      	b.n	800b474 <_vfiprintf_r+0x1bc>
 800b492:	ab03      	add	r3, sp, #12
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	462a      	mov	r2, r5
 800b498:	4b12      	ldr	r3, [pc, #72]	; (800b4e4 <_vfiprintf_r+0x22c>)
 800b49a:	a904      	add	r1, sp, #16
 800b49c:	4630      	mov	r0, r6
 800b49e:	f7fb fe4d 	bl	800713c <_printf_float>
 800b4a2:	4607      	mov	r7, r0
 800b4a4:	1c78      	adds	r0, r7, #1
 800b4a6:	d1d6      	bne.n	800b456 <_vfiprintf_r+0x19e>
 800b4a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4aa:	07d9      	lsls	r1, r3, #31
 800b4ac:	d405      	bmi.n	800b4ba <_vfiprintf_r+0x202>
 800b4ae:	89ab      	ldrh	r3, [r5, #12]
 800b4b0:	059a      	lsls	r2, r3, #22
 800b4b2:	d402      	bmi.n	800b4ba <_vfiprintf_r+0x202>
 800b4b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4b6:	f7fc fdbb 	bl	8008030 <__retarget_lock_release_recursive>
 800b4ba:	89ab      	ldrh	r3, [r5, #12]
 800b4bc:	065b      	lsls	r3, r3, #25
 800b4be:	f53f af1d 	bmi.w	800b2fc <_vfiprintf_r+0x44>
 800b4c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4c4:	e71c      	b.n	800b300 <_vfiprintf_r+0x48>
 800b4c6:	ab03      	add	r3, sp, #12
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	462a      	mov	r2, r5
 800b4cc:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <_vfiprintf_r+0x22c>)
 800b4ce:	a904      	add	r1, sp, #16
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	f7fc f8d7 	bl	8007684 <_printf_i>
 800b4d6:	e7e4      	b.n	800b4a2 <_vfiprintf_r+0x1ea>
 800b4d8:	0800bc41 	.word	0x0800bc41
 800b4dc:	0800bc4b 	.word	0x0800bc4b
 800b4e0:	0800713d 	.word	0x0800713d
 800b4e4:	0800b295 	.word	0x0800b295
 800b4e8:	0800bc47 	.word	0x0800bc47

0800b4ec <__swbuf_r>:
 800b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ee:	460e      	mov	r6, r1
 800b4f0:	4614      	mov	r4, r2
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	b118      	cbz	r0, 800b4fe <__swbuf_r+0x12>
 800b4f6:	6a03      	ldr	r3, [r0, #32]
 800b4f8:	b90b      	cbnz	r3, 800b4fe <__swbuf_r+0x12>
 800b4fa:	f7fc fc81 	bl	8007e00 <__sinit>
 800b4fe:	69a3      	ldr	r3, [r4, #24]
 800b500:	60a3      	str	r3, [r4, #8]
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	071a      	lsls	r2, r3, #28
 800b506:	d525      	bpl.n	800b554 <__swbuf_r+0x68>
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	b31b      	cbz	r3, 800b554 <__swbuf_r+0x68>
 800b50c:	6823      	ldr	r3, [r4, #0]
 800b50e:	6922      	ldr	r2, [r4, #16]
 800b510:	1a98      	subs	r0, r3, r2
 800b512:	6963      	ldr	r3, [r4, #20]
 800b514:	b2f6      	uxtb	r6, r6
 800b516:	4283      	cmp	r3, r0
 800b518:	4637      	mov	r7, r6
 800b51a:	dc04      	bgt.n	800b526 <__swbuf_r+0x3a>
 800b51c:	4621      	mov	r1, r4
 800b51e:	4628      	mov	r0, r5
 800b520:	f7ff fa3a 	bl	800a998 <_fflush_r>
 800b524:	b9e0      	cbnz	r0, 800b560 <__swbuf_r+0x74>
 800b526:	68a3      	ldr	r3, [r4, #8]
 800b528:	3b01      	subs	r3, #1
 800b52a:	60a3      	str	r3, [r4, #8]
 800b52c:	6823      	ldr	r3, [r4, #0]
 800b52e:	1c5a      	adds	r2, r3, #1
 800b530:	6022      	str	r2, [r4, #0]
 800b532:	701e      	strb	r6, [r3, #0]
 800b534:	6962      	ldr	r2, [r4, #20]
 800b536:	1c43      	adds	r3, r0, #1
 800b538:	429a      	cmp	r2, r3
 800b53a:	d004      	beq.n	800b546 <__swbuf_r+0x5a>
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	07db      	lsls	r3, r3, #31
 800b540:	d506      	bpl.n	800b550 <__swbuf_r+0x64>
 800b542:	2e0a      	cmp	r6, #10
 800b544:	d104      	bne.n	800b550 <__swbuf_r+0x64>
 800b546:	4621      	mov	r1, r4
 800b548:	4628      	mov	r0, r5
 800b54a:	f7ff fa25 	bl	800a998 <_fflush_r>
 800b54e:	b938      	cbnz	r0, 800b560 <__swbuf_r+0x74>
 800b550:	4638      	mov	r0, r7
 800b552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b554:	4621      	mov	r1, r4
 800b556:	4628      	mov	r0, r5
 800b558:	f000 f806 	bl	800b568 <__swsetup_r>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d0d5      	beq.n	800b50c <__swbuf_r+0x20>
 800b560:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b564:	e7f4      	b.n	800b550 <__swbuf_r+0x64>
	...

0800b568 <__swsetup_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4b2a      	ldr	r3, [pc, #168]	; (800b614 <__swsetup_r+0xac>)
 800b56c:	4605      	mov	r5, r0
 800b56e:	6818      	ldr	r0, [r3, #0]
 800b570:	460c      	mov	r4, r1
 800b572:	b118      	cbz	r0, 800b57c <__swsetup_r+0x14>
 800b574:	6a03      	ldr	r3, [r0, #32]
 800b576:	b90b      	cbnz	r3, 800b57c <__swsetup_r+0x14>
 800b578:	f7fc fc42 	bl	8007e00 <__sinit>
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b582:	0718      	lsls	r0, r3, #28
 800b584:	d422      	bmi.n	800b5cc <__swsetup_r+0x64>
 800b586:	06d9      	lsls	r1, r3, #27
 800b588:	d407      	bmi.n	800b59a <__swsetup_r+0x32>
 800b58a:	2309      	movs	r3, #9
 800b58c:	602b      	str	r3, [r5, #0]
 800b58e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b592:	81a3      	strh	r3, [r4, #12]
 800b594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b598:	e034      	b.n	800b604 <__swsetup_r+0x9c>
 800b59a:	0758      	lsls	r0, r3, #29
 800b59c:	d512      	bpl.n	800b5c4 <__swsetup_r+0x5c>
 800b59e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5a0:	b141      	cbz	r1, 800b5b4 <__swsetup_r+0x4c>
 800b5a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5a6:	4299      	cmp	r1, r3
 800b5a8:	d002      	beq.n	800b5b0 <__swsetup_r+0x48>
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	f7fd fbd2 	bl	8008d54 <_free_r>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	6363      	str	r3, [r4, #52]	; 0x34
 800b5b4:	89a3      	ldrh	r3, [r4, #12]
 800b5b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5ba:	81a3      	strh	r3, [r4, #12]
 800b5bc:	2300      	movs	r3, #0
 800b5be:	6063      	str	r3, [r4, #4]
 800b5c0:	6923      	ldr	r3, [r4, #16]
 800b5c2:	6023      	str	r3, [r4, #0]
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	f043 0308 	orr.w	r3, r3, #8
 800b5ca:	81a3      	strh	r3, [r4, #12]
 800b5cc:	6923      	ldr	r3, [r4, #16]
 800b5ce:	b94b      	cbnz	r3, 800b5e4 <__swsetup_r+0x7c>
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5da:	d003      	beq.n	800b5e4 <__swsetup_r+0x7c>
 800b5dc:	4621      	mov	r1, r4
 800b5de:	4628      	mov	r0, r5
 800b5e0:	f000 f884 	bl	800b6ec <__smakebuf_r>
 800b5e4:	89a0      	ldrh	r0, [r4, #12]
 800b5e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5ea:	f010 0301 	ands.w	r3, r0, #1
 800b5ee:	d00a      	beq.n	800b606 <__swsetup_r+0x9e>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	60a3      	str	r3, [r4, #8]
 800b5f4:	6963      	ldr	r3, [r4, #20]
 800b5f6:	425b      	negs	r3, r3
 800b5f8:	61a3      	str	r3, [r4, #24]
 800b5fa:	6923      	ldr	r3, [r4, #16]
 800b5fc:	b943      	cbnz	r3, 800b610 <__swsetup_r+0xa8>
 800b5fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b602:	d1c4      	bne.n	800b58e <__swsetup_r+0x26>
 800b604:	bd38      	pop	{r3, r4, r5, pc}
 800b606:	0781      	lsls	r1, r0, #30
 800b608:	bf58      	it	pl
 800b60a:	6963      	ldrpl	r3, [r4, #20]
 800b60c:	60a3      	str	r3, [r4, #8]
 800b60e:	e7f4      	b.n	800b5fa <__swsetup_r+0x92>
 800b610:	2000      	movs	r0, #0
 800b612:	e7f7      	b.n	800b604 <__swsetup_r+0x9c>
 800b614:	20000068 	.word	0x20000068

0800b618 <_raise_r>:
 800b618:	291f      	cmp	r1, #31
 800b61a:	b538      	push	{r3, r4, r5, lr}
 800b61c:	4604      	mov	r4, r0
 800b61e:	460d      	mov	r5, r1
 800b620:	d904      	bls.n	800b62c <_raise_r+0x14>
 800b622:	2316      	movs	r3, #22
 800b624:	6003      	str	r3, [r0, #0]
 800b626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b62e:	b112      	cbz	r2, 800b636 <_raise_r+0x1e>
 800b630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b634:	b94b      	cbnz	r3, 800b64a <_raise_r+0x32>
 800b636:	4620      	mov	r0, r4
 800b638:	f000 f830 	bl	800b69c <_getpid_r>
 800b63c:	462a      	mov	r2, r5
 800b63e:	4601      	mov	r1, r0
 800b640:	4620      	mov	r0, r4
 800b642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b646:	f000 b817 	b.w	800b678 <_kill_r>
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d00a      	beq.n	800b664 <_raise_r+0x4c>
 800b64e:	1c59      	adds	r1, r3, #1
 800b650:	d103      	bne.n	800b65a <_raise_r+0x42>
 800b652:	2316      	movs	r3, #22
 800b654:	6003      	str	r3, [r0, #0]
 800b656:	2001      	movs	r0, #1
 800b658:	e7e7      	b.n	800b62a <_raise_r+0x12>
 800b65a:	2400      	movs	r4, #0
 800b65c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b660:	4628      	mov	r0, r5
 800b662:	4798      	blx	r3
 800b664:	2000      	movs	r0, #0
 800b666:	e7e0      	b.n	800b62a <_raise_r+0x12>

0800b668 <raise>:
 800b668:	4b02      	ldr	r3, [pc, #8]	; (800b674 <raise+0xc>)
 800b66a:	4601      	mov	r1, r0
 800b66c:	6818      	ldr	r0, [r3, #0]
 800b66e:	f7ff bfd3 	b.w	800b618 <_raise_r>
 800b672:	bf00      	nop
 800b674:	20000068 	.word	0x20000068

0800b678 <_kill_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4d07      	ldr	r5, [pc, #28]	; (800b698 <_kill_r+0x20>)
 800b67c:	2300      	movs	r3, #0
 800b67e:	4604      	mov	r4, r0
 800b680:	4608      	mov	r0, r1
 800b682:	4611      	mov	r1, r2
 800b684:	602b      	str	r3, [r5, #0]
 800b686:	f7f5 ffb1 	bl	80015ec <_kill>
 800b68a:	1c43      	adds	r3, r0, #1
 800b68c:	d102      	bne.n	800b694 <_kill_r+0x1c>
 800b68e:	682b      	ldr	r3, [r5, #0]
 800b690:	b103      	cbz	r3, 800b694 <_kill_r+0x1c>
 800b692:	6023      	str	r3, [r4, #0]
 800b694:	bd38      	pop	{r3, r4, r5, pc}
 800b696:	bf00      	nop
 800b698:	20004d28 	.word	0x20004d28

0800b69c <_getpid_r>:
 800b69c:	f7f5 bf9e 	b.w	80015dc <_getpid>

0800b6a0 <__swhatbuf_r>:
 800b6a0:	b570      	push	{r4, r5, r6, lr}
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a8:	2900      	cmp	r1, #0
 800b6aa:	b096      	sub	sp, #88	; 0x58
 800b6ac:	4615      	mov	r5, r2
 800b6ae:	461e      	mov	r6, r3
 800b6b0:	da0d      	bge.n	800b6ce <__swhatbuf_r+0x2e>
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b6b8:	f04f 0100 	mov.w	r1, #0
 800b6bc:	bf0c      	ite	eq
 800b6be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b6c2:	2340      	movne	r3, #64	; 0x40
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	6031      	str	r1, [r6, #0]
 800b6c8:	602b      	str	r3, [r5, #0]
 800b6ca:	b016      	add	sp, #88	; 0x58
 800b6cc:	bd70      	pop	{r4, r5, r6, pc}
 800b6ce:	466a      	mov	r2, sp
 800b6d0:	f000 f848 	bl	800b764 <_fstat_r>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	dbec      	blt.n	800b6b2 <__swhatbuf_r+0x12>
 800b6d8:	9901      	ldr	r1, [sp, #4]
 800b6da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b6de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b6e2:	4259      	negs	r1, r3
 800b6e4:	4159      	adcs	r1, r3
 800b6e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ea:	e7eb      	b.n	800b6c4 <__swhatbuf_r+0x24>

0800b6ec <__smakebuf_r>:
 800b6ec:	898b      	ldrh	r3, [r1, #12]
 800b6ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6f0:	079d      	lsls	r5, r3, #30
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	d507      	bpl.n	800b708 <__smakebuf_r+0x1c>
 800b6f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	6123      	str	r3, [r4, #16]
 800b700:	2301      	movs	r3, #1
 800b702:	6163      	str	r3, [r4, #20]
 800b704:	b002      	add	sp, #8
 800b706:	bd70      	pop	{r4, r5, r6, pc}
 800b708:	ab01      	add	r3, sp, #4
 800b70a:	466a      	mov	r2, sp
 800b70c:	f7ff ffc8 	bl	800b6a0 <__swhatbuf_r>
 800b710:	9900      	ldr	r1, [sp, #0]
 800b712:	4605      	mov	r5, r0
 800b714:	4630      	mov	r0, r6
 800b716:	f7fd fb91 	bl	8008e3c <_malloc_r>
 800b71a:	b948      	cbnz	r0, 800b730 <__smakebuf_r+0x44>
 800b71c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b720:	059a      	lsls	r2, r3, #22
 800b722:	d4ef      	bmi.n	800b704 <__smakebuf_r+0x18>
 800b724:	f023 0303 	bic.w	r3, r3, #3
 800b728:	f043 0302 	orr.w	r3, r3, #2
 800b72c:	81a3      	strh	r3, [r4, #12]
 800b72e:	e7e3      	b.n	800b6f8 <__smakebuf_r+0xc>
 800b730:	89a3      	ldrh	r3, [r4, #12]
 800b732:	6020      	str	r0, [r4, #0]
 800b734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b738:	81a3      	strh	r3, [r4, #12]
 800b73a:	9b00      	ldr	r3, [sp, #0]
 800b73c:	6163      	str	r3, [r4, #20]
 800b73e:	9b01      	ldr	r3, [sp, #4]
 800b740:	6120      	str	r0, [r4, #16]
 800b742:	b15b      	cbz	r3, 800b75c <__smakebuf_r+0x70>
 800b744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b748:	4630      	mov	r0, r6
 800b74a:	f000 f81d 	bl	800b788 <_isatty_r>
 800b74e:	b128      	cbz	r0, 800b75c <__smakebuf_r+0x70>
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	f023 0303 	bic.w	r3, r3, #3
 800b756:	f043 0301 	orr.w	r3, r3, #1
 800b75a:	81a3      	strh	r3, [r4, #12]
 800b75c:	89a3      	ldrh	r3, [r4, #12]
 800b75e:	431d      	orrs	r5, r3
 800b760:	81a5      	strh	r5, [r4, #12]
 800b762:	e7cf      	b.n	800b704 <__smakebuf_r+0x18>

0800b764 <_fstat_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4d07      	ldr	r5, [pc, #28]	; (800b784 <_fstat_r+0x20>)
 800b768:	2300      	movs	r3, #0
 800b76a:	4604      	mov	r4, r0
 800b76c:	4608      	mov	r0, r1
 800b76e:	4611      	mov	r1, r2
 800b770:	602b      	str	r3, [r5, #0]
 800b772:	f7f5 ff9a 	bl	80016aa <_fstat>
 800b776:	1c43      	adds	r3, r0, #1
 800b778:	d102      	bne.n	800b780 <_fstat_r+0x1c>
 800b77a:	682b      	ldr	r3, [r5, #0]
 800b77c:	b103      	cbz	r3, 800b780 <_fstat_r+0x1c>
 800b77e:	6023      	str	r3, [r4, #0]
 800b780:	bd38      	pop	{r3, r4, r5, pc}
 800b782:	bf00      	nop
 800b784:	20004d28 	.word	0x20004d28

0800b788 <_isatty_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4d06      	ldr	r5, [pc, #24]	; (800b7a4 <_isatty_r+0x1c>)
 800b78c:	2300      	movs	r3, #0
 800b78e:	4604      	mov	r4, r0
 800b790:	4608      	mov	r0, r1
 800b792:	602b      	str	r3, [r5, #0]
 800b794:	f7f5 ff99 	bl	80016ca <_isatty>
 800b798:	1c43      	adds	r3, r0, #1
 800b79a:	d102      	bne.n	800b7a2 <_isatty_r+0x1a>
 800b79c:	682b      	ldr	r3, [r5, #0]
 800b79e:	b103      	cbz	r3, 800b7a2 <_isatty_r+0x1a>
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	bd38      	pop	{r3, r4, r5, pc}
 800b7a4:	20004d28 	.word	0x20004d28

0800b7a8 <_init>:
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	bf00      	nop
 800b7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ae:	bc08      	pop	{r3}
 800b7b0:	469e      	mov	lr, r3
 800b7b2:	4770      	bx	lr

0800b7b4 <_fini>:
 800b7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b6:	bf00      	nop
 800b7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ba:	bc08      	pop	{r3}
 800b7bc:	469e      	mov	lr, r3
 800b7be:	4770      	bx	lr
