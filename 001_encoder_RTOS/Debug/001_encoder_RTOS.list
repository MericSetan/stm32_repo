
001_encoder_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006018  08006018  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006018  08006018  00016018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006020  08006020  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006024  08006024  00016024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b04  20000060  08006088  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b64  08006088  00024b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d48  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c5f  00000000  00000000  00031e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00034a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b56  00000000  00000000  00035948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003746  00000000  00000000  0003649e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001055b  00000000  00000000  00039be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ff38  00000000  00000000  0004a13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041ac  00000000  00000000  000da078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000de224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f24 	.word	0x08005f24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005f24 	.word	0x08005f24

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000590:	f000 fa94 	bl	8000abc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000594:	f000 f818 	bl	80005c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000598:	f000 f8a8 	bl	80006ec <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800059c:	f000 f87c 	bl	8000698 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80005a0:	f002 fb1e 	bl	8002be0 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of encoderTask */
	encoderTaskHandle = osThreadNew(get_encoder_task, NULL,
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <main+0x30>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <main+0x34>)
 80005aa:	f002 fb63 	bl	8002c74 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <main+0x38>)
 80005b2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80005b4:	f002 fb38 	bl	8002c28 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005b8:	e7fe      	b.n	80005b8 <main+0x2c>
 80005ba:	bf00      	nop
 80005bc:	08005fa8 	.word	0x08005fa8
 80005c0:	08000781 	.word	0x08000781
 80005c4:	200000c0 	.word	0x200000c0

080005c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f005 f820 	bl	800561c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <SystemClock_Config+0xc8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a26      	ldr	r2, [pc, #152]	; (8000690 <SystemClock_Config+0xc8>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <SystemClock_Config+0xc8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b21      	ldr	r3, [pc, #132]	; (8000694 <SystemClock_Config+0xcc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a20      	ldr	r2, [pc, #128]	; (8000694 <SystemClock_Config+0xcc>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <SystemClock_Config+0xcc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fde7 	bl	8001220 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x94>
		Error_Handler();
 8000658:	f000 f90e 	bl	8000878 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2103      	movs	r1, #3
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f849 	bl	8001710 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xc0>
		Error_Handler();
 8000684:	f000 f8f8 	bl	8000878 <Error_Handler>
	}
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	; 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_USART2_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006a8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f001 fa3e 	bl	8001b50 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80006da:	f000 f8cd 	bl	8000878 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000007c 	.word	0x2000007c
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <MX_GPIO_Init+0x8c>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_GPIO_Init+0x8c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8000756:	2330      	movs	r3, #48	; 0x30
 8000758:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4619      	mov	r1, r3
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_GPIO_Init+0x90>)
 800076a:	f000 fbbd 	bl	8000ee8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800076e:	bf00      	nop
 8000770:	3720      	adds	r7, #32
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40020400 	.word	0x40020400

08000780 <get_encoder_task>:
 * @brief  Function implementing the encoderTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_get_encoder_task */
void get_encoder_task(void *argument) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	; 0x30
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int encoderPosCount = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
	char posCount[20];
	int pinALast;
	int aVal;
	bool bCW;
	pinALast = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 800078c:	2120      	movs	r1, #32
 800078e:	4832      	ldr	r0, [pc, #200]	; (8000858 <get_encoder_task+0xd8>)
 8000790:	f000 fd2e 	bl	80011f0 <HAL_GPIO_ReadPin>
 8000794:	4603      	mov	r3, r0
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
	/* Infinite loop */
	for (;;) {
		aVal = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000798:	2120      	movs	r1, #32
 800079a:	482f      	ldr	r0, [pc, #188]	; (8000858 <get_encoder_task+0xd8>)
 800079c:	f000 fd28 	bl	80011f0 <HAL_GPIO_ReadPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	623b      	str	r3, [r7, #32]
		if (aVal != pinALast) {
 80007a4:	6a3a      	ldr	r2, [r7, #32]
 80007a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d052      	beq.n	8000852 <get_encoder_task+0xd2>

			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) != aVal) {
 80007ac:	2110      	movs	r1, #16
 80007ae:	482a      	ldr	r0, [pc, #168]	; (8000858 <get_encoder_task+0xd8>)
 80007b0:	f000 fd1e 	bl	80011f0 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	6a3b      	ldr	r3, [r7, #32]
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d006      	beq.n	80007cc <get_encoder_task+0x4c>
				encoderPosCount++;
 80007be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c0:	3301      	adds	r3, #1
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
				bCW = 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007ca:	e005      	b.n	80007d8 <get_encoder_task+0x58>
			} else {
				bCW = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				encoderPosCount--;
 80007d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d4:	3b01      	subs	r3, #1
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			HAL_UART_Transmit(&huart2, (uint8_t*) "Rotated: ", 8,
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007dc:	2208      	movs	r2, #8
 80007de:	491f      	ldr	r1, [pc, #124]	; (800085c <get_encoder_task+0xdc>)
 80007e0:	481f      	ldr	r0, [pc, #124]	; (8000860 <get_encoder_task+0xe0>)
 80007e2:	f001 fa02 	bl	8001bea <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			if (bCW) {
 80007e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d007      	beq.n	80007fe <get_encoder_task+0x7e>
				HAL_UART_Transmit(&huart2, (uint8_t*) "clockwise\n", 9,
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007f2:	2209      	movs	r2, #9
 80007f4:	491b      	ldr	r1, [pc, #108]	; (8000864 <get_encoder_task+0xe4>)
 80007f6:	481a      	ldr	r0, [pc, #104]	; (8000860 <get_encoder_task+0xe0>)
 80007f8:	f001 f9f7 	bl	8001bea <HAL_UART_Transmit>
 80007fc:	e006      	b.n	800080c <get_encoder_task+0x8c>
				HAL_MAX_DELAY);
			} else {
				HAL_UART_Transmit(&huart2, (uint8_t*) "counterclockwise\n", 15,
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000802:	220f      	movs	r2, #15
 8000804:	4918      	ldr	r1, [pc, #96]	; (8000868 <get_encoder_task+0xe8>)
 8000806:	4816      	ldr	r0, [pc, #88]	; (8000860 <get_encoder_task+0xe0>)
 8000808:	f001 f9ef 	bl	8001bea <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}
			HAL_UART_Transmit(&huart2, (uint8_t*) "Encoder Position: ", 17,
 800080c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000810:	2211      	movs	r2, #17
 8000812:	4916      	ldr	r1, [pc, #88]	; (800086c <get_encoder_task+0xec>)
 8000814:	4812      	ldr	r0, [pc, #72]	; (8000860 <get_encoder_task+0xe0>)
 8000816:	f001 f9e8 	bl	8001bea <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			sprintf(posCount, "%d", encoderPosCount);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000820:	4913      	ldr	r1, [pc, #76]	; (8000870 <get_encoder_task+0xf0>)
 8000822:	4618      	mov	r0, r3
 8000824:	f004 feda 	bl	80055dc <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) posCount, strlen(posCount),
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fcd7 	bl	80001e0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	f107 010c 	add.w	r1, r7, #12
 800083a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800083e:	4808      	ldr	r0, [pc, #32]	; (8000860 <get_encoder_task+0xe0>)
 8000840:	f001 f9d3 	bl	8001bea <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, HAL_MAX_DELAY);
 8000844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000848:	2201      	movs	r2, #1
 800084a:	490a      	ldr	r1, [pc, #40]	; (8000874 <get_encoder_task+0xf4>)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <get_encoder_task+0xe0>)
 800084e:	f001 f9cc 	bl	8001bea <HAL_UART_Transmit>

		}
		pinALast = aVal;
 8000852:	6a3b      	ldr	r3, [r7, #32]
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
		aVal = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000856:	e79f      	b.n	8000798 <get_encoder_task+0x18>
 8000858:	40020400 	.word	0x40020400
 800085c:	08005f48 	.word	0x08005f48
 8000860:	2000007c 	.word	0x2000007c
 8000864:	08005f54 	.word	0x08005f54
 8000868:	08005f60 	.word	0x08005f60
 800086c:	08005f74 	.word	0x08005f74
 8000870:	08005f88 	.word	0x08005f88
 8000874:	08005f8c 	.word	0x08005f8c

08000878 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_MspInit+0x54>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <HAL_MspInit+0x54>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_MspInit+0x54>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_MspInit+0x54>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <HAL_MspInit+0x54>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_MspInit+0x54>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	210f      	movs	r1, #15
 80008c6:	f06f 0001 	mvn.w	r0, #1
 80008ca:	f000 fa44 	bl	8000d56 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a1d      	ldr	r2, [pc, #116]	; (8000970 <HAL_UART_MspInit+0x94>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d133      	bne.n	8000966 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_UART_MspInit+0x98>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a1b      	ldr	r2, [pc, #108]	; (8000974 <HAL_UART_MspInit+0x98>)
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_UART_MspInit+0x98>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_UART_MspInit+0x98>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <HAL_UART_MspInit+0x98>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_UART_MspInit+0x98>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000936:	230c      	movs	r3, #12
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000946:	2307      	movs	r3, #7
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <HAL_UART_MspInit+0x9c>)
 8000952:	f000 fac9 	bl	8000ee8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2105      	movs	r1, #5
 800095a:	2026      	movs	r0, #38	; 0x26
 800095c:	f000 f9fb 	bl	8000d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000960:	2026      	movs	r0, #38	; 0x26
 8000962:	f000 fa14 	bl	8000d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40004400 	.word	0x40004400
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f8d8 	bl	8000b60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009b0:	f003 fdb0 	bl	8004514 <xTaskGetSchedulerState>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d001      	beq.n	80009be <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009ba:	f004 fb95 	bl	80050e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <USART2_IRQHandler+0x10>)
 80009ca:	f001 f9a1 	bl	8001d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000007c 	.word	0x2000007c

080009d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <_sbrk+0x5c>)
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <_sbrk+0x60>)
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <_sbrk+0x64>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <_sbrk+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d207      	bcs.n	8000a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a08:	f004 fe10 	bl	800562c <__errno>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	220c      	movs	r2, #12
 8000a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a16:	e009      	b.n	8000a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <_sbrk+0x64>)
 8000a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20020000 	.word	0x20020000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	200000c4 	.word	0x200000c4
 8000a40:	20004b68 	.word	0x20004b68

08000a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a6e:	490e      	ldr	r1, [pc, #56]	; (8000aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a84:	4c0b      	ldr	r4, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a92:	f7ff ffd7 	bl	8000a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f004 fdcf 	bl	8005638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff fd77 	bl	800058c <main>
  bx  lr    
 8000a9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000aac:	08006028 	.word	0x08006028
  ldr r2, =_sbss
 8000ab0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ab4:	20004b64 	.word	0x20004b64

08000ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>
	...

08000abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <HAL_Init+0x40>)
 8000ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_Init+0x40>)
 8000ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_Init+0x40>)
 8000ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f92b 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aea:	200f      	movs	r0, #15
 8000aec:	f000 f808 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af0:	f7ff fec8 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023c00 	.word	0x40023c00

08000b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x54>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_InitTick+0x58>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f943 	bl	8000daa <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00e      	b.n	8000b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d80a      	bhi.n	8000b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b3c:	f000 f90b 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b40:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <HAL_InitTick+0x5c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000004 	.word	0x20000004

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	200000c8 	.word	0x200000c8

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	200000c8 	.word	0x200000c8

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	; (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d20:	f7ff ff8e 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff29 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff3e 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff8e 	bl	8000c94 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5d 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff31 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffa2 	bl	8000cfc <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff feda 	bl	8000b88 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d008      	beq.n	8000df4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e052      	b.n	8000e9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0216 	bic.w	r2, r2, #22
 8000e02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	695a      	ldr	r2, [r3, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d103      	bne.n	8000e24 <HAL_DMA_Abort+0x62>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d007      	beq.n	8000e34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 0208 	bic.w	r2, r2, #8
 8000e32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 0201 	bic.w	r2, r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e44:	e013      	b.n	8000e6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e46:	f7ff fe9f 	bl	8000b88 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b05      	cmp	r3, #5
 8000e52:	d90c      	bls.n	8000e6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2220      	movs	r2, #32
 8000e58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e015      	b.n	8000e9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1e4      	bne.n	8000e46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e80:	223f      	movs	r2, #63	; 0x3f
 8000e82:	409a      	lsls	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d004      	beq.n	8000ec0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e00c      	b.n	8000eda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2205      	movs	r2, #5
 8000ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0201 	bic.w	r2, r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e159      	b.n	80011b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 8148 	bne.w	80011b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d005      	beq.n	8000f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d130      	bne.n	8000f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f003 0201 	and.w	r2, r3, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d017      	beq.n	8000fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80a2 	beq.w	80011b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <HAL_GPIO_Init+0x2e8>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a56      	ldr	r2, [pc, #344]	; (80011d0 <HAL_GPIO_Init+0x2e8>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b54      	ldr	r3, [pc, #336]	; (80011d0 <HAL_GPIO_Init+0x2e8>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108a:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <HAL_GPIO_Init+0x2ec>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a49      	ldr	r2, [pc, #292]	; (80011d8 <HAL_GPIO_Init+0x2f0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d019      	beq.n	80010ea <HAL_GPIO_Init+0x202>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a48      	ldr	r2, [pc, #288]	; (80011dc <HAL_GPIO_Init+0x2f4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d013      	beq.n	80010e6 <HAL_GPIO_Init+0x1fe>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a47      	ldr	r2, [pc, #284]	; (80011e0 <HAL_GPIO_Init+0x2f8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00d      	beq.n	80010e2 <HAL_GPIO_Init+0x1fa>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a46      	ldr	r2, [pc, #280]	; (80011e4 <HAL_GPIO_Init+0x2fc>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d007      	beq.n	80010de <HAL_GPIO_Init+0x1f6>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a45      	ldr	r2, [pc, #276]	; (80011e8 <HAL_GPIO_Init+0x300>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_GPIO_Init+0x1f2>
 80010d6:	2304      	movs	r3, #4
 80010d8:	e008      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010da:	2307      	movs	r3, #7
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010de:	2303      	movs	r3, #3
 80010e0:	e004      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e002      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010ea:	2300      	movs	r3, #0
 80010ec:	69fa      	ldr	r2, [r7, #28]
 80010ee:	f002 0203 	and.w	r2, r2, #3
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	4093      	lsls	r3, r2
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010fc:	4935      	ldr	r1, [pc, #212]	; (80011d4 <HAL_GPIO_Init+0x2ec>)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110a:	4b38      	ldr	r3, [pc, #224]	; (80011ec <HAL_GPIO_Init+0x304>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112e:	4a2f      	ldr	r2, [pc, #188]	; (80011ec <HAL_GPIO_Init+0x304>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <HAL_GPIO_Init+0x304>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001158:	4a24      	ldr	r2, [pc, #144]	; (80011ec <HAL_GPIO_Init+0x304>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HAL_GPIO_Init+0x304>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001182:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <HAL_GPIO_Init+0x304>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_GPIO_Init+0x304>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_GPIO_Init+0x304>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3301      	adds	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	f67f aea2 	bls.w	8000f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40013800 	.word	0x40013800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40013c00 	.word	0x40013c00

080011f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e001      	b.n	8001212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e267      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	d075      	beq.n	800132a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123e:	4b88      	ldr	r3, [pc, #544]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	2b04      	cmp	r3, #4
 8001248:	d00c      	beq.n	8001264 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124a:	4b85      	ldr	r3, [pc, #532]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001252:	2b08      	cmp	r3, #8
 8001254:	d112      	bne.n	800127c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001256:	4b82      	ldr	r3, [pc, #520]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001262:	d10b      	bne.n	800127c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001264:	4b7e      	ldr	r3, [pc, #504]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d05b      	beq.n	8001328 <HAL_RCC_OscConfig+0x108>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d157      	bne.n	8001328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e242      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001284:	d106      	bne.n	8001294 <HAL_RCC_OscConfig+0x74>
 8001286:	4b76      	ldr	r3, [pc, #472]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a75      	ldr	r2, [pc, #468]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 800128c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e01d      	b.n	80012d0 <HAL_RCC_OscConfig+0xb0>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x98>
 800129e:	4b70      	ldr	r3, [pc, #448]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a6f      	ldr	r2, [pc, #444]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b6d      	ldr	r3, [pc, #436]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a6c      	ldr	r2, [pc, #432]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e00b      	b.n	80012d0 <HAL_RCC_OscConfig+0xb0>
 80012b8:	4b69      	ldr	r3, [pc, #420]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a68      	ldr	r2, [pc, #416]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b66      	ldr	r3, [pc, #408]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a65      	ldr	r2, [pc, #404]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d013      	beq.n	8001300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fc56 	bl	8000b88 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fc52 	bl	8000b88 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e207      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b5b      	ldr	r3, [pc, #364]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0xc0>
 80012fe:	e014      	b.n	800132a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fc42 	bl	8000b88 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fc3e 	bl	8000b88 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e1f3      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	4b51      	ldr	r3, [pc, #324]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0xe8>
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d063      	beq.n	80013fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001336:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00b      	beq.n	800135a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001342:	4b47      	ldr	r3, [pc, #284]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134a:	2b08      	cmp	r3, #8
 800134c:	d11c      	bne.n	8001388 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134e:	4b44      	ldr	r3, [pc, #272]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d116      	bne.n	8001388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	4b41      	ldr	r3, [pc, #260]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x152>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e1c7      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4937      	ldr	r1, [pc, #220]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	e03a      	b.n	80013fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <HAL_RCC_OscConfig+0x244>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7ff fbf7 	bl	8000b88 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff fbf3 	bl	8000b88 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e1a8      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4925      	ldr	r1, [pc, #148]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
 80013d0:	e015      	b.n	80013fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_RCC_OscConfig+0x244>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fbd6 	bl	8000b88 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e0:	f7ff fbd2 	bl	8000b88 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e187      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d036      	beq.n	8001478 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d016      	beq.n	8001440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_RCC_OscConfig+0x248>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff fbb6 	bl	8000b88 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001420:	f7ff fbb2 	bl	8000b88 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e167      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_RCC_OscConfig+0x240>)
 8001434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0x200>
 800143e:	e01b      	b.n	8001478 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RCC_OscConfig+0x248>)
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff fb9f 	bl	8000b88 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	e00e      	b.n	800146c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144e:	f7ff fb9b 	bl	8000b88 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d907      	bls.n	800146c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e150      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
 8001460:	40023800 	.word	0x40023800
 8001464:	42470000 	.word	0x42470000
 8001468:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	4b88      	ldr	r3, [pc, #544]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800146e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1ea      	bne.n	800144e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 8097 	beq.w	80015b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148a:	4b81      	ldr	r3, [pc, #516]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10f      	bne.n	80014b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b7d      	ldr	r3, [pc, #500]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a7c      	ldr	r2, [pc, #496]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b7a      	ldr	r3, [pc, #488]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b2:	2301      	movs	r3, #1
 80014b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b6:	4b77      	ldr	r3, [pc, #476]	; (8001694 <HAL_RCC_OscConfig+0x474>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d118      	bne.n	80014f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c2:	4b74      	ldr	r3, [pc, #464]	; (8001694 <HAL_RCC_OscConfig+0x474>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a73      	ldr	r2, [pc, #460]	; (8001694 <HAL_RCC_OscConfig+0x474>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fb5b 	bl	8000b88 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d6:	f7ff fb57 	bl	8000b88 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e10c      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	4b6a      	ldr	r3, [pc, #424]	; (8001694 <HAL_RCC_OscConfig+0x474>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x2ea>
 80014fc:	4b64      	ldr	r3, [pc, #400]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001500:	4a63      	ldr	r2, [pc, #396]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6713      	str	r3, [r2, #112]	; 0x70
 8001508:	e01c      	b.n	8001544 <HAL_RCC_OscConfig+0x324>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b05      	cmp	r3, #5
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x30c>
 8001512:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001516:	4a5e      	ldr	r2, [pc, #376]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6713      	str	r3, [r2, #112]	; 0x70
 800151e:	4b5c      	ldr	r3, [pc, #368]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	4a5b      	ldr	r2, [pc, #364]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6713      	str	r3, [r2, #112]	; 0x70
 800152a:	e00b      	b.n	8001544 <HAL_RCC_OscConfig+0x324>
 800152c:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	4a57      	ldr	r2, [pc, #348]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001532:	f023 0301 	bic.w	r3, r3, #1
 8001536:	6713      	str	r3, [r2, #112]	; 0x70
 8001538:	4b55      	ldr	r3, [pc, #340]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	4a54      	ldr	r2, [pc, #336]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800153e:	f023 0304 	bic.w	r3, r3, #4
 8001542:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d015      	beq.n	8001578 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff fb1c 	bl	8000b88 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001552:	e00a      	b.n	800156a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001554:	f7ff fb18 	bl	8000b88 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e0cb      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156a:	4b49      	ldr	r3, [pc, #292]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0ee      	beq.n	8001554 <HAL_RCC_OscConfig+0x334>
 8001576:	e014      	b.n	80015a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001578:	f7ff fb06 	bl	8000b88 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157e:	e00a      	b.n	8001596 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001580:	f7ff fb02 	bl	8000b88 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	; 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0b5      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001596:	4b3e      	ldr	r3, [pc, #248]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1ee      	bne.n	8001580 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a8:	4b39      	ldr	r3, [pc, #228]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	4a38      	ldr	r2, [pc, #224]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80015ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80a1 	beq.w	8001700 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d05c      	beq.n	8001684 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d141      	bne.n	8001656 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_RCC_OscConfig+0x478>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fad6 	bl	8000b88 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e0:	f7ff fad2 	bl	8000b88 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e087      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	4b27      	ldr	r3, [pc, #156]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69da      	ldr	r2, [r3, #28]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	019b      	lsls	r3, r3, #6
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	3b01      	subs	r3, #1
 8001618:	041b      	lsls	r3, r3, #16
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	061b      	lsls	r3, r3, #24
 8001622:	491b      	ldr	r1, [pc, #108]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_RCC_OscConfig+0x478>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff faab 	bl	8000b88 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001636:	f7ff faa7 	bl	8000b88 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e05c      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x416>
 8001654:	e054      	b.n	8001700 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_RCC_OscConfig+0x478>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fa94 	bl	8000b88 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fa90 	bl	8000b88 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e045      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_RCC_OscConfig+0x470>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x444>
 8001682:	e03d      	b.n	8001700 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d107      	bne.n	800169c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e038      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
 8001690:	40023800 	.word	0x40023800
 8001694:	40007000 	.word	0x40007000
 8001698:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_RCC_OscConfig+0x4ec>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d028      	beq.n	80016fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d121      	bne.n	80016fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d11a      	bne.n	80016fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016cc:	4013      	ands	r3, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d111      	bne.n	80016fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	085b      	lsrs	r3, r3, #1
 80016e4:	3b01      	subs	r3, #1
 80016e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0cc      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d90c      	bls.n	800174c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0b8      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d020      	beq.n	800179a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001764:	4b59      	ldr	r3, [pc, #356]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a58      	ldr	r2, [pc, #352]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800176e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a52      	ldr	r2, [pc, #328]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001788:	4b50      	ldr	r3, [pc, #320]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	494d      	ldr	r1, [pc, #308]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d044      	beq.n	8001830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d119      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e07f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e06f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e067      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4934      	ldr	r1, [pc, #208]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001800:	f7ff f9c2 	bl	8000b88 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff f9be 	bl	8000b88 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e04f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d20c      	bcs.n	8001858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e032      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4916      	ldr	r1, [pc, #88]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	490e      	ldr	r1, [pc, #56]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001896:	f000 f821 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 800189a:	4602      	mov	r2, r0
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	490a      	ldr	r1, [pc, #40]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	5ccb      	ldrb	r3, [r1, r3]
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_RCC_ClockConfig+0x1c8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f922 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00
 80018cc:	40023800 	.word	0x40023800
 80018d0:	08005fcc 	.word	0x08005fcc
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e0:	b094      	sub	sp, #80	; 0x50
 80018e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	647b      	str	r3, [r7, #68]	; 0x44
 80018e8:	2300      	movs	r3, #0
 80018ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018ec:	2300      	movs	r3, #0
 80018ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f4:	4b79      	ldr	r3, [pc, #484]	; (8001adc <HAL_RCC_GetSysClockFreq+0x200>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d00d      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x40>
 8001900:	2b08      	cmp	r3, #8
 8001902:	f200 80e1 	bhi.w	8001ac8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x34>
 800190a:	2b04      	cmp	r3, #4
 800190c:	d003      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0x3a>
 800190e:	e0db      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b73      	ldr	r3, [pc, #460]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001914:	e0db      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001916:	4b73      	ldr	r3, [pc, #460]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001918:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800191a:	e0d8      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800191c:	4b6f      	ldr	r3, [pc, #444]	; (8001adc <HAL_RCC_GetSysClockFreq+0x200>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001924:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001926:	4b6d      	ldr	r3, [pc, #436]	; (8001adc <HAL_RCC_GetSysClockFreq+0x200>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d063      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001932:	4b6a      	ldr	r3, [pc, #424]	; (8001adc <HAL_RCC_GetSysClockFreq+0x200>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	2200      	movs	r2, #0
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
 800193c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800193e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
 800194a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800194e:	4622      	mov	r2, r4
 8001950:	462b      	mov	r3, r5
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	0159      	lsls	r1, r3, #5
 800195c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001960:	0150      	lsls	r0, r2, #5
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4621      	mov	r1, r4
 8001968:	1a51      	subs	r1, r2, r1
 800196a:	6139      	str	r1, [r7, #16]
 800196c:	4629      	mov	r1, r5
 800196e:	eb63 0301 	sbc.w	r3, r3, r1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001980:	4659      	mov	r1, fp
 8001982:	018b      	lsls	r3, r1, #6
 8001984:	4651      	mov	r1, sl
 8001986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800198a:	4651      	mov	r1, sl
 800198c:	018a      	lsls	r2, r1, #6
 800198e:	4651      	mov	r1, sl
 8001990:	ebb2 0801 	subs.w	r8, r2, r1
 8001994:	4659      	mov	r1, fp
 8001996:	eb63 0901 	sbc.w	r9, r3, r1
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ae:	4690      	mov	r8, r2
 80019b0:	4699      	mov	r9, r3
 80019b2:	4623      	mov	r3, r4
 80019b4:	eb18 0303 	adds.w	r3, r8, r3
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	462b      	mov	r3, r5
 80019bc:	eb49 0303 	adc.w	r3, r9, r3
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ce:	4629      	mov	r1, r5
 80019d0:	024b      	lsls	r3, r1, #9
 80019d2:	4621      	mov	r1, r4
 80019d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019d8:	4621      	mov	r1, r4
 80019da:	024a      	lsls	r2, r1, #9
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e2:	2200      	movs	r2, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019ec:	f7fe fc50 	bl	8000290 <__aeabi_uldivmod>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4613      	mov	r3, r2
 80019f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019f8:	e058      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fa:	4b38      	ldr	r3, [pc, #224]	; (8001adc <HAL_RCC_GetSysClockFreq+0x200>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	099b      	lsrs	r3, r3, #6
 8001a00:	2200      	movs	r2, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	4611      	mov	r1, r2
 8001a06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a0a:	623b      	str	r3, [r7, #32]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a14:	4642      	mov	r2, r8
 8001a16:	464b      	mov	r3, r9
 8001a18:	f04f 0000 	mov.w	r0, #0
 8001a1c:	f04f 0100 	mov.w	r1, #0
 8001a20:	0159      	lsls	r1, r3, #5
 8001a22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a26:	0150      	lsls	r0, r2, #5
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4641      	mov	r1, r8
 8001a2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a32:	4649      	mov	r1, r9
 8001a34:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a4c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a50:	eb63 050b 	sbc.w	r5, r3, fp
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	00eb      	lsls	r3, r5, #3
 8001a5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a62:	00e2      	lsls	r2, r4, #3
 8001a64:	4614      	mov	r4, r2
 8001a66:	461d      	mov	r5, r3
 8001a68:	4643      	mov	r3, r8
 8001a6a:	18e3      	adds	r3, r4, r3
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	464b      	mov	r3, r9
 8001a70:	eb45 0303 	adc.w	r3, r5, r3
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a82:	4629      	mov	r1, r5
 8001a84:	028b      	lsls	r3, r1, #10
 8001a86:	4621      	mov	r1, r4
 8001a88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	028a      	lsls	r2, r1, #10
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a96:	2200      	movs	r2, #0
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	61fa      	str	r2, [r7, #28]
 8001a9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aa0:	f7fe fbf6 	bl	8000290 <__aeabi_uldivmod>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_GetSysClockFreq+0x200>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001abc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ac6:	e002      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3750      	adds	r7, #80	; 0x50
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	00f42400 	.word	0x00f42400
 8001ae4:	007a1200 	.word	0x007a1200

08001ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_RCC_GetHCLKFreq+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000000 	.word	0x20000000

08001b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b04:	f7ff fff0 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	0a9b      	lsrs	r3, r3, #10
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4903      	ldr	r1, [pc, #12]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	08005fdc 	.word	0x08005fdc

08001b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b2c:	f7ff ffdc 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	0b5b      	lsrs	r3, r3, #13
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4903      	ldr	r1, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	08005fdc 	.word	0x08005fdc

08001b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e03f      	b.n	8001be2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d106      	bne.n	8001b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7fe feb0 	bl	80008dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2224      	movs	r2, #36	; 0x24
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fd7b 	bl	8002690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b08a      	sub	sp, #40	; 0x28
 8001bee:	af02      	add	r7, sp, #8
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d17c      	bne.n	8001d04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_UART_Transmit+0x2c>
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e075      	b.n	8001d06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_UART_Transmit+0x3e>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e06e      	b.n	8001d06 <HAL_UART_Transmit+0x11c>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2221      	movs	r2, #33	; 0x21
 8001c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c3e:	f7fe ffa3 	bl	8000b88 <HAL_GetTick>
 8001c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	88fa      	ldrh	r2, [r7, #6]
 8001c48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	88fa      	ldrh	r2, [r7, #6]
 8001c4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c58:	d108      	bne.n	8001c6c <HAL_UART_Transmit+0x82>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d104      	bne.n	8001c6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	e003      	b.n	8001c74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c7c:	e02a      	b.n	8001cd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2200      	movs	r2, #0
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 faf9 	bl	8002280 <UART_WaitOnFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e036      	b.n	8001d06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	e007      	b.n	8001cc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1cf      	bne.n	8001c7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2140      	movs	r1, #64	; 0x40
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 fac9 	bl	8002280 <UART_WaitOnFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e006      	b.n	8001d06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	e000      	b.n	8001d06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d04:	2302      	movs	r3, #2
  }
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3720      	adds	r7, #32
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0ba      	sub	sp, #232	; 0xe8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10f      	bne.n	8001d76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <HAL_UART_IRQHandler+0x66>
 8001d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fbd3 	bl	800251a <UART_Receive_IT>
      return;
 8001d74:	e256      	b.n	8002224 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80de 	beq.w	8001f3c <HAL_UART_IRQHandler+0x22c>
 8001d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d106      	bne.n	8001d9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80d1 	beq.w	8001f3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <HAL_UART_IRQHandler+0xae>
 8001da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <HAL_UART_IRQHandler+0xd2>
 8001dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f043 0202 	orr.w	r2, r3, #2
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_UART_IRQHandler+0xf6>
 8001dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f043 0204 	orr.w	r2, r3, #4
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d011      	beq.n	8001e36 <HAL_UART_IRQHandler+0x126>
 8001e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f043 0208 	orr.w	r2, r3, #8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 81ed 	beq.w	800221a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_UART_IRQHandler+0x14e>
 8001e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fb5e 	bl	800251a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d103      	bne.n	8001e8a <HAL_UART_IRQHandler+0x17a>
 8001e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d04f      	beq.n	8001f2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fa66 	bl	800235c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9a:	2b40      	cmp	r3, #64	; 0x40
 8001e9c:	d141      	bne.n	8001f22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3314      	adds	r3, #20
 8001ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eac:	e853 3f00 	ldrex	r3, [r3]
 8001eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	3314      	adds	r3, #20
 8001ec6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001eca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ed2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001ed6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001eda:	e841 2300 	strex	r3, r2, [r1]
 8001ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001ee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1d9      	bne.n	8001e9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d013      	beq.n	8001f1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	4a7d      	ldr	r2, [pc, #500]	; (80020ec <HAL_UART_IRQHandler+0x3dc>)
 8001ef8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe ffcf 	bl	8000ea2 <HAL_DMA_Abort_IT>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d016      	beq.n	8001f38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f14:	4610      	mov	r0, r2
 8001f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f18:	e00e      	b.n	8001f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f99a 	bl	8002254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f20:	e00a      	b.n	8001f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f996 	bl	8002254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f28:	e006      	b.n	8001f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f992 	bl	8002254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001f36:	e170      	b.n	800221a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f38:	bf00      	nop
    return;
 8001f3a:	e16e      	b.n	800221a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	f040 814a 	bne.w	80021da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8143 	beq.w	80021da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 813c 	beq.w	80021da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f82:	2b40      	cmp	r3, #64	; 0x40
 8001f84:	f040 80b4 	bne.w	80020f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8140 	beq.w	800221e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	f080 8139 	bcs.w	800221e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fbe:	f000 8088 	beq.w	80020d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fd0:	e853 3f00 	ldrex	r3, [r3]
 8001fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	330c      	adds	r3, #12
 8001fea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001fee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ffe:	e841 2300 	strex	r3, r2, [r1]
 8002002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1d9      	bne.n	8001fc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3314      	adds	r3, #20
 8002014:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002018:	e853 3f00 	ldrex	r3, [r3]
 800201c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800201e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3314      	adds	r3, #20
 800202e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002032:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002036:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002038:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800203a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800203e:	e841 2300 	strex	r3, r2, [r1]
 8002042:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1e1      	bne.n	800200e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3314      	adds	r3, #20
 8002050:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002054:	e853 3f00 	ldrex	r3, [r3]
 8002058:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800205a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800205c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3314      	adds	r3, #20
 800206a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800206e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002070:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002072:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002074:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002076:	e841 2300 	strex	r3, r2, [r1]
 800207a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800207c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1e3      	bne.n	800204a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	330c      	adds	r3, #12
 8002096:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800209a:	e853 3f00 	ldrex	r3, [r3]
 800209e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a2:	f023 0310 	bic.w	r3, r3, #16
 80020a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	330c      	adds	r3, #12
 80020b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80020b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80020b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020bc:	e841 2300 	strex	r3, r2, [r1]
 80020c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80020c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e3      	bne.n	8002090 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fe78 	bl	8000dc2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020da:	b29b      	uxth	r3, r3
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4619      	mov	r1, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f8c0 	bl	8002268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020e8:	e099      	b.n	800221e <HAL_UART_IRQHandler+0x50e>
 80020ea:	bf00      	nop
 80020ec:	08002423 	.word	0x08002423
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 808b 	beq.w	8002222 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800210c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8086 	beq.w	8002222 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	330c      	adds	r3, #12
 800211c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800211e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002120:	e853 3f00 	ldrex	r3, [r3]
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800212c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800213a:	647a      	str	r2, [r7, #68]	; 0x44
 800213c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800213e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002142:	e841 2300 	strex	r3, r2, [r1]
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e3      	bne.n	8002116 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3314      	adds	r3, #20
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	e853 3f00 	ldrex	r3, [r3]
 800215c:	623b      	str	r3, [r7, #32]
   return(result);
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3314      	adds	r3, #20
 800216e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002172:	633a      	str	r2, [r7, #48]	; 0x30
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800217a:	e841 2300 	strex	r3, r2, [r1]
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1e3      	bne.n	800214e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	330c      	adds	r3, #12
 800219a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	e853 3f00 	ldrex	r3, [r3]
 80021a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0310 	bic.w	r3, r3, #16
 80021aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	330c      	adds	r3, #12
 80021b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80021b8:	61fa      	str	r2, [r7, #28]
 80021ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021bc:	69b9      	ldr	r1, [r7, #24]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	e841 2300 	strex	r3, r2, [r1]
 80021c4:	617b      	str	r3, [r7, #20]
   return(result);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e3      	bne.n	8002194 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f848 	bl	8002268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021d8:	e023      	b.n	8002222 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_UART_IRQHandler+0x4ea>
 80021e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f929 	bl	800244a <UART_Transmit_IT>
    return;
 80021f8:	e014      	b.n	8002224 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00e      	beq.n	8002224 <HAL_UART_IRQHandler+0x514>
 8002206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f969 	bl	80024ea <UART_EndTransmit_IT>
    return;
 8002218:	e004      	b.n	8002224 <HAL_UART_IRQHandler+0x514>
    return;
 800221a:	bf00      	nop
 800221c:	e002      	b.n	8002224 <HAL_UART_IRQHandler+0x514>
      return;
 800221e:	bf00      	nop
 8002220:	e000      	b.n	8002224 <HAL_UART_IRQHandler+0x514>
      return;
 8002222:	bf00      	nop
  }
}
 8002224:	37e8      	adds	r7, #232	; 0xe8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop

0800222c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b090      	sub	sp, #64	; 0x40
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002290:	e050      	b.n	8002334 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002298:	d04c      	beq.n	8002334 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229c:	2b00      	cmp	r3, #0
 800229e:	d007      	beq.n	80022b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80022a0:	f7fe fc72 	bl	8000b88 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d241      	bcs.n	8002334 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	330c      	adds	r3, #12
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	e853 3f00 	ldrex	r3, [r3]
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	330c      	adds	r3, #12
 80022ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022d0:	637a      	str	r2, [r7, #52]	; 0x34
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022d8:	e841 2300 	strex	r3, r2, [r1]
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e5      	bne.n	80022b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3314      	adds	r3, #20
 80022ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	e853 3f00 	ldrex	r3, [r3]
 80022f2:	613b      	str	r3, [r7, #16]
   return(result);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3314      	adds	r3, #20
 8002302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002304:	623a      	str	r2, [r7, #32]
 8002306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002308:	69f9      	ldr	r1, [r7, #28]
 800230a:	6a3a      	ldr	r2, [r7, #32]
 800230c:	e841 2300 	strex	r3, r2, [r1]
 8002310:	61bb      	str	r3, [r7, #24]
   return(result);
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e5      	bne.n	80022e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e00f      	b.n	8002354 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	4013      	ands	r3, r2
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	429a      	cmp	r2, r3
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	429a      	cmp	r2, r3
 8002350:	d09f      	beq.n	8002292 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3740      	adds	r7, #64	; 0x40
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800235c:	b480      	push	{r7}
 800235e:	b095      	sub	sp, #84	; 0x54
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	330c      	adds	r3, #12
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236e:	e853 3f00 	ldrex	r3, [r3]
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800237a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	330c      	adds	r3, #12
 8002382:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002384:	643a      	str	r2, [r7, #64]	; 0x40
 8002386:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002388:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800238a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800238c:	e841 2300 	strex	r3, r2, [r1]
 8002390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e5      	bne.n	8002364 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3314      	adds	r3, #20
 800239e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	e853 3f00 	ldrex	r3, [r3]
 80023a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3314      	adds	r3, #20
 80023b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c0:	e841 2300 	strex	r3, r2, [r1]
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e5      	bne.n	8002398 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d119      	bne.n	8002408 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	330c      	adds	r3, #12
 80023da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	e853 3f00 	ldrex	r3, [r3]
 80023e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f023 0310 	bic.w	r3, r3, #16
 80023ea:	647b      	str	r3, [r7, #68]	; 0x44
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	330c      	adds	r3, #12
 80023f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023f4:	61ba      	str	r2, [r7, #24]
 80023f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f8:	6979      	ldr	r1, [r7, #20]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	e841 2300 	strex	r3, r2, [r1]
 8002400:	613b      	str	r3, [r7, #16]
   return(result);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e5      	bne.n	80023d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002416:	bf00      	nop
 8002418:	3754      	adds	r7, #84	; 0x54
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f7ff ff09 	bl	8002254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b21      	cmp	r3, #33	; 0x21
 800245c:	d13e      	bne.n	80024dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002466:	d114      	bne.n	8002492 <UART_Transmit_IT+0x48>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d110      	bne.n	8002492 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002484:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	1c9a      	adds	r2, r3, #2
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	621a      	str	r2, [r3, #32]
 8002490:	e008      	b.n	80024a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	1c59      	adds	r1, r3, #1
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6211      	str	r1, [r2, #32]
 800249c:	781a      	ldrb	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4619      	mov	r1, r3
 80024b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10f      	bne.n	80024d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
  }
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002500:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff fe8e 	bl	800222c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b08c      	sub	sp, #48	; 0x30
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b22      	cmp	r3, #34	; 0x22
 800252c:	f040 80ab 	bne.w	8002686 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002538:	d117      	bne.n	800256a <UART_Receive_IT+0x50>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d113      	bne.n	800256a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002542:	2300      	movs	r3, #0
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	b29b      	uxth	r3, r3
 8002554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002558:	b29a      	uxth	r2, r3
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	1c9a      	adds	r2, r3, #2
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28
 8002568:	e026      	b.n	80025b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002570:	2300      	movs	r3, #0
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257c:	d007      	beq.n	800258e <UART_Receive_IT+0x74>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <UART_Receive_IT+0x82>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	e008      	b.n	80025ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4619      	mov	r1, r3
 80025c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d15a      	bne.n	8002682 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0220 	bic.w	r2, r2, #32
 80025da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	2b01      	cmp	r3, #1
 800260a:	d135      	bne.n	8002678 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	330c      	adds	r3, #12
 8002618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	e853 3f00 	ldrex	r3, [r3]
 8002620:	613b      	str	r3, [r7, #16]
   return(result);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f023 0310 	bic.w	r3, r3, #16
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	330c      	adds	r3, #12
 8002630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002632:	623a      	str	r2, [r7, #32]
 8002634:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002636:	69f9      	ldr	r1, [r7, #28]
 8002638:	6a3a      	ldr	r2, [r7, #32]
 800263a:	e841 2300 	strex	r3, r2, [r1]
 800263e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1e5      	bne.n	8002612 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b10      	cmp	r3, #16
 8002652:	d10a      	bne.n	800266a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800266e:	4619      	mov	r1, r3
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff fdf9 	bl	8002268 <HAL_UARTEx_RxEventCallback>
 8002676:	e002      	b.n	800267e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff fde1 	bl	8002240 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e002      	b.n	8002688 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
  }
}
 8002688:	4618      	mov	r0, r3
 800268a:	3730      	adds	r7, #48	; 0x30
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002694:	b0c0      	sub	sp, #256	; 0x100
 8002696:	af00      	add	r7, sp, #0
 8002698:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ac:	68d9      	ldr	r1, [r3, #12]
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	ea40 0301 	orr.w	r3, r0, r1
 80026b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026e8:	f021 010c 	bic.w	r1, r1, #12
 80026ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026f6:	430b      	orrs	r3, r1
 80026f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270a:	6999      	ldr	r1, [r3, #24]
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	ea40 0301 	orr.w	r3, r0, r1
 8002716:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b8f      	ldr	r3, [pc, #572]	; (800295c <UART_SetConfig+0x2cc>)
 8002720:	429a      	cmp	r2, r3
 8002722:	d005      	beq.n	8002730 <UART_SetConfig+0xa0>
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	4b8d      	ldr	r3, [pc, #564]	; (8002960 <UART_SetConfig+0x2d0>)
 800272c:	429a      	cmp	r2, r3
 800272e:	d104      	bne.n	800273a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002730:	f7ff f9fa 	bl	8001b28 <HAL_RCC_GetPCLK2Freq>
 8002734:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002738:	e003      	b.n	8002742 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800273a:	f7ff f9e1 	bl	8001b00 <HAL_RCC_GetPCLK1Freq>
 800273e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800274c:	f040 810c 	bne.w	8002968 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002754:	2200      	movs	r2, #0
 8002756:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800275a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800275e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002762:	4622      	mov	r2, r4
 8002764:	462b      	mov	r3, r5
 8002766:	1891      	adds	r1, r2, r2
 8002768:	65b9      	str	r1, [r7, #88]	; 0x58
 800276a:	415b      	adcs	r3, r3
 800276c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800276e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002772:	4621      	mov	r1, r4
 8002774:	eb12 0801 	adds.w	r8, r2, r1
 8002778:	4629      	mov	r1, r5
 800277a:	eb43 0901 	adc.w	r9, r3, r1
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800278a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800278e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002792:	4690      	mov	r8, r2
 8002794:	4699      	mov	r9, r3
 8002796:	4623      	mov	r3, r4
 8002798:	eb18 0303 	adds.w	r3, r8, r3
 800279c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027a0:	462b      	mov	r3, r5
 80027a2:	eb49 0303 	adc.w	r3, r9, r3
 80027a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027be:	460b      	mov	r3, r1
 80027c0:	18db      	adds	r3, r3, r3
 80027c2:	653b      	str	r3, [r7, #80]	; 0x50
 80027c4:	4613      	mov	r3, r2
 80027c6:	eb42 0303 	adc.w	r3, r2, r3
 80027ca:	657b      	str	r3, [r7, #84]	; 0x54
 80027cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80027d4:	f7fd fd5c 	bl	8000290 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4b61      	ldr	r3, [pc, #388]	; (8002964 <UART_SetConfig+0x2d4>)
 80027de:	fba3 2302 	umull	r2, r3, r3, r2
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	011c      	lsls	r4, r3, #4
 80027e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ea:	2200      	movs	r2, #0
 80027ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80027f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80027f8:	4642      	mov	r2, r8
 80027fa:	464b      	mov	r3, r9
 80027fc:	1891      	adds	r1, r2, r2
 80027fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002800:	415b      	adcs	r3, r3
 8002802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002804:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002808:	4641      	mov	r1, r8
 800280a:	eb12 0a01 	adds.w	sl, r2, r1
 800280e:	4649      	mov	r1, r9
 8002810:	eb43 0b01 	adc.w	fp, r3, r1
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002820:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002824:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002828:	4692      	mov	sl, r2
 800282a:	469b      	mov	fp, r3
 800282c:	4643      	mov	r3, r8
 800282e:	eb1a 0303 	adds.w	r3, sl, r3
 8002832:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002836:	464b      	mov	r3, r9
 8002838:	eb4b 0303 	adc.w	r3, fp, r3
 800283c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800284c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002850:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002854:	460b      	mov	r3, r1
 8002856:	18db      	adds	r3, r3, r3
 8002858:	643b      	str	r3, [r7, #64]	; 0x40
 800285a:	4613      	mov	r3, r2
 800285c:	eb42 0303 	adc.w	r3, r2, r3
 8002860:	647b      	str	r3, [r7, #68]	; 0x44
 8002862:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002866:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800286a:	f7fd fd11 	bl	8000290 <__aeabi_uldivmod>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4611      	mov	r1, r2
 8002874:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <UART_SetConfig+0x2d4>)
 8002876:	fba3 2301 	umull	r2, r3, r3, r1
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2264      	movs	r2, #100	; 0x64
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	1acb      	subs	r3, r1, r3
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800288a:	4b36      	ldr	r3, [pc, #216]	; (8002964 <UART_SetConfig+0x2d4>)
 800288c:	fba3 2302 	umull	r2, r3, r3, r2
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002898:	441c      	add	r4, r3
 800289a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800289e:	2200      	movs	r2, #0
 80028a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028ac:	4642      	mov	r2, r8
 80028ae:	464b      	mov	r3, r9
 80028b0:	1891      	adds	r1, r2, r2
 80028b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80028b4:	415b      	adcs	r3, r3
 80028b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028bc:	4641      	mov	r1, r8
 80028be:	1851      	adds	r1, r2, r1
 80028c0:	6339      	str	r1, [r7, #48]	; 0x30
 80028c2:	4649      	mov	r1, r9
 80028c4:	414b      	adcs	r3, r1
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80028d4:	4659      	mov	r1, fp
 80028d6:	00cb      	lsls	r3, r1, #3
 80028d8:	4651      	mov	r1, sl
 80028da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028de:	4651      	mov	r1, sl
 80028e0:	00ca      	lsls	r2, r1, #3
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	4642      	mov	r2, r8
 80028ea:	189b      	adds	r3, r3, r2
 80028ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028f0:	464b      	mov	r3, r9
 80028f2:	460a      	mov	r2, r1
 80028f4:	eb42 0303 	adc.w	r3, r2, r3
 80028f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002908:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800290c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002910:	460b      	mov	r3, r1
 8002912:	18db      	adds	r3, r3, r3
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
 8002916:	4613      	mov	r3, r2
 8002918:	eb42 0303 	adc.w	r3, r2, r3
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002922:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002926:	f7fd fcb3 	bl	8000290 <__aeabi_uldivmod>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <UART_SetConfig+0x2d4>)
 8002930:	fba3 1302 	umull	r1, r3, r3, r2
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	2164      	movs	r1, #100	; 0x64
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	3332      	adds	r3, #50	; 0x32
 8002942:	4a08      	ldr	r2, [pc, #32]	; (8002964 <UART_SetConfig+0x2d4>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	f003 0207 	and.w	r2, r3, #7
 800294e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4422      	add	r2, r4
 8002956:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002958:	e106      	b.n	8002b68 <UART_SetConfig+0x4d8>
 800295a:	bf00      	nop
 800295c:	40011000 	.word	0x40011000
 8002960:	40011400 	.word	0x40011400
 8002964:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800296c:	2200      	movs	r2, #0
 800296e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002972:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002976:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800297a:	4642      	mov	r2, r8
 800297c:	464b      	mov	r3, r9
 800297e:	1891      	adds	r1, r2, r2
 8002980:	6239      	str	r1, [r7, #32]
 8002982:	415b      	adcs	r3, r3
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800298a:	4641      	mov	r1, r8
 800298c:	1854      	adds	r4, r2, r1
 800298e:	4649      	mov	r1, r9
 8002990:	eb43 0501 	adc.w	r5, r3, r1
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	00eb      	lsls	r3, r5, #3
 800299e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a2:	00e2      	lsls	r2, r4, #3
 80029a4:	4614      	mov	r4, r2
 80029a6:	461d      	mov	r5, r3
 80029a8:	4643      	mov	r3, r8
 80029aa:	18e3      	adds	r3, r4, r3
 80029ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029b0:	464b      	mov	r3, r9
 80029b2:	eb45 0303 	adc.w	r3, r5, r3
 80029b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029d6:	4629      	mov	r1, r5
 80029d8:	008b      	lsls	r3, r1, #2
 80029da:	4621      	mov	r1, r4
 80029dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e0:	4621      	mov	r1, r4
 80029e2:	008a      	lsls	r2, r1, #2
 80029e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029e8:	f7fd fc52 	bl	8000290 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4b60      	ldr	r3, [pc, #384]	; (8002b74 <UART_SetConfig+0x4e4>)
 80029f2:	fba3 2302 	umull	r2, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	011c      	lsls	r4, r3, #4
 80029fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	1891      	adds	r1, r2, r2
 8002a12:	61b9      	str	r1, [r7, #24]
 8002a14:	415b      	adcs	r3, r3
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	1851      	adds	r1, r2, r1
 8002a20:	6139      	str	r1, [r7, #16]
 8002a22:	4649      	mov	r1, r9
 8002a24:	414b      	adcs	r3, r1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a34:	4659      	mov	r1, fp
 8002a36:	00cb      	lsls	r3, r1, #3
 8002a38:	4651      	mov	r1, sl
 8002a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a3e:	4651      	mov	r1, sl
 8002a40:	00ca      	lsls	r2, r1, #3
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	4642      	mov	r2, r8
 8002a4a:	189b      	adds	r3, r3, r2
 8002a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a50:	464b      	mov	r3, r9
 8002a52:	460a      	mov	r2, r1
 8002a54:	eb42 0303 	adc.w	r3, r2, r3
 8002a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a74:	4649      	mov	r1, r9
 8002a76:	008b      	lsls	r3, r1, #2
 8002a78:	4641      	mov	r1, r8
 8002a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a7e:	4641      	mov	r1, r8
 8002a80:	008a      	lsls	r2, r1, #2
 8002a82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a86:	f7fd fc03 	bl	8000290 <__aeabi_uldivmod>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <UART_SetConfig+0x4e4>)
 8002a92:	fba3 2301 	umull	r2, r3, r3, r1
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2264      	movs	r2, #100	; 0x64
 8002a9a:	fb02 f303 	mul.w	r3, r2, r3
 8002a9e:	1acb      	subs	r3, r1, r3
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	3332      	adds	r3, #50	; 0x32
 8002aa4:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <UART_SetConfig+0x4e4>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab0:	441c      	add	r4, r3
 8002ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	673b      	str	r3, [r7, #112]	; 0x70
 8002aba:	677a      	str	r2, [r7, #116]	; 0x74
 8002abc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	1891      	adds	r1, r2, r2
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	415b      	adcs	r3, r3
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	1851      	adds	r1, r2, r1
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	4649      	mov	r1, r9
 8002ad8:	414b      	adcs	r3, r1
 8002ada:	607b      	str	r3, [r7, #4]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ae8:	4659      	mov	r1, fp
 8002aea:	00cb      	lsls	r3, r1, #3
 8002aec:	4651      	mov	r1, sl
 8002aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af2:	4651      	mov	r1, sl
 8002af4:	00ca      	lsls	r2, r1, #3
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	4642      	mov	r2, r8
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b02:	464b      	mov	r3, r9
 8002b04:	460a      	mov	r2, r1
 8002b06:	eb42 0303 	adc.w	r3, r2, r3
 8002b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	663b      	str	r3, [r7, #96]	; 0x60
 8002b16:	667a      	str	r2, [r7, #100]	; 0x64
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b24:	4649      	mov	r1, r9
 8002b26:	008b      	lsls	r3, r1, #2
 8002b28:	4641      	mov	r1, r8
 8002b2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b2e:	4641      	mov	r1, r8
 8002b30:	008a      	lsls	r2, r1, #2
 8002b32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b36:	f7fd fbab 	bl	8000290 <__aeabi_uldivmod>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <UART_SetConfig+0x4e4>)
 8002b40:	fba3 1302 	umull	r1, r3, r3, r2
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	2164      	movs	r1, #100	; 0x64
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	3332      	adds	r3, #50	; 0x32
 8002b52:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <UART_SetConfig+0x4e4>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	f003 020f 	and.w	r2, r3, #15
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4422      	add	r2, r4
 8002b66:	609a      	str	r2, [r3, #8]
}
 8002b68:	bf00      	nop
 8002b6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b74:	51eb851f 	.word	0x51eb851f

08002b78 <__NVIC_SetPriority>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	; (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	f06f 0004 	mvn.w	r0, #4
 8002bd6:	f7ff ffcf 	bl	8002b78 <__NVIC_SetPriority>
#endif
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002be6:	f3ef 8305 	mrs	r3, IPSR
 8002bea:	603b      	str	r3, [r7, #0]
  return(result);
 8002bec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002bf2:	f06f 0305 	mvn.w	r3, #5
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	e00c      	b.n	8002c14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <osKernelInitialize+0x44>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d105      	bne.n	8002c0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <osKernelInitialize+0x44>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	e002      	b.n	8002c14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c14:	687b      	ldr	r3, [r7, #4]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	200000cc 	.word	0x200000cc

08002c28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c2e:	f3ef 8305 	mrs	r3, IPSR
 8002c32:	603b      	str	r3, [r7, #0]
  return(result);
 8002c34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c3a:	f06f 0305 	mvn.w	r3, #5
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	e010      	b.n	8002c64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <osKernelStart+0x48>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d109      	bne.n	8002c5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c4a:	f7ff ffbf 	bl	8002bcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <osKernelStart+0x48>)
 8002c50:	2202      	movs	r2, #2
 8002c52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c54:	f001 f816 	bl	8003c84 <vTaskStartScheduler>
      stat = osOK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	e002      	b.n	8002c64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c64:	687b      	ldr	r3, [r7, #4]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200000cc 	.word	0x200000cc

08002c74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08e      	sub	sp, #56	; 0x38
 8002c78:	af04      	add	r7, sp, #16
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c84:	f3ef 8305 	mrs	r3, IPSR
 8002c88:	617b      	str	r3, [r7, #20]
  return(result);
 8002c8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d17e      	bne.n	8002d8e <osThreadNew+0x11a>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d07b      	beq.n	8002d8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002c9a:	2318      	movs	r3, #24
 8002c9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d045      	beq.n	8002d3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <osThreadNew+0x48>
        name = attr->name;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <osThreadNew+0x6e>
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b38      	cmp	r3, #56	; 0x38
 8002cd4:	d805      	bhi.n	8002ce2 <osThreadNew+0x6e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <osThreadNew+0x72>
        return (NULL);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e054      	b.n	8002d90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00e      	beq.n	8002d1c <osThreadNew+0xa8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b5b      	cmp	r3, #91	; 0x5b
 8002d04:	d90a      	bls.n	8002d1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <osThreadNew+0xa8>
        mem = 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	e010      	b.n	8002d3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10c      	bne.n	8002d3e <osThreadNew+0xca>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d108      	bne.n	8002d3e <osThreadNew+0xca>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d104      	bne.n	8002d3e <osThreadNew+0xca>
          mem = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	e001      	b.n	8002d3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d110      	bne.n	8002d66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d4c:	9202      	str	r2, [sp, #8]
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	6a3a      	ldr	r2, [r7, #32]
 8002d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fdf0 	bl	8003940 <xTaskCreateStatic>
 8002d60:	4603      	mov	r3, r0
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	e013      	b.n	8002d8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d110      	bne.n	8002d8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	f107 0310 	add.w	r3, r7, #16
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fe3b 	bl	80039fa <xTaskCreate>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d001      	beq.n	8002d8e <osThreadNew+0x11a>
            hTask = NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d8e:	693b      	ldr	r3, [r7, #16]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3728      	adds	r7, #40	; 0x28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002da8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4a06      	ldr	r2, [pc, #24]	; (8002dc8 <vApplicationGetIdleTaskMemory+0x30>)
 8002dae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	601a      	str	r2, [r3, #0]
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	200000d0 	.word	0x200000d0
 8002dc8:	2000012c 	.word	0x2000012c

08002dcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a07      	ldr	r2, [pc, #28]	; (8002df8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ddc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4a06      	ldr	r2, [pc, #24]	; (8002dfc <vApplicationGetTimerTaskMemory+0x30>)
 8002de2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dea:	601a      	str	r2, [r3, #0]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	2000032c 	.word	0x2000032c
 8002dfc:	20000388 	.word	0x20000388

08002e00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f103 0208 	add.w	r2, r3, #8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f103 0208 	add.w	r2, r3, #8
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f103 0208 	add.w	r2, r3, #8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	601a      	str	r2, [r3, #0]
}
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb8:	d103      	bne.n	8002ec2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	e00c      	b.n	8002edc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e002      	b.n	8002ed0 <vListInsert+0x2e>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d2f6      	bcs.n	8002eca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	601a      	str	r2, [r3, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6892      	ldr	r2, [r2, #8]
 8002f2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6852      	ldr	r2, [r2, #4]
 8002f34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d103      	bne.n	8002f48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	1e5a      	subs	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f92:	f002 f817 	bl	8004fc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	68f9      	ldr	r1, [r7, #12]
 8002fa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	441a      	add	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	68f9      	ldr	r1, [r7, #12]
 8002fc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	441a      	add	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	22ff      	movs	r2, #255	; 0xff
 8002fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	22ff      	movs	r2, #255	; 0xff
 8002fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d114      	bne.n	8003012 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01a      	beq.n	8003026 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3310      	adds	r3, #16
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 f8cf 	bl	8004198 <xTaskRemoveFromEventList>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d012      	beq.n	8003026 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <xQueueGenericReset+0xcc>)
 8003002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	e009      	b.n	8003026 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3310      	adds	r3, #16
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fef2 	bl	8002e00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3324      	adds	r3, #36	; 0x24
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff feed 	bl	8002e00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003026:	f001 fffd 	bl	8005024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800302a:	2301      	movs	r3, #1
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08e      	sub	sp, #56	; 0x38
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800305e:	bf00      	nop
 8003060:	e7fe      	b.n	8003060 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
}
 800307a:	bf00      	nop
 800307c:	e7fe      	b.n	800307c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <xQueueGenericCreateStatic+0x52>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <xQueueGenericCreateStatic+0x56>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <xQueueGenericCreateStatic+0x58>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	623b      	str	r3, [r7, #32]
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <xQueueGenericCreateStatic+0x7e>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <xQueueGenericCreateStatic+0x82>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <xQueueGenericCreateStatic+0x84>
 80030ba:	2300      	movs	r3, #0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	61fb      	str	r3, [r7, #28]
}
 80030d2:	bf00      	nop
 80030d4:	e7fe      	b.n	80030d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030d6:	2350      	movs	r3, #80	; 0x50
 80030d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b50      	cmp	r3, #80	; 0x50
 80030de:	d00a      	beq.n	80030f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	61bb      	str	r3, [r7, #24]
}
 80030f2:	bf00      	nop
 80030f4:	e7fe      	b.n	80030f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00d      	beq.n	800311e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800310a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f805 	bl	8003128 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003120:	4618      	mov	r0, r3
 8003122:	3730      	adds	r7, #48	; 0x30
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e002      	b.n	800314a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003156:	2101      	movs	r1, #1
 8003158:	69b8      	ldr	r0, [r7, #24]
 800315a:	f7ff ff05 	bl	8002f68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08e      	sub	sp, #56	; 0x38
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800317e:	2300      	movs	r3, #0
 8003180:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <xQueueGenericSend+0x32>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800319e:	bf00      	nop
 80031a0:	e7fe      	b.n	80031a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d103      	bne.n	80031b0 <xQueueGenericSend+0x40>
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <xQueueGenericSend+0x44>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <xQueueGenericSend+0x46>
 80031b4:	2300      	movs	r3, #0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <xQueueGenericSend+0x60>
	__asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031cc:	bf00      	nop
 80031ce:	e7fe      	b.n	80031ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d103      	bne.n	80031de <xQueueGenericSend+0x6e>
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <xQueueGenericSend+0x72>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <xQueueGenericSend+0x74>
 80031e2:	2300      	movs	r3, #0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <xQueueGenericSend+0x8e>
	__asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	623b      	str	r3, [r7, #32]
}
 80031fa:	bf00      	nop
 80031fc:	e7fe      	b.n	80031fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031fe:	f001 f989 	bl	8004514 <xTaskGetSchedulerState>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <xQueueGenericSend+0x9e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <xQueueGenericSend+0xa2>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <xQueueGenericSend+0xa4>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <xQueueGenericSend+0xbe>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	61fb      	str	r3, [r7, #28]
}
 800322a:	bf00      	nop
 800322c:	e7fe      	b.n	800322c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800322e:	f001 fec9 	bl	8004fc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	429a      	cmp	r2, r3
 800323c:	d302      	bcc.n	8003244 <xQueueGenericSend+0xd4>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d129      	bne.n	8003298 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800324a:	f000 fa0b 	bl	8003664 <prvCopyDataToQueue>
 800324e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2b00      	cmp	r3, #0
 8003256:	d010      	beq.n	800327a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	3324      	adds	r3, #36	; 0x24
 800325c:	4618      	mov	r0, r3
 800325e:	f000 ff9b 	bl	8004198 <xTaskRemoveFromEventList>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003268:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <xQueueGenericSend+0x1f8>)
 800326a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	e00a      	b.n	8003290 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003280:	4b39      	ldr	r3, [pc, #228]	; (8003368 <xQueueGenericSend+0x1f8>)
 8003282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003290:	f001 fec8 	bl	8005024 <vPortExitCritical>
				return pdPASS;
 8003294:	2301      	movs	r3, #1
 8003296:	e063      	b.n	8003360 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d103      	bne.n	80032a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800329e:	f001 fec1 	bl	8005024 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e05c      	b.n	8003360 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 ffd5 	bl	8004260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032b6:	2301      	movs	r3, #1
 80032b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032ba:	f001 feb3 	bl	8005024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032be:	f000 fd47 	bl	8003d50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032c2:	f001 fe7f 	bl	8004fc4 <vPortEnterCritical>
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032cc:	b25b      	sxtb	r3, r3
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032d2:	d103      	bne.n	80032dc <xQueueGenericSend+0x16c>
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032e2:	b25b      	sxtb	r3, r3
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e8:	d103      	bne.n	80032f2 <xQueueGenericSend+0x182>
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032f2:	f001 fe97 	bl	8005024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032f6:	1d3a      	adds	r2, r7, #4
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 ffc4 	bl	800428c <xTaskCheckForTimeOut>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d124      	bne.n	8003354 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800330a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800330c:	f000 faa2 	bl	8003854 <prvIsQueueFull>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d018      	beq.n	8003348 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	3310      	adds	r3, #16
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 feea 	bl	80040f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003326:	f000 fa2d 	bl	8003784 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800332a:	f000 fd1f 	bl	8003d6c <xTaskResumeAll>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	f47f af7c 	bne.w	800322e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <xQueueGenericSend+0x1f8>)
 8003338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	e772      	b.n	800322e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800334a:	f000 fa1b 	bl	8003784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800334e:	f000 fd0d 	bl	8003d6c <xTaskResumeAll>
 8003352:	e76c      	b.n	800322e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003356:	f000 fa15 	bl	8003784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800335a:	f000 fd07 	bl	8003d6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800335e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003360:	4618      	mov	r0, r3
 8003362:	3738      	adds	r7, #56	; 0x38
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b090      	sub	sp, #64	; 0x40
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d103      	bne.n	80033a8 <xQueueGenericSendFromISR+0x3c>
 80033a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <xQueueGenericSendFromISR+0x40>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <xQueueGenericSendFromISR+0x42>
 80033ac:	2300      	movs	r3, #0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033c4:	bf00      	nop
 80033c6:	e7fe      	b.n	80033c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d103      	bne.n	80033d6 <xQueueGenericSendFromISR+0x6a>
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <xQueueGenericSendFromISR+0x6e>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <xQueueGenericSendFromISR+0x70>
 80033da:	2300      	movs	r3, #0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	623b      	str	r3, [r7, #32]
}
 80033f2:	bf00      	nop
 80033f4:	e7fe      	b.n	80033f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033f6:	f001 fec7 	bl	8005188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033fa:	f3ef 8211 	mrs	r2, BASEPRI
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	61fa      	str	r2, [r7, #28]
 8003410:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003412:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	429a      	cmp	r2, r3
 8003420:	d302      	bcc.n	8003428 <xQueueGenericSendFromISR+0xbc>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d12f      	bne.n	8003488 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800342e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800343e:	f000 f911 	bl	8003664 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003442:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800344a:	d112      	bne.n	8003472 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	2b00      	cmp	r3, #0
 8003452:	d016      	beq.n	8003482 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	3324      	adds	r3, #36	; 0x24
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fe9d 	bl	8004198 <xTaskRemoveFromEventList>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00e      	beq.n	8003482 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e007      	b.n	8003482 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003476:	3301      	adds	r3, #1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	b25a      	sxtb	r2, r3
 800347c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003482:	2301      	movs	r3, #1
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003486:	e001      	b.n	800348c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003488:	2300      	movs	r3, #0
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800348c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003496:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800349a:	4618      	mov	r0, r3
 800349c:	3740      	adds	r7, #64	; 0x40
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08c      	sub	sp, #48	; 0x30
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <xQueueReceive+0x30>
	__asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	623b      	str	r3, [r7, #32]
}
 80034d0:	bf00      	nop
 80034d2:	e7fe      	b.n	80034d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <xQueueReceive+0x3e>
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <xQueueReceive+0x42>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <xQueueReceive+0x44>
 80034e6:	2300      	movs	r3, #0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <xQueueReceive+0x5e>
	__asm volatile
 80034ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f0:	f383 8811 	msr	BASEPRI, r3
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	61fb      	str	r3, [r7, #28]
}
 80034fe:	bf00      	nop
 8003500:	e7fe      	b.n	8003500 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003502:	f001 f807 	bl	8004514 <xTaskGetSchedulerState>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <xQueueReceive+0x6e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <xQueueReceive+0x72>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <xQueueReceive+0x74>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <xQueueReceive+0x8e>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	61bb      	str	r3, [r7, #24]
}
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003532:	f001 fd47 	bl	8004fc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01f      	beq.n	8003582 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003546:	f000 f8f7 	bl	8003738 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	1e5a      	subs	r2, r3, #1
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00f      	beq.n	800357a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	3310      	adds	r3, #16
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fe1a 	bl	8004198 <xTaskRemoveFromEventList>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800356a:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <xQueueReceive+0x1bc>)
 800356c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800357a:	f001 fd53 	bl	8005024 <vPortExitCritical>
				return pdPASS;
 800357e:	2301      	movs	r3, #1
 8003580:	e069      	b.n	8003656 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d103      	bne.n	8003590 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003588:	f001 fd4c 	bl	8005024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800358c:	2300      	movs	r3, #0
 800358e:	e062      	b.n	8003656 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003596:	f107 0310 	add.w	r3, r7, #16
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fe60 	bl	8004260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035a4:	f001 fd3e 	bl	8005024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035a8:	f000 fbd2 	bl	8003d50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035ac:	f001 fd0a 	bl	8004fc4 <vPortEnterCritical>
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035bc:	d103      	bne.n	80035c6 <xQueueReceive+0x122>
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035cc:	b25b      	sxtb	r3, r3
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d2:	d103      	bne.n	80035dc <xQueueReceive+0x138>
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035dc:	f001 fd22 	bl	8005024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035e0:	1d3a      	adds	r2, r7, #4
 80035e2:	f107 0310 	add.w	r3, r7, #16
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fe4f 	bl	800428c <xTaskCheckForTimeOut>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d123      	bne.n	800363c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035f6:	f000 f917 	bl	8003828 <prvIsQueueEmpty>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d017      	beq.n	8003630 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	3324      	adds	r3, #36	; 0x24
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fd75 	bl	80040f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800360e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003610:	f000 f8b8 	bl	8003784 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003614:	f000 fbaa 	bl	8003d6c <xTaskResumeAll>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d189      	bne.n	8003532 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <xQueueReceive+0x1bc>)
 8003620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	e780      	b.n	8003532 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003632:	f000 f8a7 	bl	8003784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003636:	f000 fb99 	bl	8003d6c <xTaskResumeAll>
 800363a:	e77a      	b.n	8003532 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800363c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800363e:	f000 f8a1 	bl	8003784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003642:	f000 fb93 	bl	8003d6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003648:	f000 f8ee 	bl	8003828 <prvIsQueueEmpty>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	f43f af6f 	beq.w	8003532 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003654:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003656:	4618      	mov	r0, r3
 8003658:	3730      	adds	r7, #48	; 0x30
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10d      	bne.n	800369e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d14d      	bne.n	8003726 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	4618      	mov	r0, r3
 8003690:	f000 ff5e 	bl	8004550 <xTaskPriorityDisinherit>
 8003694:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	e043      	b.n	8003726 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d119      	bne.n	80036d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6858      	ldr	r0, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	461a      	mov	r2, r3
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	f001 ffe8 	bl	8005684 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	441a      	add	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d32b      	bcc.n	8003726 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	e026      	b.n	8003726 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	68d8      	ldr	r0, [r3, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	461a      	mov	r2, r3
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	f001 ffce 	bl	8005684 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	425b      	negs	r3, r3
 80036f2:	441a      	add	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d207      	bcs.n	8003714 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	425b      	negs	r3, r3
 800370e:	441a      	add	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d105      	bne.n	8003726 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	3b01      	subs	r3, #1
 8003724:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800372e:	697b      	ldr	r3, [r7, #20]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d018      	beq.n	800377c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	441a      	add	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d303      	bcc.n	800376c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68d9      	ldr	r1, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	461a      	mov	r2, r3
 8003776:	6838      	ldr	r0, [r7, #0]
 8003778:	f001 ff84 	bl	8005684 <memcpy>
	}
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800378c:	f001 fc1a 	bl	8004fc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003796:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003798:	e011      	b.n	80037be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d012      	beq.n	80037c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3324      	adds	r3, #36	; 0x24
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fcf6 	bl	8004198 <xTaskRemoveFromEventList>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037b2:	f000 fdcd 	bl	8004350 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	dce9      	bgt.n	800379a <prvUnlockQueue+0x16>
 80037c6:	e000      	b.n	80037ca <prvUnlockQueue+0x46>
					break;
 80037c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037d2:	f001 fc27 	bl	8005024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037d6:	f001 fbf5 	bl	8004fc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037e2:	e011      	b.n	8003808 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d012      	beq.n	8003812 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3310      	adds	r3, #16
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fcd1 	bl	8004198 <xTaskRemoveFromEventList>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037fc:	f000 fda8 	bl	8004350 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003800:	7bbb      	ldrb	r3, [r7, #14]
 8003802:	3b01      	subs	r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800380c:	2b00      	cmp	r3, #0
 800380e:	dce9      	bgt.n	80037e4 <prvUnlockQueue+0x60>
 8003810:	e000      	b.n	8003814 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003812:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800381c:	f001 fc02 	bl	8005024 <vPortExitCritical>
}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003830:	f001 fbc8 	bl	8004fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800383c:	2301      	movs	r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e001      	b.n	8003846 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003846:	f001 fbed 	bl	8005024 <vPortExitCritical>

	return xReturn;
 800384a:	68fb      	ldr	r3, [r7, #12]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800385c:	f001 fbb2 	bl	8004fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	429a      	cmp	r2, r3
 800386a:	d102      	bne.n	8003872 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800386c:	2301      	movs	r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	e001      	b.n	8003876 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003876:	f001 fbd5 	bl	8005024 <vPortExitCritical>

	return xReturn;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e014      	b.n	80038be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003894:	4a0f      	ldr	r2, [pc, #60]	; (80038d4 <vQueueAddToRegistry+0x50>)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038a0:	490c      	ldr	r1, [pc, #48]	; (80038d4 <vQueueAddToRegistry+0x50>)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <vQueueAddToRegistry+0x50>)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038b6:	e006      	b.n	80038c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b07      	cmp	r3, #7
 80038c2:	d9e7      	bls.n	8003894 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000788 	.word	0x20000788

080038d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038e8:	f001 fb6c 	bl	8004fc4 <vPortEnterCritical>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f8:	d103      	bne.n	8003902 <vQueueWaitForMessageRestricted+0x2a>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003908:	b25b      	sxtb	r3, r3
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800390e:	d103      	bne.n	8003918 <vQueueWaitForMessageRestricted+0x40>
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003918:	f001 fb84 	bl	8005024 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	3324      	adds	r3, #36	; 0x24
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fc07 	bl	8004140 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003932:	6978      	ldr	r0, [r7, #20]
 8003934:	f7ff ff26 	bl	8003784 <prvUnlockQueue>
	}
 8003938:	bf00      	nop
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08e      	sub	sp, #56	; 0x38
 8003944:	af04      	add	r7, sp, #16
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800394e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	623b      	str	r3, [r7, #32]
}
 8003966:	bf00      	nop
 8003968:	e7fe      	b.n	8003968 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <xTaskCreateStatic+0x46>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	61fb      	str	r3, [r7, #28]
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003986:	235c      	movs	r3, #92	; 0x5c
 8003988:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b5c      	cmp	r3, #92	; 0x5c
 800398e:	d00a      	beq.n	80039a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	61bb      	str	r3, [r7, #24]
}
 80039a2:	bf00      	nop
 80039a4:	e7fe      	b.n	80039a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01e      	beq.n	80039ec <xTaskCreateStatic+0xac>
 80039ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01b      	beq.n	80039ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	2202      	movs	r2, #2
 80039c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039c6:	2300      	movs	r3, #0
 80039c8:	9303      	str	r3, [sp, #12]
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	9302      	str	r3, [sp, #8]
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f850 	bl	8003a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039e6:	f000 f8dd 	bl	8003ba4 <prvAddNewTaskToReadyList>
 80039ea:	e001      	b.n	80039f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039f0:	697b      	ldr	r3, [r7, #20]
	}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3728      	adds	r7, #40	; 0x28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b08c      	sub	sp, #48	; 0x30
 80039fe:	af04      	add	r7, sp, #16
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 fbfa 	bl	8005208 <pvPortMalloc>
 8003a14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00e      	beq.n	8003a3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a1c:	205c      	movs	r0, #92	; 0x5c
 8003a1e:	f001 fbf3 	bl	8005208 <pvPortMalloc>
 8003a22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a30:	e005      	b.n	8003a3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a32:	6978      	ldr	r0, [r7, #20]
 8003a34:	f001 fcb4 	bl	80053a0 <vPortFree>
 8003a38:	e001      	b.n	8003a3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d017      	beq.n	8003a74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a4c:	88fa      	ldrh	r2, [r7, #6]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	9303      	str	r3, [sp, #12]
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	9302      	str	r3, [sp, #8]
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f80e 	bl	8003a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a68:	69f8      	ldr	r0, [r7, #28]
 8003a6a:	f000 f89b 	bl	8003ba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	e002      	b.n	8003a7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
	}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	21a5      	movs	r1, #165	; 0xa5
 8003a9e:	f001 fdbd 	bl	800561c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003aac:	3b01      	subs	r3, #1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f023 0307 	bic.w	r3, r3, #7
 8003aba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	617b      	str	r3, [r7, #20]
}
 8003ad8:	bf00      	nop
 8003ada:	e7fe      	b.n	8003ada <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d01f      	beq.n	8003b22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	e012      	b.n	8003b0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	7819      	ldrb	r1, [r3, #0]
 8003af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	3334      	adds	r3, #52	; 0x34
 8003af8:	460a      	mov	r2, r1
 8003afa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d006      	beq.n	8003b16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2b0f      	cmp	r3, #15
 8003b12:	d9e9      	bls.n	8003ae8 <prvInitialiseNewTask+0x64>
 8003b14:	e000      	b.n	8003b18 <prvInitialiseNewTask+0x94>
			{
				break;
 8003b16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b20:	e003      	b.n	8003b2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	2b37      	cmp	r3, #55	; 0x37
 8003b2e:	d901      	bls.n	8003b34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b30:	2337      	movs	r3, #55	; 0x37
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	2200      	movs	r2, #0
 8003b44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff f978 	bl	8002e40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	3318      	adds	r3, #24
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff f973 	bl	8002e40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	2200      	movs	r2, #0
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	68f9      	ldr	r1, [r7, #12]
 8003b82:	69b8      	ldr	r0, [r7, #24]
 8003b84:	f001 f8f4 	bl	8004d70 <pxPortInitialiseStack>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b9a:	bf00      	nop
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bac:	f001 fa0a 	bl	8004fc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bb0:	4b2d      	ldr	r3, [pc, #180]	; (8003c68 <prvAddNewTaskToReadyList+0xc4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <prvAddNewTaskToReadyList+0xc4>)
 8003bb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bba:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <prvAddNewTaskToReadyList+0xc4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d110      	bne.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bd0:	f000 fbe2 	bl	8004398 <prvInitialiseTaskLists>
 8003bd4:	e00d      	b.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bd6:	4b26      	ldr	r3, [pc, #152]	; (8003c70 <prvAddNewTaskToReadyList+0xcc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bde:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d802      	bhi.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bec:	4a1f      	ldr	r2, [pc, #124]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <prvAddNewTaskToReadyList+0xd0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <prvAddNewTaskToReadyList+0xd0>)
 8003bfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <prvAddNewTaskToReadyList+0xd0>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <prvAddNewTaskToReadyList+0xd4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d903      	bls.n	8003c18 <prvAddNewTaskToReadyList+0x74>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <prvAddNewTaskToReadyList+0xd4>)
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <prvAddNewTaskToReadyList+0xd8>)
 8003c26:	441a      	add	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f7ff f913 	bl	8002e5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c34:	f001 f9f6 	bl	8005024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <prvAddNewTaskToReadyList+0xcc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00e      	beq.n	8003c5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d207      	bcs.n	8003c5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <prvAddNewTaskToReadyList+0xdc>)
 8003c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000c9c 	.word	0x20000c9c
 8003c6c:	200007c8 	.word	0x200007c8
 8003c70:	20000ca8 	.word	0x20000ca8
 8003c74:	20000cb8 	.word	0x20000cb8
 8003c78:	20000ca4 	.word	0x20000ca4
 8003c7c:	200007cc 	.word	0x200007cc
 8003c80:	e000ed04 	.word	0xe000ed04

08003c84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08a      	sub	sp, #40	; 0x28
 8003c88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c92:	463a      	mov	r2, r7
 8003c94:	1d39      	adds	r1, r7, #4
 8003c96:	f107 0308 	add.w	r3, r7, #8
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff f87c 	bl	8002d98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	9202      	str	r2, [sp, #8]
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	2300      	movs	r3, #0
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	460a      	mov	r2, r1
 8003cb2:	4921      	ldr	r1, [pc, #132]	; (8003d38 <vTaskStartScheduler+0xb4>)
 8003cb4:	4821      	ldr	r0, [pc, #132]	; (8003d3c <vTaskStartScheduler+0xb8>)
 8003cb6:	f7ff fe43 	bl	8003940 <xTaskCreateStatic>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4a20      	ldr	r2, [pc, #128]	; (8003d40 <vTaskStartScheduler+0xbc>)
 8003cbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cc0:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <vTaskStartScheduler+0xbc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e001      	b.n	8003cd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d102      	bne.n	8003cde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003cd8:	f000 fcfc 	bl	80046d4 <xTimerCreateTimerTask>
 8003cdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d116      	bne.n	8003d12 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	613b      	str	r3, [r7, #16]
}
 8003cf6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cf8:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <vTaskStartScheduler+0xc0>)
 8003cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cfe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d00:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <vTaskStartScheduler+0xc4>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d06:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <vTaskStartScheduler+0xc8>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d0c:	f001 f8b8 	bl	8004e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d10:	e00e      	b.n	8003d30 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d18:	d10a      	bne.n	8003d30 <vTaskStartScheduler+0xac>
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	60fb      	str	r3, [r7, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	e7fe      	b.n	8003d2e <vTaskStartScheduler+0xaa>
}
 8003d30:	bf00      	nop
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	08005f90 	.word	0x08005f90
 8003d3c:	08004369 	.word	0x08004369
 8003d40:	20000cc0 	.word	0x20000cc0
 8003d44:	20000cbc 	.word	0x20000cbc
 8003d48:	20000ca8 	.word	0x20000ca8
 8003d4c:	20000ca0 	.word	0x20000ca0

08003d50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <vTaskSuspendAll+0x18>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	4a03      	ldr	r2, [pc, #12]	; (8003d68 <vTaskSuspendAll+0x18>)
 8003d5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	20000cc4 	.word	0x20000cc4

08003d6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d7a:	4b42      	ldr	r3, [pc, #264]	; (8003e84 <xTaskResumeAll+0x118>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <xTaskResumeAll+0x2c>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	603b      	str	r3, [r7, #0]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d98:	f001 f914 	bl	8004fc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d9c:	4b39      	ldr	r3, [pc, #228]	; (8003e84 <xTaskResumeAll+0x118>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	4a38      	ldr	r2, [pc, #224]	; (8003e84 <xTaskResumeAll+0x118>)
 8003da4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003da6:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <xTaskResumeAll+0x118>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d162      	bne.n	8003e74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dae:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <xTaskResumeAll+0x11c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d05e      	beq.n	8003e74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003db6:	e02f      	b.n	8003e18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db8:	4b34      	ldr	r3, [pc, #208]	; (8003e8c <xTaskResumeAll+0x120>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3318      	adds	r3, #24
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff f8a5 	bl	8002f14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff f8a0 	bl	8002f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <xTaskResumeAll+0x124>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d903      	bls.n	8003de8 <xTaskResumeAll+0x7c>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <xTaskResumeAll+0x124>)
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4a27      	ldr	r2, [pc, #156]	; (8003e94 <xTaskResumeAll+0x128>)
 8003df6:	441a      	add	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f7ff f82b 	bl	8002e5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <xTaskResumeAll+0x12c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d302      	bcc.n	8003e18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e12:	4b22      	ldr	r3, [pc, #136]	; (8003e9c <xTaskResumeAll+0x130>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e18:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <xTaskResumeAll+0x120>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1cb      	bne.n	8003db8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e26:	f000 fb55 	bl	80044d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <xTaskResumeAll+0x134>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d010      	beq.n	8003e58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e36:	f000 f847 	bl	8003ec8 <xTaskIncrementTick>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003e40:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <xTaskResumeAll+0x130>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f1      	bne.n	8003e36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003e52:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <xTaskResumeAll+0x134>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <xTaskResumeAll+0x130>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e64:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <xTaskResumeAll+0x138>)
 8003e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e74:	f001 f8d6 	bl	8005024 <vPortExitCritical>

	return xAlreadyYielded;
 8003e78:	68bb      	ldr	r3, [r7, #8]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000cc4 	.word	0x20000cc4
 8003e88:	20000c9c 	.word	0x20000c9c
 8003e8c:	20000c5c 	.word	0x20000c5c
 8003e90:	20000ca4 	.word	0x20000ca4
 8003e94:	200007cc 	.word	0x200007cc
 8003e98:	200007c8 	.word	0x200007c8
 8003e9c:	20000cb0 	.word	0x20000cb0
 8003ea0:	20000cac 	.word	0x20000cac
 8003ea4:	e000ed04 	.word	0xe000ed04

08003ea8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <xTaskGetTickCount+0x1c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003eb4:	687b      	ldr	r3, [r7, #4]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	20000ca0 	.word	0x20000ca0

08003ec8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed2:	4b4f      	ldr	r3, [pc, #316]	; (8004010 <xTaskIncrementTick+0x148>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 808f 	bne.w	8003ffa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003edc:	4b4d      	ldr	r3, [pc, #308]	; (8004014 <xTaskIncrementTick+0x14c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ee4:	4a4b      	ldr	r2, [pc, #300]	; (8004014 <xTaskIncrementTick+0x14c>)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d120      	bne.n	8003f32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ef0:	4b49      	ldr	r3, [pc, #292]	; (8004018 <xTaskIncrementTick+0x150>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <xTaskIncrementTick+0x48>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	603b      	str	r3, [r7, #0]
}
 8003f0c:	bf00      	nop
 8003f0e:	e7fe      	b.n	8003f0e <xTaskIncrementTick+0x46>
 8003f10:	4b41      	ldr	r3, [pc, #260]	; (8004018 <xTaskIncrementTick+0x150>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	4b41      	ldr	r3, [pc, #260]	; (800401c <xTaskIncrementTick+0x154>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a3f      	ldr	r2, [pc, #252]	; (8004018 <xTaskIncrementTick+0x150>)
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4a3f      	ldr	r2, [pc, #252]	; (800401c <xTaskIncrementTick+0x154>)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	4b3e      	ldr	r3, [pc, #248]	; (8004020 <xTaskIncrementTick+0x158>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	4a3d      	ldr	r2, [pc, #244]	; (8004020 <xTaskIncrementTick+0x158>)
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	f000 fad1 	bl	80044d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f32:	4b3c      	ldr	r3, [pc, #240]	; (8004024 <xTaskIncrementTick+0x15c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d349      	bcc.n	8003fd0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f3c:	4b36      	ldr	r3, [pc, #216]	; (8004018 <xTaskIncrementTick+0x150>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d104      	bne.n	8003f50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f46:	4b37      	ldr	r3, [pc, #220]	; (8004024 <xTaskIncrementTick+0x15c>)
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f4c:	601a      	str	r2, [r3, #0]
					break;
 8003f4e:	e03f      	b.n	8003fd0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f50:	4b31      	ldr	r3, [pc, #196]	; (8004018 <xTaskIncrementTick+0x150>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d203      	bcs.n	8003f70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f68:	4a2e      	ldr	r2, [pc, #184]	; (8004024 <xTaskIncrementTick+0x15c>)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f6e:	e02f      	b.n	8003fd0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fe ffcd 	bl	8002f14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3318      	adds	r3, #24
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe ffc4 	bl	8002f14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	4b25      	ldr	r3, [pc, #148]	; (8004028 <xTaskIncrementTick+0x160>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d903      	bls.n	8003fa0 <xTaskIncrementTick+0xd8>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	4a22      	ldr	r2, [pc, #136]	; (8004028 <xTaskIncrementTick+0x160>)
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4a1f      	ldr	r2, [pc, #124]	; (800402c <xTaskIncrementTick+0x164>)
 8003fae:	441a      	add	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f7fe ff4f 	bl	8002e5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <xTaskIncrementTick+0x168>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d3b8      	bcc.n	8003f3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fce:	e7b5      	b.n	8003f3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fd0:	4b17      	ldr	r3, [pc, #92]	; (8004030 <xTaskIncrementTick+0x168>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd6:	4915      	ldr	r1, [pc, #84]	; (800402c <xTaskIncrementTick+0x164>)
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d901      	bls.n	8003fec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <xTaskIncrementTick+0x16c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	e004      	b.n	8004004 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <xTaskIncrementTick+0x170>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3301      	adds	r3, #1
 8004000:	4a0d      	ldr	r2, [pc, #52]	; (8004038 <xTaskIncrementTick+0x170>)
 8004002:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004004:	697b      	ldr	r3, [r7, #20]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000cc4 	.word	0x20000cc4
 8004014:	20000ca0 	.word	0x20000ca0
 8004018:	20000c54 	.word	0x20000c54
 800401c:	20000c58 	.word	0x20000c58
 8004020:	20000cb4 	.word	0x20000cb4
 8004024:	20000cbc 	.word	0x20000cbc
 8004028:	20000ca4 	.word	0x20000ca4
 800402c:	200007cc 	.word	0x200007cc
 8004030:	200007c8 	.word	0x200007c8
 8004034:	20000cb0 	.word	0x20000cb0
 8004038:	20000cac 	.word	0x20000cac

0800403c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004042:	4b28      	ldr	r3, [pc, #160]	; (80040e4 <vTaskSwitchContext+0xa8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800404a:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <vTaskSwitchContext+0xac>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004050:	e041      	b.n	80040d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004052:	4b25      	ldr	r3, [pc, #148]	; (80040e8 <vTaskSwitchContext+0xac>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004058:	4b24      	ldr	r3, [pc, #144]	; (80040ec <vTaskSwitchContext+0xb0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	e010      	b.n	8004082 <vTaskSwitchContext+0x46>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10a      	bne.n	800407c <vTaskSwitchContext+0x40>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	607b      	str	r3, [r7, #4]
}
 8004078:	bf00      	nop
 800407a:	e7fe      	b.n	800407a <vTaskSwitchContext+0x3e>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3b01      	subs	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	491b      	ldr	r1, [pc, #108]	; (80040f0 <vTaskSwitchContext+0xb4>)
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0e4      	beq.n	8004060 <vTaskSwitchContext+0x24>
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <vTaskSwitchContext+0xb4>)
 80040a2:	4413      	add	r3, r2
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	3308      	adds	r3, #8
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d104      	bne.n	80040c6 <vTaskSwitchContext+0x8a>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <vTaskSwitchContext+0xb8>)
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	4a06      	ldr	r2, [pc, #24]	; (80040ec <vTaskSwitchContext+0xb0>)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6013      	str	r3, [r2, #0]
}
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000cc4 	.word	0x20000cc4
 80040e8:	20000cb0 	.word	0x20000cb0
 80040ec:	20000ca4 	.word	0x20000ca4
 80040f0:	200007cc 	.word	0x200007cc
 80040f4:	200007c8 	.word	0x200007c8

080040f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	60fb      	str	r3, [r7, #12]
}
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <vTaskPlaceOnEventList+0x44>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3318      	adds	r3, #24
 8004124:	4619      	mov	r1, r3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fe febb 	bl	8002ea2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800412c:	2101      	movs	r1, #1
 800412e:	6838      	ldr	r0, [r7, #0]
 8004130:	f000 fa7c 	bl	800462c <prvAddCurrentTaskToDelayedList>
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	200007c8 	.word	0x200007c8

08004140 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	617b      	str	r3, [r7, #20]
}
 8004164:	bf00      	nop
 8004166:	e7fe      	b.n	8004166 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <vTaskPlaceOnEventListRestricted+0x54>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3318      	adds	r3, #24
 800416e:	4619      	mov	r1, r3
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7fe fe72 	bl	8002e5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800417c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004180:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	68b8      	ldr	r0, [r7, #8]
 8004186:	f000 fa51 	bl	800462c <prvAddCurrentTaskToDelayedList>
	}
 800418a:	bf00      	nop
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	200007c8 	.word	0x200007c8

08004198 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10a      	bne.n	80041c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	60fb      	str	r3, [r7, #12]
}
 80041c0:	bf00      	nop
 80041c2:	e7fe      	b.n	80041c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	3318      	adds	r3, #24
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fe fea3 	bl	8002f14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ce:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <xTaskRemoveFromEventList+0xb0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d11d      	bne.n	8004212 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3304      	adds	r3, #4
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fe fe9a 	bl	8002f14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e4:	4b19      	ldr	r3, [pc, #100]	; (800424c <xTaskRemoveFromEventList+0xb4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d903      	bls.n	80041f4 <xTaskRemoveFromEventList+0x5c>
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	4a16      	ldr	r2, [pc, #88]	; (800424c <xTaskRemoveFromEventList+0xb4>)
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4a13      	ldr	r2, [pc, #76]	; (8004250 <xTaskRemoveFromEventList+0xb8>)
 8004202:	441a      	add	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	3304      	adds	r3, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f7fe fe25 	bl	8002e5a <vListInsertEnd>
 8004210:	e005      	b.n	800421e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	3318      	adds	r3, #24
 8004216:	4619      	mov	r1, r3
 8004218:	480e      	ldr	r0, [pc, #56]	; (8004254 <xTaskRemoveFromEventList+0xbc>)
 800421a:	f7fe fe1e 	bl	8002e5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <xTaskRemoveFromEventList+0xc0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	429a      	cmp	r2, r3
 800422a:	d905      	bls.n	8004238 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800422c:	2301      	movs	r3, #1
 800422e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <xTaskRemoveFromEventList+0xc4>)
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e001      	b.n	800423c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800423c:	697b      	ldr	r3, [r7, #20]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000cc4 	.word	0x20000cc4
 800424c:	20000ca4 	.word	0x20000ca4
 8004250:	200007cc 	.word	0x200007cc
 8004254:	20000c5c 	.word	0x20000c5c
 8004258:	200007c8 	.word	0x200007c8
 800425c:	20000cb0 	.word	0x20000cb0

08004260 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004268:	4b06      	ldr	r3, [pc, #24]	; (8004284 <vTaskInternalSetTimeOutState+0x24>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004270:	4b05      	ldr	r3, [pc, #20]	; (8004288 <vTaskInternalSetTimeOutState+0x28>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	605a      	str	r2, [r3, #4]
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	20000cb4 	.word	0x20000cb4
 8004288:	20000ca0 	.word	0x20000ca0

0800428c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	613b      	str	r3, [r7, #16]
}
 80042ae:	bf00      	nop
 80042b0:	e7fe      	b.n	80042b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60fb      	str	r3, [r7, #12]
}
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80042ce:	f000 fe79 	bl	8004fc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042d2:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <xTaskCheckForTimeOut+0xbc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ea:	d102      	bne.n	80042f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	e023      	b.n	800433a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <xTaskCheckForTimeOut+0xc0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d007      	beq.n	800430e <xTaskCheckForTimeOut+0x82>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	429a      	cmp	r2, r3
 8004306:	d302      	bcc.n	800430e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e015      	b.n	800433a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	429a      	cmp	r2, r3
 8004316:	d20b      	bcs.n	8004330 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	1ad2      	subs	r2, r2, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff9b 	bl	8004260 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	e004      	b.n	800433a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004336:	2301      	movs	r3, #1
 8004338:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800433a:	f000 fe73 	bl	8005024 <vPortExitCritical>

	return xReturn;
 800433e:	69fb      	ldr	r3, [r7, #28]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000ca0 	.word	0x20000ca0
 800434c:	20000cb4 	.word	0x20000cb4

08004350 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004354:	4b03      	ldr	r3, [pc, #12]	; (8004364 <vTaskMissedYield+0x14>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]
}
 800435a:	bf00      	nop
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	20000cb0 	.word	0x20000cb0

08004368 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004370:	f000 f852 	bl	8004418 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <prvIdleTask+0x28>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d9f9      	bls.n	8004370 <prvIdleTask+0x8>
			{
				taskYIELD();
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <prvIdleTask+0x2c>)
 800437e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800438c:	e7f0      	b.n	8004370 <prvIdleTask+0x8>
 800438e:	bf00      	nop
 8004390:	200007cc 	.word	0x200007cc
 8004394:	e000ed04 	.word	0xe000ed04

08004398 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800439e:	2300      	movs	r3, #0
 80043a0:	607b      	str	r3, [r7, #4]
 80043a2:	e00c      	b.n	80043be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4a12      	ldr	r2, [pc, #72]	; (80043f8 <prvInitialiseTaskLists+0x60>)
 80043b0:	4413      	add	r3, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fe fd24 	bl	8002e00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3301      	adds	r3, #1
 80043bc:	607b      	str	r3, [r7, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b37      	cmp	r3, #55	; 0x37
 80043c2:	d9ef      	bls.n	80043a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043c4:	480d      	ldr	r0, [pc, #52]	; (80043fc <prvInitialiseTaskLists+0x64>)
 80043c6:	f7fe fd1b 	bl	8002e00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043ca:	480d      	ldr	r0, [pc, #52]	; (8004400 <prvInitialiseTaskLists+0x68>)
 80043cc:	f7fe fd18 	bl	8002e00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043d0:	480c      	ldr	r0, [pc, #48]	; (8004404 <prvInitialiseTaskLists+0x6c>)
 80043d2:	f7fe fd15 	bl	8002e00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043d6:	480c      	ldr	r0, [pc, #48]	; (8004408 <prvInitialiseTaskLists+0x70>)
 80043d8:	f7fe fd12 	bl	8002e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043dc:	480b      	ldr	r0, [pc, #44]	; (800440c <prvInitialiseTaskLists+0x74>)
 80043de:	f7fe fd0f 	bl	8002e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <prvInitialiseTaskLists+0x78>)
 80043e4:	4a05      	ldr	r2, [pc, #20]	; (80043fc <prvInitialiseTaskLists+0x64>)
 80043e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <prvInitialiseTaskLists+0x7c>)
 80043ea:	4a05      	ldr	r2, [pc, #20]	; (8004400 <prvInitialiseTaskLists+0x68>)
 80043ec:	601a      	str	r2, [r3, #0]
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	200007cc 	.word	0x200007cc
 80043fc:	20000c2c 	.word	0x20000c2c
 8004400:	20000c40 	.word	0x20000c40
 8004404:	20000c5c 	.word	0x20000c5c
 8004408:	20000c70 	.word	0x20000c70
 800440c:	20000c88 	.word	0x20000c88
 8004410:	20000c54 	.word	0x20000c54
 8004414:	20000c58 	.word	0x20000c58

08004418 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800441e:	e019      	b.n	8004454 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004420:	f000 fdd0 	bl	8004fc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004424:	4b10      	ldr	r3, [pc, #64]	; (8004468 <prvCheckTasksWaitingTermination+0x50>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	4618      	mov	r0, r3
 8004432:	f7fe fd6f 	bl	8002f14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004436:	4b0d      	ldr	r3, [pc, #52]	; (800446c <prvCheckTasksWaitingTermination+0x54>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3b01      	subs	r3, #1
 800443c:	4a0b      	ldr	r2, [pc, #44]	; (800446c <prvCheckTasksWaitingTermination+0x54>)
 800443e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <prvCheckTasksWaitingTermination+0x58>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3b01      	subs	r3, #1
 8004446:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <prvCheckTasksWaitingTermination+0x58>)
 8004448:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800444a:	f000 fdeb 	bl	8005024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f810 	bl	8004474 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004454:	4b06      	ldr	r3, [pc, #24]	; (8004470 <prvCheckTasksWaitingTermination+0x58>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e1      	bne.n	8004420 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20000c70 	.word	0x20000c70
 800446c:	20000c9c 	.word	0x20000c9c
 8004470:	20000c84 	.word	0x20000c84

08004474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004482:	2b00      	cmp	r3, #0
 8004484:	d108      	bne.n	8004498 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	4618      	mov	r0, r3
 800448c:	f000 ff88 	bl	80053a0 <vPortFree>
				vPortFree( pxTCB );
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 ff85 	bl	80053a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004496:	e018      	b.n	80044ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d103      	bne.n	80044aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 ff7c 	bl	80053a0 <vPortFree>
	}
 80044a8:	e00f      	b.n	80044ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d00a      	beq.n	80044ca <prvDeleteTCB+0x56>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	60fb      	str	r3, [r7, #12]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <prvDeleteTCB+0x54>
	}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044da:	4b0c      	ldr	r3, [pc, #48]	; (800450c <prvResetNextTaskUnblockTime+0x38>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044e4:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <prvResetNextTaskUnblockTime+0x3c>)
 80044e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044ec:	e008      	b.n	8004500 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ee:	4b07      	ldr	r3, [pc, #28]	; (800450c <prvResetNextTaskUnblockTime+0x38>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <prvResetNextTaskUnblockTime+0x3c>)
 80044fe:	6013      	str	r3, [r2, #0]
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	20000c54 	.word	0x20000c54
 8004510:	20000cbc 	.word	0x20000cbc

08004514 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <xTaskGetSchedulerState+0x34>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004522:	2301      	movs	r3, #1
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	e008      	b.n	800453a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004528:	4b08      	ldr	r3, [pc, #32]	; (800454c <xTaskGetSchedulerState+0x38>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004530:	2302      	movs	r3, #2
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	e001      	b.n	800453a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004536:	2300      	movs	r3, #0
 8004538:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800453a:	687b      	ldr	r3, [r7, #4]
	}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	20000ca8 	.word	0x20000ca8
 800454c:	20000cc4 	.word	0x20000cc4

08004550 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d056      	beq.n	8004614 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004566:	4b2e      	ldr	r3, [pc, #184]	; (8004620 <xTaskPriorityDisinherit+0xd0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	429a      	cmp	r2, r3
 800456e:	d00a      	beq.n	8004586 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	60fb      	str	r3, [r7, #12]
}
 8004582:	bf00      	nop
 8004584:	e7fe      	b.n	8004584 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	60bb      	str	r3, [r7, #8]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a8:	1e5a      	subs	r2, r3, #1
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d02c      	beq.n	8004614 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d128      	bne.n	8004614 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	3304      	adds	r3, #4
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe fca4 	bl	8002f14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <xTaskPriorityDisinherit+0xd4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d903      	bls.n	80045f4 <xTaskPriorityDisinherit+0xa4>
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	4a0c      	ldr	r2, [pc, #48]	; (8004624 <xTaskPriorityDisinherit+0xd4>)
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4a09      	ldr	r2, [pc, #36]	; (8004628 <xTaskPriorityDisinherit+0xd8>)
 8004602:	441a      	add	r2, r3
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f7fe fc25 	bl	8002e5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004610:	2301      	movs	r3, #1
 8004612:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004614:	697b      	ldr	r3, [r7, #20]
	}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	200007c8 	.word	0x200007c8
 8004624:	20000ca4 	.word	0x20000ca4
 8004628:	200007cc 	.word	0x200007cc

0800462c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004636:	4b21      	ldr	r3, [pc, #132]	; (80046bc <prvAddCurrentTaskToDelayedList+0x90>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800463c:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3304      	adds	r3, #4
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fc66 	bl	8002f14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800464e:	d10a      	bne.n	8004666 <prvAddCurrentTaskToDelayedList+0x3a>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004656:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4819      	ldr	r0, [pc, #100]	; (80046c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004660:	f7fe fbfb 	bl	8002e5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004664:	e026      	b.n	80046b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4413      	add	r3, r2
 800466c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800466e:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	429a      	cmp	r2, r3
 800467c:	d209      	bcs.n	8004692 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3304      	adds	r3, #4
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f7fe fc09 	bl	8002ea2 <vListInsert>
}
 8004690:	e010      	b.n	80046b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004692:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3304      	adds	r3, #4
 800469c:	4619      	mov	r1, r3
 800469e:	4610      	mov	r0, r2
 80046a0:	f7fe fbff 	bl	8002ea2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d202      	bcs.n	80046b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80046ae:	4a08      	ldr	r2, [pc, #32]	; (80046d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6013      	str	r3, [r2, #0]
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20000ca0 	.word	0x20000ca0
 80046c0:	200007c8 	.word	0x200007c8
 80046c4:	20000c88 	.word	0x20000c88
 80046c8:	20000c58 	.word	0x20000c58
 80046cc:	20000c54 	.word	0x20000c54
 80046d0:	20000cbc 	.word	0x20000cbc

080046d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08a      	sub	sp, #40	; 0x28
 80046d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80046de:	f000 fb07 	bl	8004cf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80046e2:	4b1c      	ldr	r3, [pc, #112]	; (8004754 <xTimerCreateTimerTask+0x80>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d021      	beq.n	800472e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80046f2:	1d3a      	adds	r2, r7, #4
 80046f4:	f107 0108 	add.w	r1, r7, #8
 80046f8:	f107 030c 	add.w	r3, r7, #12
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fe fb65 	bl	8002dcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	9202      	str	r2, [sp, #8]
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	2302      	movs	r3, #2
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	2300      	movs	r3, #0
 8004712:	460a      	mov	r2, r1
 8004714:	4910      	ldr	r1, [pc, #64]	; (8004758 <xTimerCreateTimerTask+0x84>)
 8004716:	4811      	ldr	r0, [pc, #68]	; (800475c <xTimerCreateTimerTask+0x88>)
 8004718:	f7ff f912 	bl	8003940 <xTaskCreateStatic>
 800471c:	4603      	mov	r3, r0
 800471e:	4a10      	ldr	r2, [pc, #64]	; (8004760 <xTimerCreateTimerTask+0x8c>)
 8004720:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004722:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <xTimerCreateTimerTask+0x8c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800472a:	2301      	movs	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	613b      	str	r3, [r7, #16]
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800474a:	697b      	ldr	r3, [r7, #20]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20000cf8 	.word	0x20000cf8
 8004758:	08005f98 	.word	0x08005f98
 800475c:	08004899 	.word	0x08004899
 8004760:	20000cfc 	.word	0x20000cfc

08004764 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004772:	2300      	movs	r3, #0
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <xTimerGenericCommand+0x2e>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	623b      	str	r3, [r7, #32]
}
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004792:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <xTimerGenericCommand+0x98>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d02a      	beq.n	80047f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	dc18      	bgt.n	80047de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80047ac:	f7ff feb2 	bl	8004514 <xTaskGetSchedulerState>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d109      	bne.n	80047ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80047b6:	4b11      	ldr	r3, [pc, #68]	; (80047fc <xTimerGenericCommand+0x98>)
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	f107 0110 	add.w	r1, r7, #16
 80047be:	2300      	movs	r3, #0
 80047c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c2:	f7fe fcd5 	bl	8003170 <xQueueGenericSend>
 80047c6:	6278      	str	r0, [r7, #36]	; 0x24
 80047c8:	e012      	b.n	80047f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <xTimerGenericCommand+0x98>)
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	f107 0110 	add.w	r1, r7, #16
 80047d2:	2300      	movs	r3, #0
 80047d4:	2200      	movs	r2, #0
 80047d6:	f7fe fccb 	bl	8003170 <xQueueGenericSend>
 80047da:	6278      	str	r0, [r7, #36]	; 0x24
 80047dc:	e008      	b.n	80047f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80047de:	4b07      	ldr	r3, [pc, #28]	; (80047fc <xTimerGenericCommand+0x98>)
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	f107 0110 	add.w	r1, r7, #16
 80047e6:	2300      	movs	r3, #0
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	f7fe fdbf 	bl	800336c <xQueueGenericSendFromISR>
 80047ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3728      	adds	r7, #40	; 0x28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000cf8 	.word	0x20000cf8

08004800 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af02      	add	r7, sp, #8
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480a:	4b22      	ldr	r3, [pc, #136]	; (8004894 <prvProcessExpiredTimer+0x94>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	3304      	adds	r3, #4
 8004818:	4618      	mov	r0, r3
 800481a:	f7fe fb7b 	bl	8002f14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d022      	beq.n	8004872 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	18d1      	adds	r1, r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	6978      	ldr	r0, [r7, #20]
 800483a:	f000 f8d1 	bl	80049e0 <prvInsertTimerInActiveList>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01f      	beq.n	8004884 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004844:	2300      	movs	r3, #0
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	2300      	movs	r3, #0
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	2100      	movs	r1, #0
 800484e:	6978      	ldr	r0, [r7, #20]
 8004850:	f7ff ff88 	bl	8004764 <xTimerGenericCommand>
 8004854:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d113      	bne.n	8004884 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	60fb      	str	r3, [r7, #12]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	b2da      	uxtb	r2, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	6978      	ldr	r0, [r7, #20]
 800488a:	4798      	blx	r3
}
 800488c:	bf00      	nop
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000cf0 	.word	0x20000cf0

08004898 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048a0:	f107 0308 	add.w	r3, r7, #8
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 f857 	bl	8004958 <prvGetNextExpireTime>
 80048aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4619      	mov	r1, r3
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f803 	bl	80048bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80048b6:	f000 f8d5 	bl	8004a64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048ba:	e7f1      	b.n	80048a0 <prvTimerTask+0x8>

080048bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80048c6:	f7ff fa43 	bl	8003d50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048ca:	f107 0308 	add.w	r3, r7, #8
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f866 	bl	80049a0 <prvSampleTimeNow>
 80048d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d130      	bne.n	800493e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <prvProcessTimerOrBlockTask+0x3c>
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d806      	bhi.n	80048f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80048ea:	f7ff fa3f 	bl	8003d6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048ee:	68f9      	ldr	r1, [r7, #12]
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ff85 	bl	8004800 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80048f6:	e024      	b.n	8004942 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048fe:	4b13      	ldr	r3, [pc, #76]	; (800494c <prvProcessTimerOrBlockTask+0x90>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <prvProcessTimerOrBlockTask+0x50>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <prvProcessTimerOrBlockTask+0x52>
 800490c:	2300      	movs	r3, #0
 800490e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004910:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <prvProcessTimerOrBlockTask+0x94>)
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	4619      	mov	r1, r3
 800491e:	f7fe ffdb 	bl	80038d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004922:	f7ff fa23 	bl	8003d6c <xTaskResumeAll>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <prvProcessTimerOrBlockTask+0x98>)
 800492e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	f3bf 8f6f 	isb	sy
}
 800493c:	e001      	b.n	8004942 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800493e:	f7ff fa15 	bl	8003d6c <xTaskResumeAll>
}
 8004942:	bf00      	nop
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000cf4 	.word	0x20000cf4
 8004950:	20000cf8 	.word	0x20000cf8
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004960:	4b0e      	ldr	r3, [pc, #56]	; (800499c <prvGetNextExpireTime+0x44>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <prvGetNextExpireTime+0x16>
 800496a:	2201      	movs	r2, #1
 800496c:	e000      	b.n	8004970 <prvGetNextExpireTime+0x18>
 800496e:	2200      	movs	r2, #0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d105      	bne.n	8004988 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800497c:	4b07      	ldr	r3, [pc, #28]	; (800499c <prvGetNextExpireTime+0x44>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	e001      	b.n	800498c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800498c:	68fb      	ldr	r3, [r7, #12]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000cf0 	.word	0x20000cf0

080049a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80049a8:	f7ff fa7e 	bl	8003ea8 <xTaskGetTickCount>
 80049ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <prvSampleTimeNow+0x3c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d205      	bcs.n	80049c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80049b8:	f000 f936 	bl	8004c28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e002      	b.n	80049ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80049ca:	4a04      	ldr	r2, [pc, #16]	; (80049dc <prvSampleTimeNow+0x3c>)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80049d0:	68fb      	ldr	r3, [r7, #12]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000d00 	.word	0x20000d00

080049e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d812      	bhi.n	8004a2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d302      	bcc.n	8004a1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a14:	2301      	movs	r3, #1
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e01b      	b.n	8004a52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <prvInsertTimerInActiveList+0x7c>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4619      	mov	r1, r3
 8004a24:	4610      	mov	r0, r2
 8004a26:	f7fe fa3c 	bl	8002ea2 <vListInsert>
 8004a2a:	e012      	b.n	8004a52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d206      	bcs.n	8004a42 <prvInsertTimerInActiveList+0x62>
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d302      	bcc.n	8004a42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e007      	b.n	8004a52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a42:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <prvInsertTimerInActiveList+0x80>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f7fe fa28 	bl	8002ea2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a52:	697b      	ldr	r3, [r7, #20]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000cf4 	.word	0x20000cf4
 8004a60:	20000cf0 	.word	0x20000cf0

08004a64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08e      	sub	sp, #56	; 0x38
 8004a68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a6a:	e0ca      	b.n	8004c02 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	da18      	bge.n	8004aa4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	3304      	adds	r3, #4
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	61fb      	str	r3, [r7, #28]
}
 8004a90:	bf00      	nop
 8004a92:	e7fe      	b.n	8004a92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a9a:	6850      	ldr	r0, [r2, #4]
 8004a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a9e:	6892      	ldr	r2, [r2, #8]
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f2c0 80ab 	blt.w	8004c02 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d004      	beq.n	8004ac2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	3304      	adds	r3, #4
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fe fa29 	bl	8002f14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff ff6b 	bl	80049a0 <prvSampleTimeNow>
 8004aca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b09      	cmp	r3, #9
 8004ad0:	f200 8096 	bhi.w	8004c00 <prvProcessReceivedCommands+0x19c>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <prvProcessReceivedCommands+0x78>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b05 	.word	0x08004b05
 8004ae0:	08004b05 	.word	0x08004b05
 8004ae4:	08004b05 	.word	0x08004b05
 8004ae8:	08004b79 	.word	0x08004b79
 8004aec:	08004b8d 	.word	0x08004b8d
 8004af0:	08004bd7 	.word	0x08004bd7
 8004af4:	08004b05 	.word	0x08004b05
 8004af8:	08004b05 	.word	0x08004b05
 8004afc:	08004b79 	.word	0x08004b79
 8004b00:	08004b8d 	.word	0x08004b8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	18d1      	adds	r1, r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b24:	f7ff ff5c 	bl	80049e0 <prvInsertTimerInActiveList>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d069      	beq.n	8004c02 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d05e      	beq.n	8004c02 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	441a      	add	r2, r3
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	2300      	movs	r3, #0
 8004b52:	2100      	movs	r1, #0
 8004b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b56:	f7ff fe05 	bl	8004764 <xTimerGenericCommand>
 8004b5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d14f      	bne.n	8004c02 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	61bb      	str	r3, [r7, #24]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b7e:	f023 0301 	bic.w	r3, r3, #1
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b8a:	e03a      	b.n	8004c02 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	617b      	str	r3, [r7, #20]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	18d1      	adds	r1, r2, r3
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bd0:	f7ff ff06 	bl	80049e0 <prvInsertTimerInActiveList>
					break;
 8004bd4:	e015      	b.n	8004c02 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be6:	f000 fbdb 	bl	80053a0 <vPortFree>
 8004bea:	e00a      	b.n	8004c02 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf2:	f023 0301 	bic.w	r3, r3, #1
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004bfe:	e000      	b.n	8004c02 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004c00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c02:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <prvProcessReceivedCommands+0x1c0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	1d39      	adds	r1, r7, #4
 8004c08:	2200      	movs	r2, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe fc4a 	bl	80034a4 <xQueueReceive>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f47f af2a 	bne.w	8004a6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	3730      	adds	r7, #48	; 0x30
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000cf8 	.word	0x20000cf8

08004c28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c2e:	e048      	b.n	8004cc2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c30:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <prvSwitchTimerLists+0xc0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ce8 <prvSwitchTimerLists+0xc0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fe f963 	bl	8002f14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d02e      	beq.n	8004cc2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d90e      	bls.n	8004c94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c82:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <prvSwitchTimerLists+0xc0>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f7fe f908 	bl	8002ea2 <vListInsert>
 8004c92:	e016      	b.n	8004cc2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c94:	2300      	movs	r3, #0
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7ff fd60 	bl	8004764 <xTimerGenericCommand>
 8004ca4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	603b      	str	r3, [r7, #0]
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <prvSwitchTimerLists+0xc0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1b1      	bne.n	8004c30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <prvSwitchTimerLists+0xc0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004cd2:	4b06      	ldr	r3, [pc, #24]	; (8004cec <prvSwitchTimerLists+0xc4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a04      	ldr	r2, [pc, #16]	; (8004ce8 <prvSwitchTimerLists+0xc0>)
 8004cd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004cda:	4a04      	ldr	r2, [pc, #16]	; (8004cec <prvSwitchTimerLists+0xc4>)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	6013      	str	r3, [r2, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000cf0 	.word	0x20000cf0
 8004cec:	20000cf4 	.word	0x20000cf4

08004cf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004cf6:	f000 f965 	bl	8004fc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004cfa:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <prvCheckForValidListAndQueue+0x60>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d120      	bne.n	8004d44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d02:	4814      	ldr	r0, [pc, #80]	; (8004d54 <prvCheckForValidListAndQueue+0x64>)
 8004d04:	f7fe f87c 	bl	8002e00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d08:	4813      	ldr	r0, [pc, #76]	; (8004d58 <prvCheckForValidListAndQueue+0x68>)
 8004d0a:	f7fe f879 	bl	8002e00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d0e:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <prvCheckForValidListAndQueue+0x6c>)
 8004d10:	4a10      	ldr	r2, [pc, #64]	; (8004d54 <prvCheckForValidListAndQueue+0x64>)
 8004d12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d14:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <prvCheckForValidListAndQueue+0x70>)
 8004d16:	4a10      	ldr	r2, [pc, #64]	; (8004d58 <prvCheckForValidListAndQueue+0x68>)
 8004d18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <prvCheckForValidListAndQueue+0x74>)
 8004d20:	4a11      	ldr	r2, [pc, #68]	; (8004d68 <prvCheckForValidListAndQueue+0x78>)
 8004d22:	2110      	movs	r1, #16
 8004d24:	200a      	movs	r0, #10
 8004d26:	f7fe f987 	bl	8003038 <xQueueGenericCreateStatic>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4a08      	ldr	r2, [pc, #32]	; (8004d50 <prvCheckForValidListAndQueue+0x60>)
 8004d2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <prvCheckForValidListAndQueue+0x60>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d38:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <prvCheckForValidListAndQueue+0x60>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	490b      	ldr	r1, [pc, #44]	; (8004d6c <prvCheckForValidListAndQueue+0x7c>)
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe fda0 	bl	8003884 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d44:	f000 f96e 	bl	8005024 <vPortExitCritical>
}
 8004d48:	bf00      	nop
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000cf8 	.word	0x20000cf8
 8004d54:	20000cc8 	.word	0x20000cc8
 8004d58:	20000cdc 	.word	0x20000cdc
 8004d5c:	20000cf0 	.word	0x20000cf0
 8004d60:	20000cf4 	.word	0x20000cf4
 8004d64:	20000da4 	.word	0x20000da4
 8004d68:	20000d04 	.word	0x20000d04
 8004d6c:	08005fa0 	.word	0x08005fa0

08004d70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3b04      	subs	r3, #4
 8004d80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3b04      	subs	r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f023 0201 	bic.w	r2, r3, #1
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3b04      	subs	r3, #4
 8004d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004da0:	4a0c      	ldr	r2, [pc, #48]	; (8004dd4 <pxPortInitialiseStack+0x64>)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3b14      	subs	r3, #20
 8004daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3b04      	subs	r3, #4
 8004db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f06f 0202 	mvn.w	r2, #2
 8004dbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3b20      	subs	r3, #32
 8004dc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	08004dd9 	.word	0x08004dd9

08004dd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004de2:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <prvTaskExitError+0x54>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dea:	d00a      	beq.n	8004e02 <prvTaskExitError+0x2a>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	60fb      	str	r3, [r7, #12]
}
 8004dfe:	bf00      	nop
 8004e00:	e7fe      	b.n	8004e00 <prvTaskExitError+0x28>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	60bb      	str	r3, [r7, #8]
}
 8004e14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e16:	bf00      	nop
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0fc      	beq.n	8004e18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e1e:	bf00      	nop
 8004e20:	bf00      	nop
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	2000000c 	.word	0x2000000c

08004e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <pxCurrentTCBConst2>)
 8004e32:	6819      	ldr	r1, [r3, #0]
 8004e34:	6808      	ldr	r0, [r1, #0]
 8004e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3a:	f380 8809 	msr	PSP, r0
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f380 8811 	msr	BASEPRI, r0
 8004e4a:	4770      	bx	lr
 8004e4c:	f3af 8000 	nop.w

08004e50 <pxCurrentTCBConst2>:
 8004e50:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop

08004e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e58:	4808      	ldr	r0, [pc, #32]	; (8004e7c <prvPortStartFirstTask+0x24>)
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	6800      	ldr	r0, [r0, #0]
 8004e5e:	f380 8808 	msr	MSP, r0
 8004e62:	f04f 0000 	mov.w	r0, #0
 8004e66:	f380 8814 	msr	CONTROL, r0
 8004e6a:	b662      	cpsie	i
 8004e6c:	b661      	cpsie	f
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	df00      	svc	0
 8004e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e7a:	bf00      	nop
 8004e7c:	e000ed08 	.word	0xe000ed08

08004e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e86:	4b46      	ldr	r3, [pc, #280]	; (8004fa0 <xPortStartScheduler+0x120>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a46      	ldr	r2, [pc, #280]	; (8004fa4 <xPortStartScheduler+0x124>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10a      	bne.n	8004ea6 <xPortStartScheduler+0x26>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	613b      	str	r3, [r7, #16]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ea6:	4b3e      	ldr	r3, [pc, #248]	; (8004fa0 <xPortStartScheduler+0x120>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a3f      	ldr	r2, [pc, #252]	; (8004fa8 <xPortStartScheduler+0x128>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d10a      	bne.n	8004ec6 <xPortStartScheduler+0x46>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	60fb      	str	r3, [r7, #12]
}
 8004ec2:	bf00      	nop
 8004ec4:	e7fe      	b.n	8004ec4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ec6:	4b39      	ldr	r3, [pc, #228]	; (8004fac <xPortStartScheduler+0x12c>)
 8004ec8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	22ff      	movs	r2, #255	; 0xff
 8004ed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	4b31      	ldr	r3, [pc, #196]	; (8004fb0 <xPortStartScheduler+0x130>)
 8004eec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004eee:	4b31      	ldr	r3, [pc, #196]	; (8004fb4 <xPortStartScheduler+0x134>)
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ef4:	e009      	b.n	8004f0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ef6:	4b2f      	ldr	r3, [pc, #188]	; (8004fb4 <xPortStartScheduler+0x134>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	4a2d      	ldr	r2, [pc, #180]	; (8004fb4 <xPortStartScheduler+0x134>)
 8004efe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d0ef      	beq.n	8004ef6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f16:	4b27      	ldr	r3, [pc, #156]	; (8004fb4 <xPortStartScheduler+0x134>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1c3 0307 	rsb	r3, r3, #7
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d00a      	beq.n	8004f38 <xPortStartScheduler+0xb8>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	60bb      	str	r3, [r7, #8]
}
 8004f34:	bf00      	nop
 8004f36:	e7fe      	b.n	8004f36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f38:	4b1e      	ldr	r3, [pc, #120]	; (8004fb4 <xPortStartScheduler+0x134>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <xPortStartScheduler+0x134>)
 8004f40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f42:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <xPortStartScheduler+0x134>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f4a:	4a1a      	ldr	r2, [pc, #104]	; (8004fb4 <xPortStartScheduler+0x134>)
 8004f4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f56:	4b18      	ldr	r3, [pc, #96]	; (8004fb8 <xPortStartScheduler+0x138>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <xPortStartScheduler+0x138>)
 8004f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f62:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <xPortStartScheduler+0x138>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <xPortStartScheduler+0x138>)
 8004f68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f6e:	f000 f8dd 	bl	800512c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f72:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <xPortStartScheduler+0x13c>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f78:	f000 f8fc 	bl	8005174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f7c:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <xPortStartScheduler+0x140>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a0f      	ldr	r2, [pc, #60]	; (8004fc0 <xPortStartScheduler+0x140>)
 8004f82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f88:	f7ff ff66 	bl	8004e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f8c:	f7ff f856 	bl	800403c <vTaskSwitchContext>
	prvTaskExitError();
 8004f90:	f7ff ff22 	bl	8004dd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	e000ed00 	.word	0xe000ed00
 8004fa4:	410fc271 	.word	0x410fc271
 8004fa8:	410fc270 	.word	0x410fc270
 8004fac:	e000e400 	.word	0xe000e400
 8004fb0:	20000df4 	.word	0x20000df4
 8004fb4:	20000df8 	.word	0x20000df8
 8004fb8:	e000ed20 	.word	0xe000ed20
 8004fbc:	2000000c 	.word	0x2000000c
 8004fc0:	e000ef34 	.word	0xe000ef34

08004fc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	607b      	str	r3, [r7, #4]
}
 8004fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fde:	4b0f      	ldr	r3, [pc, #60]	; (800501c <vPortEnterCritical+0x58>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	4a0d      	ldr	r2, [pc, #52]	; (800501c <vPortEnterCritical+0x58>)
 8004fe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	; (800501c <vPortEnterCritical+0x58>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d10f      	bne.n	8005010 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <vPortEnterCritical+0x5c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <vPortEnterCritical+0x4c>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	603b      	str	r3, [r7, #0]
}
 800500c:	bf00      	nop
 800500e:	e7fe      	b.n	800500e <vPortEnterCritical+0x4a>
	}
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	2000000c 	.word	0x2000000c
 8005020:	e000ed04 	.word	0xe000ed04

08005024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800502a:	4b12      	ldr	r3, [pc, #72]	; (8005074 <vPortExitCritical+0x50>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10a      	bne.n	8005048 <vPortExitCritical+0x24>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	607b      	str	r3, [r7, #4]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005048:	4b0a      	ldr	r3, [pc, #40]	; (8005074 <vPortExitCritical+0x50>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3b01      	subs	r3, #1
 800504e:	4a09      	ldr	r2, [pc, #36]	; (8005074 <vPortExitCritical+0x50>)
 8005050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005052:	4b08      	ldr	r3, [pc, #32]	; (8005074 <vPortExitCritical+0x50>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d105      	bne.n	8005066 <vPortExitCritical+0x42>
 800505a:	2300      	movs	r3, #0
 800505c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f383 8811 	msr	BASEPRI, r3
}
 8005064:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	2000000c 	.word	0x2000000c
	...

08005080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005080:	f3ef 8009 	mrs	r0, PSP
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <pxCurrentTCBConst>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	f01e 0f10 	tst.w	lr, #16
 8005090:	bf08      	it	eq
 8005092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509a:	6010      	str	r0, [r2, #0]
 800509c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80050a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80050a4:	f380 8811 	msr	BASEPRI, r0
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f7fe ffc4 	bl	800403c <vTaskSwitchContext>
 80050b4:	f04f 0000 	mov.w	r0, #0
 80050b8:	f380 8811 	msr	BASEPRI, r0
 80050bc:	bc09      	pop	{r0, r3}
 80050be:	6819      	ldr	r1, [r3, #0]
 80050c0:	6808      	ldr	r0, [r1, #0]
 80050c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c6:	f01e 0f10 	tst.w	lr, #16
 80050ca:	bf08      	it	eq
 80050cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050d0:	f380 8809 	msr	PSP, r0
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	f3af 8000 	nop.w

080050e0 <pxCurrentTCBConst>:
 80050e0:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop

080050e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	607b      	str	r3, [r7, #4]
}
 8005100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005102:	f7fe fee1 	bl	8003ec8 <xTaskIncrementTick>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800510c:	4b06      	ldr	r3, [pc, #24]	; (8005128 <xPortSysTickHandler+0x40>)
 800510e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	2300      	movs	r3, #0
 8005116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	f383 8811 	msr	BASEPRI, r3
}
 800511e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005120:	bf00      	nop
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <vPortSetupTimerInterrupt+0x34>)
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <vPortSetupTimerInterrupt+0x38>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800513c:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <vPortSetupTimerInterrupt+0x3c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a0a      	ldr	r2, [pc, #40]	; (800516c <vPortSetupTimerInterrupt+0x40>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	099b      	lsrs	r3, r3, #6
 8005148:	4a09      	ldr	r2, [pc, #36]	; (8005170 <vPortSetupTimerInterrupt+0x44>)
 800514a:	3b01      	subs	r3, #1
 800514c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800514e:	4b04      	ldr	r3, [pc, #16]	; (8005160 <vPortSetupTimerInterrupt+0x34>)
 8005150:	2207      	movs	r2, #7
 8005152:	601a      	str	r2, [r3, #0]
}
 8005154:	bf00      	nop
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	e000e010 	.word	0xe000e010
 8005164:	e000e018 	.word	0xe000e018
 8005168:	20000000 	.word	0x20000000
 800516c:	10624dd3 	.word	0x10624dd3
 8005170:	e000e014 	.word	0xe000e014

08005174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005184 <vPortEnableVFP+0x10>
 8005178:	6801      	ldr	r1, [r0, #0]
 800517a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800517e:	6001      	str	r1, [r0, #0]
 8005180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005182:	bf00      	nop
 8005184:	e000ed88 	.word	0xe000ed88

08005188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800518e:	f3ef 8305 	mrs	r3, IPSR
 8005192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b0f      	cmp	r3, #15
 8005198:	d914      	bls.n	80051c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800519a:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <vPortValidateInterruptPriority+0x70>)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80051a4:	4b15      	ldr	r3, [pc, #84]	; (80051fc <vPortValidateInterruptPriority+0x74>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	7afa      	ldrb	r2, [r7, #11]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d20a      	bcs.n	80051c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	607b      	str	r3, [r7, #4]
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80051c4:	4b0e      	ldr	r3, [pc, #56]	; (8005200 <vPortValidateInterruptPriority+0x78>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051cc:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <vPortValidateInterruptPriority+0x7c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d90a      	bls.n	80051ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	603b      	str	r3, [r7, #0]
}
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <vPortValidateInterruptPriority+0x60>
	}
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	e000e3f0 	.word	0xe000e3f0
 80051fc:	20000df4 	.word	0x20000df4
 8005200:	e000ed0c 	.word	0xe000ed0c
 8005204:	20000df8 	.word	0x20000df8

08005208 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005214:	f7fe fd9c 	bl	8003d50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005218:	4b5b      	ldr	r3, [pc, #364]	; (8005388 <pvPortMalloc+0x180>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005220:	f000 f920 	bl	8005464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005224:	4b59      	ldr	r3, [pc, #356]	; (800538c <pvPortMalloc+0x184>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	f040 8093 	bne.w	8005358 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01d      	beq.n	8005274 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005238:	2208      	movs	r2, #8
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b00      	cmp	r3, #0
 8005248:	d014      	beq.n	8005274 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f023 0307 	bic.w	r3, r3, #7
 8005250:	3308      	adds	r3, #8
 8005252:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <pvPortMalloc+0x6c>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	617b      	str	r3, [r7, #20]
}
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d06e      	beq.n	8005358 <pvPortMalloc+0x150>
 800527a:	4b45      	ldr	r3, [pc, #276]	; (8005390 <pvPortMalloc+0x188>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	429a      	cmp	r2, r3
 8005282:	d869      	bhi.n	8005358 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005284:	4b43      	ldr	r3, [pc, #268]	; (8005394 <pvPortMalloc+0x18c>)
 8005286:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005288:	4b42      	ldr	r3, [pc, #264]	; (8005394 <pvPortMalloc+0x18c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800528e:	e004      	b.n	800529a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d903      	bls.n	80052ac <pvPortMalloc+0xa4>
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f1      	bne.n	8005290 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052ac:	4b36      	ldr	r3, [pc, #216]	; (8005388 <pvPortMalloc+0x180>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d050      	beq.n	8005358 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2208      	movs	r2, #8
 80052bc:	4413      	add	r3, r2
 80052be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	2308      	movs	r3, #8
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d91f      	bls.n	8005318 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <pvPortMalloc+0xf8>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	613b      	str	r3, [r7, #16]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	1ad2      	subs	r2, r2, r3
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005312:	69b8      	ldr	r0, [r7, #24]
 8005314:	f000 f908 	bl	8005528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005318:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <pvPortMalloc+0x188>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	4a1b      	ldr	r2, [pc, #108]	; (8005390 <pvPortMalloc+0x188>)
 8005324:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005326:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <pvPortMalloc+0x188>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <pvPortMalloc+0x190>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d203      	bcs.n	800533a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005332:	4b17      	ldr	r3, [pc, #92]	; (8005390 <pvPortMalloc+0x188>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a18      	ldr	r2, [pc, #96]	; (8005398 <pvPortMalloc+0x190>)
 8005338:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	4b13      	ldr	r3, [pc, #76]	; (800538c <pvPortMalloc+0x184>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	431a      	orrs	r2, r3
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800534e:	4b13      	ldr	r3, [pc, #76]	; (800539c <pvPortMalloc+0x194>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3301      	adds	r3, #1
 8005354:	4a11      	ldr	r2, [pc, #68]	; (800539c <pvPortMalloc+0x194>)
 8005356:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005358:	f7fe fd08 	bl	8003d6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <pvPortMalloc+0x174>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	60fb      	str	r3, [r7, #12]
}
 8005378:	bf00      	nop
 800537a:	e7fe      	b.n	800537a <pvPortMalloc+0x172>
	return pvReturn;
 800537c:	69fb      	ldr	r3, [r7, #28]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3728      	adds	r7, #40	; 0x28
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20004a04 	.word	0x20004a04
 800538c:	20004a18 	.word	0x20004a18
 8005390:	20004a08 	.word	0x20004a08
 8005394:	200049fc 	.word	0x200049fc
 8005398:	20004a0c 	.word	0x20004a0c
 800539c:	20004a10 	.word	0x20004a10

080053a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d04d      	beq.n	800544e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053b2:	2308      	movs	r3, #8
 80053b4:	425b      	negs	r3, r3
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4413      	add	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	4b24      	ldr	r3, [pc, #144]	; (8005458 <vPortFree+0xb8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4013      	ands	r3, r2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <vPortFree+0x44>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	60fb      	str	r3, [r7, #12]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <vPortFree+0x62>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	60bb      	str	r3, [r7, #8]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <vPortFree+0xb8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01e      	beq.n	800544e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d11a      	bne.n	800544e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <vPortFree+0xb8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	43db      	mvns	r3, r3
 8005422:	401a      	ands	r2, r3
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005428:	f7fe fc92 	bl	8003d50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	4b0a      	ldr	r3, [pc, #40]	; (800545c <vPortFree+0xbc>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4413      	add	r3, r2
 8005436:	4a09      	ldr	r2, [pc, #36]	; (800545c <vPortFree+0xbc>)
 8005438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800543a:	6938      	ldr	r0, [r7, #16]
 800543c:	f000 f874 	bl	8005528 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005440:	4b07      	ldr	r3, [pc, #28]	; (8005460 <vPortFree+0xc0>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3301      	adds	r3, #1
 8005446:	4a06      	ldr	r2, [pc, #24]	; (8005460 <vPortFree+0xc0>)
 8005448:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800544a:	f7fe fc8f 	bl	8003d6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800544e:	bf00      	nop
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20004a18 	.word	0x20004a18
 800545c:	20004a08 	.word	0x20004a08
 8005460:	20004a14 	.word	0x20004a14

08005464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800546a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800546e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005470:	4b27      	ldr	r3, [pc, #156]	; (8005510 <prvHeapInit+0xac>)
 8005472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00c      	beq.n	8005498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3307      	adds	r3, #7
 8005482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0307 	bic.w	r3, r3, #7
 800548a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <prvHeapInit+0xac>)
 8005494:	4413      	add	r3, r2
 8005496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800549c:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <prvHeapInit+0xb0>)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054a2:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <prvHeapInit+0xb0>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	4413      	add	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054b0:	2208      	movs	r2, #8
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0307 	bic.w	r3, r3, #7
 80054be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a15      	ldr	r2, [pc, #84]	; (8005518 <prvHeapInit+0xb4>)
 80054c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <prvHeapInit+0xb4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2200      	movs	r2, #0
 80054cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054ce:	4b12      	ldr	r3, [pc, #72]	; (8005518 <prvHeapInit+0xb4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	1ad2      	subs	r2, r2, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054e4:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <prvHeapInit+0xb4>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	4a0a      	ldr	r2, [pc, #40]	; (800551c <prvHeapInit+0xb8>)
 80054f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4a09      	ldr	r2, [pc, #36]	; (8005520 <prvHeapInit+0xbc>)
 80054fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054fc:	4b09      	ldr	r3, [pc, #36]	; (8005524 <prvHeapInit+0xc0>)
 80054fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20000dfc 	.word	0x20000dfc
 8005514:	200049fc 	.word	0x200049fc
 8005518:	20004a04 	.word	0x20004a04
 800551c:	20004a0c 	.word	0x20004a0c
 8005520:	20004a08 	.word	0x20004a08
 8005524:	20004a18 	.word	0x20004a18

08005528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005530:	4b28      	ldr	r3, [pc, #160]	; (80055d4 <prvInsertBlockIntoFreeList+0xac>)
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	e002      	b.n	800553c <prvInsertBlockIntoFreeList+0x14>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	429a      	cmp	r2, r3
 8005544:	d8f7      	bhi.n	8005536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	4413      	add	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	d108      	bne.n	800556a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	441a      	add	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	441a      	add	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d118      	bne.n	80055b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d00d      	beq.n	80055a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	441a      	add	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e008      	b.n	80055b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055a6:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <prvInsertBlockIntoFreeList+0xb0>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e003      	b.n	80055b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d002      	beq.n	80055c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	200049fc 	.word	0x200049fc
 80055d8:	20004a04 	.word	0x20004a04

080055dc <siprintf>:
 80055dc:	b40e      	push	{r1, r2, r3}
 80055de:	b500      	push	{lr}
 80055e0:	b09c      	sub	sp, #112	; 0x70
 80055e2:	ab1d      	add	r3, sp, #116	; 0x74
 80055e4:	9002      	str	r0, [sp, #8]
 80055e6:	9006      	str	r0, [sp, #24]
 80055e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055ec:	4809      	ldr	r0, [pc, #36]	; (8005614 <siprintf+0x38>)
 80055ee:	9107      	str	r1, [sp, #28]
 80055f0:	9104      	str	r1, [sp, #16]
 80055f2:	4909      	ldr	r1, [pc, #36]	; (8005618 <siprintf+0x3c>)
 80055f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055f8:	9105      	str	r1, [sp, #20]
 80055fa:	6800      	ldr	r0, [r0, #0]
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	a902      	add	r1, sp, #8
 8005600:	f000 f9a0 	bl	8005944 <_svfiprintf_r>
 8005604:	9b02      	ldr	r3, [sp, #8]
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	b01c      	add	sp, #112	; 0x70
 800560c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005610:	b003      	add	sp, #12
 8005612:	4770      	bx	lr
 8005614:	2000005c 	.word	0x2000005c
 8005618:	ffff0208 	.word	0xffff0208

0800561c <memset>:
 800561c:	4402      	add	r2, r0
 800561e:	4603      	mov	r3, r0
 8005620:	4293      	cmp	r3, r2
 8005622:	d100      	bne.n	8005626 <memset+0xa>
 8005624:	4770      	bx	lr
 8005626:	f803 1b01 	strb.w	r1, [r3], #1
 800562a:	e7f9      	b.n	8005620 <memset+0x4>

0800562c <__errno>:
 800562c:	4b01      	ldr	r3, [pc, #4]	; (8005634 <__errno+0x8>)
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	2000005c 	.word	0x2000005c

08005638 <__libc_init_array>:
 8005638:	b570      	push	{r4, r5, r6, lr}
 800563a:	4d0d      	ldr	r5, [pc, #52]	; (8005670 <__libc_init_array+0x38>)
 800563c:	4c0d      	ldr	r4, [pc, #52]	; (8005674 <__libc_init_array+0x3c>)
 800563e:	1b64      	subs	r4, r4, r5
 8005640:	10a4      	asrs	r4, r4, #2
 8005642:	2600      	movs	r6, #0
 8005644:	42a6      	cmp	r6, r4
 8005646:	d109      	bne.n	800565c <__libc_init_array+0x24>
 8005648:	4d0b      	ldr	r5, [pc, #44]	; (8005678 <__libc_init_array+0x40>)
 800564a:	4c0c      	ldr	r4, [pc, #48]	; (800567c <__libc_init_array+0x44>)
 800564c:	f000 fc6a 	bl	8005f24 <_init>
 8005650:	1b64      	subs	r4, r4, r5
 8005652:	10a4      	asrs	r4, r4, #2
 8005654:	2600      	movs	r6, #0
 8005656:	42a6      	cmp	r6, r4
 8005658:	d105      	bne.n	8005666 <__libc_init_array+0x2e>
 800565a:	bd70      	pop	{r4, r5, r6, pc}
 800565c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005660:	4798      	blx	r3
 8005662:	3601      	adds	r6, #1
 8005664:	e7ee      	b.n	8005644 <__libc_init_array+0xc>
 8005666:	f855 3b04 	ldr.w	r3, [r5], #4
 800566a:	4798      	blx	r3
 800566c:	3601      	adds	r6, #1
 800566e:	e7f2      	b.n	8005656 <__libc_init_array+0x1e>
 8005670:	08006020 	.word	0x08006020
 8005674:	08006020 	.word	0x08006020
 8005678:	08006020 	.word	0x08006020
 800567c:	08006024 	.word	0x08006024

08005680 <__retarget_lock_acquire_recursive>:
 8005680:	4770      	bx	lr

08005682 <__retarget_lock_release_recursive>:
 8005682:	4770      	bx	lr

08005684 <memcpy>:
 8005684:	440a      	add	r2, r1
 8005686:	4291      	cmp	r1, r2
 8005688:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800568c:	d100      	bne.n	8005690 <memcpy+0xc>
 800568e:	4770      	bx	lr
 8005690:	b510      	push	{r4, lr}
 8005692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800569a:	4291      	cmp	r1, r2
 800569c:	d1f9      	bne.n	8005692 <memcpy+0xe>
 800569e:	bd10      	pop	{r4, pc}

080056a0 <_free_r>:
 80056a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056a2:	2900      	cmp	r1, #0
 80056a4:	d044      	beq.n	8005730 <_free_r+0x90>
 80056a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056aa:	9001      	str	r0, [sp, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f1a1 0404 	sub.w	r4, r1, #4
 80056b2:	bfb8      	it	lt
 80056b4:	18e4      	addlt	r4, r4, r3
 80056b6:	f000 f8df 	bl	8005878 <__malloc_lock>
 80056ba:	4a1e      	ldr	r2, [pc, #120]	; (8005734 <_free_r+0x94>)
 80056bc:	9801      	ldr	r0, [sp, #4]
 80056be:	6813      	ldr	r3, [r2, #0]
 80056c0:	b933      	cbnz	r3, 80056d0 <_free_r+0x30>
 80056c2:	6063      	str	r3, [r4, #4]
 80056c4:	6014      	str	r4, [r2, #0]
 80056c6:	b003      	add	sp, #12
 80056c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056cc:	f000 b8da 	b.w	8005884 <__malloc_unlock>
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	d908      	bls.n	80056e6 <_free_r+0x46>
 80056d4:	6825      	ldr	r5, [r4, #0]
 80056d6:	1961      	adds	r1, r4, r5
 80056d8:	428b      	cmp	r3, r1
 80056da:	bf01      	itttt	eq
 80056dc:	6819      	ldreq	r1, [r3, #0]
 80056de:	685b      	ldreq	r3, [r3, #4]
 80056e0:	1949      	addeq	r1, r1, r5
 80056e2:	6021      	streq	r1, [r4, #0]
 80056e4:	e7ed      	b.n	80056c2 <_free_r+0x22>
 80056e6:	461a      	mov	r2, r3
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	b10b      	cbz	r3, 80056f0 <_free_r+0x50>
 80056ec:	42a3      	cmp	r3, r4
 80056ee:	d9fa      	bls.n	80056e6 <_free_r+0x46>
 80056f0:	6811      	ldr	r1, [r2, #0]
 80056f2:	1855      	adds	r5, r2, r1
 80056f4:	42a5      	cmp	r5, r4
 80056f6:	d10b      	bne.n	8005710 <_free_r+0x70>
 80056f8:	6824      	ldr	r4, [r4, #0]
 80056fa:	4421      	add	r1, r4
 80056fc:	1854      	adds	r4, r2, r1
 80056fe:	42a3      	cmp	r3, r4
 8005700:	6011      	str	r1, [r2, #0]
 8005702:	d1e0      	bne.n	80056c6 <_free_r+0x26>
 8005704:	681c      	ldr	r4, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	6053      	str	r3, [r2, #4]
 800570a:	440c      	add	r4, r1
 800570c:	6014      	str	r4, [r2, #0]
 800570e:	e7da      	b.n	80056c6 <_free_r+0x26>
 8005710:	d902      	bls.n	8005718 <_free_r+0x78>
 8005712:	230c      	movs	r3, #12
 8005714:	6003      	str	r3, [r0, #0]
 8005716:	e7d6      	b.n	80056c6 <_free_r+0x26>
 8005718:	6825      	ldr	r5, [r4, #0]
 800571a:	1961      	adds	r1, r4, r5
 800571c:	428b      	cmp	r3, r1
 800571e:	bf04      	itt	eq
 8005720:	6819      	ldreq	r1, [r3, #0]
 8005722:	685b      	ldreq	r3, [r3, #4]
 8005724:	6063      	str	r3, [r4, #4]
 8005726:	bf04      	itt	eq
 8005728:	1949      	addeq	r1, r1, r5
 800572a:	6021      	streq	r1, [r4, #0]
 800572c:	6054      	str	r4, [r2, #4]
 800572e:	e7ca      	b.n	80056c6 <_free_r+0x26>
 8005730:	b003      	add	sp, #12
 8005732:	bd30      	pop	{r4, r5, pc}
 8005734:	20004b5c 	.word	0x20004b5c

08005738 <sbrk_aligned>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	4e0e      	ldr	r6, [pc, #56]	; (8005774 <sbrk_aligned+0x3c>)
 800573c:	460c      	mov	r4, r1
 800573e:	6831      	ldr	r1, [r6, #0]
 8005740:	4605      	mov	r5, r0
 8005742:	b911      	cbnz	r1, 800574a <sbrk_aligned+0x12>
 8005744:	f000 fba6 	bl	8005e94 <_sbrk_r>
 8005748:	6030      	str	r0, [r6, #0]
 800574a:	4621      	mov	r1, r4
 800574c:	4628      	mov	r0, r5
 800574e:	f000 fba1 	bl	8005e94 <_sbrk_r>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	d00a      	beq.n	800576c <sbrk_aligned+0x34>
 8005756:	1cc4      	adds	r4, r0, #3
 8005758:	f024 0403 	bic.w	r4, r4, #3
 800575c:	42a0      	cmp	r0, r4
 800575e:	d007      	beq.n	8005770 <sbrk_aligned+0x38>
 8005760:	1a21      	subs	r1, r4, r0
 8005762:	4628      	mov	r0, r5
 8005764:	f000 fb96 	bl	8005e94 <_sbrk_r>
 8005768:	3001      	adds	r0, #1
 800576a:	d101      	bne.n	8005770 <sbrk_aligned+0x38>
 800576c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005770:	4620      	mov	r0, r4
 8005772:	bd70      	pop	{r4, r5, r6, pc}
 8005774:	20004b60 	.word	0x20004b60

08005778 <_malloc_r>:
 8005778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800577c:	1ccd      	adds	r5, r1, #3
 800577e:	f025 0503 	bic.w	r5, r5, #3
 8005782:	3508      	adds	r5, #8
 8005784:	2d0c      	cmp	r5, #12
 8005786:	bf38      	it	cc
 8005788:	250c      	movcc	r5, #12
 800578a:	2d00      	cmp	r5, #0
 800578c:	4607      	mov	r7, r0
 800578e:	db01      	blt.n	8005794 <_malloc_r+0x1c>
 8005790:	42a9      	cmp	r1, r5
 8005792:	d905      	bls.n	80057a0 <_malloc_r+0x28>
 8005794:	230c      	movs	r3, #12
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	2600      	movs	r6, #0
 800579a:	4630      	mov	r0, r6
 800579c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005874 <_malloc_r+0xfc>
 80057a4:	f000 f868 	bl	8005878 <__malloc_lock>
 80057a8:	f8d8 3000 	ldr.w	r3, [r8]
 80057ac:	461c      	mov	r4, r3
 80057ae:	bb5c      	cbnz	r4, 8005808 <_malloc_r+0x90>
 80057b0:	4629      	mov	r1, r5
 80057b2:	4638      	mov	r0, r7
 80057b4:	f7ff ffc0 	bl	8005738 <sbrk_aligned>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	4604      	mov	r4, r0
 80057bc:	d155      	bne.n	800586a <_malloc_r+0xf2>
 80057be:	f8d8 4000 	ldr.w	r4, [r8]
 80057c2:	4626      	mov	r6, r4
 80057c4:	2e00      	cmp	r6, #0
 80057c6:	d145      	bne.n	8005854 <_malloc_r+0xdc>
 80057c8:	2c00      	cmp	r4, #0
 80057ca:	d048      	beq.n	800585e <_malloc_r+0xe6>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	4631      	mov	r1, r6
 80057d0:	4638      	mov	r0, r7
 80057d2:	eb04 0903 	add.w	r9, r4, r3
 80057d6:	f000 fb5d 	bl	8005e94 <_sbrk_r>
 80057da:	4581      	cmp	r9, r0
 80057dc:	d13f      	bne.n	800585e <_malloc_r+0xe6>
 80057de:	6821      	ldr	r1, [r4, #0]
 80057e0:	1a6d      	subs	r5, r5, r1
 80057e2:	4629      	mov	r1, r5
 80057e4:	4638      	mov	r0, r7
 80057e6:	f7ff ffa7 	bl	8005738 <sbrk_aligned>
 80057ea:	3001      	adds	r0, #1
 80057ec:	d037      	beq.n	800585e <_malloc_r+0xe6>
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	442b      	add	r3, r5
 80057f2:	6023      	str	r3, [r4, #0]
 80057f4:	f8d8 3000 	ldr.w	r3, [r8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d038      	beq.n	800586e <_malloc_r+0xf6>
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	42a2      	cmp	r2, r4
 8005800:	d12b      	bne.n	800585a <_malloc_r+0xe2>
 8005802:	2200      	movs	r2, #0
 8005804:	605a      	str	r2, [r3, #4]
 8005806:	e00f      	b.n	8005828 <_malloc_r+0xb0>
 8005808:	6822      	ldr	r2, [r4, #0]
 800580a:	1b52      	subs	r2, r2, r5
 800580c:	d41f      	bmi.n	800584e <_malloc_r+0xd6>
 800580e:	2a0b      	cmp	r2, #11
 8005810:	d917      	bls.n	8005842 <_malloc_r+0xca>
 8005812:	1961      	adds	r1, r4, r5
 8005814:	42a3      	cmp	r3, r4
 8005816:	6025      	str	r5, [r4, #0]
 8005818:	bf18      	it	ne
 800581a:	6059      	strne	r1, [r3, #4]
 800581c:	6863      	ldr	r3, [r4, #4]
 800581e:	bf08      	it	eq
 8005820:	f8c8 1000 	streq.w	r1, [r8]
 8005824:	5162      	str	r2, [r4, r5]
 8005826:	604b      	str	r3, [r1, #4]
 8005828:	4638      	mov	r0, r7
 800582a:	f104 060b 	add.w	r6, r4, #11
 800582e:	f000 f829 	bl	8005884 <__malloc_unlock>
 8005832:	f026 0607 	bic.w	r6, r6, #7
 8005836:	1d23      	adds	r3, r4, #4
 8005838:	1af2      	subs	r2, r6, r3
 800583a:	d0ae      	beq.n	800579a <_malloc_r+0x22>
 800583c:	1b9b      	subs	r3, r3, r6
 800583e:	50a3      	str	r3, [r4, r2]
 8005840:	e7ab      	b.n	800579a <_malloc_r+0x22>
 8005842:	42a3      	cmp	r3, r4
 8005844:	6862      	ldr	r2, [r4, #4]
 8005846:	d1dd      	bne.n	8005804 <_malloc_r+0x8c>
 8005848:	f8c8 2000 	str.w	r2, [r8]
 800584c:	e7ec      	b.n	8005828 <_malloc_r+0xb0>
 800584e:	4623      	mov	r3, r4
 8005850:	6864      	ldr	r4, [r4, #4]
 8005852:	e7ac      	b.n	80057ae <_malloc_r+0x36>
 8005854:	4634      	mov	r4, r6
 8005856:	6876      	ldr	r6, [r6, #4]
 8005858:	e7b4      	b.n	80057c4 <_malloc_r+0x4c>
 800585a:	4613      	mov	r3, r2
 800585c:	e7cc      	b.n	80057f8 <_malloc_r+0x80>
 800585e:	230c      	movs	r3, #12
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	4638      	mov	r0, r7
 8005864:	f000 f80e 	bl	8005884 <__malloc_unlock>
 8005868:	e797      	b.n	800579a <_malloc_r+0x22>
 800586a:	6025      	str	r5, [r4, #0]
 800586c:	e7dc      	b.n	8005828 <_malloc_r+0xb0>
 800586e:	605b      	str	r3, [r3, #4]
 8005870:	deff      	udf	#255	; 0xff
 8005872:	bf00      	nop
 8005874:	20004b5c 	.word	0x20004b5c

08005878 <__malloc_lock>:
 8005878:	4801      	ldr	r0, [pc, #4]	; (8005880 <__malloc_lock+0x8>)
 800587a:	f7ff bf01 	b.w	8005680 <__retarget_lock_acquire_recursive>
 800587e:	bf00      	nop
 8005880:	20004b58 	.word	0x20004b58

08005884 <__malloc_unlock>:
 8005884:	4801      	ldr	r0, [pc, #4]	; (800588c <__malloc_unlock+0x8>)
 8005886:	f7ff befc 	b.w	8005682 <__retarget_lock_release_recursive>
 800588a:	bf00      	nop
 800588c:	20004b58 	.word	0x20004b58

08005890 <__ssputs_r>:
 8005890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	688e      	ldr	r6, [r1, #8]
 8005896:	461f      	mov	r7, r3
 8005898:	42be      	cmp	r6, r7
 800589a:	680b      	ldr	r3, [r1, #0]
 800589c:	4682      	mov	sl, r0
 800589e:	460c      	mov	r4, r1
 80058a0:	4690      	mov	r8, r2
 80058a2:	d82c      	bhi.n	80058fe <__ssputs_r+0x6e>
 80058a4:	898a      	ldrh	r2, [r1, #12]
 80058a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058aa:	d026      	beq.n	80058fa <__ssputs_r+0x6a>
 80058ac:	6965      	ldr	r5, [r4, #20]
 80058ae:	6909      	ldr	r1, [r1, #16]
 80058b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058b4:	eba3 0901 	sub.w	r9, r3, r1
 80058b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058bc:	1c7b      	adds	r3, r7, #1
 80058be:	444b      	add	r3, r9
 80058c0:	106d      	asrs	r5, r5, #1
 80058c2:	429d      	cmp	r5, r3
 80058c4:	bf38      	it	cc
 80058c6:	461d      	movcc	r5, r3
 80058c8:	0553      	lsls	r3, r2, #21
 80058ca:	d527      	bpl.n	800591c <__ssputs_r+0x8c>
 80058cc:	4629      	mov	r1, r5
 80058ce:	f7ff ff53 	bl	8005778 <_malloc_r>
 80058d2:	4606      	mov	r6, r0
 80058d4:	b360      	cbz	r0, 8005930 <__ssputs_r+0xa0>
 80058d6:	6921      	ldr	r1, [r4, #16]
 80058d8:	464a      	mov	r2, r9
 80058da:	f7ff fed3 	bl	8005684 <memcpy>
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e8:	81a3      	strh	r3, [r4, #12]
 80058ea:	6126      	str	r6, [r4, #16]
 80058ec:	6165      	str	r5, [r4, #20]
 80058ee:	444e      	add	r6, r9
 80058f0:	eba5 0509 	sub.w	r5, r5, r9
 80058f4:	6026      	str	r6, [r4, #0]
 80058f6:	60a5      	str	r5, [r4, #8]
 80058f8:	463e      	mov	r6, r7
 80058fa:	42be      	cmp	r6, r7
 80058fc:	d900      	bls.n	8005900 <__ssputs_r+0x70>
 80058fe:	463e      	mov	r6, r7
 8005900:	6820      	ldr	r0, [r4, #0]
 8005902:	4632      	mov	r2, r6
 8005904:	4641      	mov	r1, r8
 8005906:	f000 faab 	bl	8005e60 <memmove>
 800590a:	68a3      	ldr	r3, [r4, #8]
 800590c:	1b9b      	subs	r3, r3, r6
 800590e:	60a3      	str	r3, [r4, #8]
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	4433      	add	r3, r6
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	2000      	movs	r0, #0
 8005918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591c:	462a      	mov	r2, r5
 800591e:	f000 fac9 	bl	8005eb4 <_realloc_r>
 8005922:	4606      	mov	r6, r0
 8005924:	2800      	cmp	r0, #0
 8005926:	d1e0      	bne.n	80058ea <__ssputs_r+0x5a>
 8005928:	6921      	ldr	r1, [r4, #16]
 800592a:	4650      	mov	r0, sl
 800592c:	f7ff feb8 	bl	80056a0 <_free_r>
 8005930:	230c      	movs	r3, #12
 8005932:	f8ca 3000 	str.w	r3, [sl]
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800593c:	81a3      	strh	r3, [r4, #12]
 800593e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005942:	e7e9      	b.n	8005918 <__ssputs_r+0x88>

08005944 <_svfiprintf_r>:
 8005944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005948:	4698      	mov	r8, r3
 800594a:	898b      	ldrh	r3, [r1, #12]
 800594c:	061b      	lsls	r3, r3, #24
 800594e:	b09d      	sub	sp, #116	; 0x74
 8005950:	4607      	mov	r7, r0
 8005952:	460d      	mov	r5, r1
 8005954:	4614      	mov	r4, r2
 8005956:	d50e      	bpl.n	8005976 <_svfiprintf_r+0x32>
 8005958:	690b      	ldr	r3, [r1, #16]
 800595a:	b963      	cbnz	r3, 8005976 <_svfiprintf_r+0x32>
 800595c:	2140      	movs	r1, #64	; 0x40
 800595e:	f7ff ff0b 	bl	8005778 <_malloc_r>
 8005962:	6028      	str	r0, [r5, #0]
 8005964:	6128      	str	r0, [r5, #16]
 8005966:	b920      	cbnz	r0, 8005972 <_svfiprintf_r+0x2e>
 8005968:	230c      	movs	r3, #12
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005970:	e0d0      	b.n	8005b14 <_svfiprintf_r+0x1d0>
 8005972:	2340      	movs	r3, #64	; 0x40
 8005974:	616b      	str	r3, [r5, #20]
 8005976:	2300      	movs	r3, #0
 8005978:	9309      	str	r3, [sp, #36]	; 0x24
 800597a:	2320      	movs	r3, #32
 800597c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005980:	f8cd 800c 	str.w	r8, [sp, #12]
 8005984:	2330      	movs	r3, #48	; 0x30
 8005986:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b2c <_svfiprintf_r+0x1e8>
 800598a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800598e:	f04f 0901 	mov.w	r9, #1
 8005992:	4623      	mov	r3, r4
 8005994:	469a      	mov	sl, r3
 8005996:	f813 2b01 	ldrb.w	r2, [r3], #1
 800599a:	b10a      	cbz	r2, 80059a0 <_svfiprintf_r+0x5c>
 800599c:	2a25      	cmp	r2, #37	; 0x25
 800599e:	d1f9      	bne.n	8005994 <_svfiprintf_r+0x50>
 80059a0:	ebba 0b04 	subs.w	fp, sl, r4
 80059a4:	d00b      	beq.n	80059be <_svfiprintf_r+0x7a>
 80059a6:	465b      	mov	r3, fp
 80059a8:	4622      	mov	r2, r4
 80059aa:	4629      	mov	r1, r5
 80059ac:	4638      	mov	r0, r7
 80059ae:	f7ff ff6f 	bl	8005890 <__ssputs_r>
 80059b2:	3001      	adds	r0, #1
 80059b4:	f000 80a9 	beq.w	8005b0a <_svfiprintf_r+0x1c6>
 80059b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ba:	445a      	add	r2, fp
 80059bc:	9209      	str	r2, [sp, #36]	; 0x24
 80059be:	f89a 3000 	ldrb.w	r3, [sl]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 80a1 	beq.w	8005b0a <_svfiprintf_r+0x1c6>
 80059c8:	2300      	movs	r3, #0
 80059ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059d2:	f10a 0a01 	add.w	sl, sl, #1
 80059d6:	9304      	str	r3, [sp, #16]
 80059d8:	9307      	str	r3, [sp, #28]
 80059da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059de:	931a      	str	r3, [sp, #104]	; 0x68
 80059e0:	4654      	mov	r4, sl
 80059e2:	2205      	movs	r2, #5
 80059e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e8:	4850      	ldr	r0, [pc, #320]	; (8005b2c <_svfiprintf_r+0x1e8>)
 80059ea:	f7fa fc01 	bl	80001f0 <memchr>
 80059ee:	9a04      	ldr	r2, [sp, #16]
 80059f0:	b9d8      	cbnz	r0, 8005a2a <_svfiprintf_r+0xe6>
 80059f2:	06d0      	lsls	r0, r2, #27
 80059f4:	bf44      	itt	mi
 80059f6:	2320      	movmi	r3, #32
 80059f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059fc:	0711      	lsls	r1, r2, #28
 80059fe:	bf44      	itt	mi
 8005a00:	232b      	movmi	r3, #43	; 0x2b
 8005a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a06:	f89a 3000 	ldrb.w	r3, [sl]
 8005a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a0c:	d015      	beq.n	8005a3a <_svfiprintf_r+0xf6>
 8005a0e:	9a07      	ldr	r2, [sp, #28]
 8005a10:	4654      	mov	r4, sl
 8005a12:	2000      	movs	r0, #0
 8005a14:	f04f 0c0a 	mov.w	ip, #10
 8005a18:	4621      	mov	r1, r4
 8005a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a1e:	3b30      	subs	r3, #48	; 0x30
 8005a20:	2b09      	cmp	r3, #9
 8005a22:	d94d      	bls.n	8005ac0 <_svfiprintf_r+0x17c>
 8005a24:	b1b0      	cbz	r0, 8005a54 <_svfiprintf_r+0x110>
 8005a26:	9207      	str	r2, [sp, #28]
 8005a28:	e014      	b.n	8005a54 <_svfiprintf_r+0x110>
 8005a2a:	eba0 0308 	sub.w	r3, r0, r8
 8005a2e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a32:	4313      	orrs	r3, r2
 8005a34:	9304      	str	r3, [sp, #16]
 8005a36:	46a2      	mov	sl, r4
 8005a38:	e7d2      	b.n	80059e0 <_svfiprintf_r+0x9c>
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	1d19      	adds	r1, r3, #4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	9103      	str	r1, [sp, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bfbb      	ittet	lt
 8005a46:	425b      	neglt	r3, r3
 8005a48:	f042 0202 	orrlt.w	r2, r2, #2
 8005a4c:	9307      	strge	r3, [sp, #28]
 8005a4e:	9307      	strlt	r3, [sp, #28]
 8005a50:	bfb8      	it	lt
 8005a52:	9204      	strlt	r2, [sp, #16]
 8005a54:	7823      	ldrb	r3, [r4, #0]
 8005a56:	2b2e      	cmp	r3, #46	; 0x2e
 8005a58:	d10c      	bne.n	8005a74 <_svfiprintf_r+0x130>
 8005a5a:	7863      	ldrb	r3, [r4, #1]
 8005a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a5e:	d134      	bne.n	8005aca <_svfiprintf_r+0x186>
 8005a60:	9b03      	ldr	r3, [sp, #12]
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	9203      	str	r2, [sp, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bfb8      	it	lt
 8005a6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005a70:	3402      	adds	r4, #2
 8005a72:	9305      	str	r3, [sp, #20]
 8005a74:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005b3c <_svfiprintf_r+0x1f8>
 8005a78:	7821      	ldrb	r1, [r4, #0]
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	4650      	mov	r0, sl
 8005a7e:	f7fa fbb7 	bl	80001f0 <memchr>
 8005a82:	b138      	cbz	r0, 8005a94 <_svfiprintf_r+0x150>
 8005a84:	9b04      	ldr	r3, [sp, #16]
 8005a86:	eba0 000a 	sub.w	r0, r0, sl
 8005a8a:	2240      	movs	r2, #64	; 0x40
 8005a8c:	4082      	lsls	r2, r0
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	3401      	adds	r4, #1
 8005a92:	9304      	str	r3, [sp, #16]
 8005a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a98:	4825      	ldr	r0, [pc, #148]	; (8005b30 <_svfiprintf_r+0x1ec>)
 8005a9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a9e:	2206      	movs	r2, #6
 8005aa0:	f7fa fba6 	bl	80001f0 <memchr>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	d038      	beq.n	8005b1a <_svfiprintf_r+0x1d6>
 8005aa8:	4b22      	ldr	r3, [pc, #136]	; (8005b34 <_svfiprintf_r+0x1f0>)
 8005aaa:	bb1b      	cbnz	r3, 8005af4 <_svfiprintf_r+0x1b0>
 8005aac:	9b03      	ldr	r3, [sp, #12]
 8005aae:	3307      	adds	r3, #7
 8005ab0:	f023 0307 	bic.w	r3, r3, #7
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	9303      	str	r3, [sp, #12]
 8005ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aba:	4433      	add	r3, r6
 8005abc:	9309      	str	r3, [sp, #36]	; 0x24
 8005abe:	e768      	b.n	8005992 <_svfiprintf_r+0x4e>
 8005ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	2001      	movs	r0, #1
 8005ac8:	e7a6      	b.n	8005a18 <_svfiprintf_r+0xd4>
 8005aca:	2300      	movs	r3, #0
 8005acc:	3401      	adds	r4, #1
 8005ace:	9305      	str	r3, [sp, #20]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	f04f 0c0a 	mov.w	ip, #10
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005adc:	3a30      	subs	r2, #48	; 0x30
 8005ade:	2a09      	cmp	r2, #9
 8005ae0:	d903      	bls.n	8005aea <_svfiprintf_r+0x1a6>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0c6      	beq.n	8005a74 <_svfiprintf_r+0x130>
 8005ae6:	9105      	str	r1, [sp, #20]
 8005ae8:	e7c4      	b.n	8005a74 <_svfiprintf_r+0x130>
 8005aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aee:	4604      	mov	r4, r0
 8005af0:	2301      	movs	r3, #1
 8005af2:	e7f0      	b.n	8005ad6 <_svfiprintf_r+0x192>
 8005af4:	ab03      	add	r3, sp, #12
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	462a      	mov	r2, r5
 8005afa:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <_svfiprintf_r+0x1f4>)
 8005afc:	a904      	add	r1, sp, #16
 8005afe:	4638      	mov	r0, r7
 8005b00:	f3af 8000 	nop.w
 8005b04:	1c42      	adds	r2, r0, #1
 8005b06:	4606      	mov	r6, r0
 8005b08:	d1d6      	bne.n	8005ab8 <_svfiprintf_r+0x174>
 8005b0a:	89ab      	ldrh	r3, [r5, #12]
 8005b0c:	065b      	lsls	r3, r3, #25
 8005b0e:	f53f af2d 	bmi.w	800596c <_svfiprintf_r+0x28>
 8005b12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b14:	b01d      	add	sp, #116	; 0x74
 8005b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1a:	ab03      	add	r3, sp, #12
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	462a      	mov	r2, r5
 8005b20:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <_svfiprintf_r+0x1f4>)
 8005b22:	a904      	add	r1, sp, #16
 8005b24:	4638      	mov	r0, r7
 8005b26:	f000 f879 	bl	8005c1c <_printf_i>
 8005b2a:	e7eb      	b.n	8005b04 <_svfiprintf_r+0x1c0>
 8005b2c:	08005fe4 	.word	0x08005fe4
 8005b30:	08005fee 	.word	0x08005fee
 8005b34:	00000000 	.word	0x00000000
 8005b38:	08005891 	.word	0x08005891
 8005b3c:	08005fea 	.word	0x08005fea

08005b40 <_printf_common>:
 8005b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b44:	4616      	mov	r6, r2
 8005b46:	4699      	mov	r9, r3
 8005b48:	688a      	ldr	r2, [r1, #8]
 8005b4a:	690b      	ldr	r3, [r1, #16]
 8005b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b50:	4293      	cmp	r3, r2
 8005b52:	bfb8      	it	lt
 8005b54:	4613      	movlt	r3, r2
 8005b56:	6033      	str	r3, [r6, #0]
 8005b58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b5c:	4607      	mov	r7, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	b10a      	cbz	r2, 8005b66 <_printf_common+0x26>
 8005b62:	3301      	adds	r3, #1
 8005b64:	6033      	str	r3, [r6, #0]
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	0699      	lsls	r1, r3, #26
 8005b6a:	bf42      	ittt	mi
 8005b6c:	6833      	ldrmi	r3, [r6, #0]
 8005b6e:	3302      	addmi	r3, #2
 8005b70:	6033      	strmi	r3, [r6, #0]
 8005b72:	6825      	ldr	r5, [r4, #0]
 8005b74:	f015 0506 	ands.w	r5, r5, #6
 8005b78:	d106      	bne.n	8005b88 <_printf_common+0x48>
 8005b7a:	f104 0a19 	add.w	sl, r4, #25
 8005b7e:	68e3      	ldr	r3, [r4, #12]
 8005b80:	6832      	ldr	r2, [r6, #0]
 8005b82:	1a9b      	subs	r3, r3, r2
 8005b84:	42ab      	cmp	r3, r5
 8005b86:	dc26      	bgt.n	8005bd6 <_printf_common+0x96>
 8005b88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b8c:	1e13      	subs	r3, r2, #0
 8005b8e:	6822      	ldr	r2, [r4, #0]
 8005b90:	bf18      	it	ne
 8005b92:	2301      	movne	r3, #1
 8005b94:	0692      	lsls	r2, r2, #26
 8005b96:	d42b      	bmi.n	8005bf0 <_printf_common+0xb0>
 8005b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	47c0      	blx	r8
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	d01e      	beq.n	8005be4 <_printf_common+0xa4>
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	6922      	ldr	r2, [r4, #16]
 8005baa:	f003 0306 	and.w	r3, r3, #6
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	bf02      	ittt	eq
 8005bb2:	68e5      	ldreq	r5, [r4, #12]
 8005bb4:	6833      	ldreq	r3, [r6, #0]
 8005bb6:	1aed      	subeq	r5, r5, r3
 8005bb8:	68a3      	ldr	r3, [r4, #8]
 8005bba:	bf0c      	ite	eq
 8005bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bc0:	2500      	movne	r5, #0
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	bfc4      	itt	gt
 8005bc6:	1a9b      	subgt	r3, r3, r2
 8005bc8:	18ed      	addgt	r5, r5, r3
 8005bca:	2600      	movs	r6, #0
 8005bcc:	341a      	adds	r4, #26
 8005bce:	42b5      	cmp	r5, r6
 8005bd0:	d11a      	bne.n	8005c08 <_printf_common+0xc8>
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	e008      	b.n	8005be8 <_printf_common+0xa8>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4652      	mov	r2, sl
 8005bda:	4649      	mov	r1, r9
 8005bdc:	4638      	mov	r0, r7
 8005bde:	47c0      	blx	r8
 8005be0:	3001      	adds	r0, #1
 8005be2:	d103      	bne.n	8005bec <_printf_common+0xac>
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bec:	3501      	adds	r5, #1
 8005bee:	e7c6      	b.n	8005b7e <_printf_common+0x3e>
 8005bf0:	18e1      	adds	r1, r4, r3
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	2030      	movs	r0, #48	; 0x30
 8005bf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bfa:	4422      	add	r2, r4
 8005bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c04:	3302      	adds	r3, #2
 8005c06:	e7c7      	b.n	8005b98 <_printf_common+0x58>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	4638      	mov	r0, r7
 8005c10:	47c0      	blx	r8
 8005c12:	3001      	adds	r0, #1
 8005c14:	d0e6      	beq.n	8005be4 <_printf_common+0xa4>
 8005c16:	3601      	adds	r6, #1
 8005c18:	e7d9      	b.n	8005bce <_printf_common+0x8e>
	...

08005c1c <_printf_i>:
 8005c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c20:	7e0f      	ldrb	r7, [r1, #24]
 8005c22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c24:	2f78      	cmp	r7, #120	; 0x78
 8005c26:	4691      	mov	r9, r2
 8005c28:	4680      	mov	r8, r0
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	469a      	mov	sl, r3
 8005c2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c32:	d807      	bhi.n	8005c44 <_printf_i+0x28>
 8005c34:	2f62      	cmp	r7, #98	; 0x62
 8005c36:	d80a      	bhi.n	8005c4e <_printf_i+0x32>
 8005c38:	2f00      	cmp	r7, #0
 8005c3a:	f000 80d4 	beq.w	8005de6 <_printf_i+0x1ca>
 8005c3e:	2f58      	cmp	r7, #88	; 0x58
 8005c40:	f000 80c0 	beq.w	8005dc4 <_printf_i+0x1a8>
 8005c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c4c:	e03a      	b.n	8005cc4 <_printf_i+0xa8>
 8005c4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c52:	2b15      	cmp	r3, #21
 8005c54:	d8f6      	bhi.n	8005c44 <_printf_i+0x28>
 8005c56:	a101      	add	r1, pc, #4	; (adr r1, 8005c5c <_printf_i+0x40>)
 8005c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c5c:	08005cb5 	.word	0x08005cb5
 8005c60:	08005cc9 	.word	0x08005cc9
 8005c64:	08005c45 	.word	0x08005c45
 8005c68:	08005c45 	.word	0x08005c45
 8005c6c:	08005c45 	.word	0x08005c45
 8005c70:	08005c45 	.word	0x08005c45
 8005c74:	08005cc9 	.word	0x08005cc9
 8005c78:	08005c45 	.word	0x08005c45
 8005c7c:	08005c45 	.word	0x08005c45
 8005c80:	08005c45 	.word	0x08005c45
 8005c84:	08005c45 	.word	0x08005c45
 8005c88:	08005dcd 	.word	0x08005dcd
 8005c8c:	08005cf5 	.word	0x08005cf5
 8005c90:	08005d87 	.word	0x08005d87
 8005c94:	08005c45 	.word	0x08005c45
 8005c98:	08005c45 	.word	0x08005c45
 8005c9c:	08005def 	.word	0x08005def
 8005ca0:	08005c45 	.word	0x08005c45
 8005ca4:	08005cf5 	.word	0x08005cf5
 8005ca8:	08005c45 	.word	0x08005c45
 8005cac:	08005c45 	.word	0x08005c45
 8005cb0:	08005d8f 	.word	0x08005d8f
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	1d1a      	adds	r2, r3, #4
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	602a      	str	r2, [r5, #0]
 8005cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e09f      	b.n	8005e08 <_printf_i+0x1ec>
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	682b      	ldr	r3, [r5, #0]
 8005ccc:	0607      	lsls	r7, r0, #24
 8005cce:	f103 0104 	add.w	r1, r3, #4
 8005cd2:	6029      	str	r1, [r5, #0]
 8005cd4:	d501      	bpl.n	8005cda <_printf_i+0xbe>
 8005cd6:	681e      	ldr	r6, [r3, #0]
 8005cd8:	e003      	b.n	8005ce2 <_printf_i+0xc6>
 8005cda:	0646      	lsls	r6, r0, #25
 8005cdc:	d5fb      	bpl.n	8005cd6 <_printf_i+0xba>
 8005cde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ce2:	2e00      	cmp	r6, #0
 8005ce4:	da03      	bge.n	8005cee <_printf_i+0xd2>
 8005ce6:	232d      	movs	r3, #45	; 0x2d
 8005ce8:	4276      	negs	r6, r6
 8005cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cee:	485a      	ldr	r0, [pc, #360]	; (8005e58 <_printf_i+0x23c>)
 8005cf0:	230a      	movs	r3, #10
 8005cf2:	e012      	b.n	8005d1a <_printf_i+0xfe>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	6820      	ldr	r0, [r4, #0]
 8005cf8:	1d19      	adds	r1, r3, #4
 8005cfa:	6029      	str	r1, [r5, #0]
 8005cfc:	0605      	lsls	r5, r0, #24
 8005cfe:	d501      	bpl.n	8005d04 <_printf_i+0xe8>
 8005d00:	681e      	ldr	r6, [r3, #0]
 8005d02:	e002      	b.n	8005d0a <_printf_i+0xee>
 8005d04:	0641      	lsls	r1, r0, #25
 8005d06:	d5fb      	bpl.n	8005d00 <_printf_i+0xe4>
 8005d08:	881e      	ldrh	r6, [r3, #0]
 8005d0a:	4853      	ldr	r0, [pc, #332]	; (8005e58 <_printf_i+0x23c>)
 8005d0c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d0e:	bf0c      	ite	eq
 8005d10:	2308      	moveq	r3, #8
 8005d12:	230a      	movne	r3, #10
 8005d14:	2100      	movs	r1, #0
 8005d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d1a:	6865      	ldr	r5, [r4, #4]
 8005d1c:	60a5      	str	r5, [r4, #8]
 8005d1e:	2d00      	cmp	r5, #0
 8005d20:	bfa2      	ittt	ge
 8005d22:	6821      	ldrge	r1, [r4, #0]
 8005d24:	f021 0104 	bicge.w	r1, r1, #4
 8005d28:	6021      	strge	r1, [r4, #0]
 8005d2a:	b90e      	cbnz	r6, 8005d30 <_printf_i+0x114>
 8005d2c:	2d00      	cmp	r5, #0
 8005d2e:	d04b      	beq.n	8005dc8 <_printf_i+0x1ac>
 8005d30:	4615      	mov	r5, r2
 8005d32:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d36:	fb03 6711 	mls	r7, r3, r1, r6
 8005d3a:	5dc7      	ldrb	r7, [r0, r7]
 8005d3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d40:	4637      	mov	r7, r6
 8005d42:	42bb      	cmp	r3, r7
 8005d44:	460e      	mov	r6, r1
 8005d46:	d9f4      	bls.n	8005d32 <_printf_i+0x116>
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d10b      	bne.n	8005d64 <_printf_i+0x148>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	07de      	lsls	r6, r3, #31
 8005d50:	d508      	bpl.n	8005d64 <_printf_i+0x148>
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	6861      	ldr	r1, [r4, #4]
 8005d56:	4299      	cmp	r1, r3
 8005d58:	bfde      	ittt	le
 8005d5a:	2330      	movle	r3, #48	; 0x30
 8005d5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005d64:	1b52      	subs	r2, r2, r5
 8005d66:	6122      	str	r2, [r4, #16]
 8005d68:	f8cd a000 	str.w	sl, [sp]
 8005d6c:	464b      	mov	r3, r9
 8005d6e:	aa03      	add	r2, sp, #12
 8005d70:	4621      	mov	r1, r4
 8005d72:	4640      	mov	r0, r8
 8005d74:	f7ff fee4 	bl	8005b40 <_printf_common>
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d14a      	bne.n	8005e12 <_printf_i+0x1f6>
 8005d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d80:	b004      	add	sp, #16
 8005d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	f043 0320 	orr.w	r3, r3, #32
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	4833      	ldr	r0, [pc, #204]	; (8005e5c <_printf_i+0x240>)
 8005d90:	2778      	movs	r7, #120	; 0x78
 8005d92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	6829      	ldr	r1, [r5, #0]
 8005d9a:	061f      	lsls	r7, r3, #24
 8005d9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005da0:	d402      	bmi.n	8005da8 <_printf_i+0x18c>
 8005da2:	065f      	lsls	r7, r3, #25
 8005da4:	bf48      	it	mi
 8005da6:	b2b6      	uxthmi	r6, r6
 8005da8:	07df      	lsls	r7, r3, #31
 8005daa:	bf48      	it	mi
 8005dac:	f043 0320 	orrmi.w	r3, r3, #32
 8005db0:	6029      	str	r1, [r5, #0]
 8005db2:	bf48      	it	mi
 8005db4:	6023      	strmi	r3, [r4, #0]
 8005db6:	b91e      	cbnz	r6, 8005dc0 <_printf_i+0x1a4>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	f023 0320 	bic.w	r3, r3, #32
 8005dbe:	6023      	str	r3, [r4, #0]
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	e7a7      	b.n	8005d14 <_printf_i+0xf8>
 8005dc4:	4824      	ldr	r0, [pc, #144]	; (8005e58 <_printf_i+0x23c>)
 8005dc6:	e7e4      	b.n	8005d92 <_printf_i+0x176>
 8005dc8:	4615      	mov	r5, r2
 8005dca:	e7bd      	b.n	8005d48 <_printf_i+0x12c>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	6826      	ldr	r6, [r4, #0]
 8005dd0:	6961      	ldr	r1, [r4, #20]
 8005dd2:	1d18      	adds	r0, r3, #4
 8005dd4:	6028      	str	r0, [r5, #0]
 8005dd6:	0635      	lsls	r5, r6, #24
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	d501      	bpl.n	8005de0 <_printf_i+0x1c4>
 8005ddc:	6019      	str	r1, [r3, #0]
 8005dde:	e002      	b.n	8005de6 <_printf_i+0x1ca>
 8005de0:	0670      	lsls	r0, r6, #25
 8005de2:	d5fb      	bpl.n	8005ddc <_printf_i+0x1c0>
 8005de4:	8019      	strh	r1, [r3, #0]
 8005de6:	2300      	movs	r3, #0
 8005de8:	6123      	str	r3, [r4, #16]
 8005dea:	4615      	mov	r5, r2
 8005dec:	e7bc      	b.n	8005d68 <_printf_i+0x14c>
 8005dee:	682b      	ldr	r3, [r5, #0]
 8005df0:	1d1a      	adds	r2, r3, #4
 8005df2:	602a      	str	r2, [r5, #0]
 8005df4:	681d      	ldr	r5, [r3, #0]
 8005df6:	6862      	ldr	r2, [r4, #4]
 8005df8:	2100      	movs	r1, #0
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f7fa f9f8 	bl	80001f0 <memchr>
 8005e00:	b108      	cbz	r0, 8005e06 <_printf_i+0x1ea>
 8005e02:	1b40      	subs	r0, r0, r5
 8005e04:	6060      	str	r0, [r4, #4]
 8005e06:	6863      	ldr	r3, [r4, #4]
 8005e08:	6123      	str	r3, [r4, #16]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e10:	e7aa      	b.n	8005d68 <_printf_i+0x14c>
 8005e12:	6923      	ldr	r3, [r4, #16]
 8005e14:	462a      	mov	r2, r5
 8005e16:	4649      	mov	r1, r9
 8005e18:	4640      	mov	r0, r8
 8005e1a:	47d0      	blx	sl
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d0ad      	beq.n	8005d7c <_printf_i+0x160>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	079b      	lsls	r3, r3, #30
 8005e24:	d413      	bmi.n	8005e4e <_printf_i+0x232>
 8005e26:	68e0      	ldr	r0, [r4, #12]
 8005e28:	9b03      	ldr	r3, [sp, #12]
 8005e2a:	4298      	cmp	r0, r3
 8005e2c:	bfb8      	it	lt
 8005e2e:	4618      	movlt	r0, r3
 8005e30:	e7a6      	b.n	8005d80 <_printf_i+0x164>
 8005e32:	2301      	movs	r3, #1
 8005e34:	4632      	mov	r2, r6
 8005e36:	4649      	mov	r1, r9
 8005e38:	4640      	mov	r0, r8
 8005e3a:	47d0      	blx	sl
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d09d      	beq.n	8005d7c <_printf_i+0x160>
 8005e40:	3501      	adds	r5, #1
 8005e42:	68e3      	ldr	r3, [r4, #12]
 8005e44:	9903      	ldr	r1, [sp, #12]
 8005e46:	1a5b      	subs	r3, r3, r1
 8005e48:	42ab      	cmp	r3, r5
 8005e4a:	dcf2      	bgt.n	8005e32 <_printf_i+0x216>
 8005e4c:	e7eb      	b.n	8005e26 <_printf_i+0x20a>
 8005e4e:	2500      	movs	r5, #0
 8005e50:	f104 0619 	add.w	r6, r4, #25
 8005e54:	e7f5      	b.n	8005e42 <_printf_i+0x226>
 8005e56:	bf00      	nop
 8005e58:	08005ff5 	.word	0x08005ff5
 8005e5c:	08006006 	.word	0x08006006

08005e60 <memmove>:
 8005e60:	4288      	cmp	r0, r1
 8005e62:	b510      	push	{r4, lr}
 8005e64:	eb01 0402 	add.w	r4, r1, r2
 8005e68:	d902      	bls.n	8005e70 <memmove+0x10>
 8005e6a:	4284      	cmp	r4, r0
 8005e6c:	4623      	mov	r3, r4
 8005e6e:	d807      	bhi.n	8005e80 <memmove+0x20>
 8005e70:	1e43      	subs	r3, r0, #1
 8005e72:	42a1      	cmp	r1, r4
 8005e74:	d008      	beq.n	8005e88 <memmove+0x28>
 8005e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e7e:	e7f8      	b.n	8005e72 <memmove+0x12>
 8005e80:	4402      	add	r2, r0
 8005e82:	4601      	mov	r1, r0
 8005e84:	428a      	cmp	r2, r1
 8005e86:	d100      	bne.n	8005e8a <memmove+0x2a>
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e92:	e7f7      	b.n	8005e84 <memmove+0x24>

08005e94 <_sbrk_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4d06      	ldr	r5, [pc, #24]	; (8005eb0 <_sbrk_r+0x1c>)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	602b      	str	r3, [r5, #0]
 8005ea0:	f7fa fd9a 	bl	80009d8 <_sbrk>
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	d102      	bne.n	8005eae <_sbrk_r+0x1a>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	b103      	cbz	r3, 8005eae <_sbrk_r+0x1a>
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	bd38      	pop	{r3, r4, r5, pc}
 8005eb0:	20004b54 	.word	0x20004b54

08005eb4 <_realloc_r>:
 8005eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb8:	4680      	mov	r8, r0
 8005eba:	4614      	mov	r4, r2
 8005ebc:	460e      	mov	r6, r1
 8005ebe:	b921      	cbnz	r1, 8005eca <_realloc_r+0x16>
 8005ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	f7ff bc57 	b.w	8005778 <_malloc_r>
 8005eca:	b92a      	cbnz	r2, 8005ed8 <_realloc_r+0x24>
 8005ecc:	f7ff fbe8 	bl	80056a0 <_free_r>
 8005ed0:	4625      	mov	r5, r4
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed8:	f000 f81b 	bl	8005f12 <_malloc_usable_size_r>
 8005edc:	4284      	cmp	r4, r0
 8005ede:	4607      	mov	r7, r0
 8005ee0:	d802      	bhi.n	8005ee8 <_realloc_r+0x34>
 8005ee2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ee6:	d812      	bhi.n	8005f0e <_realloc_r+0x5a>
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4640      	mov	r0, r8
 8005eec:	f7ff fc44 	bl	8005778 <_malloc_r>
 8005ef0:	4605      	mov	r5, r0
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d0ed      	beq.n	8005ed2 <_realloc_r+0x1e>
 8005ef6:	42bc      	cmp	r4, r7
 8005ef8:	4622      	mov	r2, r4
 8005efa:	4631      	mov	r1, r6
 8005efc:	bf28      	it	cs
 8005efe:	463a      	movcs	r2, r7
 8005f00:	f7ff fbc0 	bl	8005684 <memcpy>
 8005f04:	4631      	mov	r1, r6
 8005f06:	4640      	mov	r0, r8
 8005f08:	f7ff fbca 	bl	80056a0 <_free_r>
 8005f0c:	e7e1      	b.n	8005ed2 <_realloc_r+0x1e>
 8005f0e:	4635      	mov	r5, r6
 8005f10:	e7df      	b.n	8005ed2 <_realloc_r+0x1e>

08005f12 <_malloc_usable_size_r>:
 8005f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f16:	1f18      	subs	r0, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	bfbc      	itt	lt
 8005f1c:	580b      	ldrlt	r3, [r1, r0]
 8005f1e:	18c0      	addlt	r0, r0, r3
 8005f20:	4770      	bx	lr
	...

08005f24 <_init>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr

08005f30 <_fini>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	bf00      	nop
 8005f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f36:	bc08      	pop	{r3}
 8005f38:	469e      	mov	lr, r3
 8005f3a:	4770      	bx	lr
